
example1.elf:     file format elf32-littlenios2
example1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00002a14 memsz 0x00002a14 flags r-x
    LOAD off    0x00003a34 vaddr 0x08002a34 paddr 0x080040b8 align 2**12
         filesz 0x00001684 memsz 0x00001684 flags rw-
    LOAD off    0x0000573c vaddr 0x0800573c paddr 0x0800573c align 2**12
         filesz 0x00000000 memsz 0x0000011c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002828  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000050  080029e4  080029e4  000039e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001684  08002a34  080040b8  00003a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000011c  0800573c  0800573c  0000573c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  08005858  08005858  000050b8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000050b8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005d0  00000000  00000000  000050e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007a6c  00000000  00000000  000056b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002ab5  00000000  00000000  0000d11c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002b5f  00000000  00000000  0000fbd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000ca0  00000000  00000000  00012730  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000017bf  00000000  00000000  000133d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000784  00000000  00000000  00014b8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00015314  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000a0  00000000  00000000  00015338  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000170f3  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000170f6  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00017102  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00017103  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00017104  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0001710f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0001711a  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00017125  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000018  00000000  00000000  00017130  2**0
                  CONTENTS, READONLY
 26 .jdi          00004b4c  00000000  00000000  00017148  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006ba24  00000000  00000000  0001bc94  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
080029e4 l    d  .rodata	00000000 .rodata
08002a34 l    d  .rwdata	00000000 .rwdata
0800573c l    d  .bss	00000000 .bss
08005858 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../example1_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
08000218 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
08000374 l     F .text	00000038 alt_dev_reg
08002a34 l     O .rwdata	00001060 jtag_uart_0
08003a94 l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08000678 l     F .text	00000204 altera_avalon_jtag_uart_irq
0800087c l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08000e9c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
080015b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
080016ec l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08001718 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08001c54 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08001d8c l     F .text	00000050 alt_get_errno
08001ddc l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
08003c68 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
080002fc g     F .text	00000078 alt_main
08005758 g     O .bss	00000100 alt_irq
080040b8 g       *ABS*	00000000 __flash_rwdata_start
0800100c g     F .text	0000003c alt_up_character_lcd_send_cmd
00000000  w      *UND*	00000000 __errno
08000f98 g     F .text	00000074 get_DDRAM_addr
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08005754 g     O .bss	00000004 errno
08005740 g     O .bss	00000004 alt_argv
0800c08c g       *ABS*	00000000 _gp
08003ae8 g     O .rwdata	00000180 alt_fd_list
080018c4 g     F .text	00000090 alt_find_dev
08002538 g     F .text	00000138 memcpy
080011a8 g     F .text	00000050 alt_up_character_lcd_write_fd
08001d14 g     F .text	00000078 alt_io_redirect
080029e4 g       *ABS*	00000000 __DTOR_END__
08000a78 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
080023e4 g     F .text	0000008c alt_icache_flush
0800409c g     O .rwdata	00000004 alt_max_fd
080040b0 g     O .rwdata	00000004 _global_impure_ptr
08005858 g       *ABS*	00000000 __bss_end
08001b64 g     F .text	000000f0 alt_iic_isr_register
080020f8 g     F .text	00000104 alt_tick
08001b18 g     F .text	0000004c alt_ic_irq_enabled
08002060 g     F .text	00000098 alt_alarm_stop
08005748 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
08003ac0 g     O .rwdata	00000028 alt_dev_null
0800143c g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
080016d0 g     F .text	0000001c alt_dcache_flush_all
080040b8 g       *ABS*	00000000 __ram_rwdata_end
08004094 g     O .rwdata	00000008 alt_dev_list
08002a34 g       *ABS*	00000000 __ram_rodata_end
08005858 g       *ABS*	00000000 end
080005b4 g     F .text	000000c4 altera_avalon_jtag_uart_init
080029e4 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08000f10 g     F .text	00000088 alt_avalon_timer_sc_init
08000c84 g     F .text	00000218 altera_avalon_jtag_uart_write
080010bc g     F .text	00000078 alt_up_character_lcd_write
0800281c g     F .text	00000194 __call_exitprocs
080001bc g     F .text	0000003c _start
0800574c g     O .bss	00000004 _alt_tick_rate
08005750 g     O .bss	00000004 _alt_nticks
080003e0 g     F .text	00000070 alt_sys_init
080012f4 g     F .text	00000088 alt_up_character_lcd_shift_display
08002708 g     F .text	00000114 __register_exitproc
0800137c g     F .text	0000008c alt_up_character_lcd_erase_pos
08000924 g     F .text	00000068 altera_avalon_jtag_uart_close
08002a34 g       *ABS*	00000000 __ram_rwdata_start
080029e4 g       *ABS*	00000000 __ram_rodata_start
08000450 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08002330 g     F .text	000000b4 alt_get_fd
080024bc g     F .text	0000007c memcmp
08000510 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08005858 g       *ABS*	00000000 __alt_stack_base
08000560 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0800221c g     F .text	00000114 alt_find_file
08001768 g     F .text	000000a4 alt_dev_llist_insert
0800573c g       *ABS*	00000000 __bss_start
080001f8 g     F .text	00000020 main
08005744 g     O .bss	00000004 alt_envp
080004b0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800126c g     F .text	00000088 alt_up_character_lcd_shift_cursor
080040a0 g     O .rwdata	00000004 alt_errno
0800107c g     F .text	00000040 alt_up_character_lcd_open_dev
080029e4 g       *ABS*	00000000 __CTOR_END__
08001048 g     F .text	00000034 alt_up_character_lcd_init
080029e4 g       *ABS*	00000000 __flash_rodata_start
080029e4 g       *ABS*	00000000 __DTOR_LIST__
080003ac g     F .text	00000034 alt_irq_init
08002000 g     F .text	00000060 alt_release_fd
08001408 g     F .text	00000034 alt_up_character_lcd_cursor_off
08002470 g     F .text	00000014 atexit
080040b4 g     O .rwdata	00000004 _impure_ptr
0800573c g     O .bss	00000004 alt_argc
08001868 g     F .text	0000005c _do_dtors
08000020 g       .exceptions	00000000 alt_irq_entry
0800408c g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08001984 g     F .text	00000050 alt_ic_isr_register
080040b8 g       *ABS*	00000000 _edata
08005858 g       *ABS*	00000000 _end
080001bc g       *ABS*	00000000 __ram_exceptions_end
0800098c g     F .text	000000ec altera_avalon_jtag_uart_ioctl
08001a74 g     F .text	000000a4 alt_ic_irq_disable
080021fc g     F .text	00000020 altera_nios2_qsys_irq_init
08002484 g     F .text	00000038 exit
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08000000 g       *ABS*	00000000 __alt_mem_sdram
08001134 g     F .text	00000074 alt_up_character_lcd_string
080029b0 g     F .text	00000034 _exit
08001470 g     F .text	00000140 alt_alarm_start
08002670 g     F .text	00000098 strlen
08001ea8 g     F .text	00000158 open
08001954 g     F .text	00000030 alt_icache_flush_all
080011f8 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
080040a4 g     O .rwdata	00000004 alt_priority_mask
080019d4 g     F .text	000000a0 alt_ic_irq_enable
080040a8 g     O .rwdata	00000008 alt_alarm_list
0800180c g     F .text	0000005c _do_ctors
08001600 g     F .text	000000d0 close
0800027c g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406f14 	ori	at,at,444
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_sdram-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00820034 	movhi	r2,2048
 8000130:	1095d604 	addi	r2,r2,22360
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	00820034 	movhi	r2,2048
 8000148:	1095d604 	addi	r2,r2,22360
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 80001c8:	d6b02314 	ori	gp,gp,49292
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 80001d0:	1095cf14 	ori	r2,r2,22332

    movhi r3, %hi(__bss_end)
 80001d4:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 80001d8:	18d61614 	ori	r3,r3,22616

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	800027c0 	call	800027c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	80002fc0 	call	80002fc <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <main>:
#define switches (volatile char *) 0x0002000
#define leds (char *) 0x0002010


int main()
{
 80001f8:	deffff04 	addi	sp,sp,-4
 80001fc:	df000015 	stw	fp,0(sp)
 8000200:	d839883a 	mov	fp,sp
  while (1)
      *leds = *switches;
 8000204:	00880404 	movi	r2,8208
 8000208:	00c80004 	movi	r3,8192
 800020c:	18c00003 	ldbu	r3,0(r3)
 8000210:	10c00005 	stb	r3,0(r2)
 8000214:	003ffb06 	br	8000204 <__alt_data_end+0xfc000204>

08000218 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8000218:	defffc04 	addi	sp,sp,-16
 800021c:	df000315 	stw	fp,12(sp)
 8000220:	df000304 	addi	fp,sp,12
 8000224:	e13ffd15 	stw	r4,-12(fp)
 8000228:	e17ffe15 	stw	r5,-8(fp)
 800022c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8000230:	e0fffe17 	ldw	r3,-8(fp)
 8000234:	e0bffd17 	ldw	r2,-12(fp)
 8000238:	18800c26 	beq	r3,r2,800026c <alt_load_section+0x54>
  {
    while( to != end )
 800023c:	00000806 	br	8000260 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8000240:	e0bffe17 	ldw	r2,-8(fp)
 8000244:	10c00104 	addi	r3,r2,4
 8000248:	e0fffe15 	stw	r3,-8(fp)
 800024c:	e0fffd17 	ldw	r3,-12(fp)
 8000250:	19000104 	addi	r4,r3,4
 8000254:	e13ffd15 	stw	r4,-12(fp)
 8000258:	18c00017 	ldw	r3,0(r3)
 800025c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8000260:	e0fffe17 	ldw	r3,-8(fp)
 8000264:	e0bfff17 	ldw	r2,-4(fp)
 8000268:	18bff51e 	bne	r3,r2,8000240 <__alt_data_end+0xfc000240>
    {
      *to++ = *from++;
    }
  }
}
 800026c:	e037883a 	mov	sp,fp
 8000270:	df000017 	ldw	fp,0(sp)
 8000274:	dec00104 	addi	sp,sp,4
 8000278:	f800283a 	ret

0800027c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800027c:	defffe04 	addi	sp,sp,-8
 8000280:	dfc00115 	stw	ra,4(sp)
 8000284:	df000015 	stw	fp,0(sp)
 8000288:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800028c:	01020034 	movhi	r4,2048
 8000290:	21102e04 	addi	r4,r4,16568
 8000294:	01420034 	movhi	r5,2048
 8000298:	294a8d04 	addi	r5,r5,10804
 800029c:	01820034 	movhi	r6,2048
 80002a0:	31902e04 	addi	r6,r6,16568
 80002a4:	80002180 	call	8000218 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 80002a8:	01020034 	movhi	r4,2048
 80002ac:	21000804 	addi	r4,r4,32
 80002b0:	01420034 	movhi	r5,2048
 80002b4:	29400804 	addi	r5,r5,32
 80002b8:	01820034 	movhi	r6,2048
 80002bc:	31806f04 	addi	r6,r6,444
 80002c0:	80002180 	call	8000218 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 80002c4:	01020034 	movhi	r4,2048
 80002c8:	210a7904 	addi	r4,r4,10724
 80002cc:	01420034 	movhi	r5,2048
 80002d0:	294a7904 	addi	r5,r5,10724
 80002d4:	01820034 	movhi	r6,2048
 80002d8:	318a8d04 	addi	r6,r6,10804
 80002dc:	80002180 	call	8000218 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 80002e0:	80016d00 	call	80016d0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 80002e4:	80019540 	call	8001954 <alt_icache_flush_all>
}
 80002e8:	e037883a 	mov	sp,fp
 80002ec:	dfc00117 	ldw	ra,4(sp)
 80002f0:	df000017 	ldw	fp,0(sp)
 80002f4:	dec00204 	addi	sp,sp,8
 80002f8:	f800283a 	ret

080002fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80002fc:	defffd04 	addi	sp,sp,-12
 8000300:	dfc00215 	stw	ra,8(sp)
 8000304:	df000115 	stw	fp,4(sp)
 8000308:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800030c:	0009883a 	mov	r4,zero
 8000310:	80003ac0 	call	80003ac <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8000314:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8000318:	80003e00 	call	80003e0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800031c:	01020034 	movhi	r4,2048
 8000320:	210a7904 	addi	r4,r4,10724
 8000324:	01420034 	movhi	r5,2048
 8000328:	294a7904 	addi	r5,r5,10724
 800032c:	01820034 	movhi	r6,2048
 8000330:	318a7904 	addi	r6,r6,10724
 8000334:	8001d140 	call	8001d14 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8000338:	800180c0 	call	800180c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800033c:	01020034 	movhi	r4,2048
 8000340:	21061a04 	addi	r4,r4,6248
 8000344:	80024700 	call	8002470 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8000348:	d125ac17 	ldw	r4,-26960(gp)
 800034c:	d0e5ad17 	ldw	r3,-26956(gp)
 8000350:	d0a5ae17 	ldw	r2,-26952(gp)
 8000354:	180b883a 	mov	r5,r3
 8000358:	100d883a 	mov	r6,r2
 800035c:	80001f80 	call	80001f8 <main>
 8000360:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8000364:	01000044 	movi	r4,1
 8000368:	80016000 	call	8001600 <close>
  exit (result);
 800036c:	e13fff17 	ldw	r4,-4(fp)
 8000370:	80024840 	call	8002484 <exit>

08000374 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8000374:	defffd04 	addi	sp,sp,-12
 8000378:	dfc00215 	stw	ra,8(sp)
 800037c:	df000115 	stw	fp,4(sp)
 8000380:	df000104 	addi	fp,sp,4
 8000384:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8000388:	e13fff17 	ldw	r4,-4(fp)
 800038c:	01420034 	movhi	r5,2048
 8000390:	29502504 	addi	r5,r5,16532
 8000394:	80017680 	call	8001768 <alt_dev_llist_insert>
}
 8000398:	e037883a 	mov	sp,fp
 800039c:	dfc00117 	ldw	ra,4(sp)
 80003a0:	df000017 	ldw	fp,0(sp)
 80003a4:	dec00204 	addi	sp,sp,8
 80003a8:	f800283a 	ret

080003ac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 80003ac:	defffd04 	addi	sp,sp,-12
 80003b0:	dfc00215 	stw	ra,8(sp)
 80003b4:	df000115 	stw	fp,4(sp)
 80003b8:	df000104 	addi	fp,sp,4
 80003bc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 80003c0:	80021fc0 	call	80021fc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 80003c4:	00800044 	movi	r2,1
 80003c8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 80003cc:	e037883a 	mov	sp,fp
 80003d0:	dfc00117 	ldw	ra,4(sp)
 80003d4:	df000017 	ldw	fp,0(sp)
 80003d8:	dec00204 	addi	sp,sp,8
 80003dc:	f800283a 	ret

080003e0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 80003e0:	defffe04 	addi	sp,sp,-8
 80003e4:	dfc00115 	stw	ra,4(sp)
 80003e8:	df000015 	stw	fp,0(sp)
 80003ec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 80003f0:	01082004 	movi	r4,8320
 80003f4:	000b883a 	mov	r5,zero
 80003f8:	01800104 	movi	r6,4
 80003fc:	01c0fa04 	movi	r7,1000
 8000400:	8000f100 	call	8000f10 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8000404:	01020034 	movhi	r4,2048
 8000408:	210a9704 	addi	r4,r4,10844
 800040c:	000b883a 	mov	r5,zero
 8000410:	01800144 	movi	r6,5
 8000414:	80005b40 	call	80005b4 <altera_avalon_jtag_uart_init>
 8000418:	01020034 	movhi	r4,2048
 800041c:	210a8d04 	addi	r4,r4,10804
 8000420:	80003740 	call	8000374 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 8000424:	01020034 	movhi	r4,2048
 8000428:	210ea504 	addi	r4,r4,14996
 800042c:	80010480 	call	8001048 <alt_up_character_lcd_init>
 8000430:	01020034 	movhi	r4,2048
 8000434:	210ea504 	addi	r4,r4,14996
 8000438:	80003740 	call	8000374 <alt_dev_reg>
}
 800043c:	e037883a 	mov	sp,fp
 8000440:	dfc00117 	ldw	ra,4(sp)
 8000444:	df000017 	ldw	fp,0(sp)
 8000448:	dec00204 	addi	sp,sp,8
 800044c:	f800283a 	ret

08000450 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8000450:	defffa04 	addi	sp,sp,-24
 8000454:	dfc00515 	stw	ra,20(sp)
 8000458:	df000415 	stw	fp,16(sp)
 800045c:	df000404 	addi	fp,sp,16
 8000460:	e13ffd15 	stw	r4,-12(fp)
 8000464:	e17ffe15 	stw	r5,-8(fp)
 8000468:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800046c:	e0bffd17 	ldw	r2,-12(fp)
 8000470:	10800017 	ldw	r2,0(r2)
 8000474:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8000478:	e0bffc17 	ldw	r2,-16(fp)
 800047c:	10c00a04 	addi	r3,r2,40
 8000480:	e0bffd17 	ldw	r2,-12(fp)
 8000484:	10800217 	ldw	r2,8(r2)
 8000488:	1809883a 	mov	r4,r3
 800048c:	e17ffe17 	ldw	r5,-8(fp)
 8000490:	e1bfff17 	ldw	r6,-4(fp)
 8000494:	100f883a 	mov	r7,r2
 8000498:	8000a780 	call	8000a78 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800049c:	e037883a 	mov	sp,fp
 80004a0:	dfc00117 	ldw	ra,4(sp)
 80004a4:	df000017 	ldw	fp,0(sp)
 80004a8:	dec00204 	addi	sp,sp,8
 80004ac:	f800283a 	ret

080004b0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80004b0:	defffa04 	addi	sp,sp,-24
 80004b4:	dfc00515 	stw	ra,20(sp)
 80004b8:	df000415 	stw	fp,16(sp)
 80004bc:	df000404 	addi	fp,sp,16
 80004c0:	e13ffd15 	stw	r4,-12(fp)
 80004c4:	e17ffe15 	stw	r5,-8(fp)
 80004c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80004cc:	e0bffd17 	ldw	r2,-12(fp)
 80004d0:	10800017 	ldw	r2,0(r2)
 80004d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 80004d8:	e0bffc17 	ldw	r2,-16(fp)
 80004dc:	10c00a04 	addi	r3,r2,40
 80004e0:	e0bffd17 	ldw	r2,-12(fp)
 80004e4:	10800217 	ldw	r2,8(r2)
 80004e8:	1809883a 	mov	r4,r3
 80004ec:	e17ffe17 	ldw	r5,-8(fp)
 80004f0:	e1bfff17 	ldw	r6,-4(fp)
 80004f4:	100f883a 	mov	r7,r2
 80004f8:	8000c840 	call	8000c84 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 80004fc:	e037883a 	mov	sp,fp
 8000500:	dfc00117 	ldw	ra,4(sp)
 8000504:	df000017 	ldw	fp,0(sp)
 8000508:	dec00204 	addi	sp,sp,8
 800050c:	f800283a 	ret

08000510 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8000510:	defffc04 	addi	sp,sp,-16
 8000514:	dfc00315 	stw	ra,12(sp)
 8000518:	df000215 	stw	fp,8(sp)
 800051c:	df000204 	addi	fp,sp,8
 8000520:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8000524:	e0bfff17 	ldw	r2,-4(fp)
 8000528:	10800017 	ldw	r2,0(r2)
 800052c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8000530:	e0bffe17 	ldw	r2,-8(fp)
 8000534:	10c00a04 	addi	r3,r2,40
 8000538:	e0bfff17 	ldw	r2,-4(fp)
 800053c:	10800217 	ldw	r2,8(r2)
 8000540:	1809883a 	mov	r4,r3
 8000544:	100b883a 	mov	r5,r2
 8000548:	80009240 	call	8000924 <altera_avalon_jtag_uart_close>
}
 800054c:	e037883a 	mov	sp,fp
 8000550:	dfc00117 	ldw	ra,4(sp)
 8000554:	df000017 	ldw	fp,0(sp)
 8000558:	dec00204 	addi	sp,sp,8
 800055c:	f800283a 	ret

08000560 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8000560:	defffa04 	addi	sp,sp,-24
 8000564:	dfc00515 	stw	ra,20(sp)
 8000568:	df000415 	stw	fp,16(sp)
 800056c:	df000404 	addi	fp,sp,16
 8000570:	e13ffd15 	stw	r4,-12(fp)
 8000574:	e17ffe15 	stw	r5,-8(fp)
 8000578:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800057c:	e0bffd17 	ldw	r2,-12(fp)
 8000580:	10800017 	ldw	r2,0(r2)
 8000584:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8000588:	e0bffc17 	ldw	r2,-16(fp)
 800058c:	10800a04 	addi	r2,r2,40
 8000590:	1009883a 	mov	r4,r2
 8000594:	e17ffe17 	ldw	r5,-8(fp)
 8000598:	e1bfff17 	ldw	r6,-4(fp)
 800059c:	800098c0 	call	800098c <altera_avalon_jtag_uart_ioctl>
}
 80005a0:	e037883a 	mov	sp,fp
 80005a4:	dfc00117 	ldw	ra,4(sp)
 80005a8:	df000017 	ldw	fp,0(sp)
 80005ac:	dec00204 	addi	sp,sp,8
 80005b0:	f800283a 	ret

080005b4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 80005b4:	defffa04 	addi	sp,sp,-24
 80005b8:	dfc00515 	stw	ra,20(sp)
 80005bc:	df000415 	stw	fp,16(sp)
 80005c0:	df000404 	addi	fp,sp,16
 80005c4:	e13ffd15 	stw	r4,-12(fp)
 80005c8:	e17ffe15 	stw	r5,-8(fp)
 80005cc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80005d0:	e0bffd17 	ldw	r2,-12(fp)
 80005d4:	00c00044 	movi	r3,1
 80005d8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 80005dc:	e0bffd17 	ldw	r2,-12(fp)
 80005e0:	10800017 	ldw	r2,0(r2)
 80005e4:	10800104 	addi	r2,r2,4
 80005e8:	1007883a 	mov	r3,r2
 80005ec:	e0bffd17 	ldw	r2,-12(fp)
 80005f0:	10800817 	ldw	r2,32(r2)
 80005f4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 80005f8:	e0fffe17 	ldw	r3,-8(fp)
 80005fc:	e0bfff17 	ldw	r2,-4(fp)
 8000600:	d8000015 	stw	zero,0(sp)
 8000604:	1809883a 	mov	r4,r3
 8000608:	100b883a 	mov	r5,r2
 800060c:	01820034 	movhi	r6,2048
 8000610:	31819e04 	addi	r6,r6,1656
 8000614:	e1fffd17 	ldw	r7,-12(fp)
 8000618:	80019840 	call	8001984 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800061c:	e0bffd17 	ldw	r2,-12(fp)
 8000620:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8000624:	e0bffd17 	ldw	r2,-12(fp)
 8000628:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800062c:	00820034 	movhi	r2,2048
 8000630:	1095d304 	addi	r2,r2,22348
 8000634:	10800017 	ldw	r2,0(r2)
 8000638:	1809883a 	mov	r4,r3
 800063c:	100b883a 	mov	r5,r2
 8000640:	01820034 	movhi	r6,2048
 8000644:	31821f04 	addi	r6,r6,2172
 8000648:	e1fffd17 	ldw	r7,-12(fp)
 800064c:	80014700 	call	8001470 <alt_alarm_start>
 8000650:	1000040e 	bge	r2,zero,8000664 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8000654:	e0fffd17 	ldw	r3,-12(fp)
 8000658:	00a00034 	movhi	r2,32768
 800065c:	10bfffc4 	addi	r2,r2,-1
 8000660:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8000664:	e037883a 	mov	sp,fp
 8000668:	dfc00117 	ldw	ra,4(sp)
 800066c:	df000017 	ldw	fp,0(sp)
 8000670:	dec00204 	addi	sp,sp,8
 8000674:	f800283a 	ret

08000678 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8000678:	defff804 	addi	sp,sp,-32
 800067c:	df000715 	stw	fp,28(sp)
 8000680:	df000704 	addi	fp,sp,28
 8000684:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8000688:	e0bfff17 	ldw	r2,-4(fp)
 800068c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8000690:	e0bffb17 	ldw	r2,-20(fp)
 8000694:	10800017 	ldw	r2,0(r2)
 8000698:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800069c:	e0bffc17 	ldw	r2,-16(fp)
 80006a0:	10800104 	addi	r2,r2,4
 80006a4:	10800037 	ldwio	r2,0(r2)
 80006a8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80006ac:	e0bffd17 	ldw	r2,-12(fp)
 80006b0:	1080c00c 	andi	r2,r2,768
 80006b4:	1000011e 	bne	r2,zero,80006bc <altera_avalon_jtag_uart_irq+0x44>
      break;
 80006b8:	00006c06 	br	800086c <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 80006bc:	e0bffd17 	ldw	r2,-12(fp)
 80006c0:	1080400c 	andi	r2,r2,256
 80006c4:	10003426 	beq	r2,zero,8000798 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80006c8:	00800074 	movhi	r2,1
 80006cc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80006d0:	e0bffb17 	ldw	r2,-20(fp)
 80006d4:	10800a17 	ldw	r2,40(r2)
 80006d8:	10800044 	addi	r2,r2,1
 80006dc:	1081ffcc 	andi	r2,r2,2047
 80006e0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 80006e4:	e0bffb17 	ldw	r2,-20(fp)
 80006e8:	10c00b17 	ldw	r3,44(r2)
 80006ec:	e0bffe17 	ldw	r2,-8(fp)
 80006f0:	1880011e 	bne	r3,r2,80006f8 <altera_avalon_jtag_uart_irq+0x80>
          break;
 80006f4:	00001606 	br	8000750 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 80006f8:	e0bffc17 	ldw	r2,-16(fp)
 80006fc:	10800037 	ldwio	r2,0(r2)
 8000700:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8000704:	e0bff917 	ldw	r2,-28(fp)
 8000708:	10a0000c 	andi	r2,r2,32768
 800070c:	1000011e 	bne	r2,zero,8000714 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 8000710:	00000f06 	br	8000750 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8000714:	e0bffb17 	ldw	r2,-20(fp)
 8000718:	10800a17 	ldw	r2,40(r2)
 800071c:	e0fff917 	ldw	r3,-28(fp)
 8000720:	1809883a 	mov	r4,r3
 8000724:	e0fffb17 	ldw	r3,-20(fp)
 8000728:	1885883a 	add	r2,r3,r2
 800072c:	10800e04 	addi	r2,r2,56
 8000730:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8000734:	e0bffb17 	ldw	r2,-20(fp)
 8000738:	10800a17 	ldw	r2,40(r2)
 800073c:	10800044 	addi	r2,r2,1
 8000740:	10c1ffcc 	andi	r3,r2,2047
 8000744:	e0bffb17 	ldw	r2,-20(fp)
 8000748:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800074c:	003fe006 	br	80006d0 <__alt_data_end+0xfc0006d0>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8000750:	e0bff917 	ldw	r2,-28(fp)
 8000754:	10bfffec 	andhi	r2,r2,65535
 8000758:	10000f26 	beq	r2,zero,8000798 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800075c:	e0bffb17 	ldw	r2,-20(fp)
 8000760:	10c00817 	ldw	r3,32(r2)
 8000764:	00bfff84 	movi	r2,-2
 8000768:	1886703a 	and	r3,r3,r2
 800076c:	e0bffb17 	ldw	r2,-20(fp)
 8000770:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8000774:	e0bffc17 	ldw	r2,-16(fp)
 8000778:	10800104 	addi	r2,r2,4
 800077c:	1007883a 	mov	r3,r2
 8000780:	e0bffb17 	ldw	r2,-20(fp)
 8000784:	10800817 	ldw	r2,32(r2)
 8000788:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800078c:	e0bffc17 	ldw	r2,-16(fp)
 8000790:	10800104 	addi	r2,r2,4
 8000794:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8000798:	e0bffd17 	ldw	r2,-12(fp)
 800079c:	1080800c 	andi	r2,r2,512
 80007a0:	10003126 	beq	r2,zero,8000868 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 80007a4:	e0bffd17 	ldw	r2,-12(fp)
 80007a8:	1004d43a 	srli	r2,r2,16
 80007ac:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80007b0:	00001406 	br	8000804 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80007b4:	e0bffc17 	ldw	r2,-16(fp)
 80007b8:	e0fffb17 	ldw	r3,-20(fp)
 80007bc:	18c00d17 	ldw	r3,52(r3)
 80007c0:	e13ffb17 	ldw	r4,-20(fp)
 80007c4:	20c7883a 	add	r3,r4,r3
 80007c8:	18c20e04 	addi	r3,r3,2104
 80007cc:	18c00003 	ldbu	r3,0(r3)
 80007d0:	18c03fcc 	andi	r3,r3,255
 80007d4:	18c0201c 	xori	r3,r3,128
 80007d8:	18ffe004 	addi	r3,r3,-128
 80007dc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80007e0:	e0bffb17 	ldw	r2,-20(fp)
 80007e4:	10800d17 	ldw	r2,52(r2)
 80007e8:	10800044 	addi	r2,r2,1
 80007ec:	10c1ffcc 	andi	r3,r2,2047
 80007f0:	e0bffb17 	ldw	r2,-20(fp)
 80007f4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 80007f8:	e0bffa17 	ldw	r2,-24(fp)
 80007fc:	10bfffc4 	addi	r2,r2,-1
 8000800:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8000804:	e0bffa17 	ldw	r2,-24(fp)
 8000808:	10000526 	beq	r2,zero,8000820 <altera_avalon_jtag_uart_irq+0x1a8>
 800080c:	e0bffb17 	ldw	r2,-20(fp)
 8000810:	10c00d17 	ldw	r3,52(r2)
 8000814:	e0bffb17 	ldw	r2,-20(fp)
 8000818:	10800c17 	ldw	r2,48(r2)
 800081c:	18bfe51e 	bne	r3,r2,80007b4 <__alt_data_end+0xfc0007b4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8000820:	e0bffa17 	ldw	r2,-24(fp)
 8000824:	10001026 	beq	r2,zero,8000868 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8000828:	e0bffb17 	ldw	r2,-20(fp)
 800082c:	10c00817 	ldw	r3,32(r2)
 8000830:	00bfff44 	movi	r2,-3
 8000834:	1886703a 	and	r3,r3,r2
 8000838:	e0bffb17 	ldw	r2,-20(fp)
 800083c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8000840:	e0bffb17 	ldw	r2,-20(fp)
 8000844:	10800017 	ldw	r2,0(r2)
 8000848:	10800104 	addi	r2,r2,4
 800084c:	1007883a 	mov	r3,r2
 8000850:	e0bffb17 	ldw	r2,-20(fp)
 8000854:	10800817 	ldw	r2,32(r2)
 8000858:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800085c:	e0bffc17 	ldw	r2,-16(fp)
 8000860:	10800104 	addi	r2,r2,4
 8000864:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8000868:	003f8c06 	br	800069c <__alt_data_end+0xfc00069c>
}
 800086c:	e037883a 	mov	sp,fp
 8000870:	df000017 	ldw	fp,0(sp)
 8000874:	dec00104 	addi	sp,sp,4
 8000878:	f800283a 	ret

0800087c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800087c:	defff804 	addi	sp,sp,-32
 8000880:	df000715 	stw	fp,28(sp)
 8000884:	df000704 	addi	fp,sp,28
 8000888:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800088c:	e0bffb17 	ldw	r2,-20(fp)
 8000890:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8000894:	e0bff917 	ldw	r2,-28(fp)
 8000898:	10800017 	ldw	r2,0(r2)
 800089c:	10800104 	addi	r2,r2,4
 80008a0:	10800037 	ldwio	r2,0(r2)
 80008a4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80008a8:	e0bffa17 	ldw	r2,-24(fp)
 80008ac:	1081000c 	andi	r2,r2,1024
 80008b0:	10000b26 	beq	r2,zero,80008e0 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 80008b4:	e0bff917 	ldw	r2,-28(fp)
 80008b8:	10800017 	ldw	r2,0(r2)
 80008bc:	10800104 	addi	r2,r2,4
 80008c0:	1007883a 	mov	r3,r2
 80008c4:	e0bff917 	ldw	r2,-28(fp)
 80008c8:	10800817 	ldw	r2,32(r2)
 80008cc:	10810014 	ori	r2,r2,1024
 80008d0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 80008d4:	e0bff917 	ldw	r2,-28(fp)
 80008d8:	10000915 	stw	zero,36(r2)
 80008dc:	00000a06 	br	8000908 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 80008e0:	e0bff917 	ldw	r2,-28(fp)
 80008e4:	10c00917 	ldw	r3,36(r2)
 80008e8:	00a00034 	movhi	r2,32768
 80008ec:	10bfff04 	addi	r2,r2,-4
 80008f0:	10c00536 	bltu	r2,r3,8000908 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 80008f4:	e0bff917 	ldw	r2,-28(fp)
 80008f8:	10800917 	ldw	r2,36(r2)
 80008fc:	10c00044 	addi	r3,r2,1
 8000900:	e0bff917 	ldw	r2,-28(fp)
 8000904:	10c00915 	stw	r3,36(r2)
 8000908:	00820034 	movhi	r2,2048
 800090c:	1095d304 	addi	r2,r2,22348
 8000910:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8000914:	e037883a 	mov	sp,fp
 8000918:	df000017 	ldw	fp,0(sp)
 800091c:	dec00104 	addi	sp,sp,4
 8000920:	f800283a 	ret

08000924 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8000924:	defffd04 	addi	sp,sp,-12
 8000928:	df000215 	stw	fp,8(sp)
 800092c:	df000204 	addi	fp,sp,8
 8000930:	e13ffe15 	stw	r4,-8(fp)
 8000934:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8000938:	00000506 	br	8000950 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800093c:	e0bfff17 	ldw	r2,-4(fp)
 8000940:	1090000c 	andi	r2,r2,16384
 8000944:	10000226 	beq	r2,zero,8000950 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8000948:	00bffd44 	movi	r2,-11
 800094c:	00000b06 	br	800097c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8000950:	e0bffe17 	ldw	r2,-8(fp)
 8000954:	10c00d17 	ldw	r3,52(r2)
 8000958:	e0bffe17 	ldw	r2,-8(fp)
 800095c:	10800c17 	ldw	r2,48(r2)
 8000960:	18800526 	beq	r3,r2,8000978 <altera_avalon_jtag_uart_close+0x54>
 8000964:	e0bffe17 	ldw	r2,-8(fp)
 8000968:	10c00917 	ldw	r3,36(r2)
 800096c:	e0bffe17 	ldw	r2,-8(fp)
 8000970:	10800117 	ldw	r2,4(r2)
 8000974:	18bff136 	bltu	r3,r2,800093c <__alt_data_end+0xfc00093c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8000978:	0005883a 	mov	r2,zero
}
 800097c:	e037883a 	mov	sp,fp
 8000980:	df000017 	ldw	fp,0(sp)
 8000984:	dec00104 	addi	sp,sp,4
 8000988:	f800283a 	ret

0800098c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800098c:	defffa04 	addi	sp,sp,-24
 8000990:	df000515 	stw	fp,20(sp)
 8000994:	df000504 	addi	fp,sp,20
 8000998:	e13ffd15 	stw	r4,-12(fp)
 800099c:	e17ffe15 	stw	r5,-8(fp)
 80009a0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 80009a4:	00bff9c4 	movi	r2,-25
 80009a8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 80009ac:	e0bffe17 	ldw	r2,-8(fp)
 80009b0:	10da8060 	cmpeqi	r3,r2,27137
 80009b4:	1800031e 	bne	r3,zero,80009c4 <altera_avalon_jtag_uart_ioctl+0x38>
 80009b8:	109a80a0 	cmpeqi	r2,r2,27138
 80009bc:	1000191e 	bne	r2,zero,8000a24 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 80009c0:	00002806 	br	8000a64 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 80009c4:	e0bffd17 	ldw	r2,-12(fp)
 80009c8:	10c00117 	ldw	r3,4(r2)
 80009cc:	00a00034 	movhi	r2,32768
 80009d0:	10bfffc4 	addi	r2,r2,-1
 80009d4:	18801226 	beq	r3,r2,8000a20 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 80009d8:	e0bfff17 	ldw	r2,-4(fp)
 80009dc:	10800017 	ldw	r2,0(r2)
 80009e0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 80009e4:	e0bffc17 	ldw	r2,-16(fp)
 80009e8:	10800090 	cmplti	r2,r2,2
 80009ec:	1000061e 	bne	r2,zero,8000a08 <altera_avalon_jtag_uart_ioctl+0x7c>
 80009f0:	e0fffc17 	ldw	r3,-16(fp)
 80009f4:	00a00034 	movhi	r2,32768
 80009f8:	10bfffc4 	addi	r2,r2,-1
 80009fc:	18800226 	beq	r3,r2,8000a08 <altera_avalon_jtag_uart_ioctl+0x7c>
 8000a00:	e0bffc17 	ldw	r2,-16(fp)
 8000a04:	00000206 	br	8000a10 <altera_avalon_jtag_uart_ioctl+0x84>
 8000a08:	00a00034 	movhi	r2,32768
 8000a0c:	10bfff84 	addi	r2,r2,-2
 8000a10:	e0fffd17 	ldw	r3,-12(fp)
 8000a14:	18800115 	stw	r2,4(r3)
      rc = 0;
 8000a18:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8000a1c:	00001106 	br	8000a64 <altera_avalon_jtag_uart_ioctl+0xd8>
 8000a20:	00001006 	br	8000a64 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8000a24:	e0bffd17 	ldw	r2,-12(fp)
 8000a28:	10c00117 	ldw	r3,4(r2)
 8000a2c:	00a00034 	movhi	r2,32768
 8000a30:	10bfffc4 	addi	r2,r2,-1
 8000a34:	18800a26 	beq	r3,r2,8000a60 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8000a38:	e0bffd17 	ldw	r2,-12(fp)
 8000a3c:	10c00917 	ldw	r3,36(r2)
 8000a40:	e0bffd17 	ldw	r2,-12(fp)
 8000a44:	10800117 	ldw	r2,4(r2)
 8000a48:	1885803a 	cmpltu	r2,r3,r2
 8000a4c:	10c03fcc 	andi	r3,r2,255
 8000a50:	e0bfff17 	ldw	r2,-4(fp)
 8000a54:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8000a58:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8000a5c:	00000006 	br	8000a60 <altera_avalon_jtag_uart_ioctl+0xd4>
 8000a60:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8000a64:	e0bffb17 	ldw	r2,-20(fp)
}
 8000a68:	e037883a 	mov	sp,fp
 8000a6c:	df000017 	ldw	fp,0(sp)
 8000a70:	dec00104 	addi	sp,sp,4
 8000a74:	f800283a 	ret

08000a78 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8000a78:	defff304 	addi	sp,sp,-52
 8000a7c:	dfc00c15 	stw	ra,48(sp)
 8000a80:	df000b15 	stw	fp,44(sp)
 8000a84:	df000b04 	addi	fp,sp,44
 8000a88:	e13ffc15 	stw	r4,-16(fp)
 8000a8c:	e17ffd15 	stw	r5,-12(fp)
 8000a90:	e1bffe15 	stw	r6,-8(fp)
 8000a94:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8000a98:	e0bffd17 	ldw	r2,-12(fp)
 8000a9c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8000aa0:	00004906 	br	8000bc8 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8000aa4:	e0bffc17 	ldw	r2,-16(fp)
 8000aa8:	10800a17 	ldw	r2,40(r2)
 8000aac:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8000ab0:	e0bffc17 	ldw	r2,-16(fp)
 8000ab4:	10800b17 	ldw	r2,44(r2)
 8000ab8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8000abc:	e0fff717 	ldw	r3,-36(fp)
 8000ac0:	e0bff817 	ldw	r2,-32(fp)
 8000ac4:	18800536 	bltu	r3,r2,8000adc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8000ac8:	e0fff717 	ldw	r3,-36(fp)
 8000acc:	e0bff817 	ldw	r2,-32(fp)
 8000ad0:	1885c83a 	sub	r2,r3,r2
 8000ad4:	e0bff615 	stw	r2,-40(fp)
 8000ad8:	00000406 	br	8000aec <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8000adc:	00c20004 	movi	r3,2048
 8000ae0:	e0bff817 	ldw	r2,-32(fp)
 8000ae4:	1885c83a 	sub	r2,r3,r2
 8000ae8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8000aec:	e0bff617 	ldw	r2,-40(fp)
 8000af0:	1000011e 	bne	r2,zero,8000af8 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 8000af4:	00001d06 	br	8000b6c <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 8000af8:	e0fffe17 	ldw	r3,-8(fp)
 8000afc:	e0bff617 	ldw	r2,-40(fp)
 8000b00:	1880022e 	bgeu	r3,r2,8000b0c <altera_avalon_jtag_uart_read+0x94>
        n = space;
 8000b04:	e0bffe17 	ldw	r2,-8(fp)
 8000b08:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8000b0c:	e0bff817 	ldw	r2,-32(fp)
 8000b10:	10800e04 	addi	r2,r2,56
 8000b14:	e0fffc17 	ldw	r3,-16(fp)
 8000b18:	1885883a 	add	r2,r3,r2
 8000b1c:	e13ff517 	ldw	r4,-44(fp)
 8000b20:	100b883a 	mov	r5,r2
 8000b24:	e1bff617 	ldw	r6,-40(fp)
 8000b28:	80025380 	call	8002538 <memcpy>
      ptr   += n;
 8000b2c:	e0fff517 	ldw	r3,-44(fp)
 8000b30:	e0bff617 	ldw	r2,-40(fp)
 8000b34:	1885883a 	add	r2,r3,r2
 8000b38:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8000b3c:	e0fffe17 	ldw	r3,-8(fp)
 8000b40:	e0bff617 	ldw	r2,-40(fp)
 8000b44:	1885c83a 	sub	r2,r3,r2
 8000b48:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8000b4c:	e0fff817 	ldw	r3,-32(fp)
 8000b50:	e0bff617 	ldw	r2,-40(fp)
 8000b54:	1885883a 	add	r2,r3,r2
 8000b58:	10c1ffcc 	andi	r3,r2,2047
 8000b5c:	e0bffc17 	ldw	r2,-16(fp)
 8000b60:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8000b64:	e0bffe17 	ldw	r2,-8(fp)
 8000b68:	00bfce16 	blt	zero,r2,8000aa4 <__alt_data_end+0xfc000aa4>

    /* If we read any data then return it */
    if (ptr != buffer)
 8000b6c:	e0fff517 	ldw	r3,-44(fp)
 8000b70:	e0bffd17 	ldw	r2,-12(fp)
 8000b74:	18800126 	beq	r3,r2,8000b7c <altera_avalon_jtag_uart_read+0x104>
      break;
 8000b78:	00001506 	br	8000bd0 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8000b7c:	e0bfff17 	ldw	r2,-4(fp)
 8000b80:	1090000c 	andi	r2,r2,16384
 8000b84:	10000126 	beq	r2,zero,8000b8c <altera_avalon_jtag_uart_read+0x114>
      break;
 8000b88:	00001106 	br	8000bd0 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8000b8c:	0001883a 	nop
 8000b90:	e0bffc17 	ldw	r2,-16(fp)
 8000b94:	10c00a17 	ldw	r3,40(r2)
 8000b98:	e0bff717 	ldw	r2,-36(fp)
 8000b9c:	1880051e 	bne	r3,r2,8000bb4 <altera_avalon_jtag_uart_read+0x13c>
 8000ba0:	e0bffc17 	ldw	r2,-16(fp)
 8000ba4:	10c00917 	ldw	r3,36(r2)
 8000ba8:	e0bffc17 	ldw	r2,-16(fp)
 8000bac:	10800117 	ldw	r2,4(r2)
 8000bb0:	18bff736 	bltu	r3,r2,8000b90 <__alt_data_end+0xfc000b90>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8000bb4:	e0bffc17 	ldw	r2,-16(fp)
 8000bb8:	10c00a17 	ldw	r3,40(r2)
 8000bbc:	e0bff717 	ldw	r2,-36(fp)
 8000bc0:	1880011e 	bne	r3,r2,8000bc8 <altera_avalon_jtag_uart_read+0x150>
      break;
 8000bc4:	00000206 	br	8000bd0 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8000bc8:	e0bffe17 	ldw	r2,-8(fp)
 8000bcc:	00bfb516 	blt	zero,r2,8000aa4 <__alt_data_end+0xfc000aa4>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8000bd0:	e0fff517 	ldw	r3,-44(fp)
 8000bd4:	e0bffd17 	ldw	r2,-12(fp)
 8000bd8:	18801826 	beq	r3,r2,8000c3c <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8000bdc:	0005303a 	rdctl	r2,status
 8000be0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8000be4:	e0fffa17 	ldw	r3,-24(fp)
 8000be8:	00bfff84 	movi	r2,-2
 8000bec:	1884703a 	and	r2,r3,r2
 8000bf0:	1001703a 	wrctl	status,r2
  
  return context;
 8000bf4:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8000bf8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8000bfc:	e0bffc17 	ldw	r2,-16(fp)
 8000c00:	10800817 	ldw	r2,32(r2)
 8000c04:	10c00054 	ori	r3,r2,1
 8000c08:	e0bffc17 	ldw	r2,-16(fp)
 8000c0c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8000c10:	e0bffc17 	ldw	r2,-16(fp)
 8000c14:	10800017 	ldw	r2,0(r2)
 8000c18:	10800104 	addi	r2,r2,4
 8000c1c:	1007883a 	mov	r3,r2
 8000c20:	e0bffc17 	ldw	r2,-16(fp)
 8000c24:	10800817 	ldw	r2,32(r2)
 8000c28:	18800035 	stwio	r2,0(r3)
 8000c2c:	e0bff917 	ldw	r2,-28(fp)
 8000c30:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8000c34:	e0bffb17 	ldw	r2,-20(fp)
 8000c38:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8000c3c:	e0fff517 	ldw	r3,-44(fp)
 8000c40:	e0bffd17 	ldw	r2,-12(fp)
 8000c44:	18800426 	beq	r3,r2,8000c58 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 8000c48:	e0fff517 	ldw	r3,-44(fp)
 8000c4c:	e0bffd17 	ldw	r2,-12(fp)
 8000c50:	1885c83a 	sub	r2,r3,r2
 8000c54:	00000606 	br	8000c70 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 8000c58:	e0bfff17 	ldw	r2,-4(fp)
 8000c5c:	1090000c 	andi	r2,r2,16384
 8000c60:	10000226 	beq	r2,zero,8000c6c <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 8000c64:	00bffd44 	movi	r2,-11
 8000c68:	00000106 	br	8000c70 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 8000c6c:	00bffec4 	movi	r2,-5
}
 8000c70:	e037883a 	mov	sp,fp
 8000c74:	dfc00117 	ldw	ra,4(sp)
 8000c78:	df000017 	ldw	fp,0(sp)
 8000c7c:	dec00204 	addi	sp,sp,8
 8000c80:	f800283a 	ret

08000c84 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8000c84:	defff304 	addi	sp,sp,-52
 8000c88:	dfc00c15 	stw	ra,48(sp)
 8000c8c:	df000b15 	stw	fp,44(sp)
 8000c90:	df000b04 	addi	fp,sp,44
 8000c94:	e13ffc15 	stw	r4,-16(fp)
 8000c98:	e17ffd15 	stw	r5,-12(fp)
 8000c9c:	e1bffe15 	stw	r6,-8(fp)
 8000ca0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8000ca4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8000ca8:	e0bffd17 	ldw	r2,-12(fp)
 8000cac:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8000cb0:	00003806 	br	8000d94 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8000cb4:	e0bffc17 	ldw	r2,-16(fp)
 8000cb8:	10800c17 	ldw	r2,48(r2)
 8000cbc:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 8000cc0:	e0bffc17 	ldw	r2,-16(fp)
 8000cc4:	10800d17 	ldw	r2,52(r2)
 8000cc8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8000ccc:	e0fff817 	ldw	r3,-32(fp)
 8000cd0:	e0bff517 	ldw	r2,-44(fp)
 8000cd4:	1880062e 	bgeu	r3,r2,8000cf0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8000cd8:	e0fff517 	ldw	r3,-44(fp)
 8000cdc:	e0bff817 	ldw	r2,-32(fp)
 8000ce0:	1885c83a 	sub	r2,r3,r2
 8000ce4:	10bfffc4 	addi	r2,r2,-1
 8000ce8:	e0bff615 	stw	r2,-40(fp)
 8000cec:	00000b06 	br	8000d1c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8000cf0:	e0bff517 	ldw	r2,-44(fp)
 8000cf4:	10000526 	beq	r2,zero,8000d0c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8000cf8:	00c20004 	movi	r3,2048
 8000cfc:	e0bff817 	ldw	r2,-32(fp)
 8000d00:	1885c83a 	sub	r2,r3,r2
 8000d04:	e0bff615 	stw	r2,-40(fp)
 8000d08:	00000406 	br	8000d1c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8000d0c:	00c1ffc4 	movi	r3,2047
 8000d10:	e0bff817 	ldw	r2,-32(fp)
 8000d14:	1885c83a 	sub	r2,r3,r2
 8000d18:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8000d1c:	e0bff617 	ldw	r2,-40(fp)
 8000d20:	1000011e 	bne	r2,zero,8000d28 <altera_avalon_jtag_uart_write+0xa4>
        break;
 8000d24:	00001d06 	br	8000d9c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 8000d28:	e0fffe17 	ldw	r3,-8(fp)
 8000d2c:	e0bff617 	ldw	r2,-40(fp)
 8000d30:	1880022e 	bgeu	r3,r2,8000d3c <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 8000d34:	e0bffe17 	ldw	r2,-8(fp)
 8000d38:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8000d3c:	e0bff817 	ldw	r2,-32(fp)
 8000d40:	10820e04 	addi	r2,r2,2104
 8000d44:	e0fffc17 	ldw	r3,-16(fp)
 8000d48:	1885883a 	add	r2,r3,r2
 8000d4c:	1009883a 	mov	r4,r2
 8000d50:	e17ffd17 	ldw	r5,-12(fp)
 8000d54:	e1bff617 	ldw	r6,-40(fp)
 8000d58:	80025380 	call	8002538 <memcpy>
      ptr   += n;
 8000d5c:	e0fffd17 	ldw	r3,-12(fp)
 8000d60:	e0bff617 	ldw	r2,-40(fp)
 8000d64:	1885883a 	add	r2,r3,r2
 8000d68:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8000d6c:	e0fffe17 	ldw	r3,-8(fp)
 8000d70:	e0bff617 	ldw	r2,-40(fp)
 8000d74:	1885c83a 	sub	r2,r3,r2
 8000d78:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8000d7c:	e0fff817 	ldw	r3,-32(fp)
 8000d80:	e0bff617 	ldw	r2,-40(fp)
 8000d84:	1885883a 	add	r2,r3,r2
 8000d88:	10c1ffcc 	andi	r3,r2,2047
 8000d8c:	e0bffc17 	ldw	r2,-16(fp)
 8000d90:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8000d94:	e0bffe17 	ldw	r2,-8(fp)
 8000d98:	00bfc616 	blt	zero,r2,8000cb4 <__alt_data_end+0xfc000cb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8000d9c:	0005303a 	rdctl	r2,status
 8000da0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8000da4:	e0fffa17 	ldw	r3,-24(fp)
 8000da8:	00bfff84 	movi	r2,-2
 8000dac:	1884703a 	and	r2,r3,r2
 8000db0:	1001703a 	wrctl	status,r2
  
  return context;
 8000db4:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8000db8:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8000dbc:	e0bffc17 	ldw	r2,-16(fp)
 8000dc0:	10800817 	ldw	r2,32(r2)
 8000dc4:	10c00094 	ori	r3,r2,2
 8000dc8:	e0bffc17 	ldw	r2,-16(fp)
 8000dcc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8000dd0:	e0bffc17 	ldw	r2,-16(fp)
 8000dd4:	10800017 	ldw	r2,0(r2)
 8000dd8:	10800104 	addi	r2,r2,4
 8000ddc:	1007883a 	mov	r3,r2
 8000de0:	e0bffc17 	ldw	r2,-16(fp)
 8000de4:	10800817 	ldw	r2,32(r2)
 8000de8:	18800035 	stwio	r2,0(r3)
 8000dec:	e0bff917 	ldw	r2,-28(fp)
 8000df0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8000df4:	e0bffb17 	ldw	r2,-20(fp)
 8000df8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8000dfc:	e0bffe17 	ldw	r2,-8(fp)
 8000e00:	0080120e 	bge	zero,r2,8000e4c <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 8000e04:	e0bfff17 	ldw	r2,-4(fp)
 8000e08:	1090000c 	andi	r2,r2,16384
 8000e0c:	10000126 	beq	r2,zero,8000e14 <altera_avalon_jtag_uart_write+0x190>
        break;
 8000e10:	00001006 	br	8000e54 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8000e14:	0001883a 	nop
 8000e18:	e0bffc17 	ldw	r2,-16(fp)
 8000e1c:	10c00d17 	ldw	r3,52(r2)
 8000e20:	e0bff517 	ldw	r2,-44(fp)
 8000e24:	1880051e 	bne	r3,r2,8000e3c <altera_avalon_jtag_uart_write+0x1b8>
 8000e28:	e0bffc17 	ldw	r2,-16(fp)
 8000e2c:	10c00917 	ldw	r3,36(r2)
 8000e30:	e0bffc17 	ldw	r2,-16(fp)
 8000e34:	10800117 	ldw	r2,4(r2)
 8000e38:	18bff736 	bltu	r3,r2,8000e18 <__alt_data_end+0xfc000e18>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8000e3c:	e0bffc17 	ldw	r2,-16(fp)
 8000e40:	10800917 	ldw	r2,36(r2)
 8000e44:	10000126 	beq	r2,zero,8000e4c <altera_avalon_jtag_uart_write+0x1c8>
         break;
 8000e48:	00000206 	br	8000e54 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 8000e4c:	e0bffe17 	ldw	r2,-8(fp)
 8000e50:	00bf9716 	blt	zero,r2,8000cb0 <__alt_data_end+0xfc000cb0>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8000e54:	e0fffd17 	ldw	r3,-12(fp)
 8000e58:	e0bff717 	ldw	r2,-36(fp)
 8000e5c:	18800426 	beq	r3,r2,8000e70 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 8000e60:	e0fffd17 	ldw	r3,-12(fp)
 8000e64:	e0bff717 	ldw	r2,-36(fp)
 8000e68:	1885c83a 	sub	r2,r3,r2
 8000e6c:	00000606 	br	8000e88 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 8000e70:	e0bfff17 	ldw	r2,-4(fp)
 8000e74:	1090000c 	andi	r2,r2,16384
 8000e78:	10000226 	beq	r2,zero,8000e84 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 8000e7c:	00bffd44 	movi	r2,-11
 8000e80:	00000106 	br	8000e88 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8000e84:	00bffec4 	movi	r2,-5
}
 8000e88:	e037883a 	mov	sp,fp
 8000e8c:	dfc00117 	ldw	ra,4(sp)
 8000e90:	df000017 	ldw	fp,0(sp)
 8000e94:	dec00204 	addi	sp,sp,8
 8000e98:	f800283a 	ret

08000e9c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8000e9c:	defffa04 	addi	sp,sp,-24
 8000ea0:	dfc00515 	stw	ra,20(sp)
 8000ea4:	df000415 	stw	fp,16(sp)
 8000ea8:	df000404 	addi	fp,sp,16
 8000eac:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8000eb0:	0007883a 	mov	r3,zero
 8000eb4:	e0bfff17 	ldw	r2,-4(fp)
 8000eb8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8000ebc:	e0bfff17 	ldw	r2,-4(fp)
 8000ec0:	10800104 	addi	r2,r2,4
 8000ec4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8000ec8:	0005303a 	rdctl	r2,status
 8000ecc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8000ed0:	e0fffd17 	ldw	r3,-12(fp)
 8000ed4:	00bfff84 	movi	r2,-2
 8000ed8:	1884703a 	and	r2,r3,r2
 8000edc:	1001703a 	wrctl	status,r2
  
  return context;
 8000ee0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8000ee4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8000ee8:	80020f80 	call	80020f8 <alt_tick>
 8000eec:	e0bffc17 	ldw	r2,-16(fp)
 8000ef0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8000ef4:	e0bffe17 	ldw	r2,-8(fp)
 8000ef8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8000efc:	e037883a 	mov	sp,fp
 8000f00:	dfc00117 	ldw	ra,4(sp)
 8000f04:	df000017 	ldw	fp,0(sp)
 8000f08:	dec00204 	addi	sp,sp,8
 8000f0c:	f800283a 	ret

08000f10 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8000f10:	defff804 	addi	sp,sp,-32
 8000f14:	dfc00715 	stw	ra,28(sp)
 8000f18:	df000615 	stw	fp,24(sp)
 8000f1c:	df000604 	addi	fp,sp,24
 8000f20:	e13ffc15 	stw	r4,-16(fp)
 8000f24:	e17ffd15 	stw	r5,-12(fp)
 8000f28:	e1bffe15 	stw	r6,-8(fp)
 8000f2c:	e1ffff15 	stw	r7,-4(fp)
 8000f30:	e0bfff17 	ldw	r2,-4(fp)
 8000f34:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8000f38:	00820034 	movhi	r2,2048
 8000f3c:	1095d304 	addi	r2,r2,22348
 8000f40:	10800017 	ldw	r2,0(r2)
 8000f44:	1000041e 	bne	r2,zero,8000f58 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 8000f48:	00820034 	movhi	r2,2048
 8000f4c:	1095d304 	addi	r2,r2,22348
 8000f50:	e0fffb17 	ldw	r3,-20(fp)
 8000f54:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8000f58:	e0bffc17 	ldw	r2,-16(fp)
 8000f5c:	10800104 	addi	r2,r2,4
 8000f60:	00c001c4 	movi	r3,7
 8000f64:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8000f68:	d8000015 	stw	zero,0(sp)
 8000f6c:	e13ffd17 	ldw	r4,-12(fp)
 8000f70:	e17ffe17 	ldw	r5,-8(fp)
 8000f74:	01820034 	movhi	r6,2048
 8000f78:	3183a704 	addi	r6,r6,3740
 8000f7c:	e1fffc17 	ldw	r7,-16(fp)
 8000f80:	80019840 	call	8001984 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8000f84:	e037883a 	mov	sp,fp
 8000f88:	dfc00117 	ldw	ra,4(sp)
 8000f8c:	df000017 	ldw	fp,0(sp)
 8000f90:	dec00204 	addi	sp,sp,8
 8000f94:	f800283a 	ret

08000f98 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 8000f98:	defffc04 	addi	sp,sp,-16
 8000f9c:	df000315 	stw	fp,12(sp)
 8000fa0:	df000304 	addi	fp,sp,12
 8000fa4:	e13ffe15 	stw	r4,-8(fp)
 8000fa8:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 8000fac:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 8000fb0:	e0bfff17 	ldw	r2,-4(fp)
 8000fb4:	1000061e 	bne	r2,zero,8000fd0 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 8000fb8:	e0bffe17 	ldw	r2,-8(fp)
 8000fbc:	1007883a 	mov	r3,r2
 8000fc0:	e0bffd03 	ldbu	r2,-12(fp)
 8000fc4:	1884b03a 	or	r2,r3,r2
 8000fc8:	e0bffd05 	stb	r2,-12(fp)
 8000fcc:	00000806 	br	8000ff0 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 8000fd0:	e0bffe17 	ldw	r2,-8(fp)
 8000fd4:	1007883a 	mov	r3,r2
 8000fd8:	e0bffd03 	ldbu	r2,-12(fp)
 8000fdc:	1884b03a 	or	r2,r3,r2
 8000fe0:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 8000fe4:	e0bffd03 	ldbu	r2,-12(fp)
 8000fe8:	10801014 	ori	r2,r2,64
 8000fec:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 8000ff0:	e0fffd03 	ldbu	r3,-12(fp)
 8000ff4:	00bfe004 	movi	r2,-128
 8000ff8:	1884b03a 	or	r2,r3,r2
}
 8000ffc:	e037883a 	mov	sp,fp
 8001000:	df000017 	ldw	fp,0(sp)
 8001004:	dec00104 	addi	sp,sp,4
 8001008:	f800283a 	ret

0800100c <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 800100c:	defffd04 	addi	sp,sp,-12
 8001010:	df000215 	stw	fp,8(sp)
 8001014:	df000204 	addi	fp,sp,8
 8001018:	e13ffe15 	stw	r4,-8(fp)
 800101c:	2805883a 	mov	r2,r5
 8001020:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 8001024:	e0bffe17 	ldw	r2,-8(fp)
 8001028:	10800a17 	ldw	r2,40(r2)
 800102c:	1007883a 	mov	r3,r2
 8001030:	e0bfff03 	ldbu	r2,-4(fp)
 8001034:	18800025 	stbio	r2,0(r3)
}
 8001038:	e037883a 	mov	sp,fp
 800103c:	df000017 	ldw	fp,0(sp)
 8001040:	dec00104 	addi	sp,sp,4
 8001044:	f800283a 	ret

08001048 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 8001048:	defffe04 	addi	sp,sp,-8
 800104c:	df000115 	stw	fp,4(sp)
 8001050:	df000104 	addi	fp,sp,4
 8001054:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 8001058:	e0bfff17 	ldw	r2,-4(fp)
 800105c:	10800a17 	ldw	r2,40(r2)
 8001060:	1007883a 	mov	r3,r2
 8001064:	00800044 	movi	r2,1
 8001068:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 800106c:	e037883a 	mov	sp,fp
 8001070:	df000017 	ldw	fp,0(sp)
 8001074:	dec00104 	addi	sp,sp,4
 8001078:	f800283a 	ret

0800107c <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 800107c:	defffc04 	addi	sp,sp,-16
 8001080:	dfc00315 	stw	ra,12(sp)
 8001084:	df000215 	stw	fp,8(sp)
 8001088:	df000204 	addi	fp,sp,8
 800108c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 8001090:	e13fff17 	ldw	r4,-4(fp)
 8001094:	01420034 	movhi	r5,2048
 8001098:	29502504 	addi	r5,r5,16532
 800109c:	80018c40 	call	80018c4 <alt_find_dev>
 80010a0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 80010a4:	e0bffe17 	ldw	r2,-8(fp)
}
 80010a8:	e037883a 	mov	sp,fp
 80010ac:	dfc00117 	ldw	ra,4(sp)
 80010b0:	df000017 	ldw	fp,0(sp)
 80010b4:	dec00204 	addi	sp,sp,8
 80010b8:	f800283a 	ret

080010bc <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 80010bc:	defffb04 	addi	sp,sp,-20
 80010c0:	df000415 	stw	fp,16(sp)
 80010c4:	df000404 	addi	fp,sp,16
 80010c8:	e13ffd15 	stw	r4,-12(fp)
 80010cc:	e17ffe15 	stw	r5,-8(fp)
 80010d0:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 80010d4:	e03ffc15 	stw	zero,-16(fp)
 80010d8:	00000f06 	br	8001118 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 80010dc:	e0bffd17 	ldw	r2,-12(fp)
 80010e0:	10800a17 	ldw	r2,40(r2)
 80010e4:	10800044 	addi	r2,r2,1
 80010e8:	1009883a 	mov	r4,r2
 80010ec:	e0fffe17 	ldw	r3,-8(fp)
 80010f0:	e0bffc17 	ldw	r2,-16(fp)
 80010f4:	1885883a 	add	r2,r3,r2
 80010f8:	10800003 	ldbu	r2,0(r2)
 80010fc:	10803fcc 	andi	r2,r2,255
 8001100:	1080201c 	xori	r2,r2,128
 8001104:	10bfe004 	addi	r2,r2,-128
 8001108:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 800110c:	e0bffc17 	ldw	r2,-16(fp)
 8001110:	10800044 	addi	r2,r2,1
 8001114:	e0bffc15 	stw	r2,-16(fp)
 8001118:	e0fffc17 	ldw	r3,-16(fp)
 800111c:	e0bfff17 	ldw	r2,-4(fp)
 8001120:	18bfee36 	bltu	r3,r2,80010dc <__alt_data_end+0xfc0010dc>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 8001124:	e037883a 	mov	sp,fp
 8001128:	df000017 	ldw	fp,0(sp)
 800112c:	dec00104 	addi	sp,sp,4
 8001130:	f800283a 	ret

08001134 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 8001134:	defffd04 	addi	sp,sp,-12
 8001138:	df000215 	stw	fp,8(sp)
 800113c:	df000204 	addi	fp,sp,8
 8001140:	e13ffe15 	stw	r4,-8(fp)
 8001144:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 8001148:	00000d06 	br	8001180 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 800114c:	e0bffe17 	ldw	r2,-8(fp)
 8001150:	10800a17 	ldw	r2,40(r2)
 8001154:	10800044 	addi	r2,r2,1
 8001158:	1007883a 	mov	r3,r2
 800115c:	e0bfff17 	ldw	r2,-4(fp)
 8001160:	10800003 	ldbu	r2,0(r2)
 8001164:	10803fcc 	andi	r2,r2,255
 8001168:	1080201c 	xori	r2,r2,128
 800116c:	10bfe004 	addi	r2,r2,-128
 8001170:	18800025 	stbio	r2,0(r3)
		++ptr;
 8001174:	e0bfff17 	ldw	r2,-4(fp)
 8001178:	10800044 	addi	r2,r2,1
 800117c:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 8001180:	e0bfff17 	ldw	r2,-4(fp)
 8001184:	10800003 	ldbu	r2,0(r2)
 8001188:	10803fcc 	andi	r2,r2,255
 800118c:	1080201c 	xori	r2,r2,128
 8001190:	10bfe004 	addi	r2,r2,-128
 8001194:	103fed1e 	bne	r2,zero,800114c <__alt_data_end+0xfc00114c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 8001198:	e037883a 	mov	sp,fp
 800119c:	df000017 	ldw	fp,0(sp)
 80011a0:	dec00104 	addi	sp,sp,4
 80011a4:	f800283a 	ret

080011a8 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 80011a8:	defffb04 	addi	sp,sp,-20
 80011ac:	dfc00415 	stw	ra,16(sp)
 80011b0:	df000315 	stw	fp,12(sp)
 80011b4:	df000304 	addi	fp,sp,12
 80011b8:	e13ffd15 	stw	r4,-12(fp)
 80011bc:	e17ffe15 	stw	r5,-8(fp)
 80011c0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 80011c4:	e0bffd17 	ldw	r2,-12(fp)
 80011c8:	10c00017 	ldw	r3,0(r2)
 80011cc:	e0bfff17 	ldw	r2,-4(fp)
 80011d0:	1809883a 	mov	r4,r3
 80011d4:	e17ffe17 	ldw	r5,-8(fp)
 80011d8:	100d883a 	mov	r6,r2
 80011dc:	80010bc0 	call	80010bc <alt_up_character_lcd_write>
	return 0;
 80011e0:	0005883a 	mov	r2,zero
}
 80011e4:	e037883a 	mov	sp,fp
 80011e8:	dfc00117 	ldw	ra,4(sp)
 80011ec:	df000017 	ldw	fp,0(sp)
 80011f0:	dec00204 	addi	sp,sp,8
 80011f4:	f800283a 	ret

080011f8 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 80011f8:	defffa04 	addi	sp,sp,-24
 80011fc:	dfc00515 	stw	ra,20(sp)
 8001200:	df000415 	stw	fp,16(sp)
 8001204:	df000404 	addi	fp,sp,16
 8001208:	e13ffd15 	stw	r4,-12(fp)
 800120c:	e17ffe15 	stw	r5,-8(fp)
 8001210:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 8001214:	e0bffe17 	ldw	r2,-8(fp)
 8001218:	10800a28 	cmpgeui	r2,r2,40
 800121c:	1000031e 	bne	r2,zero,800122c <alt_up_character_lcd_set_cursor_pos+0x34>
 8001220:	e0bfff17 	ldw	r2,-4(fp)
 8001224:	108000b0 	cmpltui	r2,r2,2
 8001228:	1000021e 	bne	r2,zero,8001234 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 800122c:	00bfffc4 	movi	r2,-1
 8001230:	00000906 	br	8001258 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 8001234:	e13ffe17 	ldw	r4,-8(fp)
 8001238:	e17fff17 	ldw	r5,-4(fp)
 800123c:	8000f980 	call	8000f98 <get_DDRAM_addr>
 8001240:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 8001244:	e0bffc03 	ldbu	r2,-16(fp)
 8001248:	e13ffd17 	ldw	r4,-12(fp)
 800124c:	100b883a 	mov	r5,r2
 8001250:	800100c0 	call	800100c <alt_up_character_lcd_send_cmd>
	return 0;
 8001254:	0005883a 	mov	r2,zero
}
 8001258:	e037883a 	mov	sp,fp
 800125c:	dfc00117 	ldw	ra,4(sp)
 8001260:	df000017 	ldw	fp,0(sp)
 8001264:	dec00204 	addi	sp,sp,8
 8001268:	f800283a 	ret

0800126c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 800126c:	defffb04 	addi	sp,sp,-20
 8001270:	dfc00415 	stw	ra,16(sp)
 8001274:	df000315 	stw	fp,12(sp)
 8001278:	df000304 	addi	fp,sp,12
 800127c:	e13ffe15 	stw	r4,-8(fp)
 8001280:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 8001284:	e0bfff17 	ldw	r2,-4(fp)
 8001288:	1000011e 	bne	r2,zero,8001290 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
 800128c:	00001406 	br	80012e0 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 8001290:	e0bfff17 	ldw	r2,-4(fp)
 8001294:	0080020e 	bge	zero,r2,80012a0 <alt_up_character_lcd_shift_cursor+0x34>
 8001298:	00800504 	movi	r2,20
 800129c:	00000106 	br	80012a4 <alt_up_character_lcd_shift_cursor+0x38>
 80012a0:	00800404 	movi	r2,16
 80012a4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 80012a8:	e0bfff17 	ldw	r2,-4(fp)
 80012ac:	1000010e 	bge	r2,zero,80012b4 <alt_up_character_lcd_shift_cursor+0x48>
 80012b0:	0085c83a 	sub	r2,zero,r2
 80012b4:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 80012b8:	00000406 	br	80012cc <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 80012bc:	e0bffd43 	ldbu	r2,-11(fp)
 80012c0:	e13ffe17 	ldw	r4,-8(fp)
 80012c4:	100b883a 	mov	r5,r2
 80012c8:	800100c0 	call	800100c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 80012cc:	e0bffd03 	ldbu	r2,-12(fp)
 80012d0:	10ffffc4 	addi	r3,r2,-1
 80012d4:	e0fffd05 	stb	r3,-12(fp)
 80012d8:	10803fcc 	andi	r2,r2,255
 80012dc:	103ff71e 	bne	r2,zero,80012bc <__alt_data_end+0xfc0012bc>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 80012e0:	e037883a 	mov	sp,fp
 80012e4:	dfc00117 	ldw	ra,4(sp)
 80012e8:	df000017 	ldw	fp,0(sp)
 80012ec:	dec00204 	addi	sp,sp,8
 80012f0:	f800283a 	ret

080012f4 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 80012f4:	defffb04 	addi	sp,sp,-20
 80012f8:	dfc00415 	stw	ra,16(sp)
 80012fc:	df000315 	stw	fp,12(sp)
 8001300:	df000304 	addi	fp,sp,12
 8001304:	e13ffe15 	stw	r4,-8(fp)
 8001308:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 800130c:	e0bfff17 	ldw	r2,-4(fp)
 8001310:	1000011e 	bne	r2,zero,8001318 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
 8001314:	00001406 	br	8001368 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 8001318:	e0bfff17 	ldw	r2,-4(fp)
 800131c:	0080020e 	bge	zero,r2,8001328 <alt_up_character_lcd_shift_display+0x34>
 8001320:	00800704 	movi	r2,28
 8001324:	00000106 	br	800132c <alt_up_character_lcd_shift_display+0x38>
 8001328:	00800604 	movi	r2,24
 800132c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 8001330:	e0bfff17 	ldw	r2,-4(fp)
 8001334:	1000010e 	bge	r2,zero,800133c <alt_up_character_lcd_shift_display+0x48>
 8001338:	0085c83a 	sub	r2,zero,r2
 800133c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8001340:	00000406 	br	8001354 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 8001344:	e0bffd43 	ldbu	r2,-11(fp)
 8001348:	e13ffe17 	ldw	r4,-8(fp)
 800134c:	100b883a 	mov	r5,r2
 8001350:	800100c0 	call	800100c <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8001354:	e0bffd03 	ldbu	r2,-12(fp)
 8001358:	10ffffc4 	addi	r3,r2,-1
 800135c:	e0fffd05 	stb	r3,-12(fp)
 8001360:	10803fcc 	andi	r2,r2,255
 8001364:	103ff71e 	bne	r2,zero,8001344 <__alt_data_end+0xfc001344>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 8001368:	e037883a 	mov	sp,fp
 800136c:	dfc00117 	ldw	ra,4(sp)
 8001370:	df000017 	ldw	fp,0(sp)
 8001374:	dec00204 	addi	sp,sp,8
 8001378:	f800283a 	ret

0800137c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 800137c:	defffa04 	addi	sp,sp,-24
 8001380:	dfc00515 	stw	ra,20(sp)
 8001384:	df000415 	stw	fp,16(sp)
 8001388:	df000404 	addi	fp,sp,16
 800138c:	e13ffd15 	stw	r4,-12(fp)
 8001390:	e17ffe15 	stw	r5,-8(fp)
 8001394:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 8001398:	e0bffe17 	ldw	r2,-8(fp)
 800139c:	10800a28 	cmpgeui	r2,r2,40
 80013a0:	1000031e 	bne	r2,zero,80013b0 <alt_up_character_lcd_erase_pos+0x34>
 80013a4:	e0bfff17 	ldw	r2,-4(fp)
 80013a8:	108000b0 	cmpltui	r2,r2,2
 80013ac:	1000021e 	bne	r2,zero,80013b8 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 80013b0:	00bfffc4 	movi	r2,-1
 80013b4:	00000f06 	br	80013f4 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 80013b8:	e13ffe17 	ldw	r4,-8(fp)
 80013bc:	e17fff17 	ldw	r5,-4(fp)
 80013c0:	8000f980 	call	8000f98 <get_DDRAM_addr>
 80013c4:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 80013c8:	e0bffc03 	ldbu	r2,-16(fp)
 80013cc:	e13ffd17 	ldw	r4,-12(fp)
 80013d0:	100b883a 	mov	r5,r2
 80013d4:	800100c0 	call	800100c <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 80013d8:	e0bffd17 	ldw	r2,-12(fp)
 80013dc:	10800a17 	ldw	r2,40(r2)
 80013e0:	10800044 	addi	r2,r2,1
 80013e4:	1007883a 	mov	r3,r2
 80013e8:	00800084 	movi	r2,2
 80013ec:	18800025 	stbio	r2,0(r3)
	return 0;
 80013f0:	0005883a 	mov	r2,zero
}
 80013f4:	e037883a 	mov	sp,fp
 80013f8:	dfc00117 	ldw	ra,4(sp)
 80013fc:	df000017 	ldw	fp,0(sp)
 8001400:	dec00204 	addi	sp,sp,8
 8001404:	f800283a 	ret

08001408 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 8001408:	defffd04 	addi	sp,sp,-12
 800140c:	dfc00215 	stw	ra,8(sp)
 8001410:	df000115 	stw	fp,4(sp)
 8001414:	df000104 	addi	fp,sp,4
 8001418:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 800141c:	e13fff17 	ldw	r4,-4(fp)
 8001420:	01400304 	movi	r5,12
 8001424:	800100c0 	call	800100c <alt_up_character_lcd_send_cmd>
}
 8001428:	e037883a 	mov	sp,fp
 800142c:	dfc00117 	ldw	ra,4(sp)
 8001430:	df000017 	ldw	fp,0(sp)
 8001434:	dec00204 	addi	sp,sp,8
 8001438:	f800283a 	ret

0800143c <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 800143c:	defffd04 	addi	sp,sp,-12
 8001440:	dfc00215 	stw	ra,8(sp)
 8001444:	df000115 	stw	fp,4(sp)
 8001448:	df000104 	addi	fp,sp,4
 800144c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 8001450:	e13fff17 	ldw	r4,-4(fp)
 8001454:	014003c4 	movi	r5,15
 8001458:	800100c0 	call	800100c <alt_up_character_lcd_send_cmd>
}
 800145c:	e037883a 	mov	sp,fp
 8001460:	dfc00117 	ldw	ra,4(sp)
 8001464:	df000017 	ldw	fp,0(sp)
 8001468:	dec00204 	addi	sp,sp,8
 800146c:	f800283a 	ret

08001470 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8001470:	defff504 	addi	sp,sp,-44
 8001474:	df000a15 	stw	fp,40(sp)
 8001478:	df000a04 	addi	fp,sp,40
 800147c:	e13ffc15 	stw	r4,-16(fp)
 8001480:	e17ffd15 	stw	r5,-12(fp)
 8001484:	e1bffe15 	stw	r6,-8(fp)
 8001488:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800148c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8001490:	00820034 	movhi	r2,2048
 8001494:	1095d304 	addi	r2,r2,22348
 8001498:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 800149c:	10003f26 	beq	r2,zero,800159c <alt_alarm_start+0x12c>
  {
    if (alarm)
 80014a0:	e0bffc17 	ldw	r2,-16(fp)
 80014a4:	10003b26 	beq	r2,zero,8001594 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 80014a8:	e0bffc17 	ldw	r2,-16(fp)
 80014ac:	e0fffe17 	ldw	r3,-8(fp)
 80014b0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80014b4:	e0bffc17 	ldw	r2,-16(fp)
 80014b8:	e0ffff17 	ldw	r3,-4(fp)
 80014bc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80014c0:	0005303a 	rdctl	r2,status
 80014c4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80014c8:	e0fff817 	ldw	r3,-32(fp)
 80014cc:	00bfff84 	movi	r2,-2
 80014d0:	1884703a 	and	r2,r3,r2
 80014d4:	1001703a 	wrctl	status,r2
  
  return context;
 80014d8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 80014dc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80014e0:	00820034 	movhi	r2,2048
 80014e4:	1095d404 	addi	r2,r2,22352
 80014e8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 80014ec:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 80014f0:	e0fffd17 	ldw	r3,-12(fp)
 80014f4:	e0bff617 	ldw	r2,-40(fp)
 80014f8:	1885883a 	add	r2,r3,r2
 80014fc:	10c00044 	addi	r3,r2,1
 8001500:	e0bffc17 	ldw	r2,-16(fp)
 8001504:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8001508:	e0bffc17 	ldw	r2,-16(fp)
 800150c:	10c00217 	ldw	r3,8(r2)
 8001510:	e0bff617 	ldw	r2,-40(fp)
 8001514:	1880042e 	bgeu	r3,r2,8001528 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 8001518:	e0bffc17 	ldw	r2,-16(fp)
 800151c:	00c00044 	movi	r3,1
 8001520:	10c00405 	stb	r3,16(r2)
 8001524:	00000206 	br	8001530 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 8001528:	e0bffc17 	ldw	r2,-16(fp)
 800152c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8001530:	e0fffc17 	ldw	r3,-16(fp)
 8001534:	00820034 	movhi	r2,2048
 8001538:	10902a04 	addi	r2,r2,16552
 800153c:	e0bff915 	stw	r2,-28(fp)
 8001540:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8001544:	e0bffa17 	ldw	r2,-24(fp)
 8001548:	e0fff917 	ldw	r3,-28(fp)
 800154c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8001550:	e0bff917 	ldw	r2,-28(fp)
 8001554:	10c00017 	ldw	r3,0(r2)
 8001558:	e0bffa17 	ldw	r2,-24(fp)
 800155c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8001560:	e0bff917 	ldw	r2,-28(fp)
 8001564:	10800017 	ldw	r2,0(r2)
 8001568:	e0fffa17 	ldw	r3,-24(fp)
 800156c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8001570:	e0bff917 	ldw	r2,-28(fp)
 8001574:	e0fffa17 	ldw	r3,-24(fp)
 8001578:	10c00015 	stw	r3,0(r2)
 800157c:	e0bff717 	ldw	r2,-36(fp)
 8001580:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8001584:	e0bffb17 	ldw	r2,-20(fp)
 8001588:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800158c:	0005883a 	mov	r2,zero
 8001590:	00000306 	br	80015a0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 8001594:	00bffa84 	movi	r2,-22
 8001598:	00000106 	br	80015a0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 800159c:	00bfde84 	movi	r2,-134
  }
}
 80015a0:	e037883a 	mov	sp,fp
 80015a4:	df000017 	ldw	fp,0(sp)
 80015a8:	dec00104 	addi	sp,sp,4
 80015ac:	f800283a 	ret

080015b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80015b0:	defffe04 	addi	sp,sp,-8
 80015b4:	dfc00115 	stw	ra,4(sp)
 80015b8:	df000015 	stw	fp,0(sp)
 80015bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80015c0:	00820034 	movhi	r2,2048
 80015c4:	10902804 	addi	r2,r2,16544
 80015c8:	10800017 	ldw	r2,0(r2)
 80015cc:	10000526 	beq	r2,zero,80015e4 <alt_get_errno+0x34>
 80015d0:	00820034 	movhi	r2,2048
 80015d4:	10902804 	addi	r2,r2,16544
 80015d8:	10800017 	ldw	r2,0(r2)
 80015dc:	103ee83a 	callr	r2
 80015e0:	00000206 	br	80015ec <alt_get_errno+0x3c>
 80015e4:	00820034 	movhi	r2,2048
 80015e8:	1095d504 	addi	r2,r2,22356
}
 80015ec:	e037883a 	mov	sp,fp
 80015f0:	dfc00117 	ldw	ra,4(sp)
 80015f4:	df000017 	ldw	fp,0(sp)
 80015f8:	dec00204 	addi	sp,sp,8
 80015fc:	f800283a 	ret

08001600 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8001600:	defffb04 	addi	sp,sp,-20
 8001604:	dfc00415 	stw	ra,16(sp)
 8001608:	df000315 	stw	fp,12(sp)
 800160c:	df000304 	addi	fp,sp,12
 8001610:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8001614:	e0bfff17 	ldw	r2,-4(fp)
 8001618:	10000616 	blt	r2,zero,8001634 <close+0x34>
 800161c:	e0bfff17 	ldw	r2,-4(fp)
 8001620:	10c00324 	muli	r3,r2,12
 8001624:	00820034 	movhi	r2,2048
 8001628:	108eba04 	addi	r2,r2,15080
 800162c:	1885883a 	add	r2,r3,r2
 8001630:	00000106 	br	8001638 <close+0x38>
 8001634:	0005883a 	mov	r2,zero
 8001638:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800163c:	e0bffd17 	ldw	r2,-12(fp)
 8001640:	10001926 	beq	r2,zero,80016a8 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8001644:	e0bffd17 	ldw	r2,-12(fp)
 8001648:	10800017 	ldw	r2,0(r2)
 800164c:	10800417 	ldw	r2,16(r2)
 8001650:	10000626 	beq	r2,zero,800166c <close+0x6c>
 8001654:	e0bffd17 	ldw	r2,-12(fp)
 8001658:	10800017 	ldw	r2,0(r2)
 800165c:	10800417 	ldw	r2,16(r2)
 8001660:	e13ffd17 	ldw	r4,-12(fp)
 8001664:	103ee83a 	callr	r2
 8001668:	00000106 	br	8001670 <close+0x70>
 800166c:	0005883a 	mov	r2,zero
 8001670:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8001674:	e13fff17 	ldw	r4,-4(fp)
 8001678:	80020000 	call	8002000 <alt_release_fd>
    if (rval < 0)
 800167c:	e0bffe17 	ldw	r2,-8(fp)
 8001680:	1000070e 	bge	r2,zero,80016a0 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 8001684:	80015b00 	call	80015b0 <alt_get_errno>
 8001688:	1007883a 	mov	r3,r2
 800168c:	e0bffe17 	ldw	r2,-8(fp)
 8001690:	0085c83a 	sub	r2,zero,r2
 8001694:	18800015 	stw	r2,0(r3)
      return -1;
 8001698:	00bfffc4 	movi	r2,-1
 800169c:	00000706 	br	80016bc <close+0xbc>
    }
    return 0;
 80016a0:	0005883a 	mov	r2,zero
 80016a4:	00000506 	br	80016bc <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 80016a8:	80015b00 	call	80015b0 <alt_get_errno>
 80016ac:	1007883a 	mov	r3,r2
 80016b0:	00801444 	movi	r2,81
 80016b4:	18800015 	stw	r2,0(r3)
    return -1;
 80016b8:	00bfffc4 	movi	r2,-1
  }
}
 80016bc:	e037883a 	mov	sp,fp
 80016c0:	dfc00117 	ldw	ra,4(sp)
 80016c4:	df000017 	ldw	fp,0(sp)
 80016c8:	dec00204 	addi	sp,sp,8
 80016cc:	f800283a 	ret

080016d0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 80016d0:	deffff04 	addi	sp,sp,-4
 80016d4:	df000015 	stw	fp,0(sp)
 80016d8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 80016dc:	e037883a 	mov	sp,fp
 80016e0:	df000017 	ldw	fp,0(sp)
 80016e4:	dec00104 	addi	sp,sp,4
 80016e8:	f800283a 	ret

080016ec <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 80016ec:	defffc04 	addi	sp,sp,-16
 80016f0:	df000315 	stw	fp,12(sp)
 80016f4:	df000304 	addi	fp,sp,12
 80016f8:	e13ffd15 	stw	r4,-12(fp)
 80016fc:	e17ffe15 	stw	r5,-8(fp)
 8001700:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8001704:	e0bfff17 	ldw	r2,-4(fp)
}
 8001708:	e037883a 	mov	sp,fp
 800170c:	df000017 	ldw	fp,0(sp)
 8001710:	dec00104 	addi	sp,sp,4
 8001714:	f800283a 	ret

08001718 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8001718:	defffe04 	addi	sp,sp,-8
 800171c:	dfc00115 	stw	ra,4(sp)
 8001720:	df000015 	stw	fp,0(sp)
 8001724:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8001728:	00820034 	movhi	r2,2048
 800172c:	10902804 	addi	r2,r2,16544
 8001730:	10800017 	ldw	r2,0(r2)
 8001734:	10000526 	beq	r2,zero,800174c <alt_get_errno+0x34>
 8001738:	00820034 	movhi	r2,2048
 800173c:	10902804 	addi	r2,r2,16544
 8001740:	10800017 	ldw	r2,0(r2)
 8001744:	103ee83a 	callr	r2
 8001748:	00000206 	br	8001754 <alt_get_errno+0x3c>
 800174c:	00820034 	movhi	r2,2048
 8001750:	1095d504 	addi	r2,r2,22356
}
 8001754:	e037883a 	mov	sp,fp
 8001758:	dfc00117 	ldw	ra,4(sp)
 800175c:	df000017 	ldw	fp,0(sp)
 8001760:	dec00204 	addi	sp,sp,8
 8001764:	f800283a 	ret

08001768 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8001768:	defffa04 	addi	sp,sp,-24
 800176c:	dfc00515 	stw	ra,20(sp)
 8001770:	df000415 	stw	fp,16(sp)
 8001774:	df000404 	addi	fp,sp,16
 8001778:	e13ffe15 	stw	r4,-8(fp)
 800177c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8001780:	e0bffe17 	ldw	r2,-8(fp)
 8001784:	10000326 	beq	r2,zero,8001794 <alt_dev_llist_insert+0x2c>
 8001788:	e0bffe17 	ldw	r2,-8(fp)
 800178c:	10800217 	ldw	r2,8(r2)
 8001790:	1000061e 	bne	r2,zero,80017ac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8001794:	80017180 	call	8001718 <alt_get_errno>
 8001798:	1007883a 	mov	r3,r2
 800179c:	00800584 	movi	r2,22
 80017a0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 80017a4:	00bffa84 	movi	r2,-22
 80017a8:	00001306 	br	80017f8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80017ac:	e0bffe17 	ldw	r2,-8(fp)
 80017b0:	e0ffff17 	ldw	r3,-4(fp)
 80017b4:	e0fffc15 	stw	r3,-16(fp)
 80017b8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80017bc:	e0bffd17 	ldw	r2,-12(fp)
 80017c0:	e0fffc17 	ldw	r3,-16(fp)
 80017c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80017c8:	e0bffc17 	ldw	r2,-16(fp)
 80017cc:	10c00017 	ldw	r3,0(r2)
 80017d0:	e0bffd17 	ldw	r2,-12(fp)
 80017d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80017d8:	e0bffc17 	ldw	r2,-16(fp)
 80017dc:	10800017 	ldw	r2,0(r2)
 80017e0:	e0fffd17 	ldw	r3,-12(fp)
 80017e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80017e8:	e0bffc17 	ldw	r2,-16(fp)
 80017ec:	e0fffd17 	ldw	r3,-12(fp)
 80017f0:	10c00015 	stw	r3,0(r2)

  return 0;  
 80017f4:	0005883a 	mov	r2,zero
}
 80017f8:	e037883a 	mov	sp,fp
 80017fc:	dfc00117 	ldw	ra,4(sp)
 8001800:	df000017 	ldw	fp,0(sp)
 8001804:	dec00204 	addi	sp,sp,8
 8001808:	f800283a 	ret

0800180c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800180c:	defffd04 	addi	sp,sp,-12
 8001810:	dfc00215 	stw	ra,8(sp)
 8001814:	df000115 	stw	fp,4(sp)
 8001818:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800181c:	00820034 	movhi	r2,2048
 8001820:	108a7804 	addi	r2,r2,10720
 8001824:	e0bfff15 	stw	r2,-4(fp)
 8001828:	00000606 	br	8001844 <_do_ctors+0x38>
        (*ctor) (); 
 800182c:	e0bfff17 	ldw	r2,-4(fp)
 8001830:	10800017 	ldw	r2,0(r2)
 8001834:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8001838:	e0bfff17 	ldw	r2,-4(fp)
 800183c:	10bfff04 	addi	r2,r2,-4
 8001840:	e0bfff15 	stw	r2,-4(fp)
 8001844:	e0ffff17 	ldw	r3,-4(fp)
 8001848:	00820034 	movhi	r2,2048
 800184c:	108a7904 	addi	r2,r2,10724
 8001850:	18bff62e 	bgeu	r3,r2,800182c <__alt_data_end+0xfc00182c>
        (*ctor) (); 
}
 8001854:	e037883a 	mov	sp,fp
 8001858:	dfc00117 	ldw	ra,4(sp)
 800185c:	df000017 	ldw	fp,0(sp)
 8001860:	dec00204 	addi	sp,sp,8
 8001864:	f800283a 	ret

08001868 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8001868:	defffd04 	addi	sp,sp,-12
 800186c:	dfc00215 	stw	ra,8(sp)
 8001870:	df000115 	stw	fp,4(sp)
 8001874:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8001878:	00820034 	movhi	r2,2048
 800187c:	108a7804 	addi	r2,r2,10720
 8001880:	e0bfff15 	stw	r2,-4(fp)
 8001884:	00000606 	br	80018a0 <_do_dtors+0x38>
        (*dtor) (); 
 8001888:	e0bfff17 	ldw	r2,-4(fp)
 800188c:	10800017 	ldw	r2,0(r2)
 8001890:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8001894:	e0bfff17 	ldw	r2,-4(fp)
 8001898:	10bfff04 	addi	r2,r2,-4
 800189c:	e0bfff15 	stw	r2,-4(fp)
 80018a0:	e0ffff17 	ldw	r3,-4(fp)
 80018a4:	00820034 	movhi	r2,2048
 80018a8:	108a7904 	addi	r2,r2,10724
 80018ac:	18bff62e 	bgeu	r3,r2,8001888 <__alt_data_end+0xfc001888>
        (*dtor) (); 
}
 80018b0:	e037883a 	mov	sp,fp
 80018b4:	dfc00117 	ldw	ra,4(sp)
 80018b8:	df000017 	ldw	fp,0(sp)
 80018bc:	dec00204 	addi	sp,sp,8
 80018c0:	f800283a 	ret

080018c4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 80018c4:	defffa04 	addi	sp,sp,-24
 80018c8:	dfc00515 	stw	ra,20(sp)
 80018cc:	df000415 	stw	fp,16(sp)
 80018d0:	df000404 	addi	fp,sp,16
 80018d4:	e13ffe15 	stw	r4,-8(fp)
 80018d8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 80018dc:	e0bfff17 	ldw	r2,-4(fp)
 80018e0:	10800017 	ldw	r2,0(r2)
 80018e4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 80018e8:	e13ffe17 	ldw	r4,-8(fp)
 80018ec:	80026700 	call	8002670 <strlen>
 80018f0:	10800044 	addi	r2,r2,1
 80018f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 80018f8:	00000d06 	br	8001930 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 80018fc:	e0bffc17 	ldw	r2,-16(fp)
 8001900:	10c00217 	ldw	r3,8(r2)
 8001904:	e0bffd17 	ldw	r2,-12(fp)
 8001908:	1809883a 	mov	r4,r3
 800190c:	e17ffe17 	ldw	r5,-8(fp)
 8001910:	100d883a 	mov	r6,r2
 8001914:	80024bc0 	call	80024bc <memcmp>
 8001918:	1000021e 	bne	r2,zero,8001924 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800191c:	e0bffc17 	ldw	r2,-16(fp)
 8001920:	00000706 	br	8001940 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8001924:	e0bffc17 	ldw	r2,-16(fp)
 8001928:	10800017 	ldw	r2,0(r2)
 800192c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8001930:	e0fffc17 	ldw	r3,-16(fp)
 8001934:	e0bfff17 	ldw	r2,-4(fp)
 8001938:	18bff01e 	bne	r3,r2,80018fc <__alt_data_end+0xfc0018fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800193c:	0005883a 	mov	r2,zero
}
 8001940:	e037883a 	mov	sp,fp
 8001944:	dfc00117 	ldw	ra,4(sp)
 8001948:	df000017 	ldw	fp,0(sp)
 800194c:	dec00204 	addi	sp,sp,8
 8001950:	f800283a 	ret

08001954 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8001954:	defffe04 	addi	sp,sp,-8
 8001958:	dfc00115 	stw	ra,4(sp)
 800195c:	df000015 	stw	fp,0(sp)
 8001960:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8001964:	0009883a 	mov	r4,zero
 8001968:	01440004 	movi	r5,4096
 800196c:	80023e40 	call	80023e4 <alt_icache_flush>
#endif
}
 8001970:	e037883a 	mov	sp,fp
 8001974:	dfc00117 	ldw	ra,4(sp)
 8001978:	df000017 	ldw	fp,0(sp)
 800197c:	dec00204 	addi	sp,sp,8
 8001980:	f800283a 	ret

08001984 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8001984:	defff904 	addi	sp,sp,-28
 8001988:	dfc00615 	stw	ra,24(sp)
 800198c:	df000515 	stw	fp,20(sp)
 8001990:	df000504 	addi	fp,sp,20
 8001994:	e13ffc15 	stw	r4,-16(fp)
 8001998:	e17ffd15 	stw	r5,-12(fp)
 800199c:	e1bffe15 	stw	r6,-8(fp)
 80019a0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 80019a4:	e0800217 	ldw	r2,8(fp)
 80019a8:	d8800015 	stw	r2,0(sp)
 80019ac:	e13ffc17 	ldw	r4,-16(fp)
 80019b0:	e17ffd17 	ldw	r5,-12(fp)
 80019b4:	e1bffe17 	ldw	r6,-8(fp)
 80019b8:	e1ffff17 	ldw	r7,-4(fp)
 80019bc:	8001b640 	call	8001b64 <alt_iic_isr_register>
}  
 80019c0:	e037883a 	mov	sp,fp
 80019c4:	dfc00117 	ldw	ra,4(sp)
 80019c8:	df000017 	ldw	fp,0(sp)
 80019cc:	dec00204 	addi	sp,sp,8
 80019d0:	f800283a 	ret

080019d4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 80019d4:	defff904 	addi	sp,sp,-28
 80019d8:	df000615 	stw	fp,24(sp)
 80019dc:	df000604 	addi	fp,sp,24
 80019e0:	e13ffe15 	stw	r4,-8(fp)
 80019e4:	e17fff15 	stw	r5,-4(fp)
 80019e8:	e0bfff17 	ldw	r2,-4(fp)
 80019ec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80019f0:	0005303a 	rdctl	r2,status
 80019f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80019f8:	e0fffb17 	ldw	r3,-20(fp)
 80019fc:	00bfff84 	movi	r2,-2
 8001a00:	1884703a 	and	r2,r3,r2
 8001a04:	1001703a 	wrctl	status,r2
  
  return context;
 8001a08:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8001a0c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8001a10:	e0bffa17 	ldw	r2,-24(fp)
 8001a14:	00c00044 	movi	r3,1
 8001a18:	1884983a 	sll	r2,r3,r2
 8001a1c:	1007883a 	mov	r3,r2
 8001a20:	00820034 	movhi	r2,2048
 8001a24:	1095d204 	addi	r2,r2,22344
 8001a28:	10800017 	ldw	r2,0(r2)
 8001a2c:	1886b03a 	or	r3,r3,r2
 8001a30:	00820034 	movhi	r2,2048
 8001a34:	1095d204 	addi	r2,r2,22344
 8001a38:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8001a3c:	00820034 	movhi	r2,2048
 8001a40:	1095d204 	addi	r2,r2,22344
 8001a44:	10800017 	ldw	r2,0(r2)
 8001a48:	100170fa 	wrctl	ienable,r2
 8001a4c:	e0bffc17 	ldw	r2,-16(fp)
 8001a50:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8001a54:	e0bffd17 	ldw	r2,-12(fp)
 8001a58:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8001a5c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8001a60:	0001883a 	nop
}
 8001a64:	e037883a 	mov	sp,fp
 8001a68:	df000017 	ldw	fp,0(sp)
 8001a6c:	dec00104 	addi	sp,sp,4
 8001a70:	f800283a 	ret

08001a74 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8001a74:	defff904 	addi	sp,sp,-28
 8001a78:	df000615 	stw	fp,24(sp)
 8001a7c:	df000604 	addi	fp,sp,24
 8001a80:	e13ffe15 	stw	r4,-8(fp)
 8001a84:	e17fff15 	stw	r5,-4(fp)
 8001a88:	e0bfff17 	ldw	r2,-4(fp)
 8001a8c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8001a90:	0005303a 	rdctl	r2,status
 8001a94:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8001a98:	e0fffb17 	ldw	r3,-20(fp)
 8001a9c:	00bfff84 	movi	r2,-2
 8001aa0:	1884703a 	and	r2,r3,r2
 8001aa4:	1001703a 	wrctl	status,r2
  
  return context;
 8001aa8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8001aac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8001ab0:	e0bffa17 	ldw	r2,-24(fp)
 8001ab4:	00c00044 	movi	r3,1
 8001ab8:	1884983a 	sll	r2,r3,r2
 8001abc:	0084303a 	nor	r2,zero,r2
 8001ac0:	1007883a 	mov	r3,r2
 8001ac4:	00820034 	movhi	r2,2048
 8001ac8:	1095d204 	addi	r2,r2,22344
 8001acc:	10800017 	ldw	r2,0(r2)
 8001ad0:	1886703a 	and	r3,r3,r2
 8001ad4:	00820034 	movhi	r2,2048
 8001ad8:	1095d204 	addi	r2,r2,22344
 8001adc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8001ae0:	00820034 	movhi	r2,2048
 8001ae4:	1095d204 	addi	r2,r2,22344
 8001ae8:	10800017 	ldw	r2,0(r2)
 8001aec:	100170fa 	wrctl	ienable,r2
 8001af0:	e0bffc17 	ldw	r2,-16(fp)
 8001af4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8001af8:	e0bffd17 	ldw	r2,-12(fp)
 8001afc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8001b00:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8001b04:	0001883a 	nop
}
 8001b08:	e037883a 	mov	sp,fp
 8001b0c:	df000017 	ldw	fp,0(sp)
 8001b10:	dec00104 	addi	sp,sp,4
 8001b14:	f800283a 	ret

08001b18 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8001b18:	defffc04 	addi	sp,sp,-16
 8001b1c:	df000315 	stw	fp,12(sp)
 8001b20:	df000304 	addi	fp,sp,12
 8001b24:	e13ffe15 	stw	r4,-8(fp)
 8001b28:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8001b2c:	000530fa 	rdctl	r2,ienable
 8001b30:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8001b34:	e0bfff17 	ldw	r2,-4(fp)
 8001b38:	00c00044 	movi	r3,1
 8001b3c:	1884983a 	sll	r2,r3,r2
 8001b40:	1007883a 	mov	r3,r2
 8001b44:	e0bffd17 	ldw	r2,-12(fp)
 8001b48:	1884703a 	and	r2,r3,r2
 8001b4c:	1004c03a 	cmpne	r2,r2,zero
 8001b50:	10803fcc 	andi	r2,r2,255
}
 8001b54:	e037883a 	mov	sp,fp
 8001b58:	df000017 	ldw	fp,0(sp)
 8001b5c:	dec00104 	addi	sp,sp,4
 8001b60:	f800283a 	ret

08001b64 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8001b64:	defff504 	addi	sp,sp,-44
 8001b68:	dfc00a15 	stw	ra,40(sp)
 8001b6c:	df000915 	stw	fp,36(sp)
 8001b70:	df000904 	addi	fp,sp,36
 8001b74:	e13ffc15 	stw	r4,-16(fp)
 8001b78:	e17ffd15 	stw	r5,-12(fp)
 8001b7c:	e1bffe15 	stw	r6,-8(fp)
 8001b80:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8001b84:	00bffa84 	movi	r2,-22
 8001b88:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8001b8c:	e0bffd17 	ldw	r2,-12(fp)
 8001b90:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8001b94:	e0bff817 	ldw	r2,-32(fp)
 8001b98:	10800808 	cmpgei	r2,r2,32
 8001b9c:	1000271e 	bne	r2,zero,8001c3c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8001ba0:	0005303a 	rdctl	r2,status
 8001ba4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8001ba8:	e0fffa17 	ldw	r3,-24(fp)
 8001bac:	00bfff84 	movi	r2,-2
 8001bb0:	1884703a 	and	r2,r3,r2
 8001bb4:	1001703a 	wrctl	status,r2
  
  return context;
 8001bb8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8001bbc:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 8001bc0:	00820034 	movhi	r2,2048
 8001bc4:	1095d604 	addi	r2,r2,22360
 8001bc8:	e0fff817 	ldw	r3,-32(fp)
 8001bcc:	180690fa 	slli	r3,r3,3
 8001bd0:	10c5883a 	add	r2,r2,r3
 8001bd4:	e0fffe17 	ldw	r3,-8(fp)
 8001bd8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8001bdc:	00820034 	movhi	r2,2048
 8001be0:	1095d604 	addi	r2,r2,22360
 8001be4:	e0fff817 	ldw	r3,-32(fp)
 8001be8:	180690fa 	slli	r3,r3,3
 8001bec:	10c5883a 	add	r2,r2,r3
 8001bf0:	10800104 	addi	r2,r2,4
 8001bf4:	e0ffff17 	ldw	r3,-4(fp)
 8001bf8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8001bfc:	e0bffe17 	ldw	r2,-8(fp)
 8001c00:	10000526 	beq	r2,zero,8001c18 <alt_iic_isr_register+0xb4>
 8001c04:	e0bff817 	ldw	r2,-32(fp)
 8001c08:	e13ffc17 	ldw	r4,-16(fp)
 8001c0c:	100b883a 	mov	r5,r2
 8001c10:	80019d40 	call	80019d4 <alt_ic_irq_enable>
 8001c14:	00000406 	br	8001c28 <alt_iic_isr_register+0xc4>
 8001c18:	e0bff817 	ldw	r2,-32(fp)
 8001c1c:	e13ffc17 	ldw	r4,-16(fp)
 8001c20:	100b883a 	mov	r5,r2
 8001c24:	8001a740 	call	8001a74 <alt_ic_irq_disable>
 8001c28:	e0bff715 	stw	r2,-36(fp)
 8001c2c:	e0bff917 	ldw	r2,-28(fp)
 8001c30:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8001c34:	e0bffb17 	ldw	r2,-20(fp)
 8001c38:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8001c3c:	e0bff717 	ldw	r2,-36(fp)
}
 8001c40:	e037883a 	mov	sp,fp
 8001c44:	dfc00117 	ldw	ra,4(sp)
 8001c48:	df000017 	ldw	fp,0(sp)
 8001c4c:	dec00204 	addi	sp,sp,8
 8001c50:	f800283a 	ret

08001c54 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8001c54:	defff904 	addi	sp,sp,-28
 8001c58:	dfc00615 	stw	ra,24(sp)
 8001c5c:	df000515 	stw	fp,20(sp)
 8001c60:	df000504 	addi	fp,sp,20
 8001c64:	e13ffc15 	stw	r4,-16(fp)
 8001c68:	e17ffd15 	stw	r5,-12(fp)
 8001c6c:	e1bffe15 	stw	r6,-8(fp)
 8001c70:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8001c74:	e13ffd17 	ldw	r4,-12(fp)
 8001c78:	e17ffe17 	ldw	r5,-8(fp)
 8001c7c:	e1bfff17 	ldw	r6,-4(fp)
 8001c80:	8001ea80 	call	8001ea8 <open>
 8001c84:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8001c88:	e0bffb17 	ldw	r2,-20(fp)
 8001c8c:	10001c16 	blt	r2,zero,8001d00 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 8001c90:	00820034 	movhi	r2,2048
 8001c94:	108eba04 	addi	r2,r2,15080
 8001c98:	e0fffb17 	ldw	r3,-20(fp)
 8001c9c:	18c00324 	muli	r3,r3,12
 8001ca0:	10c5883a 	add	r2,r2,r3
 8001ca4:	10c00017 	ldw	r3,0(r2)
 8001ca8:	e0bffc17 	ldw	r2,-16(fp)
 8001cac:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8001cb0:	00820034 	movhi	r2,2048
 8001cb4:	108eba04 	addi	r2,r2,15080
 8001cb8:	e0fffb17 	ldw	r3,-20(fp)
 8001cbc:	18c00324 	muli	r3,r3,12
 8001cc0:	10c5883a 	add	r2,r2,r3
 8001cc4:	10800104 	addi	r2,r2,4
 8001cc8:	10c00017 	ldw	r3,0(r2)
 8001ccc:	e0bffc17 	ldw	r2,-16(fp)
 8001cd0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8001cd4:	00820034 	movhi	r2,2048
 8001cd8:	108eba04 	addi	r2,r2,15080
 8001cdc:	e0fffb17 	ldw	r3,-20(fp)
 8001ce0:	18c00324 	muli	r3,r3,12
 8001ce4:	10c5883a 	add	r2,r2,r3
 8001ce8:	10800204 	addi	r2,r2,8
 8001cec:	10c00017 	ldw	r3,0(r2)
 8001cf0:	e0bffc17 	ldw	r2,-16(fp)
 8001cf4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8001cf8:	e13ffb17 	ldw	r4,-20(fp)
 8001cfc:	80020000 	call	8002000 <alt_release_fd>
  }
} 
 8001d00:	e037883a 	mov	sp,fp
 8001d04:	dfc00117 	ldw	ra,4(sp)
 8001d08:	df000017 	ldw	fp,0(sp)
 8001d0c:	dec00204 	addi	sp,sp,8
 8001d10:	f800283a 	ret

08001d14 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8001d14:	defffb04 	addi	sp,sp,-20
 8001d18:	dfc00415 	stw	ra,16(sp)
 8001d1c:	df000315 	stw	fp,12(sp)
 8001d20:	df000304 	addi	fp,sp,12
 8001d24:	e13ffd15 	stw	r4,-12(fp)
 8001d28:	e17ffe15 	stw	r5,-8(fp)
 8001d2c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8001d30:	01020034 	movhi	r4,2048
 8001d34:	210ebd04 	addi	r4,r4,15092
 8001d38:	e17ffd17 	ldw	r5,-12(fp)
 8001d3c:	01800044 	movi	r6,1
 8001d40:	01c07fc4 	movi	r7,511
 8001d44:	8001c540 	call	8001c54 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8001d48:	01020034 	movhi	r4,2048
 8001d4c:	210eba04 	addi	r4,r4,15080
 8001d50:	e17ffe17 	ldw	r5,-8(fp)
 8001d54:	000d883a 	mov	r6,zero
 8001d58:	01c07fc4 	movi	r7,511
 8001d5c:	8001c540 	call	8001c54 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8001d60:	01020034 	movhi	r4,2048
 8001d64:	210ec004 	addi	r4,r4,15104
 8001d68:	e17fff17 	ldw	r5,-4(fp)
 8001d6c:	01800044 	movi	r6,1
 8001d70:	01c07fc4 	movi	r7,511
 8001d74:	8001c540 	call	8001c54 <alt_open_fd>
}  
 8001d78:	e037883a 	mov	sp,fp
 8001d7c:	dfc00117 	ldw	ra,4(sp)
 8001d80:	df000017 	ldw	fp,0(sp)
 8001d84:	dec00204 	addi	sp,sp,8
 8001d88:	f800283a 	ret

08001d8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8001d8c:	defffe04 	addi	sp,sp,-8
 8001d90:	dfc00115 	stw	ra,4(sp)
 8001d94:	df000015 	stw	fp,0(sp)
 8001d98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8001d9c:	00820034 	movhi	r2,2048
 8001da0:	10902804 	addi	r2,r2,16544
 8001da4:	10800017 	ldw	r2,0(r2)
 8001da8:	10000526 	beq	r2,zero,8001dc0 <alt_get_errno+0x34>
 8001dac:	00820034 	movhi	r2,2048
 8001db0:	10902804 	addi	r2,r2,16544
 8001db4:	10800017 	ldw	r2,0(r2)
 8001db8:	103ee83a 	callr	r2
 8001dbc:	00000206 	br	8001dc8 <alt_get_errno+0x3c>
 8001dc0:	00820034 	movhi	r2,2048
 8001dc4:	1095d504 	addi	r2,r2,22356
}
 8001dc8:	e037883a 	mov	sp,fp
 8001dcc:	dfc00117 	ldw	ra,4(sp)
 8001dd0:	df000017 	ldw	fp,0(sp)
 8001dd4:	dec00204 	addi	sp,sp,8
 8001dd8:	f800283a 	ret

08001ddc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8001ddc:	defffd04 	addi	sp,sp,-12
 8001de0:	df000215 	stw	fp,8(sp)
 8001de4:	df000204 	addi	fp,sp,8
 8001de8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8001dec:	e0bfff17 	ldw	r2,-4(fp)
 8001df0:	10800217 	ldw	r2,8(r2)
 8001df4:	10d00034 	orhi	r3,r2,16384
 8001df8:	e0bfff17 	ldw	r2,-4(fp)
 8001dfc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8001e00:	e03ffe15 	stw	zero,-8(fp)
 8001e04:	00001d06 	br	8001e7c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8001e08:	00820034 	movhi	r2,2048
 8001e0c:	108eba04 	addi	r2,r2,15080
 8001e10:	e0fffe17 	ldw	r3,-8(fp)
 8001e14:	18c00324 	muli	r3,r3,12
 8001e18:	10c5883a 	add	r2,r2,r3
 8001e1c:	10c00017 	ldw	r3,0(r2)
 8001e20:	e0bfff17 	ldw	r2,-4(fp)
 8001e24:	10800017 	ldw	r2,0(r2)
 8001e28:	1880111e 	bne	r3,r2,8001e70 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8001e2c:	00820034 	movhi	r2,2048
 8001e30:	108eba04 	addi	r2,r2,15080
 8001e34:	e0fffe17 	ldw	r3,-8(fp)
 8001e38:	18c00324 	muli	r3,r3,12
 8001e3c:	10c5883a 	add	r2,r2,r3
 8001e40:	10800204 	addi	r2,r2,8
 8001e44:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8001e48:	1000090e 	bge	r2,zero,8001e70 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8001e4c:	e0bffe17 	ldw	r2,-8(fp)
 8001e50:	10c00324 	muli	r3,r2,12
 8001e54:	00820034 	movhi	r2,2048
 8001e58:	108eba04 	addi	r2,r2,15080
 8001e5c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8001e60:	e0bfff17 	ldw	r2,-4(fp)
 8001e64:	18800226 	beq	r3,r2,8001e70 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8001e68:	00bffcc4 	movi	r2,-13
 8001e6c:	00000a06 	br	8001e98 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8001e70:	e0bffe17 	ldw	r2,-8(fp)
 8001e74:	10800044 	addi	r2,r2,1
 8001e78:	e0bffe15 	stw	r2,-8(fp)
 8001e7c:	00820034 	movhi	r2,2048
 8001e80:	10902704 	addi	r2,r2,16540
 8001e84:	10800017 	ldw	r2,0(r2)
 8001e88:	1007883a 	mov	r3,r2
 8001e8c:	e0bffe17 	ldw	r2,-8(fp)
 8001e90:	18bfdd2e 	bgeu	r3,r2,8001e08 <__alt_data_end+0xfc001e08>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8001e94:	0005883a 	mov	r2,zero
}
 8001e98:	e037883a 	mov	sp,fp
 8001e9c:	df000017 	ldw	fp,0(sp)
 8001ea0:	dec00104 	addi	sp,sp,4
 8001ea4:	f800283a 	ret

08001ea8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8001ea8:	defff604 	addi	sp,sp,-40
 8001eac:	dfc00915 	stw	ra,36(sp)
 8001eb0:	df000815 	stw	fp,32(sp)
 8001eb4:	df000804 	addi	fp,sp,32
 8001eb8:	e13ffd15 	stw	r4,-12(fp)
 8001ebc:	e17ffe15 	stw	r5,-8(fp)
 8001ec0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8001ec4:	00bfffc4 	movi	r2,-1
 8001ec8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8001ecc:	00bffb44 	movi	r2,-19
 8001ed0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8001ed4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8001ed8:	e13ffd17 	ldw	r4,-12(fp)
 8001edc:	01420034 	movhi	r5,2048
 8001ee0:	29502504 	addi	r5,r5,16532
 8001ee4:	80018c40 	call	80018c4 <alt_find_dev>
 8001ee8:	e0bff815 	stw	r2,-32(fp)
 8001eec:	e0bff817 	ldw	r2,-32(fp)
 8001ef0:	1000051e 	bne	r2,zero,8001f08 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8001ef4:	e13ffd17 	ldw	r4,-12(fp)
 8001ef8:	800221c0 	call	800221c <alt_find_file>
 8001efc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8001f00:	00800044 	movi	r2,1
 8001f04:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8001f08:	e0bff817 	ldw	r2,-32(fp)
 8001f0c:	10002926 	beq	r2,zero,8001fb4 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8001f10:	e13ff817 	ldw	r4,-32(fp)
 8001f14:	80023300 	call	8002330 <alt_get_fd>
 8001f18:	e0bff915 	stw	r2,-28(fp)
 8001f1c:	e0bff917 	ldw	r2,-28(fp)
 8001f20:	1000030e 	bge	r2,zero,8001f30 <open+0x88>
    {
      status = index;
 8001f24:	e0bff917 	ldw	r2,-28(fp)
 8001f28:	e0bffa15 	stw	r2,-24(fp)
 8001f2c:	00002306 	br	8001fbc <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 8001f30:	e0bff917 	ldw	r2,-28(fp)
 8001f34:	10c00324 	muli	r3,r2,12
 8001f38:	00820034 	movhi	r2,2048
 8001f3c:	108eba04 	addi	r2,r2,15080
 8001f40:	1885883a 	add	r2,r3,r2
 8001f44:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8001f48:	e0fffe17 	ldw	r3,-8(fp)
 8001f4c:	00900034 	movhi	r2,16384
 8001f50:	10bfffc4 	addi	r2,r2,-1
 8001f54:	1886703a 	and	r3,r3,r2
 8001f58:	e0bffc17 	ldw	r2,-16(fp)
 8001f5c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8001f60:	e0bffb17 	ldw	r2,-20(fp)
 8001f64:	1000051e 	bne	r2,zero,8001f7c <open+0xd4>
 8001f68:	e13ffc17 	ldw	r4,-16(fp)
 8001f6c:	8001ddc0 	call	8001ddc <alt_file_locked>
 8001f70:	e0bffa15 	stw	r2,-24(fp)
 8001f74:	e0bffa17 	ldw	r2,-24(fp)
 8001f78:	10001016 	blt	r2,zero,8001fbc <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8001f7c:	e0bff817 	ldw	r2,-32(fp)
 8001f80:	10800317 	ldw	r2,12(r2)
 8001f84:	10000826 	beq	r2,zero,8001fa8 <open+0x100>
 8001f88:	e0bff817 	ldw	r2,-32(fp)
 8001f8c:	10800317 	ldw	r2,12(r2)
 8001f90:	e13ffc17 	ldw	r4,-16(fp)
 8001f94:	e17ffd17 	ldw	r5,-12(fp)
 8001f98:	e1bffe17 	ldw	r6,-8(fp)
 8001f9c:	e1ffff17 	ldw	r7,-4(fp)
 8001fa0:	103ee83a 	callr	r2
 8001fa4:	00000106 	br	8001fac <open+0x104>
 8001fa8:	0005883a 	mov	r2,zero
 8001fac:	e0bffa15 	stw	r2,-24(fp)
 8001fb0:	00000206 	br	8001fbc <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8001fb4:	00bffb44 	movi	r2,-19
 8001fb8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8001fbc:	e0bffa17 	ldw	r2,-24(fp)
 8001fc0:	1000090e 	bge	r2,zero,8001fe8 <open+0x140>
  {
    alt_release_fd (index);  
 8001fc4:	e13ff917 	ldw	r4,-28(fp)
 8001fc8:	80020000 	call	8002000 <alt_release_fd>
    ALT_ERRNO = -status;
 8001fcc:	8001d8c0 	call	8001d8c <alt_get_errno>
 8001fd0:	1007883a 	mov	r3,r2
 8001fd4:	e0bffa17 	ldw	r2,-24(fp)
 8001fd8:	0085c83a 	sub	r2,zero,r2
 8001fdc:	18800015 	stw	r2,0(r3)
    return -1;
 8001fe0:	00bfffc4 	movi	r2,-1
 8001fe4:	00000106 	br	8001fec <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 8001fe8:	e0bff917 	ldw	r2,-28(fp)
}
 8001fec:	e037883a 	mov	sp,fp
 8001ff0:	dfc00117 	ldw	ra,4(sp)
 8001ff4:	df000017 	ldw	fp,0(sp)
 8001ff8:	dec00204 	addi	sp,sp,8
 8001ffc:	f800283a 	ret

08002000 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8002000:	defffe04 	addi	sp,sp,-8
 8002004:	df000115 	stw	fp,4(sp)
 8002008:	df000104 	addi	fp,sp,4
 800200c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8002010:	e0bfff17 	ldw	r2,-4(fp)
 8002014:	108000d0 	cmplti	r2,r2,3
 8002018:	10000d1e 	bne	r2,zero,8002050 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 800201c:	00820034 	movhi	r2,2048
 8002020:	108eba04 	addi	r2,r2,15080
 8002024:	e0ffff17 	ldw	r3,-4(fp)
 8002028:	18c00324 	muli	r3,r3,12
 800202c:	10c5883a 	add	r2,r2,r3
 8002030:	10800204 	addi	r2,r2,8
 8002034:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8002038:	00820034 	movhi	r2,2048
 800203c:	108eba04 	addi	r2,r2,15080
 8002040:	e0ffff17 	ldw	r3,-4(fp)
 8002044:	18c00324 	muli	r3,r3,12
 8002048:	10c5883a 	add	r2,r2,r3
 800204c:	10000015 	stw	zero,0(r2)
  }
}
 8002050:	e037883a 	mov	sp,fp
 8002054:	df000017 	ldw	fp,0(sp)
 8002058:	dec00104 	addi	sp,sp,4
 800205c:	f800283a 	ret

08002060 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8002060:	defffa04 	addi	sp,sp,-24
 8002064:	df000515 	stw	fp,20(sp)
 8002068:	df000504 	addi	fp,sp,20
 800206c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8002070:	0005303a 	rdctl	r2,status
 8002074:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8002078:	e0fffc17 	ldw	r3,-16(fp)
 800207c:	00bfff84 	movi	r2,-2
 8002080:	1884703a 	and	r2,r3,r2
 8002084:	1001703a 	wrctl	status,r2
  
  return context;
 8002088:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800208c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8002090:	e0bfff17 	ldw	r2,-4(fp)
 8002094:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8002098:	e0bffd17 	ldw	r2,-12(fp)
 800209c:	10800017 	ldw	r2,0(r2)
 80020a0:	e0fffd17 	ldw	r3,-12(fp)
 80020a4:	18c00117 	ldw	r3,4(r3)
 80020a8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 80020ac:	e0bffd17 	ldw	r2,-12(fp)
 80020b0:	10800117 	ldw	r2,4(r2)
 80020b4:	e0fffd17 	ldw	r3,-12(fp)
 80020b8:	18c00017 	ldw	r3,0(r3)
 80020bc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 80020c0:	e0bffd17 	ldw	r2,-12(fp)
 80020c4:	e0fffd17 	ldw	r3,-12(fp)
 80020c8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 80020cc:	e0bffd17 	ldw	r2,-12(fp)
 80020d0:	e0fffd17 	ldw	r3,-12(fp)
 80020d4:	10c00015 	stw	r3,0(r2)
 80020d8:	e0bffb17 	ldw	r2,-20(fp)
 80020dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80020e0:	e0bffe17 	ldw	r2,-8(fp)
 80020e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 80020e8:	e037883a 	mov	sp,fp
 80020ec:	df000017 	ldw	fp,0(sp)
 80020f0:	dec00104 	addi	sp,sp,4
 80020f4:	f800283a 	ret

080020f8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 80020f8:	defffb04 	addi	sp,sp,-20
 80020fc:	dfc00415 	stw	ra,16(sp)
 8002100:	df000315 	stw	fp,12(sp)
 8002104:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8002108:	d0a00717 	ldw	r2,-32740(gp)
 800210c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8002110:	d0a5b117 	ldw	r2,-26940(gp)
 8002114:	10800044 	addi	r2,r2,1
 8002118:	d0a5b115 	stw	r2,-26940(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800211c:	00002e06 	br	80021d8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8002120:	e0bffd17 	ldw	r2,-12(fp)
 8002124:	10800017 	ldw	r2,0(r2)
 8002128:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800212c:	e0bffd17 	ldw	r2,-12(fp)
 8002130:	10800403 	ldbu	r2,16(r2)
 8002134:	10803fcc 	andi	r2,r2,255
 8002138:	10000426 	beq	r2,zero,800214c <alt_tick+0x54>
 800213c:	d0a5b117 	ldw	r2,-26940(gp)
 8002140:	1000021e 	bne	r2,zero,800214c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8002144:	e0bffd17 	ldw	r2,-12(fp)
 8002148:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800214c:	e0bffd17 	ldw	r2,-12(fp)
 8002150:	10800217 	ldw	r2,8(r2)
 8002154:	d0e5b117 	ldw	r3,-26940(gp)
 8002158:	18801d36 	bltu	r3,r2,80021d0 <alt_tick+0xd8>
 800215c:	e0bffd17 	ldw	r2,-12(fp)
 8002160:	10800403 	ldbu	r2,16(r2)
 8002164:	10803fcc 	andi	r2,r2,255
 8002168:	1000191e 	bne	r2,zero,80021d0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800216c:	e0bffd17 	ldw	r2,-12(fp)
 8002170:	10800317 	ldw	r2,12(r2)
 8002174:	e0fffd17 	ldw	r3,-12(fp)
 8002178:	18c00517 	ldw	r3,20(r3)
 800217c:	1809883a 	mov	r4,r3
 8002180:	103ee83a 	callr	r2
 8002184:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8002188:	e0bfff17 	ldw	r2,-4(fp)
 800218c:	1000031e 	bne	r2,zero,800219c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8002190:	e13ffd17 	ldw	r4,-12(fp)
 8002194:	80020600 	call	8002060 <alt_alarm_stop>
 8002198:	00000d06 	br	80021d0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800219c:	e0bffd17 	ldw	r2,-12(fp)
 80021a0:	10c00217 	ldw	r3,8(r2)
 80021a4:	e0bfff17 	ldw	r2,-4(fp)
 80021a8:	1887883a 	add	r3,r3,r2
 80021ac:	e0bffd17 	ldw	r2,-12(fp)
 80021b0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 80021b4:	e0bffd17 	ldw	r2,-12(fp)
 80021b8:	10c00217 	ldw	r3,8(r2)
 80021bc:	d0a5b117 	ldw	r2,-26940(gp)
 80021c0:	1880032e 	bgeu	r3,r2,80021d0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 80021c4:	e0bffd17 	ldw	r2,-12(fp)
 80021c8:	00c00044 	movi	r3,1
 80021cc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 80021d0:	e0bffe17 	ldw	r2,-8(fp)
 80021d4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80021d8:	e0fffd17 	ldw	r3,-12(fp)
 80021dc:	d0a00704 	addi	r2,gp,-32740
 80021e0:	18bfcf1e 	bne	r3,r2,8002120 <__alt_data_end+0xfc002120>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 80021e4:	0001883a 	nop
}
 80021e8:	e037883a 	mov	sp,fp
 80021ec:	dfc00117 	ldw	ra,4(sp)
 80021f0:	df000017 	ldw	fp,0(sp)
 80021f4:	dec00204 	addi	sp,sp,8
 80021f8:	f800283a 	ret

080021fc <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 80021fc:	deffff04 	addi	sp,sp,-4
 8002200:	df000015 	stw	fp,0(sp)
 8002204:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8002208:	000170fa 	wrctl	ienable,zero
}
 800220c:	e037883a 	mov	sp,fp
 8002210:	df000017 	ldw	fp,0(sp)
 8002214:	dec00104 	addi	sp,sp,4
 8002218:	f800283a 	ret

0800221c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800221c:	defffb04 	addi	sp,sp,-20
 8002220:	dfc00415 	stw	ra,16(sp)
 8002224:	df000315 	stw	fp,12(sp)
 8002228:	df000304 	addi	fp,sp,12
 800222c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8002230:	00820034 	movhi	r2,2048
 8002234:	10902304 	addi	r2,r2,16524
 8002238:	10800017 	ldw	r2,0(r2)
 800223c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8002240:	00003106 	br	8002308 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 8002244:	e0bffd17 	ldw	r2,-12(fp)
 8002248:	10800217 	ldw	r2,8(r2)
 800224c:	1009883a 	mov	r4,r2
 8002250:	80026700 	call	8002670 <strlen>
 8002254:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8002258:	e0bffd17 	ldw	r2,-12(fp)
 800225c:	10c00217 	ldw	r3,8(r2)
 8002260:	e0bffe17 	ldw	r2,-8(fp)
 8002264:	10bfffc4 	addi	r2,r2,-1
 8002268:	1885883a 	add	r2,r3,r2
 800226c:	10800003 	ldbu	r2,0(r2)
 8002270:	10803fcc 	andi	r2,r2,255
 8002274:	1080201c 	xori	r2,r2,128
 8002278:	10bfe004 	addi	r2,r2,-128
 800227c:	10800bd8 	cmpnei	r2,r2,47
 8002280:	1000031e 	bne	r2,zero,8002290 <alt_find_file+0x74>
    {
      len -= 1;
 8002284:	e0bffe17 	ldw	r2,-8(fp)
 8002288:	10bfffc4 	addi	r2,r2,-1
 800228c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8002290:	e0bffe17 	ldw	r2,-8(fp)
 8002294:	e0ffff17 	ldw	r3,-4(fp)
 8002298:	1885883a 	add	r2,r3,r2
 800229c:	10800003 	ldbu	r2,0(r2)
 80022a0:	10803fcc 	andi	r2,r2,255
 80022a4:	1080201c 	xori	r2,r2,128
 80022a8:	10bfe004 	addi	r2,r2,-128
 80022ac:	10800be0 	cmpeqi	r2,r2,47
 80022b0:	1000081e 	bne	r2,zero,80022d4 <alt_find_file+0xb8>
 80022b4:	e0bffe17 	ldw	r2,-8(fp)
 80022b8:	e0ffff17 	ldw	r3,-4(fp)
 80022bc:	1885883a 	add	r2,r3,r2
 80022c0:	10800003 	ldbu	r2,0(r2)
 80022c4:	10803fcc 	andi	r2,r2,255
 80022c8:	1080201c 	xori	r2,r2,128
 80022cc:	10bfe004 	addi	r2,r2,-128
 80022d0:	10000a1e 	bne	r2,zero,80022fc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 80022d4:	e0bffd17 	ldw	r2,-12(fp)
 80022d8:	10c00217 	ldw	r3,8(r2)
 80022dc:	e0bffe17 	ldw	r2,-8(fp)
 80022e0:	1809883a 	mov	r4,r3
 80022e4:	e17fff17 	ldw	r5,-4(fp)
 80022e8:	100d883a 	mov	r6,r2
 80022ec:	80024bc0 	call	80024bc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80022f0:	1000021e 	bne	r2,zero,80022fc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 80022f4:	e0bffd17 	ldw	r2,-12(fp)
 80022f8:	00000806 	br	800231c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 80022fc:	e0bffd17 	ldw	r2,-12(fp)
 8002300:	10800017 	ldw	r2,0(r2)
 8002304:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8002308:	e0fffd17 	ldw	r3,-12(fp)
 800230c:	00820034 	movhi	r2,2048
 8002310:	10902304 	addi	r2,r2,16524
 8002314:	18bfcb1e 	bne	r3,r2,8002244 <__alt_data_end+0xfc002244>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8002318:	0005883a 	mov	r2,zero
}
 800231c:	e037883a 	mov	sp,fp
 8002320:	dfc00117 	ldw	ra,4(sp)
 8002324:	df000017 	ldw	fp,0(sp)
 8002328:	dec00204 	addi	sp,sp,8
 800232c:	f800283a 	ret

08002330 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8002330:	defffc04 	addi	sp,sp,-16
 8002334:	df000315 	stw	fp,12(sp)
 8002338:	df000304 	addi	fp,sp,12
 800233c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8002340:	00bffa04 	movi	r2,-24
 8002344:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8002348:	e03ffd15 	stw	zero,-12(fp)
 800234c:	00001d06 	br	80023c4 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 8002350:	00820034 	movhi	r2,2048
 8002354:	108eba04 	addi	r2,r2,15080
 8002358:	e0fffd17 	ldw	r3,-12(fp)
 800235c:	18c00324 	muli	r3,r3,12
 8002360:	10c5883a 	add	r2,r2,r3
 8002364:	10800017 	ldw	r2,0(r2)
 8002368:	1000131e 	bne	r2,zero,80023b8 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 800236c:	00820034 	movhi	r2,2048
 8002370:	108eba04 	addi	r2,r2,15080
 8002374:	e0fffd17 	ldw	r3,-12(fp)
 8002378:	18c00324 	muli	r3,r3,12
 800237c:	10c5883a 	add	r2,r2,r3
 8002380:	e0ffff17 	ldw	r3,-4(fp)
 8002384:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8002388:	00820034 	movhi	r2,2048
 800238c:	10902704 	addi	r2,r2,16540
 8002390:	10c00017 	ldw	r3,0(r2)
 8002394:	e0bffd17 	ldw	r2,-12(fp)
 8002398:	1880040e 	bge	r3,r2,80023ac <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 800239c:	00820034 	movhi	r2,2048
 80023a0:	10902704 	addi	r2,r2,16540
 80023a4:	e0fffd17 	ldw	r3,-12(fp)
 80023a8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 80023ac:	e0bffd17 	ldw	r2,-12(fp)
 80023b0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 80023b4:	00000606 	br	80023d0 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80023b8:	e0bffd17 	ldw	r2,-12(fp)
 80023bc:	10800044 	addi	r2,r2,1
 80023c0:	e0bffd15 	stw	r2,-12(fp)
 80023c4:	e0bffd17 	ldw	r2,-12(fp)
 80023c8:	10800810 	cmplti	r2,r2,32
 80023cc:	103fe01e 	bne	r2,zero,8002350 <__alt_data_end+0xfc002350>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 80023d0:	e0bffe17 	ldw	r2,-8(fp)
}
 80023d4:	e037883a 	mov	sp,fp
 80023d8:	df000017 	ldw	fp,0(sp)
 80023dc:	dec00104 	addi	sp,sp,4
 80023e0:	f800283a 	ret

080023e4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 80023e4:	defffb04 	addi	sp,sp,-20
 80023e8:	df000415 	stw	fp,16(sp)
 80023ec:	df000404 	addi	fp,sp,16
 80023f0:	e13ffe15 	stw	r4,-8(fp)
 80023f4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 80023f8:	e0bfff17 	ldw	r2,-4(fp)
 80023fc:	10840070 	cmpltui	r2,r2,4097
 8002400:	1000021e 	bne	r2,zero,800240c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8002404:	00840004 	movi	r2,4096
 8002408:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 800240c:	e0fffe17 	ldw	r3,-8(fp)
 8002410:	e0bfff17 	ldw	r2,-4(fp)
 8002414:	1885883a 	add	r2,r3,r2
 8002418:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 800241c:	e0bffe17 	ldw	r2,-8(fp)
 8002420:	e0bffc15 	stw	r2,-16(fp)
 8002424:	00000506 	br	800243c <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8002428:	e0bffc17 	ldw	r2,-16(fp)
 800242c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8002430:	e0bffc17 	ldw	r2,-16(fp)
 8002434:	10800804 	addi	r2,r2,32
 8002438:	e0bffc15 	stw	r2,-16(fp)
 800243c:	e0fffc17 	ldw	r3,-16(fp)
 8002440:	e0bffd17 	ldw	r2,-12(fp)
 8002444:	18bff836 	bltu	r3,r2,8002428 <__alt_data_end+0xfc002428>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8002448:	e0bffe17 	ldw	r2,-8(fp)
 800244c:	108007cc 	andi	r2,r2,31
 8002450:	10000226 	beq	r2,zero,800245c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8002454:	e0bffc17 	ldw	r2,-16(fp)
 8002458:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 800245c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8002460:	e037883a 	mov	sp,fp
 8002464:	df000017 	ldw	fp,0(sp)
 8002468:	dec00104 	addi	sp,sp,4
 800246c:	f800283a 	ret

08002470 <atexit>:
 8002470:	200b883a 	mov	r5,r4
 8002474:	000d883a 	mov	r6,zero
 8002478:	0009883a 	mov	r4,zero
 800247c:	000f883a 	mov	r7,zero
 8002480:	80027081 	jmpi	8002708 <__register_exitproc>

08002484 <exit>:
 8002484:	defffe04 	addi	sp,sp,-8
 8002488:	000b883a 	mov	r5,zero
 800248c:	dc000015 	stw	r16,0(sp)
 8002490:	dfc00115 	stw	ra,4(sp)
 8002494:	2021883a 	mov	r16,r4
 8002498:	800281c0 	call	800281c <__call_exitprocs>
 800249c:	00820034 	movhi	r2,2048
 80024a0:	10902c04 	addi	r2,r2,16560
 80024a4:	11000017 	ldw	r4,0(r2)
 80024a8:	20800f17 	ldw	r2,60(r4)
 80024ac:	10000126 	beq	r2,zero,80024b4 <exit+0x30>
 80024b0:	103ee83a 	callr	r2
 80024b4:	8009883a 	mov	r4,r16
 80024b8:	80029b00 	call	80029b0 <_exit>

080024bc <memcmp>:
 80024bc:	01c000c4 	movi	r7,3
 80024c0:	3980192e 	bgeu	r7,r6,8002528 <memcmp+0x6c>
 80024c4:	2144b03a 	or	r2,r4,r5
 80024c8:	11c4703a 	and	r2,r2,r7
 80024cc:	10000f26 	beq	r2,zero,800250c <memcmp+0x50>
 80024d0:	20800003 	ldbu	r2,0(r4)
 80024d4:	28c00003 	ldbu	r3,0(r5)
 80024d8:	10c0151e 	bne	r2,r3,8002530 <memcmp+0x74>
 80024dc:	31bfff84 	addi	r6,r6,-2
 80024e0:	01ffffc4 	movi	r7,-1
 80024e4:	00000406 	br	80024f8 <memcmp+0x3c>
 80024e8:	20800003 	ldbu	r2,0(r4)
 80024ec:	28c00003 	ldbu	r3,0(r5)
 80024f0:	31bfffc4 	addi	r6,r6,-1
 80024f4:	10c00e1e 	bne	r2,r3,8002530 <memcmp+0x74>
 80024f8:	21000044 	addi	r4,r4,1
 80024fc:	29400044 	addi	r5,r5,1
 8002500:	31fff91e 	bne	r6,r7,80024e8 <__alt_data_end+0xfc0024e8>
 8002504:	0005883a 	mov	r2,zero
 8002508:	f800283a 	ret
 800250c:	20c00017 	ldw	r3,0(r4)
 8002510:	28800017 	ldw	r2,0(r5)
 8002514:	1880041e 	bne	r3,r2,8002528 <memcmp+0x6c>
 8002518:	31bfff04 	addi	r6,r6,-4
 800251c:	21000104 	addi	r4,r4,4
 8002520:	29400104 	addi	r5,r5,4
 8002524:	39bff936 	bltu	r7,r6,800250c <__alt_data_end+0xfc00250c>
 8002528:	303fe91e 	bne	r6,zero,80024d0 <__alt_data_end+0xfc0024d0>
 800252c:	003ff506 	br	8002504 <__alt_data_end+0xfc002504>
 8002530:	10c5c83a 	sub	r2,r2,r3
 8002534:	f800283a 	ret

08002538 <memcpy>:
 8002538:	deffff04 	addi	sp,sp,-4
 800253c:	dc000015 	stw	r16,0(sp)
 8002540:	00c003c4 	movi	r3,15
 8002544:	2005883a 	mov	r2,r4
 8002548:	1980432e 	bgeu	r3,r6,8002658 <memcpy+0x120>
 800254c:	2146b03a 	or	r3,r4,r5
 8002550:	18c000cc 	andi	r3,r3,3
 8002554:	1800421e 	bne	r3,zero,8002660 <memcpy+0x128>
 8002558:	343ffc04 	addi	r16,r6,-16
 800255c:	8020d13a 	srli	r16,r16,4
 8002560:	28c00104 	addi	r3,r5,4
 8002564:	23400104 	addi	r13,r4,4
 8002568:	801e913a 	slli	r15,r16,4
 800256c:	2b000204 	addi	r12,r5,8
 8002570:	22c00204 	addi	r11,r4,8
 8002574:	7bc00504 	addi	r15,r15,20
 8002578:	2a800304 	addi	r10,r5,12
 800257c:	22400304 	addi	r9,r4,12
 8002580:	2bdf883a 	add	r15,r5,r15
 8002584:	2811883a 	mov	r8,r5
 8002588:	200f883a 	mov	r7,r4
 800258c:	41000017 	ldw	r4,0(r8)
 8002590:	39c00404 	addi	r7,r7,16
 8002594:	18c00404 	addi	r3,r3,16
 8002598:	393ffc15 	stw	r4,-16(r7)
 800259c:	1bbffc17 	ldw	r14,-16(r3)
 80025a0:	6b400404 	addi	r13,r13,16
 80025a4:	5ac00404 	addi	r11,r11,16
 80025a8:	6bbffc15 	stw	r14,-16(r13)
 80025ac:	63800017 	ldw	r14,0(r12)
 80025b0:	4a400404 	addi	r9,r9,16
 80025b4:	42000404 	addi	r8,r8,16
 80025b8:	5bbffc15 	stw	r14,-16(r11)
 80025bc:	53800017 	ldw	r14,0(r10)
 80025c0:	63000404 	addi	r12,r12,16
 80025c4:	52800404 	addi	r10,r10,16
 80025c8:	4bbffc15 	stw	r14,-16(r9)
 80025cc:	1bffef1e 	bne	r3,r15,800258c <__alt_data_end+0xfc00258c>
 80025d0:	81c00044 	addi	r7,r16,1
 80025d4:	380e913a 	slli	r7,r7,4
 80025d8:	310003cc 	andi	r4,r6,15
 80025dc:	02c000c4 	movi	r11,3
 80025e0:	11c7883a 	add	r3,r2,r7
 80025e4:	29cb883a 	add	r5,r5,r7
 80025e8:	59001f2e 	bgeu	r11,r4,8002668 <memcpy+0x130>
 80025ec:	1813883a 	mov	r9,r3
 80025f0:	2811883a 	mov	r8,r5
 80025f4:	200f883a 	mov	r7,r4
 80025f8:	42800017 	ldw	r10,0(r8)
 80025fc:	4a400104 	addi	r9,r9,4
 8002600:	39ffff04 	addi	r7,r7,-4
 8002604:	4abfff15 	stw	r10,-4(r9)
 8002608:	42000104 	addi	r8,r8,4
 800260c:	59fffa36 	bltu	r11,r7,80025f8 <__alt_data_end+0xfc0025f8>
 8002610:	213fff04 	addi	r4,r4,-4
 8002614:	2008d0ba 	srli	r4,r4,2
 8002618:	318000cc 	andi	r6,r6,3
 800261c:	21000044 	addi	r4,r4,1
 8002620:	2109883a 	add	r4,r4,r4
 8002624:	2109883a 	add	r4,r4,r4
 8002628:	1907883a 	add	r3,r3,r4
 800262c:	290b883a 	add	r5,r5,r4
 8002630:	30000626 	beq	r6,zero,800264c <memcpy+0x114>
 8002634:	198d883a 	add	r6,r3,r6
 8002638:	29c00003 	ldbu	r7,0(r5)
 800263c:	18c00044 	addi	r3,r3,1
 8002640:	29400044 	addi	r5,r5,1
 8002644:	19ffffc5 	stb	r7,-1(r3)
 8002648:	19bffb1e 	bne	r3,r6,8002638 <__alt_data_end+0xfc002638>
 800264c:	dc000017 	ldw	r16,0(sp)
 8002650:	dec00104 	addi	sp,sp,4
 8002654:	f800283a 	ret
 8002658:	2007883a 	mov	r3,r4
 800265c:	003ff406 	br	8002630 <__alt_data_end+0xfc002630>
 8002660:	2007883a 	mov	r3,r4
 8002664:	003ff306 	br	8002634 <__alt_data_end+0xfc002634>
 8002668:	200d883a 	mov	r6,r4
 800266c:	003ff006 	br	8002630 <__alt_data_end+0xfc002630>

08002670 <strlen>:
 8002670:	208000cc 	andi	r2,r4,3
 8002674:	10002026 	beq	r2,zero,80026f8 <strlen+0x88>
 8002678:	20800007 	ldb	r2,0(r4)
 800267c:	10002026 	beq	r2,zero,8002700 <strlen+0x90>
 8002680:	2005883a 	mov	r2,r4
 8002684:	00000206 	br	8002690 <strlen+0x20>
 8002688:	10c00007 	ldb	r3,0(r2)
 800268c:	18001826 	beq	r3,zero,80026f0 <strlen+0x80>
 8002690:	10800044 	addi	r2,r2,1
 8002694:	10c000cc 	andi	r3,r2,3
 8002698:	183ffb1e 	bne	r3,zero,8002688 <__alt_data_end+0xfc002688>
 800269c:	10c00017 	ldw	r3,0(r2)
 80026a0:	01ffbff4 	movhi	r7,65279
 80026a4:	39ffbfc4 	addi	r7,r7,-257
 80026a8:	00ca303a 	nor	r5,zero,r3
 80026ac:	01a02074 	movhi	r6,32897
 80026b0:	19c7883a 	add	r3,r3,r7
 80026b4:	31a02004 	addi	r6,r6,-32640
 80026b8:	1946703a 	and	r3,r3,r5
 80026bc:	1986703a 	and	r3,r3,r6
 80026c0:	1800091e 	bne	r3,zero,80026e8 <strlen+0x78>
 80026c4:	10800104 	addi	r2,r2,4
 80026c8:	10c00017 	ldw	r3,0(r2)
 80026cc:	19cb883a 	add	r5,r3,r7
 80026d0:	00c6303a 	nor	r3,zero,r3
 80026d4:	28c6703a 	and	r3,r5,r3
 80026d8:	1986703a 	and	r3,r3,r6
 80026dc:	183ff926 	beq	r3,zero,80026c4 <__alt_data_end+0xfc0026c4>
 80026e0:	00000106 	br	80026e8 <strlen+0x78>
 80026e4:	10800044 	addi	r2,r2,1
 80026e8:	10c00007 	ldb	r3,0(r2)
 80026ec:	183ffd1e 	bne	r3,zero,80026e4 <__alt_data_end+0xfc0026e4>
 80026f0:	1105c83a 	sub	r2,r2,r4
 80026f4:	f800283a 	ret
 80026f8:	2005883a 	mov	r2,r4
 80026fc:	003fe706 	br	800269c <__alt_data_end+0xfc00269c>
 8002700:	0005883a 	mov	r2,zero
 8002704:	f800283a 	ret

08002708 <__register_exitproc>:
 8002708:	00820034 	movhi	r2,2048
 800270c:	defffa04 	addi	sp,sp,-24
 8002710:	10902c04 	addi	r2,r2,16560
 8002714:	dc000315 	stw	r16,12(sp)
 8002718:	14000017 	ldw	r16,0(r2)
 800271c:	dc400415 	stw	r17,16(sp)
 8002720:	dfc00515 	stw	ra,20(sp)
 8002724:	80805217 	ldw	r2,328(r16)
 8002728:	2023883a 	mov	r17,r4
 800272c:	10003626 	beq	r2,zero,8002808 <__register_exitproc+0x100>
 8002730:	10c00117 	ldw	r3,4(r2)
 8002734:	010007c4 	movi	r4,31
 8002738:	20c00e16 	blt	r4,r3,8002774 <__register_exitproc+0x6c>
 800273c:	1a400044 	addi	r9,r3,1
 8002740:	8800211e 	bne	r17,zero,80027c8 <__register_exitproc+0xc0>
 8002744:	18c00084 	addi	r3,r3,2
 8002748:	18c7883a 	add	r3,r3,r3
 800274c:	18c7883a 	add	r3,r3,r3
 8002750:	12400115 	stw	r9,4(r2)
 8002754:	10c7883a 	add	r3,r2,r3
 8002758:	19400015 	stw	r5,0(r3)
 800275c:	0005883a 	mov	r2,zero
 8002760:	dfc00517 	ldw	ra,20(sp)
 8002764:	dc400417 	ldw	r17,16(sp)
 8002768:	dc000317 	ldw	r16,12(sp)
 800276c:	dec00604 	addi	sp,sp,24
 8002770:	f800283a 	ret
 8002774:	00800034 	movhi	r2,0
 8002778:	10800004 	addi	r2,r2,0
 800277c:	10002526 	beq	r2,zero,8002814 <__register_exitproc+0x10c>
 8002780:	01006404 	movi	r4,400
 8002784:	d9400015 	stw	r5,0(sp)
 8002788:	d9800115 	stw	r6,4(sp)
 800278c:	d9c00215 	stw	r7,8(sp)
 8002790:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 8002794:	d9400017 	ldw	r5,0(sp)
 8002798:	d9800117 	ldw	r6,4(sp)
 800279c:	d9c00217 	ldw	r7,8(sp)
 80027a0:	10001c26 	beq	r2,zero,8002814 <__register_exitproc+0x10c>
 80027a4:	80c05217 	ldw	r3,328(r16)
 80027a8:	10000115 	stw	zero,4(r2)
 80027ac:	02400044 	movi	r9,1
 80027b0:	10c00015 	stw	r3,0(r2)
 80027b4:	80805215 	stw	r2,328(r16)
 80027b8:	10006215 	stw	zero,392(r2)
 80027bc:	10006315 	stw	zero,396(r2)
 80027c0:	0007883a 	mov	r3,zero
 80027c4:	883fdf26 	beq	r17,zero,8002744 <__alt_data_end+0xfc002744>
 80027c8:	18d1883a 	add	r8,r3,r3
 80027cc:	4211883a 	add	r8,r8,r8
 80027d0:	1211883a 	add	r8,r2,r8
 80027d4:	41802215 	stw	r6,136(r8)
 80027d8:	01000044 	movi	r4,1
 80027dc:	11806217 	ldw	r6,392(r2)
 80027e0:	20c8983a 	sll	r4,r4,r3
 80027e4:	310cb03a 	or	r6,r6,r4
 80027e8:	11806215 	stw	r6,392(r2)
 80027ec:	41c04215 	stw	r7,264(r8)
 80027f0:	01800084 	movi	r6,2
 80027f4:	89bfd31e 	bne	r17,r6,8002744 <__alt_data_end+0xfc002744>
 80027f8:	11806317 	ldw	r6,396(r2)
 80027fc:	3108b03a 	or	r4,r6,r4
 8002800:	11006315 	stw	r4,396(r2)
 8002804:	003fcf06 	br	8002744 <__alt_data_end+0xfc002744>
 8002808:	80805304 	addi	r2,r16,332
 800280c:	80805215 	stw	r2,328(r16)
 8002810:	003fc706 	br	8002730 <__alt_data_end+0xfc002730>
 8002814:	00bfffc4 	movi	r2,-1
 8002818:	003fd106 	br	8002760 <__alt_data_end+0xfc002760>

0800281c <__call_exitprocs>:
 800281c:	00820034 	movhi	r2,2048
 8002820:	10902c04 	addi	r2,r2,16560
 8002824:	10800017 	ldw	r2,0(r2)
 8002828:	defff404 	addi	sp,sp,-48
 800282c:	dd800815 	stw	r22,32(sp)
 8002830:	d8800015 	stw	r2,0(sp)
 8002834:	10805204 	addi	r2,r2,328
 8002838:	dd000615 	stw	r20,24(sp)
 800283c:	dc800415 	stw	r18,16(sp)
 8002840:	dfc00b15 	stw	ra,44(sp)
 8002844:	df000a15 	stw	fp,40(sp)
 8002848:	ddc00915 	stw	r23,36(sp)
 800284c:	dd400715 	stw	r21,28(sp)
 8002850:	dcc00515 	stw	r19,20(sp)
 8002854:	dc400315 	stw	r17,12(sp)
 8002858:	dc000215 	stw	r16,8(sp)
 800285c:	2025883a 	mov	r18,r4
 8002860:	2829883a 	mov	r20,r5
 8002864:	d8800115 	stw	r2,4(sp)
 8002868:	05bfffc4 	movi	r22,-1
 800286c:	d8800017 	ldw	r2,0(sp)
 8002870:	14c05217 	ldw	r19,328(r2)
 8002874:	98001d26 	beq	r19,zero,80028ec <__call_exitprocs+0xd0>
 8002878:	dd400117 	ldw	r21,4(sp)
 800287c:	98800117 	ldw	r2,4(r19)
 8002880:	173fffc4 	addi	fp,r2,-1
 8002884:	e0000d16 	blt	fp,zero,80028bc <__call_exitprocs+0xa0>
 8002888:	14000044 	addi	r16,r2,1
 800288c:	8421883a 	add	r16,r16,r16
 8002890:	8421883a 	add	r16,r16,r16
 8002894:	84402004 	addi	r17,r16,128
 8002898:	9c63883a 	add	r17,r19,r17
 800289c:	9c21883a 	add	r16,r19,r16
 80028a0:	a0001e26 	beq	r20,zero,800291c <__call_exitprocs+0x100>
 80028a4:	80804017 	ldw	r2,256(r16)
 80028a8:	15001c26 	beq	r2,r20,800291c <__call_exitprocs+0x100>
 80028ac:	e73fffc4 	addi	fp,fp,-1
 80028b0:	843fff04 	addi	r16,r16,-4
 80028b4:	8c7fff04 	addi	r17,r17,-4
 80028b8:	e5bff91e 	bne	fp,r22,80028a0 <__alt_data_end+0xfc0028a0>
 80028bc:	00800034 	movhi	r2,0
 80028c0:	10800004 	addi	r2,r2,0
 80028c4:	10000926 	beq	r2,zero,80028ec <__call_exitprocs+0xd0>
 80028c8:	98800117 	ldw	r2,4(r19)
 80028cc:	1000311e 	bne	r2,zero,8002994 <__call_exitprocs+0x178>
 80028d0:	98800017 	ldw	r2,0(r19)
 80028d4:	10003426 	beq	r2,zero,80029a8 <__call_exitprocs+0x18c>
 80028d8:	9809883a 	mov	r4,r19
 80028dc:	a8800015 	stw	r2,0(r21)
 80028e0:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 80028e4:	acc00017 	ldw	r19,0(r21)
 80028e8:	983fe41e 	bne	r19,zero,800287c <__alt_data_end+0xfc00287c>
 80028ec:	dfc00b17 	ldw	ra,44(sp)
 80028f0:	df000a17 	ldw	fp,40(sp)
 80028f4:	ddc00917 	ldw	r23,36(sp)
 80028f8:	dd800817 	ldw	r22,32(sp)
 80028fc:	dd400717 	ldw	r21,28(sp)
 8002900:	dd000617 	ldw	r20,24(sp)
 8002904:	dcc00517 	ldw	r19,20(sp)
 8002908:	dc800417 	ldw	r18,16(sp)
 800290c:	dc400317 	ldw	r17,12(sp)
 8002910:	dc000217 	ldw	r16,8(sp)
 8002914:	dec00c04 	addi	sp,sp,48
 8002918:	f800283a 	ret
 800291c:	98800117 	ldw	r2,4(r19)
 8002920:	80c00017 	ldw	r3,0(r16)
 8002924:	10bfffc4 	addi	r2,r2,-1
 8002928:	17001526 	beq	r2,fp,8002980 <__call_exitprocs+0x164>
 800292c:	80000015 	stw	zero,0(r16)
 8002930:	183fde26 	beq	r3,zero,80028ac <__alt_data_end+0xfc0028ac>
 8002934:	00800044 	movi	r2,1
 8002938:	1708983a 	sll	r4,r2,fp
 800293c:	98806217 	ldw	r2,392(r19)
 8002940:	9dc00117 	ldw	r23,4(r19)
 8002944:	2084703a 	and	r2,r4,r2
 8002948:	1000061e 	bne	r2,zero,8002964 <__call_exitprocs+0x148>
 800294c:	183ee83a 	callr	r3
 8002950:	98800117 	ldw	r2,4(r19)
 8002954:	15ffc51e 	bne	r2,r23,800286c <__alt_data_end+0xfc00286c>
 8002958:	a8800017 	ldw	r2,0(r21)
 800295c:	14ffd326 	beq	r2,r19,80028ac <__alt_data_end+0xfc0028ac>
 8002960:	003fc206 	br	800286c <__alt_data_end+0xfc00286c>
 8002964:	98806317 	ldw	r2,396(r19)
 8002968:	2084703a 	and	r2,r4,r2
 800296c:	1000061e 	bne	r2,zero,8002988 <__call_exitprocs+0x16c>
 8002970:	89400017 	ldw	r5,0(r17)
 8002974:	9009883a 	mov	r4,r18
 8002978:	183ee83a 	callr	r3
 800297c:	003ff406 	br	8002950 <__alt_data_end+0xfc002950>
 8002980:	9f000115 	stw	fp,4(r19)
 8002984:	003fea06 	br	8002930 <__alt_data_end+0xfc002930>
 8002988:	89000017 	ldw	r4,0(r17)
 800298c:	183ee83a 	callr	r3
 8002990:	003fef06 	br	8002950 <__alt_data_end+0xfc002950>
 8002994:	98800017 	ldw	r2,0(r19)
 8002998:	982b883a 	mov	r21,r19
 800299c:	1027883a 	mov	r19,r2
 80029a0:	983fb61e 	bne	r19,zero,800287c <__alt_data_end+0xfc00287c>
 80029a4:	003fd106 	br	80028ec <__alt_data_end+0xfc0028ec>
 80029a8:	0005883a 	mov	r2,zero
 80029ac:	003ffa06 	br	8002998 <__alt_data_end+0xfc002998>

080029b0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80029b0:	defffd04 	addi	sp,sp,-12
 80029b4:	df000215 	stw	fp,8(sp)
 80029b8:	df000204 	addi	fp,sp,8
 80029bc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 80029c0:	0001883a 	nop
 80029c4:	e0bfff17 	ldw	r2,-4(fp)
 80029c8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 80029cc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80029d0:	10000226 	beq	r2,zero,80029dc <_exit+0x2c>
    ALT_SIM_FAIL();
 80029d4:	002af070 	cmpltui	zero,zero,43969
 80029d8:	00000106 	br	80029e0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80029dc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80029e0:	003fff06 	br	80029e0 <__alt_data_end+0xfc0029e0>
