
addingSerialPort.elf:     file format elf32-littlenios2
addingSerialPort.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00005b04 memsz 0x00005b04 flags r-x
    LOAD off    0x00006b24 vaddr 0x08005b24 paddr 0x080075bc align 2**12
         filesz 0x00001a98 memsz 0x00001a98 flags rw-
    LOAD off    0x00009054 vaddr 0x08009054 paddr 0x08009054 align 2**12
         filesz 0x00000000 memsz 0x00000150 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005900  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000068  08005abc  08005abc  00006abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a98  08005b24  080075bc  00006b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000150  08009054  08009054  00009054  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  080091a4  080091a4  000085bc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000085bc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000990  00000000  00000000  000085e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00016766  00000000  00000000  00008f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005fe4  00000000  00000000  0001f6d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006811  00000000  00000000  000256ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001764  00000000  00000000  0002becc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000235d  00000000  00000000  0002d630  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004410  00000000  00000000  0002f98d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00033da0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000310  00000000  00000000  00033dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00036876  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00036879  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00036885  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00036886  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00036887  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00036892  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0003689d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000368a8  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000041  00000000  00000000  000368b3  2**0
                  CONTENTS, READONLY
 26 .jdi          00004b4c  00000000  00000000  000368f4  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006ba24  00000000  00000000  0003b440  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
08005abc l    d  .rodata	00000000 .rodata
08005b24 l    d  .rwdata	00000000 .rwdata
08009054 l    d  .bss	00000000 .bss
080091a4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../addingSerialPort_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 initialize_RS232.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
08005b24 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08001dc0 l     F .text	00000008 __fp_lock
08001dc8 l     F .text	00000008 __fp_unlock
08001ddc l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
08002e24 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08002f44 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08002f70 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08003070 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08003164 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
08003248 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
08003424 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
080075ac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
08003680 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
080037c8 l     F .text	00000038 alt_dev_reg
080064f8 l     O .rwdata	00001060 jtag_uart_0
08007558 l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08003acc l     F .text	00000204 altera_avalon_jtag_uart_irq
08003cd0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
080042f0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08004a20 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08004f5c l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08005094 l     F .text	00000050 alt_get_errno
080050e4 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08002d18 g     F .text	00000054 _isatty_r
0800336c g     F .text	00000078 alt_main
08000318 g     F .text	000000b8 _puts_r
080090a4 g     O .bss	00000100 alt_irq
08002d6c g     F .text	0000005c _lseek_r
080075bc g       *ABS*	00000000 __flash_rwdata_start
08004460 g     F .text	0000003c alt_up_character_lcd_send_cmd
080091a4 g       *ABS*	00000000 __alt_heap_start
08002a98 g     F .text	0000005c __sseek
08002110 g     F .text	00000010 __sinit
08001f7c g     F .text	00000064 __sfmoreglue
08003404 g     F .text	00000020 __malloc_unlock
080012e8 g     F .text	0000015c memmove
080020f8 g     F .text	00000018 _cleanup
00000000  w      *UND*	00000000 __errno
080043ec g     F .text	00000074 get_DDRAM_addr
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08002cc0 g     F .text	00000058 _fstat_r
08009060 g     O .bss	00000004 errno
08002a14 g     F .text	00000008 __seofread
08009068 g     O .bss	00000004 alt_argv
0800f584 g       *ABS*	00000000 _gp
08000268 g     F .text	00000044 putcharRS232
08006378 g     O .rwdata	00000180 alt_fd_list
080002e8 g     F .text	00000030 RS232TestForReceivedData
08004bcc g     F .text	00000090 alt_find_dev
080011b0 g     F .text	00000138 memcpy
080045fc g     F .text	00000050 alt_up_character_lcd_write_fd
0800022c g     F .text	0000003c Init_RS232
08001dd0 g     F .text	0000000c _cleanup_r
0800501c g     F .text	00000078 alt_io_redirect
08005abc g       *ABS*	00000000 __DTOR_END__
080003d0 g     F .text	00000014 puts
08003ecc g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
080030c0 g     F .text	000000a4 isatty
0800568c g     F .text	0000008c alt_icache_flush
0800905c g     O .bss	00000004 __malloc_top_pad
0800047c g     F .text	000004a4 __sfvwrite_r
080019e4 g     F .text	00000054 _sbrk_r
08002dc8 g     F .text	0000005c _read_r
080075a4 g     O .rwdata	00000004 alt_max_fd
08002bac g     F .text	00000100 _fclose_r
08001d90 g     F .text	00000030 fflush
08009058 g     O .bss	00000004 __malloc_max_sbrked_mem
08003298 g     F .text	000000d4 lseek
08007584 g     O .rwdata	00000004 _global_impure_ptr
08001444 g     F .text	000005a0 _realloc_r
080091a4 g       *ABS*	00000000 __bss_end
08004e6c g     F .text	000000f0 alt_iic_isr_register
080053a0 g     F .text	00000104 alt_tick
08002130 g     F .text	00000018 __fp_lock_all
08004e20 g     F .text	0000004c alt_ic_irq_enabled
08005308 g     F .text	00000098 alt_alarm_stop
08009070 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
08006350 g     O .rwdata	00000028 alt_dev_null
08004890 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
08004a04 g     F .text	0000001c alt_dcache_flush_all
080075bc g       *ABS*	00000000 __ram_rwdata_end
0800759c g     O .rwdata	00000008 alt_dev_list
080036d0 g     F .text	000000f8 write
08005b24 g       *ABS*	00000000 __ram_rodata_end
08002fc0 g     F .text	000000b0 fstat
080091a4 g       *ABS*	00000000 end
08003a08 g     F .text	000000c4 altera_avalon_jtag_uart_init
08005abc g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08004364 g     F .text	00000088 alt_avalon_timer_sc_init
080040d8 g     F .text	00000218 altera_avalon_jtag_uart_write
08002120 g     F .text	00000004 __sfp_lock_acquire
080010c8 g     F .text	000000e8 memchr
08004510 g     F .text	00000078 alt_up_character_lcd_write
08002284 g     F .text	000002f0 _free_r
080058f4 g     F .text	00000194 __call_exitprocs
0800758c g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
08009074 g     O .bss	00000004 _alt_tick_rate
08009078 g     O .bss	00000004 _alt_nticks
08003474 g     F .text	000000fc read
08003834 g     F .text	00000070 alt_sys_init
08004748 g     F .text	00000088 alt_up_character_lcd_shift_display
080057e0 g     F .text	00000114 __register_exitproc
080047d0 g     F .text	0000008c alt_up_character_lcd_erase_pos
08003d78 g     F .text	00000068 altera_avalon_jtag_uart_close
08005b24 g       *ABS*	00000000 __ram_rwdata_start
08005abc g       *ABS*	00000000 __ram_rodata_start
0800907c g     O .bss	00000028 __malloc_current_mallinfo
080038a4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
080055d8 g     F .text	000000b4 alt_get_fd
08002b58 g     F .text	00000054 _close_r
08005764 g     F .text	0000007c memcmp
08003964 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080091a4 g       *ABS*	00000000 __alt_stack_base
080039b4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08001a38 g     F .text	00000130 __swsetup_r
08001fe0 g     F .text	00000118 __sfp
08005f48 g     O .rwdata	00000408 __malloc_av_
0800212c g     F .text	00000004 __sinit_lock_release
080029c0 g     F .text	00000054 __sread
080054c4 g     F .text	00000114 alt_find_file
08004a70 g     F .text	000000a4 alt_dev_llist_insert
080033e4 g     F .text	00000020 __malloc_lock
080035d0 g     F .text	000000b0 sbrk
08001b68 g     F .text	00000228 _fflush_r
08009054 g       *ABS*	00000000 __bss_start
0800289c g     F .text	00000124 memset
080001f8 g     F .text	00000034 main
0800906c g     O .bss	00000004 alt_envp
08009054 g     O .bss	00000004 __malloc_max_total_mem
08003904 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080046c0 g     F .text	00000088 alt_up_character_lcd_shift_cursor
08002af4 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
08002cac g     F .text	00000014 fclose
08000920 g     F .text	000007a8 _malloc_r
080075a8 g     O .rwdata	00000004 alt_errno
08002574 g     F .text	000000b8 _fwalk
080044d0 g     F .text	00000040 alt_up_character_lcd_open_dev
08002160 g     F .text	00000124 _malloc_trim_r
08005abc g       *ABS*	00000000 __CTOR_END__
0800449c g     F .text	00000034 alt_up_character_lcd_init
08005abc g       *ABS*	00000000 __flash_rodata_start
08005abc g       *ABS*	00000000 __DTOR_LIST__
08003800 g     F .text	00000034 alt_irq_init
08003570 g     F .text	00000060 alt_release_fd
0800485c g     F .text	00000034 alt_up_character_lcd_cursor_off
08005718 g     F .text	00000014 atexit
08002afc g     F .text	0000005c _write_r
08007588 g     O .rwdata	00000004 _impure_ptr
08009064 g     O .bss	00000004 alt_argc
08004b70 g     F .text	0000005c _do_dtors
08000020 g       .exceptions	00000000 alt_irq_entry
08002148 g     F .text	00000018 __fp_unlock_all
08007594 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
080002ac g     F .text	0000003c getcharRS232
08004c8c g     F .text	00000050 alt_ic_isr_register
080075bc g       *ABS*	00000000 _edata
080091a4 g       *ABS*	00000000 _end
080001bc g       *ABS*	00000000 __ram_exceptions_end
08003de0 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
08004d7c g     F .text	000000a4 alt_ic_irq_disable
08002a1c g     F .text	0000007c __swrite
08007590 g     O .rwdata	00000004 __malloc_trim_threshold
080054a4 g     F .text	00000020 altera_nios2_qsys_irq_init
0800572c g     F .text	00000038 exit
0800262c g     F .text	000000b8 _fwalk_reent
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08002124 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08004588 g     F .text	00000074 alt_up_character_lcd_string
08005a88 g     F .text	00000034 _exit
080048c4 g     F .text	00000140 alt_alarm_start
080026e4 g     F .text	000001b8 __smakebuf_r
080003e4 g     F .text	00000098 strlen
080051b0 g     F .text	00000158 open
08004c5c g     F .text	00000030 alt_icache_flush_all
0800464c g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
080075b0 g     O .rwdata	00000004 alt_priority_mask
08004cdc g     F .text	000000a0 alt_ic_irq_enable
080075b4 g     O .rwdata	00000008 alt_alarm_list
08004b14 g     F .text	0000005c _do_ctors
08002e74 g     F .text	000000d0 close
080031c8 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
08002128 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406f14 	ori	at,at,444
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_sdram-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00820074 	movhi	r2,2049
 8000130:	10a42904 	addi	r2,r2,-28508
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	00820074 	movhi	r2,2049
 8000148:	10a42904 	addi	r2,r2,-28508
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	06820034 	movhi	gp,2048
    ori gp, gp, %lo(_gp)
 80001c8:	d6bd6114 	ori	gp,gp,62852
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	00820034 	movhi	r2,2048
    ori r2, r2, %lo(__bss_start)
 80001d0:	10a41514 	ori	r2,r2,36948

    movhi r3, %hi(__bss_end)
 80001d4:	00c20034 	movhi	r3,2048
    ori r3, r3, %lo(__bss_end)
 80001d8:	18e46914 	ori	r3,r3,37284

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	80031c80 	call	80031c8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	800336c0 	call	800336c <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <main>:
 */

#include <stdio.h>

int main()
{
 80001f8:	defffe04 	addi	sp,sp,-8
 80001fc:	dfc00115 	stw	ra,4(sp)
 8000200:	df000015 	stw	fp,0(sp)
 8000204:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 8000208:	01020034 	movhi	r4,2048
 800020c:	2116af04 	addi	r4,r4,23228
 8000210:	80003d00 	call	80003d0 <puts>

  return 0;
 8000214:	0005883a 	mov	r2,zero
}
 8000218:	e037883a 	mov	sp,fp
 800021c:	dfc00117 	ldw	ra,4(sp)
 8000220:	df000017 	ldw	fp,0(sp)
 8000224:	dec00204 	addi	sp,sp,8
 8000228:	f800283a 	ret

0800022c <Init_RS232>:
#define RS232_RxData (*(volatile unsigned char *)(0x84000202))
#define RS232_Baud (*(volatile unsigned char *)(0x84000204))


void Init_RS232(void)
{
 800022c:	deffff04 	addi	sp,sp,-4
 8000230:	df000015 	stw	fp,0(sp)
 8000234:	d839883a 	mov	fp,sp
 // transmitter interrupt disabled
//=> CR6=0, CR5=0;

	//not sure if CR7 should be 1 or 0, let's try 1 first
	//CR= 10010110;
	RS232_Control = 0x56;
 8000238:	00a10034 	movhi	r2,33792
 800023c:	10808004 	addi	r2,r2,512
 8000240:	00c01584 	movi	r3,86
 8000244:	10c00005 	stb	r3,0(r2)

	 // program baud rate generator to use 115k baud
	RS232_Baud = 0x01;
 8000248:	00a10034 	movhi	r2,33792
 800024c:	10808104 	addi	r2,r2,516
 8000250:	00c00044 	movi	r3,1
 8000254:	10c00005 	stb	r3,0(r2)

}
 8000258:	e037883a 	mov	sp,fp
 800025c:	df000017 	ldw	fp,0(sp)
 8000260:	dec00104 	addi	sp,sp,4
 8000264:	f800283a 	ret

08000268 <putcharRS232>:
int putcharRS232(int c)
{
 8000268:	defffe04 	addi	sp,sp,-8
 800026c:	df000115 	stw	fp,4(sp)
 8000270:	df000104 	addi	fp,sp,4
 8000274:	e13fff15 	stw	r4,-4(fp)
 // poll Tx bit in 6850 status register. Wait for it to become '1'
	while(!0x2&RS232_Status){};
 8000278:	0001883a 	nop
 800027c:	00a10034 	movhi	r2,33792
 8000280:	10808004 	addi	r2,r2,512
 8000284:	10800003 	ldbu	r2,0(r2)
	//if Tx bit = 1, break out the while loop
 // write 'c' to the 6850 TxData register to output the character
	//int = 8 bits
	RS232_TxData = c;
 8000288:	00a10034 	movhi	r2,33792
 800028c:	10808084 	addi	r2,r2,514
 8000290:	e0ffff17 	ldw	r3,-4(fp)
 8000294:	10c00005 	stb	r3,0(r2)
 return c ; // return c
 8000298:	e0bfff17 	ldw	r2,-4(fp)
}
 800029c:	e037883a 	mov	sp,fp
 80002a0:	df000017 	ldw	fp,0(sp)
 80002a4:	dec00104 	addi	sp,sp,4
 80002a8:	f800283a 	ret

080002ac <getcharRS232>:
int getcharRS232( void )
{
 80002ac:	deffff04 	addi	sp,sp,-4
 80002b0:	df000015 	stw	fp,0(sp)
 80002b4:	d839883a 	mov	fp,sp
 // poll Rx bit in 6850 status register. Wait for it to become '1'
	while(!0x1&RS232_Status){};
 80002b8:	0001883a 	nop
 80002bc:	00a10034 	movhi	r2,33792
 80002c0:	10808004 	addi	r2,r2,512
 80002c4:	10800003 	ldbu	r2,0(r2)
	//when Rx bit becomes 1, break out the while loop
 // read received character from 6850 RxData register.
	return (int) RS232_RxData;
 80002c8:	00a10034 	movhi	r2,33792
 80002cc:	10808084 	addi	r2,r2,514
 80002d0:	10800003 	ldbu	r2,0(r2)
 80002d4:	10803fcc 	andi	r2,r2,255
}
 80002d8:	e037883a 	mov	sp,fp
 80002dc:	df000017 	ldw	fp,0(sp)
 80002e0:	dec00104 	addi	sp,sp,4
 80002e4:	f800283a 	ret

080002e8 <RS232TestForReceivedData>:
// the following function polls the 6850 to determine if any character
// has been received. It doesn't wait for one, or read it, it simply tests
// to see if one is available to read
int RS232TestForReceivedData(void)
{
 80002e8:	deffff04 	addi	sp,sp,-4
 80002ec:	df000015 	stw	fp,0(sp)
 80002f0:	d839883a 	mov	fp,sp
 // Test Rx bit in 6850 serial comms chip status register
 // if RX bit is set, return TRUE, otherwise return FALSE
	return 0x1&RS232_RxData;
 80002f4:	00a10034 	movhi	r2,33792
 80002f8:	10808084 	addi	r2,r2,514
 80002fc:	10800003 	ldbu	r2,0(r2)
 8000300:	10803fcc 	andi	r2,r2,255
 8000304:	1080004c 	andi	r2,r2,1
}
 8000308:	e037883a 	mov	sp,fp
 800030c:	df000017 	ldw	fp,0(sp)
 8000310:	dec00104 	addi	sp,sp,4
 8000314:	f800283a 	ret

08000318 <_puts_r>:
 8000318:	defff604 	addi	sp,sp,-40
 800031c:	dc000715 	stw	r16,28(sp)
 8000320:	2021883a 	mov	r16,r4
 8000324:	2809883a 	mov	r4,r5
 8000328:	dc400815 	stw	r17,32(sp)
 800032c:	dfc00915 	stw	ra,36(sp)
 8000330:	2823883a 	mov	r17,r5
 8000334:	80003e40 	call	80003e4 <strlen>
 8000338:	00c20034 	movhi	r3,2048
 800033c:	18dd6204 	addi	r3,r3,30088
 8000340:	18c00017 	ldw	r3,0(r3)
 8000344:	11000044 	addi	r4,r2,1
 8000348:	d8800115 	stw	r2,4(sp)
 800034c:	18c00217 	ldw	r3,8(r3)
 8000350:	01420034 	movhi	r5,2048
 8000354:	2956b404 	addi	r5,r5,23248
 8000358:	1880030b 	ldhu	r2,12(r3)
 800035c:	d9400215 	stw	r5,8(sp)
 8000360:	d9000615 	stw	r4,24(sp)
 8000364:	01400044 	movi	r5,1
 8000368:	01000084 	movi	r4,2
 800036c:	d9000515 	stw	r4,20(sp)
 8000370:	dc400015 	stw	r17,0(sp)
 8000374:	d9400315 	stw	r5,12(sp)
 8000378:	dec00415 	stw	sp,16(sp)
 800037c:	1108000c 	andi	r4,r2,8192
 8000380:	2000061e 	bne	r4,zero,800039c <_puts_r+0x84>
 8000384:	19401917 	ldw	r5,100(r3)
 8000388:	0137ffc4 	movi	r4,-8193
 800038c:	10880014 	ori	r2,r2,8192
 8000390:	2908703a 	and	r4,r5,r4
 8000394:	1880030d 	sth	r2,12(r3)
 8000398:	19001915 	stw	r4,100(r3)
 800039c:	81400217 	ldw	r5,8(r16)
 80003a0:	8009883a 	mov	r4,r16
 80003a4:	d9800404 	addi	r6,sp,16
 80003a8:	800047c0 	call	800047c <__sfvwrite_r>
 80003ac:	1000061e 	bne	r2,zero,80003c8 <_puts_r+0xb0>
 80003b0:	00800284 	movi	r2,10
 80003b4:	dfc00917 	ldw	ra,36(sp)
 80003b8:	dc400817 	ldw	r17,32(sp)
 80003bc:	dc000717 	ldw	r16,28(sp)
 80003c0:	dec00a04 	addi	sp,sp,40
 80003c4:	f800283a 	ret
 80003c8:	00bfffc4 	movi	r2,-1
 80003cc:	003ff906 	br	80003b4 <__alt_data_end+0xfc0003b4>

080003d0 <puts>:
 80003d0:	00820034 	movhi	r2,2048
 80003d4:	109d6204 	addi	r2,r2,30088
 80003d8:	200b883a 	mov	r5,r4
 80003dc:	11000017 	ldw	r4,0(r2)
 80003e0:	80003181 	jmpi	8000318 <_puts_r>

080003e4 <strlen>:
 80003e4:	208000cc 	andi	r2,r4,3
 80003e8:	10002026 	beq	r2,zero,800046c <strlen+0x88>
 80003ec:	20800007 	ldb	r2,0(r4)
 80003f0:	10002026 	beq	r2,zero,8000474 <strlen+0x90>
 80003f4:	2005883a 	mov	r2,r4
 80003f8:	00000206 	br	8000404 <strlen+0x20>
 80003fc:	10c00007 	ldb	r3,0(r2)
 8000400:	18001826 	beq	r3,zero,8000464 <strlen+0x80>
 8000404:	10800044 	addi	r2,r2,1
 8000408:	10c000cc 	andi	r3,r2,3
 800040c:	183ffb1e 	bne	r3,zero,80003fc <__alt_data_end+0xfc0003fc>
 8000410:	10c00017 	ldw	r3,0(r2)
 8000414:	01ffbff4 	movhi	r7,65279
 8000418:	39ffbfc4 	addi	r7,r7,-257
 800041c:	00ca303a 	nor	r5,zero,r3
 8000420:	01a02074 	movhi	r6,32897
 8000424:	19c7883a 	add	r3,r3,r7
 8000428:	31a02004 	addi	r6,r6,-32640
 800042c:	1946703a 	and	r3,r3,r5
 8000430:	1986703a 	and	r3,r3,r6
 8000434:	1800091e 	bne	r3,zero,800045c <strlen+0x78>
 8000438:	10800104 	addi	r2,r2,4
 800043c:	10c00017 	ldw	r3,0(r2)
 8000440:	19cb883a 	add	r5,r3,r7
 8000444:	00c6303a 	nor	r3,zero,r3
 8000448:	28c6703a 	and	r3,r5,r3
 800044c:	1986703a 	and	r3,r3,r6
 8000450:	183ff926 	beq	r3,zero,8000438 <__alt_data_end+0xfc000438>
 8000454:	00000106 	br	800045c <strlen+0x78>
 8000458:	10800044 	addi	r2,r2,1
 800045c:	10c00007 	ldb	r3,0(r2)
 8000460:	183ffd1e 	bne	r3,zero,8000458 <__alt_data_end+0xfc000458>
 8000464:	1105c83a 	sub	r2,r2,r4
 8000468:	f800283a 	ret
 800046c:	2005883a 	mov	r2,r4
 8000470:	003fe706 	br	8000410 <__alt_data_end+0xfc000410>
 8000474:	0005883a 	mov	r2,zero
 8000478:	f800283a 	ret

0800047c <__sfvwrite_r>:
 800047c:	30800217 	ldw	r2,8(r6)
 8000480:	10004526 	beq	r2,zero,8000598 <__sfvwrite_r+0x11c>
 8000484:	28c0030b 	ldhu	r3,12(r5)
 8000488:	defff404 	addi	sp,sp,-48
 800048c:	dd400715 	stw	r21,28(sp)
 8000490:	dcc00515 	stw	r19,20(sp)
 8000494:	dc000215 	stw	r16,8(sp)
 8000498:	dfc00b15 	stw	ra,44(sp)
 800049c:	df000a15 	stw	fp,40(sp)
 80004a0:	ddc00915 	stw	r23,36(sp)
 80004a4:	dd800815 	stw	r22,32(sp)
 80004a8:	dd000615 	stw	r20,24(sp)
 80004ac:	dc800415 	stw	r18,16(sp)
 80004b0:	dc400315 	stw	r17,12(sp)
 80004b4:	1880020c 	andi	r2,r3,8
 80004b8:	2821883a 	mov	r16,r5
 80004bc:	202b883a 	mov	r21,r4
 80004c0:	3027883a 	mov	r19,r6
 80004c4:	10002526 	beq	r2,zero,800055c <__sfvwrite_r+0xe0>
 80004c8:	28800417 	ldw	r2,16(r5)
 80004cc:	10002326 	beq	r2,zero,800055c <__sfvwrite_r+0xe0>
 80004d0:	1880008c 	andi	r2,r3,2
 80004d4:	9c400017 	ldw	r17,0(r19)
 80004d8:	10003126 	beq	r2,zero,80005a0 <__sfvwrite_r+0x124>
 80004dc:	0029883a 	mov	r20,zero
 80004e0:	0025883a 	mov	r18,zero
 80004e4:	05810004 	movi	r22,1024
 80004e8:	a00d883a 	mov	r6,r20
 80004ec:	a809883a 	mov	r4,r21
 80004f0:	90002526 	beq	r18,zero,8000588 <__sfvwrite_r+0x10c>
 80004f4:	900f883a 	mov	r7,r18
 80004f8:	81400717 	ldw	r5,28(r16)
 80004fc:	b480012e 	bgeu	r22,r18,8000504 <__sfvwrite_r+0x88>
 8000500:	01c10004 	movi	r7,1024
 8000504:	80800917 	ldw	r2,36(r16)
 8000508:	103ee83a 	callr	r2
 800050c:	0080510e 	bge	zero,r2,8000654 <__sfvwrite_r+0x1d8>
 8000510:	98c00217 	ldw	r3,8(r19)
 8000514:	a0a9883a 	add	r20,r20,r2
 8000518:	90a5c83a 	sub	r18,r18,r2
 800051c:	1885c83a 	sub	r2,r3,r2
 8000520:	98800215 	stw	r2,8(r19)
 8000524:	103ff01e 	bne	r2,zero,80004e8 <__alt_data_end+0xfc0004e8>
 8000528:	0005883a 	mov	r2,zero
 800052c:	dfc00b17 	ldw	ra,44(sp)
 8000530:	df000a17 	ldw	fp,40(sp)
 8000534:	ddc00917 	ldw	r23,36(sp)
 8000538:	dd800817 	ldw	r22,32(sp)
 800053c:	dd400717 	ldw	r21,28(sp)
 8000540:	dd000617 	ldw	r20,24(sp)
 8000544:	dcc00517 	ldw	r19,20(sp)
 8000548:	dc800417 	ldw	r18,16(sp)
 800054c:	dc400317 	ldw	r17,12(sp)
 8000550:	dc000217 	ldw	r16,8(sp)
 8000554:	dec00c04 	addi	sp,sp,48
 8000558:	f800283a 	ret
 800055c:	a809883a 	mov	r4,r21
 8000560:	800b883a 	mov	r5,r16
 8000564:	8001a380 	call	8001a38 <__swsetup_r>
 8000568:	80c0030b 	ldhu	r3,12(r16)
 800056c:	103fd826 	beq	r2,zero,80004d0 <__alt_data_end+0xfc0004d0>
 8000570:	18c01014 	ori	r3,r3,64
 8000574:	80c0030d 	sth	r3,12(r16)
 8000578:	00c00244 	movi	r3,9
 800057c:	00bfffc4 	movi	r2,-1
 8000580:	a8c00015 	stw	r3,0(r21)
 8000584:	003fe906 	br	800052c <__alt_data_end+0xfc00052c>
 8000588:	8d000017 	ldw	r20,0(r17)
 800058c:	8c800117 	ldw	r18,4(r17)
 8000590:	8c400204 	addi	r17,r17,8
 8000594:	003fd406 	br	80004e8 <__alt_data_end+0xfc0004e8>
 8000598:	0005883a 	mov	r2,zero
 800059c:	f800283a 	ret
 80005a0:	1880004c 	andi	r2,r3,1
 80005a4:	1000301e 	bne	r2,zero,8000668 <__sfvwrite_r+0x1ec>
 80005a8:	002f883a 	mov	r23,zero
 80005ac:	0025883a 	mov	r18,zero
 80005b0:	90001c26 	beq	r18,zero,8000624 <__sfvwrite_r+0x1a8>
 80005b4:	1880800c 	andi	r2,r3,512
 80005b8:	85000217 	ldw	r20,8(r16)
 80005bc:	10006c26 	beq	r2,zero,8000770 <__sfvwrite_r+0x2f4>
 80005c0:	a02d883a 	mov	r22,r20
 80005c4:	95008536 	bltu	r18,r20,80007dc <__sfvwrite_r+0x360>
 80005c8:	1881200c 	andi	r2,r3,1152
 80005cc:	10009d1e 	bne	r2,zero,8000844 <__sfvwrite_r+0x3c8>
 80005d0:	81000017 	ldw	r4,0(r16)
 80005d4:	a039883a 	mov	fp,r20
 80005d8:	9029883a 	mov	r20,r18
 80005dc:	b80b883a 	mov	r5,r23
 80005e0:	b00d883a 	mov	r6,r22
 80005e4:	80012e80 	call	80012e8 <memmove>
 80005e8:	80c00217 	ldw	r3,8(r16)
 80005ec:	81000017 	ldw	r4,0(r16)
 80005f0:	9005883a 	mov	r2,r18
 80005f4:	1f39c83a 	sub	fp,r3,fp
 80005f8:	258f883a 	add	r7,r4,r22
 80005fc:	87000215 	stw	fp,8(r16)
 8000600:	81c00015 	stw	r7,0(r16)
 8000604:	98c00217 	ldw	r3,8(r19)
 8000608:	b8af883a 	add	r23,r23,r2
 800060c:	90a5c83a 	sub	r18,r18,r2
 8000610:	1d05c83a 	sub	r2,r3,r20
 8000614:	98800215 	stw	r2,8(r19)
 8000618:	103fc326 	beq	r2,zero,8000528 <__alt_data_end+0xfc000528>
 800061c:	80c0030b 	ldhu	r3,12(r16)
 8000620:	903fe41e 	bne	r18,zero,80005b4 <__alt_data_end+0xfc0005b4>
 8000624:	8dc00017 	ldw	r23,0(r17)
 8000628:	8c800117 	ldw	r18,4(r17)
 800062c:	8c400204 	addi	r17,r17,8
 8000630:	003fdf06 	br	80005b0 <__alt_data_end+0xfc0005b0>
 8000634:	80014440 	call	8001444 <_realloc_r>
 8000638:	102d883a 	mov	r22,r2
 800063c:	1000a01e 	bne	r2,zero,80008c0 <__sfvwrite_r+0x444>
 8000640:	81400417 	ldw	r5,16(r16)
 8000644:	a809883a 	mov	r4,r21
 8000648:	80022840 	call	8002284 <_free_r>
 800064c:	00800304 	movi	r2,12
 8000650:	a8800015 	stw	r2,0(r21)
 8000654:	80c0030b 	ldhu	r3,12(r16)
 8000658:	00bfffc4 	movi	r2,-1
 800065c:	18c01014 	ori	r3,r3,64
 8000660:	80c0030d 	sth	r3,12(r16)
 8000664:	003fb106 	br	800052c <__alt_data_end+0xfc00052c>
 8000668:	0029883a 	mov	r20,zero
 800066c:	0011883a 	mov	r8,zero
 8000670:	0039883a 	mov	fp,zero
 8000674:	0025883a 	mov	r18,zero
 8000678:	90001f26 	beq	r18,zero,80006f8 <__sfvwrite_r+0x27c>
 800067c:	40006826 	beq	r8,zero,8000820 <__sfvwrite_r+0x3a4>
 8000680:	a02f883a 	mov	r23,r20
 8000684:	9500012e 	bgeu	r18,r20,800068c <__sfvwrite_r+0x210>
 8000688:	902f883a 	mov	r23,r18
 800068c:	81000017 	ldw	r4,0(r16)
 8000690:	80800417 	ldw	r2,16(r16)
 8000694:	b82d883a 	mov	r22,r23
 8000698:	81800217 	ldw	r6,8(r16)
 800069c:	81c00517 	ldw	r7,20(r16)
 80006a0:	1100022e 	bgeu	r2,r4,80006ac <__sfvwrite_r+0x230>
 80006a4:	31c7883a 	add	r3,r6,r7
 80006a8:	1dc01816 	blt	r3,r23,800070c <__sfvwrite_r+0x290>
 80006ac:	b9c03f16 	blt	r23,r7,80007ac <__sfvwrite_r+0x330>
 80006b0:	80800917 	ldw	r2,36(r16)
 80006b4:	81400717 	ldw	r5,28(r16)
 80006b8:	a809883a 	mov	r4,r21
 80006bc:	da000115 	stw	r8,4(sp)
 80006c0:	e00d883a 	mov	r6,fp
 80006c4:	103ee83a 	callr	r2
 80006c8:	102d883a 	mov	r22,r2
 80006cc:	da000117 	ldw	r8,4(sp)
 80006d0:	00bfe00e 	bge	zero,r2,8000654 <__alt_data_end+0xfc000654>
 80006d4:	a5a9c83a 	sub	r20,r20,r22
 80006d8:	a0001f26 	beq	r20,zero,8000758 <__sfvwrite_r+0x2dc>
 80006dc:	98800217 	ldw	r2,8(r19)
 80006e0:	e5b9883a 	add	fp,fp,r22
 80006e4:	95a5c83a 	sub	r18,r18,r22
 80006e8:	15adc83a 	sub	r22,r2,r22
 80006ec:	9d800215 	stw	r22,8(r19)
 80006f0:	b03f8d26 	beq	r22,zero,8000528 <__alt_data_end+0xfc000528>
 80006f4:	903fe11e 	bne	r18,zero,800067c <__alt_data_end+0xfc00067c>
 80006f8:	8f000017 	ldw	fp,0(r17)
 80006fc:	8c800117 	ldw	r18,4(r17)
 8000700:	0011883a 	mov	r8,zero
 8000704:	8c400204 	addi	r17,r17,8
 8000708:	003fdb06 	br	8000678 <__alt_data_end+0xfc000678>
 800070c:	180d883a 	mov	r6,r3
 8000710:	e00b883a 	mov	r5,fp
 8000714:	da000115 	stw	r8,4(sp)
 8000718:	d8c00015 	stw	r3,0(sp)
 800071c:	80012e80 	call	80012e8 <memmove>
 8000720:	d8c00017 	ldw	r3,0(sp)
 8000724:	80800017 	ldw	r2,0(r16)
 8000728:	a809883a 	mov	r4,r21
 800072c:	800b883a 	mov	r5,r16
 8000730:	10c5883a 	add	r2,r2,r3
 8000734:	80800015 	stw	r2,0(r16)
 8000738:	d8c00015 	stw	r3,0(sp)
 800073c:	8001b680 	call	8001b68 <_fflush_r>
 8000740:	d8c00017 	ldw	r3,0(sp)
 8000744:	da000117 	ldw	r8,4(sp)
 8000748:	103fc21e 	bne	r2,zero,8000654 <__alt_data_end+0xfc000654>
 800074c:	182d883a 	mov	r22,r3
 8000750:	a5a9c83a 	sub	r20,r20,r22
 8000754:	a03fe11e 	bne	r20,zero,80006dc <__alt_data_end+0xfc0006dc>
 8000758:	a809883a 	mov	r4,r21
 800075c:	800b883a 	mov	r5,r16
 8000760:	8001b680 	call	8001b68 <_fflush_r>
 8000764:	103fbb1e 	bne	r2,zero,8000654 <__alt_data_end+0xfc000654>
 8000768:	0011883a 	mov	r8,zero
 800076c:	003fdb06 	br	80006dc <__alt_data_end+0xfc0006dc>
 8000770:	81000017 	ldw	r4,0(r16)
 8000774:	80800417 	ldw	r2,16(r16)
 8000778:	1100012e 	bgeu	r2,r4,8000780 <__sfvwrite_r+0x304>
 800077c:	a4805a36 	bltu	r20,r18,80008e8 <__sfvwrite_r+0x46c>
 8000780:	81c00517 	ldw	r7,20(r16)
 8000784:	91c01a36 	bltu	r18,r7,80007f0 <__sfvwrite_r+0x374>
 8000788:	80800917 	ldw	r2,36(r16)
 800078c:	81400717 	ldw	r5,28(r16)
 8000790:	a809883a 	mov	r4,r21
 8000794:	b80d883a 	mov	r6,r23
 8000798:	103ee83a 	callr	r2
 800079c:	1029883a 	mov	r20,r2
 80007a0:	00bfac0e 	bge	zero,r2,8000654 <__alt_data_end+0xfc000654>
 80007a4:	a005883a 	mov	r2,r20
 80007a8:	003f9606 	br	8000604 <__alt_data_end+0xfc000604>
 80007ac:	b80d883a 	mov	r6,r23
 80007b0:	e00b883a 	mov	r5,fp
 80007b4:	da000115 	stw	r8,4(sp)
 80007b8:	80012e80 	call	80012e8 <memmove>
 80007bc:	80800217 	ldw	r2,8(r16)
 80007c0:	80c00017 	ldw	r3,0(r16)
 80007c4:	da000117 	ldw	r8,4(sp)
 80007c8:	15c5c83a 	sub	r2,r2,r23
 80007cc:	1def883a 	add	r23,r3,r23
 80007d0:	80800215 	stw	r2,8(r16)
 80007d4:	85c00015 	stw	r23,0(r16)
 80007d8:	003fbe06 	br	80006d4 <__alt_data_end+0xfc0006d4>
 80007dc:	81000017 	ldw	r4,0(r16)
 80007e0:	9039883a 	mov	fp,r18
 80007e4:	9029883a 	mov	r20,r18
 80007e8:	902d883a 	mov	r22,r18
 80007ec:	003f7b06 	br	80005dc <__alt_data_end+0xfc0005dc>
 80007f0:	b80b883a 	mov	r5,r23
 80007f4:	900d883a 	mov	r6,r18
 80007f8:	80012e80 	call	80012e8 <memmove>
 80007fc:	80c00217 	ldw	r3,8(r16)
 8000800:	80800017 	ldw	r2,0(r16)
 8000804:	9029883a 	mov	r20,r18
 8000808:	1c87c83a 	sub	r3,r3,r18
 800080c:	1485883a 	add	r2,r2,r18
 8000810:	80800015 	stw	r2,0(r16)
 8000814:	80c00215 	stw	r3,8(r16)
 8000818:	9005883a 	mov	r2,r18
 800081c:	003f7906 	br	8000604 <__alt_data_end+0xfc000604>
 8000820:	e009883a 	mov	r4,fp
 8000824:	01400284 	movi	r5,10
 8000828:	900d883a 	mov	r6,r18
 800082c:	80010c80 	call	80010c8 <memchr>
 8000830:	10003826 	beq	r2,zero,8000914 <__sfvwrite_r+0x498>
 8000834:	10800044 	addi	r2,r2,1
 8000838:	1729c83a 	sub	r20,r2,fp
 800083c:	02000044 	movi	r8,1
 8000840:	003f8f06 	br	8000680 <__alt_data_end+0xfc000680>
 8000844:	80800517 	ldw	r2,20(r16)
 8000848:	81400417 	ldw	r5,16(r16)
 800084c:	87000017 	ldw	fp,0(r16)
 8000850:	10a9883a 	add	r20,r2,r2
 8000854:	a085883a 	add	r2,r20,r2
 8000858:	1028d7fa 	srli	r20,r2,31
 800085c:	e179c83a 	sub	fp,fp,r5
 8000860:	e1000044 	addi	r4,fp,1
 8000864:	a085883a 	add	r2,r20,r2
 8000868:	1029d07a 	srai	r20,r2,1
 800086c:	2485883a 	add	r2,r4,r18
 8000870:	a00d883a 	mov	r6,r20
 8000874:	a080022e 	bgeu	r20,r2,8000880 <__sfvwrite_r+0x404>
 8000878:	1029883a 	mov	r20,r2
 800087c:	100d883a 	mov	r6,r2
 8000880:	18c1000c 	andi	r3,r3,1024
 8000884:	a809883a 	mov	r4,r21
 8000888:	183f6a26 	beq	r3,zero,8000634 <__alt_data_end+0xfc000634>
 800088c:	300b883a 	mov	r5,r6
 8000890:	80009200 	call	8000920 <_malloc_r>
 8000894:	102d883a 	mov	r22,r2
 8000898:	103f6c26 	beq	r2,zero,800064c <__alt_data_end+0xfc00064c>
 800089c:	81400417 	ldw	r5,16(r16)
 80008a0:	1009883a 	mov	r4,r2
 80008a4:	e00d883a 	mov	r6,fp
 80008a8:	80011b00 	call	80011b0 <memcpy>
 80008ac:	8080030b 	ldhu	r2,12(r16)
 80008b0:	00fedfc4 	movi	r3,-1153
 80008b4:	10c4703a 	and	r2,r2,r3
 80008b8:	10802014 	ori	r2,r2,128
 80008bc:	8080030d 	sth	r2,12(r16)
 80008c0:	b709883a 	add	r4,r22,fp
 80008c4:	a707c83a 	sub	r3,r20,fp
 80008c8:	85800415 	stw	r22,16(r16)
 80008cc:	85000515 	stw	r20,20(r16)
 80008d0:	81000015 	stw	r4,0(r16)
 80008d4:	9039883a 	mov	fp,r18
 80008d8:	80c00215 	stw	r3,8(r16)
 80008dc:	9029883a 	mov	r20,r18
 80008e0:	902d883a 	mov	r22,r18
 80008e4:	003f3d06 	br	80005dc <__alt_data_end+0xfc0005dc>
 80008e8:	b80b883a 	mov	r5,r23
 80008ec:	a00d883a 	mov	r6,r20
 80008f0:	80012e80 	call	80012e8 <memmove>
 80008f4:	80800017 	ldw	r2,0(r16)
 80008f8:	a809883a 	mov	r4,r21
 80008fc:	800b883a 	mov	r5,r16
 8000900:	1505883a 	add	r2,r2,r20
 8000904:	80800015 	stw	r2,0(r16)
 8000908:	8001b680 	call	8001b68 <_fflush_r>
 800090c:	103fa526 	beq	r2,zero,80007a4 <__alt_data_end+0xfc0007a4>
 8000910:	003f5006 	br	8000654 <__alt_data_end+0xfc000654>
 8000914:	95000044 	addi	r20,r18,1
 8000918:	02000044 	movi	r8,1
 800091c:	003f5806 	br	8000680 <__alt_data_end+0xfc000680>

08000920 <_malloc_r>:
 8000920:	defff504 	addi	sp,sp,-44
 8000924:	dc800315 	stw	r18,12(sp)
 8000928:	dfc00a15 	stw	ra,40(sp)
 800092c:	df000915 	stw	fp,36(sp)
 8000930:	ddc00815 	stw	r23,32(sp)
 8000934:	dd800715 	stw	r22,28(sp)
 8000938:	dd400615 	stw	r21,24(sp)
 800093c:	dd000515 	stw	r20,20(sp)
 8000940:	dcc00415 	stw	r19,16(sp)
 8000944:	dc400215 	stw	r17,8(sp)
 8000948:	dc000115 	stw	r16,4(sp)
 800094c:	288002c4 	addi	r2,r5,11
 8000950:	00c00584 	movi	r3,22
 8000954:	2025883a 	mov	r18,r4
 8000958:	18802a2e 	bgeu	r3,r2,8000a04 <_malloc_r+0xe4>
 800095c:	047ffe04 	movi	r17,-8
 8000960:	1462703a 	and	r17,r2,r17
 8000964:	88009e16 	blt	r17,zero,8000be0 <_malloc_r+0x2c0>
 8000968:	89409d36 	bltu	r17,r5,8000be0 <_malloc_r+0x2c0>
 800096c:	80033e40 	call	80033e4 <__malloc_lock>
 8000970:	00807dc4 	movi	r2,503
 8000974:	14402736 	bltu	r2,r17,8000a14 <_malloc_r+0xf4>
 8000978:	8806d0fa 	srli	r3,r17,3
 800097c:	04c20034 	movhi	r19,2048
 8000980:	9cd7d204 	addi	r19,r19,24392
 8000984:	18c5883a 	add	r2,r3,r3
 8000988:	1085883a 	add	r2,r2,r2
 800098c:	1085883a 	add	r2,r2,r2
 8000990:	9885883a 	add	r2,r19,r2
 8000994:	14000317 	ldw	r16,12(r2)
 8000998:	80814a26 	beq	r16,r2,8000ec4 <_malloc_r+0x5a4>
 800099c:	80c00117 	ldw	r3,4(r16)
 80009a0:	81000317 	ldw	r4,12(r16)
 80009a4:	00bfff04 	movi	r2,-4
 80009a8:	1884703a 	and	r2,r3,r2
 80009ac:	81400217 	ldw	r5,8(r16)
 80009b0:	8085883a 	add	r2,r16,r2
 80009b4:	10c00117 	ldw	r3,4(r2)
 80009b8:	29000315 	stw	r4,12(r5)
 80009bc:	21400215 	stw	r5,8(r4)
 80009c0:	18c00054 	ori	r3,r3,1
 80009c4:	10c00115 	stw	r3,4(r2)
 80009c8:	9009883a 	mov	r4,r18
 80009cc:	80034040 	call	8003404 <__malloc_unlock>
 80009d0:	80800204 	addi	r2,r16,8
 80009d4:	dfc00a17 	ldw	ra,40(sp)
 80009d8:	df000917 	ldw	fp,36(sp)
 80009dc:	ddc00817 	ldw	r23,32(sp)
 80009e0:	dd800717 	ldw	r22,28(sp)
 80009e4:	dd400617 	ldw	r21,24(sp)
 80009e8:	dd000517 	ldw	r20,20(sp)
 80009ec:	dcc00417 	ldw	r19,16(sp)
 80009f0:	dc800317 	ldw	r18,12(sp)
 80009f4:	dc400217 	ldw	r17,8(sp)
 80009f8:	dc000117 	ldw	r16,4(sp)
 80009fc:	dec00b04 	addi	sp,sp,44
 8000a00:	f800283a 	ret
 8000a04:	04400404 	movi	r17,16
 8000a08:	89407536 	bltu	r17,r5,8000be0 <_malloc_r+0x2c0>
 8000a0c:	80033e40 	call	80033e4 <__malloc_lock>
 8000a10:	003fd906 	br	8000978 <__alt_data_end+0xfc000978>
 8000a14:	8806d27a 	srli	r3,r17,9
 8000a18:	18007526 	beq	r3,zero,8000bf0 <_malloc_r+0x2d0>
 8000a1c:	00800104 	movi	r2,4
 8000a20:	10c0ef36 	bltu	r2,r3,8000de0 <_malloc_r+0x4c0>
 8000a24:	8806d1ba 	srli	r3,r17,6
 8000a28:	19c00e04 	addi	r7,r3,56
 8000a2c:	39cb883a 	add	r5,r7,r7
 8000a30:	04c20034 	movhi	r19,2048
 8000a34:	294b883a 	add	r5,r5,r5
 8000a38:	9cd7d204 	addi	r19,r19,24392
 8000a3c:	294b883a 	add	r5,r5,r5
 8000a40:	994b883a 	add	r5,r19,r5
 8000a44:	2c000317 	ldw	r16,12(r5)
 8000a48:	2c000e26 	beq	r5,r16,8000a84 <_malloc_r+0x164>
 8000a4c:	80800117 	ldw	r2,4(r16)
 8000a50:	01bfff04 	movi	r6,-4
 8000a54:	010003c4 	movi	r4,15
 8000a58:	1184703a 	and	r2,r2,r6
 8000a5c:	1447c83a 	sub	r3,r2,r17
 8000a60:	20c00716 	blt	r4,r3,8000a80 <_malloc_r+0x160>
 8000a64:	1800650e 	bge	r3,zero,8000bfc <_malloc_r+0x2dc>
 8000a68:	84000317 	ldw	r16,12(r16)
 8000a6c:	2c000526 	beq	r5,r16,8000a84 <_malloc_r+0x164>
 8000a70:	80800117 	ldw	r2,4(r16)
 8000a74:	1184703a 	and	r2,r2,r6
 8000a78:	1447c83a 	sub	r3,r2,r17
 8000a7c:	20fff90e 	bge	r4,r3,8000a64 <__alt_data_end+0xfc000a64>
 8000a80:	39ffffc4 	addi	r7,r7,-1
 8000a84:	38c00044 	addi	r3,r7,1
 8000a88:	01820034 	movhi	r6,2048
 8000a8c:	9c000417 	ldw	r16,16(r19)
 8000a90:	3197d204 	addi	r6,r6,24392
 8000a94:	32400204 	addi	r9,r6,8
 8000a98:	82410326 	beq	r16,r9,8000ea8 <_malloc_r+0x588>
 8000a9c:	81000117 	ldw	r4,4(r16)
 8000aa0:	00bfff04 	movi	r2,-4
 8000aa4:	208e703a 	and	r7,r4,r2
 8000aa8:	3c45c83a 	sub	r2,r7,r17
 8000aac:	010003c4 	movi	r4,15
 8000ab0:	2080ee16 	blt	r4,r2,8000e6c <_malloc_r+0x54c>
 8000ab4:	32400515 	stw	r9,20(r6)
 8000ab8:	32400415 	stw	r9,16(r6)
 8000abc:	1000510e 	bge	r2,zero,8000c04 <_malloc_r+0x2e4>
 8000ac0:	00807fc4 	movi	r2,511
 8000ac4:	11c0ce36 	bltu	r2,r7,8000e00 <_malloc_r+0x4e0>
 8000ac8:	3808d0fa 	srli	r4,r7,3
 8000acc:	01c00044 	movi	r7,1
 8000ad0:	30800117 	ldw	r2,4(r6)
 8000ad4:	210b883a 	add	r5,r4,r4
 8000ad8:	294b883a 	add	r5,r5,r5
 8000adc:	2009d0ba 	srai	r4,r4,2
 8000ae0:	294b883a 	add	r5,r5,r5
 8000ae4:	298b883a 	add	r5,r5,r6
 8000ae8:	2a000217 	ldw	r8,8(r5)
 8000aec:	3908983a 	sll	r4,r7,r4
 8000af0:	81400315 	stw	r5,12(r16)
 8000af4:	82000215 	stw	r8,8(r16)
 8000af8:	2088b03a 	or	r4,r4,r2
 8000afc:	2c000215 	stw	r16,8(r5)
 8000b00:	31000115 	stw	r4,4(r6)
 8000b04:	44000315 	stw	r16,12(r8)
 8000b08:	1805d0ba 	srai	r2,r3,2
 8000b0c:	01400044 	movi	r5,1
 8000b10:	288a983a 	sll	r5,r5,r2
 8000b14:	21404336 	bltu	r4,r5,8000c24 <_malloc_r+0x304>
 8000b18:	2144703a 	and	r2,r4,r5
 8000b1c:	10000a1e 	bne	r2,zero,8000b48 <_malloc_r+0x228>
 8000b20:	00bfff04 	movi	r2,-4
 8000b24:	294b883a 	add	r5,r5,r5
 8000b28:	1886703a 	and	r3,r3,r2
 8000b2c:	2144703a 	and	r2,r4,r5
 8000b30:	18c00104 	addi	r3,r3,4
 8000b34:	1000041e 	bne	r2,zero,8000b48 <_malloc_r+0x228>
 8000b38:	294b883a 	add	r5,r5,r5
 8000b3c:	2144703a 	and	r2,r4,r5
 8000b40:	18c00104 	addi	r3,r3,4
 8000b44:	103ffc26 	beq	r2,zero,8000b38 <__alt_data_end+0xfc000b38>
 8000b48:	023fff04 	movi	r8,-4
 8000b4c:	01c003c4 	movi	r7,15
 8000b50:	18c5883a 	add	r2,r3,r3
 8000b54:	1085883a 	add	r2,r2,r2
 8000b58:	1085883a 	add	r2,r2,r2
 8000b5c:	9895883a 	add	r10,r19,r2
 8000b60:	52c00304 	addi	r11,r10,12
 8000b64:	1819883a 	mov	r12,r3
 8000b68:	5c000017 	ldw	r16,0(r11)
 8000b6c:	59bffd04 	addi	r6,r11,-12
 8000b70:	8180041e 	bne	r16,r6,8000b84 <_malloc_r+0x264>
 8000b74:	0000ce06 	br	8000eb0 <_malloc_r+0x590>
 8000b78:	2000d70e 	bge	r4,zero,8000ed8 <_malloc_r+0x5b8>
 8000b7c:	84000317 	ldw	r16,12(r16)
 8000b80:	8180cb26 	beq	r16,r6,8000eb0 <_malloc_r+0x590>
 8000b84:	80800117 	ldw	r2,4(r16)
 8000b88:	1204703a 	and	r2,r2,r8
 8000b8c:	1449c83a 	sub	r4,r2,r17
 8000b90:	393ff90e 	bge	r7,r4,8000b78 <__alt_data_end+0xfc000b78>
 8000b94:	80800317 	ldw	r2,12(r16)
 8000b98:	80c00217 	ldw	r3,8(r16)
 8000b9c:	89400054 	ori	r5,r17,1
 8000ba0:	81400115 	stw	r5,4(r16)
 8000ba4:	18800315 	stw	r2,12(r3)
 8000ba8:	10c00215 	stw	r3,8(r2)
 8000bac:	8463883a 	add	r17,r16,r17
 8000bb0:	9c400515 	stw	r17,20(r19)
 8000bb4:	9c400415 	stw	r17,16(r19)
 8000bb8:	20800054 	ori	r2,r4,1
 8000bbc:	88800115 	stw	r2,4(r17)
 8000bc0:	8a400315 	stw	r9,12(r17)
 8000bc4:	8a400215 	stw	r9,8(r17)
 8000bc8:	8923883a 	add	r17,r17,r4
 8000bcc:	89000015 	stw	r4,0(r17)
 8000bd0:	9009883a 	mov	r4,r18
 8000bd4:	80034040 	call	8003404 <__malloc_unlock>
 8000bd8:	80800204 	addi	r2,r16,8
 8000bdc:	003f7d06 	br	80009d4 <__alt_data_end+0xfc0009d4>
 8000be0:	00800304 	movi	r2,12
 8000be4:	90800015 	stw	r2,0(r18)
 8000be8:	0005883a 	mov	r2,zero
 8000bec:	003f7906 	br	80009d4 <__alt_data_end+0xfc0009d4>
 8000bf0:	01401f84 	movi	r5,126
 8000bf4:	01c00fc4 	movi	r7,63
 8000bf8:	003f8d06 	br	8000a30 <__alt_data_end+0xfc000a30>
 8000bfc:	81000317 	ldw	r4,12(r16)
 8000c00:	003f6a06 	br	80009ac <__alt_data_end+0xfc0009ac>
 8000c04:	81c5883a 	add	r2,r16,r7
 8000c08:	10c00117 	ldw	r3,4(r2)
 8000c0c:	9009883a 	mov	r4,r18
 8000c10:	18c00054 	ori	r3,r3,1
 8000c14:	10c00115 	stw	r3,4(r2)
 8000c18:	80034040 	call	8003404 <__malloc_unlock>
 8000c1c:	80800204 	addi	r2,r16,8
 8000c20:	003f6c06 	br	80009d4 <__alt_data_end+0xfc0009d4>
 8000c24:	9c000217 	ldw	r16,8(r19)
 8000c28:	00bfff04 	movi	r2,-4
 8000c2c:	85800117 	ldw	r22,4(r16)
 8000c30:	b0ac703a 	and	r22,r22,r2
 8000c34:	b4400336 	bltu	r22,r17,8000c44 <_malloc_r+0x324>
 8000c38:	b445c83a 	sub	r2,r22,r17
 8000c3c:	00c003c4 	movi	r3,15
 8000c40:	18805d16 	blt	r3,r2,8000db8 <_malloc_r+0x498>
 8000c44:	05c20034 	movhi	r23,2048
 8000c48:	00820074 	movhi	r2,2049
 8000c4c:	bddd6304 	addi	r23,r23,30092
 8000c50:	10a41704 	addi	r2,r2,-28580
 8000c54:	15400017 	ldw	r21,0(r2)
 8000c58:	b9000017 	ldw	r4,0(r23)
 8000c5c:	00ffffc4 	movi	r3,-1
 8000c60:	858d883a 	add	r6,r16,r22
 8000c64:	8d6b883a 	add	r21,r17,r21
 8000c68:	20c0e426 	beq	r4,r3,8000ffc <_malloc_r+0x6dc>
 8000c6c:	ad4403c4 	addi	r21,r21,4111
 8000c70:	00fc0004 	movi	r3,-4096
 8000c74:	a8ea703a 	and	r21,r21,r3
 8000c78:	9009883a 	mov	r4,r18
 8000c7c:	a80b883a 	mov	r5,r21
 8000c80:	d9800015 	stw	r6,0(sp)
 8000c84:	80019e40 	call	80019e4 <_sbrk_r>
 8000c88:	00ffffc4 	movi	r3,-1
 8000c8c:	1029883a 	mov	r20,r2
 8000c90:	d9800017 	ldw	r6,0(sp)
 8000c94:	10c0a426 	beq	r2,r3,8000f28 <_malloc_r+0x608>
 8000c98:	1180a236 	bltu	r2,r6,8000f24 <_malloc_r+0x604>
 8000c9c:	07020074 	movhi	fp,2049
 8000ca0:	e7241f04 	addi	fp,fp,-28548
 8000ca4:	e0c00017 	ldw	r3,0(fp)
 8000ca8:	a8c7883a 	add	r3,r21,r3
 8000cac:	e0c00015 	stw	r3,0(fp)
 8000cb0:	3500da26 	beq	r6,r20,800101c <_malloc_r+0x6fc>
 8000cb4:	b9000017 	ldw	r4,0(r23)
 8000cb8:	00bfffc4 	movi	r2,-1
 8000cbc:	2080e426 	beq	r4,r2,8001050 <_malloc_r+0x730>
 8000cc0:	a185c83a 	sub	r2,r20,r6
 8000cc4:	1885883a 	add	r2,r3,r2
 8000cc8:	e0800015 	stw	r2,0(fp)
 8000ccc:	a0c001cc 	andi	r3,r20,7
 8000cd0:	1800b526 	beq	r3,zero,8000fa8 <_malloc_r+0x688>
 8000cd4:	a0e9c83a 	sub	r20,r20,r3
 8000cd8:	00840204 	movi	r2,4104
 8000cdc:	a5000204 	addi	r20,r20,8
 8000ce0:	10c7c83a 	sub	r3,r2,r3
 8000ce4:	a545883a 	add	r2,r20,r21
 8000ce8:	1083ffcc 	andi	r2,r2,4095
 8000cec:	18abc83a 	sub	r21,r3,r2
 8000cf0:	9009883a 	mov	r4,r18
 8000cf4:	a80b883a 	mov	r5,r21
 8000cf8:	80019e40 	call	80019e4 <_sbrk_r>
 8000cfc:	00ffffc4 	movi	r3,-1
 8000d00:	10c0d026 	beq	r2,r3,8001044 <_malloc_r+0x724>
 8000d04:	1507c83a 	sub	r3,r2,r20
 8000d08:	a8c7883a 	add	r3,r21,r3
 8000d0c:	18c00054 	ori	r3,r3,1
 8000d10:	e0800017 	ldw	r2,0(fp)
 8000d14:	9d000215 	stw	r20,8(r19)
 8000d18:	a0c00115 	stw	r3,4(r20)
 8000d1c:	a887883a 	add	r3,r21,r2
 8000d20:	e0c00015 	stw	r3,0(fp)
 8000d24:	84c00e26 	beq	r16,r19,8000d60 <_malloc_r+0x440>
 8000d28:	018003c4 	movi	r6,15
 8000d2c:	3580a02e 	bgeu	r6,r22,8000fb0 <_malloc_r+0x690>
 8000d30:	81400117 	ldw	r5,4(r16)
 8000d34:	013ffe04 	movi	r4,-8
 8000d38:	b0bffd04 	addi	r2,r22,-12
 8000d3c:	1104703a 	and	r2,r2,r4
 8000d40:	2900004c 	andi	r4,r5,1
 8000d44:	1108b03a 	or	r4,r2,r4
 8000d48:	81000115 	stw	r4,4(r16)
 8000d4c:	01400144 	movi	r5,5
 8000d50:	8089883a 	add	r4,r16,r2
 8000d54:	21400115 	stw	r5,4(r4)
 8000d58:	21400215 	stw	r5,8(r4)
 8000d5c:	3080c036 	bltu	r6,r2,8001060 <_malloc_r+0x740>
 8000d60:	00820074 	movhi	r2,2049
 8000d64:	10a41604 	addi	r2,r2,-28584
 8000d68:	11000017 	ldw	r4,0(r2)
 8000d6c:	20c0012e 	bgeu	r4,r3,8000d74 <_malloc_r+0x454>
 8000d70:	10c00015 	stw	r3,0(r2)
 8000d74:	00820074 	movhi	r2,2049
 8000d78:	10a41504 	addi	r2,r2,-28588
 8000d7c:	11000017 	ldw	r4,0(r2)
 8000d80:	9c000217 	ldw	r16,8(r19)
 8000d84:	20c0012e 	bgeu	r4,r3,8000d8c <_malloc_r+0x46c>
 8000d88:	10c00015 	stw	r3,0(r2)
 8000d8c:	80c00117 	ldw	r3,4(r16)
 8000d90:	00bfff04 	movi	r2,-4
 8000d94:	1886703a 	and	r3,r3,r2
 8000d98:	1c45c83a 	sub	r2,r3,r17
 8000d9c:	1c400236 	bltu	r3,r17,8000da8 <_malloc_r+0x488>
 8000da0:	00c003c4 	movi	r3,15
 8000da4:	18800416 	blt	r3,r2,8000db8 <_malloc_r+0x498>
 8000da8:	9009883a 	mov	r4,r18
 8000dac:	80034040 	call	8003404 <__malloc_unlock>
 8000db0:	0005883a 	mov	r2,zero
 8000db4:	003f0706 	br	80009d4 <__alt_data_end+0xfc0009d4>
 8000db8:	88c00054 	ori	r3,r17,1
 8000dbc:	80c00115 	stw	r3,4(r16)
 8000dc0:	8463883a 	add	r17,r16,r17
 8000dc4:	10800054 	ori	r2,r2,1
 8000dc8:	9c400215 	stw	r17,8(r19)
 8000dcc:	88800115 	stw	r2,4(r17)
 8000dd0:	9009883a 	mov	r4,r18
 8000dd4:	80034040 	call	8003404 <__malloc_unlock>
 8000dd8:	80800204 	addi	r2,r16,8
 8000ddc:	003efd06 	br	80009d4 <__alt_data_end+0xfc0009d4>
 8000de0:	00800504 	movi	r2,20
 8000de4:	10c0482e 	bgeu	r2,r3,8000f08 <_malloc_r+0x5e8>
 8000de8:	00801504 	movi	r2,84
 8000dec:	10c06836 	bltu	r2,r3,8000f90 <_malloc_r+0x670>
 8000df0:	8806d33a 	srli	r3,r17,12
 8000df4:	19c01b84 	addi	r7,r3,110
 8000df8:	39cb883a 	add	r5,r7,r7
 8000dfc:	003f0c06 	br	8000a30 <__alt_data_end+0xfc000a30>
 8000e00:	3804d27a 	srli	r2,r7,9
 8000e04:	01000104 	movi	r4,4
 8000e08:	2080422e 	bgeu	r4,r2,8000f14 <_malloc_r+0x5f4>
 8000e0c:	01000504 	movi	r4,20
 8000e10:	20807c36 	bltu	r4,r2,8001004 <_malloc_r+0x6e4>
 8000e14:	110016c4 	addi	r4,r2,91
 8000e18:	210b883a 	add	r5,r4,r4
 8000e1c:	294b883a 	add	r5,r5,r5
 8000e20:	294b883a 	add	r5,r5,r5
 8000e24:	994b883a 	add	r5,r19,r5
 8000e28:	28800217 	ldw	r2,8(r5)
 8000e2c:	02020034 	movhi	r8,2048
 8000e30:	4217d204 	addi	r8,r8,24392
 8000e34:	11406326 	beq	r2,r5,8000fc4 <_malloc_r+0x6a4>
 8000e38:	01bfff04 	movi	r6,-4
 8000e3c:	11000117 	ldw	r4,4(r2)
 8000e40:	2188703a 	and	r4,r4,r6
 8000e44:	3900022e 	bgeu	r7,r4,8000e50 <_malloc_r+0x530>
 8000e48:	10800217 	ldw	r2,8(r2)
 8000e4c:	28bffb1e 	bne	r5,r2,8000e3c <__alt_data_end+0xfc000e3c>
 8000e50:	11800317 	ldw	r6,12(r2)
 8000e54:	99000117 	ldw	r4,4(r19)
 8000e58:	81800315 	stw	r6,12(r16)
 8000e5c:	80800215 	stw	r2,8(r16)
 8000e60:	34000215 	stw	r16,8(r6)
 8000e64:	14000315 	stw	r16,12(r2)
 8000e68:	003f2706 	br	8000b08 <__alt_data_end+0xfc000b08>
 8000e6c:	88c00054 	ori	r3,r17,1
 8000e70:	80c00115 	stw	r3,4(r16)
 8000e74:	8463883a 	add	r17,r16,r17
 8000e78:	34400515 	stw	r17,20(r6)
 8000e7c:	34400415 	stw	r17,16(r6)
 8000e80:	10c00054 	ori	r3,r2,1
 8000e84:	8a400315 	stw	r9,12(r17)
 8000e88:	8a400215 	stw	r9,8(r17)
 8000e8c:	88c00115 	stw	r3,4(r17)
 8000e90:	88a3883a 	add	r17,r17,r2
 8000e94:	88800015 	stw	r2,0(r17)
 8000e98:	9009883a 	mov	r4,r18
 8000e9c:	80034040 	call	8003404 <__malloc_unlock>
 8000ea0:	80800204 	addi	r2,r16,8
 8000ea4:	003ecb06 	br	80009d4 <__alt_data_end+0xfc0009d4>
 8000ea8:	31000117 	ldw	r4,4(r6)
 8000eac:	003f1606 	br	8000b08 <__alt_data_end+0xfc000b08>
 8000eb0:	63000044 	addi	r12,r12,1
 8000eb4:	608000cc 	andi	r2,r12,3
 8000eb8:	5ac00204 	addi	r11,r11,8
 8000ebc:	103f2a1e 	bne	r2,zero,8000b68 <__alt_data_end+0xfc000b68>
 8000ec0:	00002106 	br	8000f48 <_malloc_r+0x628>
 8000ec4:	80800204 	addi	r2,r16,8
 8000ec8:	84000517 	ldw	r16,20(r16)
 8000ecc:	143eb31e 	bne	r2,r16,800099c <__alt_data_end+0xfc00099c>
 8000ed0:	18c00084 	addi	r3,r3,2
 8000ed4:	003eec06 	br	8000a88 <__alt_data_end+0xfc000a88>
 8000ed8:	8085883a 	add	r2,r16,r2
 8000edc:	10c00117 	ldw	r3,4(r2)
 8000ee0:	81000317 	ldw	r4,12(r16)
 8000ee4:	81400217 	ldw	r5,8(r16)
 8000ee8:	18c00054 	ori	r3,r3,1
 8000eec:	10c00115 	stw	r3,4(r2)
 8000ef0:	29000315 	stw	r4,12(r5)
 8000ef4:	21400215 	stw	r5,8(r4)
 8000ef8:	9009883a 	mov	r4,r18
 8000efc:	80034040 	call	8003404 <__malloc_unlock>
 8000f00:	80800204 	addi	r2,r16,8
 8000f04:	003eb306 	br	80009d4 <__alt_data_end+0xfc0009d4>
 8000f08:	19c016c4 	addi	r7,r3,91
 8000f0c:	39cb883a 	add	r5,r7,r7
 8000f10:	003ec706 	br	8000a30 <__alt_data_end+0xfc000a30>
 8000f14:	3804d1ba 	srli	r2,r7,6
 8000f18:	11000e04 	addi	r4,r2,56
 8000f1c:	210b883a 	add	r5,r4,r4
 8000f20:	003fbe06 	br	8000e1c <__alt_data_end+0xfc000e1c>
 8000f24:	84ff5d26 	beq	r16,r19,8000c9c <__alt_data_end+0xfc000c9c>
 8000f28:	9c000217 	ldw	r16,8(r19)
 8000f2c:	00bfff04 	movi	r2,-4
 8000f30:	80c00117 	ldw	r3,4(r16)
 8000f34:	1886703a 	and	r3,r3,r2
 8000f38:	003f9706 	br	8000d98 <__alt_data_end+0xfc000d98>
 8000f3c:	52800017 	ldw	r10,0(r10)
 8000f40:	18ffffc4 	addi	r3,r3,-1
 8000f44:	50805c1e 	bne	r10,r2,80010b8 <_malloc_r+0x798>
 8000f48:	190000cc 	andi	r4,r3,3
 8000f4c:	50bffe04 	addi	r2,r10,-8
 8000f50:	203ffa1e 	bne	r4,zero,8000f3c <__alt_data_end+0xfc000f3c>
 8000f54:	98800117 	ldw	r2,4(r19)
 8000f58:	0146303a 	nor	r3,zero,r5
 8000f5c:	1884703a 	and	r2,r3,r2
 8000f60:	98800115 	stw	r2,4(r19)
 8000f64:	294b883a 	add	r5,r5,r5
 8000f68:	117f2e36 	bltu	r2,r5,8000c24 <__alt_data_end+0xfc000c24>
 8000f6c:	283f2d26 	beq	r5,zero,8000c24 <__alt_data_end+0xfc000c24>
 8000f70:	1146703a 	and	r3,r2,r5
 8000f74:	1800521e 	bne	r3,zero,80010c0 <_malloc_r+0x7a0>
 8000f78:	6007883a 	mov	r3,r12
 8000f7c:	294b883a 	add	r5,r5,r5
 8000f80:	1148703a 	and	r4,r2,r5
 8000f84:	18c00104 	addi	r3,r3,4
 8000f88:	203ffc26 	beq	r4,zero,8000f7c <__alt_data_end+0xfc000f7c>
 8000f8c:	003ef006 	br	8000b50 <__alt_data_end+0xfc000b50>
 8000f90:	00805504 	movi	r2,340
 8000f94:	10c01336 	bltu	r2,r3,8000fe4 <_malloc_r+0x6c4>
 8000f98:	8806d3fa 	srli	r3,r17,15
 8000f9c:	19c01dc4 	addi	r7,r3,119
 8000fa0:	39cb883a 	add	r5,r7,r7
 8000fa4:	003ea206 	br	8000a30 <__alt_data_end+0xfc000a30>
 8000fa8:	00c40004 	movi	r3,4096
 8000fac:	003f4d06 	br	8000ce4 <__alt_data_end+0xfc000ce4>
 8000fb0:	00800044 	movi	r2,1
 8000fb4:	a0800115 	stw	r2,4(r20)
 8000fb8:	a021883a 	mov	r16,r20
 8000fbc:	0007883a 	mov	r3,zero
 8000fc0:	003f7506 	br	8000d98 <__alt_data_end+0xfc000d98>
 8000fc4:	200bd0ba 	srai	r5,r4,2
 8000fc8:	01800044 	movi	r6,1
 8000fcc:	41000117 	ldw	r4,4(r8)
 8000fd0:	314a983a 	sll	r5,r6,r5
 8000fd4:	100d883a 	mov	r6,r2
 8000fd8:	2908b03a 	or	r4,r5,r4
 8000fdc:	41000115 	stw	r4,4(r8)
 8000fe0:	003f9d06 	br	8000e58 <__alt_data_end+0xfc000e58>
 8000fe4:	00815504 	movi	r2,1364
 8000fe8:	10c01336 	bltu	r2,r3,8001038 <_malloc_r+0x718>
 8000fec:	8806d4ba 	srli	r3,r17,18
 8000ff0:	19c01f04 	addi	r7,r3,124
 8000ff4:	39cb883a 	add	r5,r7,r7
 8000ff8:	003e8d06 	br	8000a30 <__alt_data_end+0xfc000a30>
 8000ffc:	ad400404 	addi	r21,r21,16
 8001000:	003f1d06 	br	8000c78 <__alt_data_end+0xfc000c78>
 8001004:	01001504 	movi	r4,84
 8001008:	20801c36 	bltu	r4,r2,800107c <_malloc_r+0x75c>
 800100c:	3804d33a 	srli	r2,r7,12
 8001010:	11001b84 	addi	r4,r2,110
 8001014:	210b883a 	add	r5,r4,r4
 8001018:	003f8006 	br	8000e1c <__alt_data_end+0xfc000e1c>
 800101c:	3083ffcc 	andi	r2,r6,4095
 8001020:	103f241e 	bne	r2,zero,8000cb4 <__alt_data_end+0xfc000cb4>
 8001024:	99000217 	ldw	r4,8(r19)
 8001028:	ad85883a 	add	r2,r21,r22
 800102c:	10800054 	ori	r2,r2,1
 8001030:	20800115 	stw	r2,4(r4)
 8001034:	003f4a06 	br	8000d60 <__alt_data_end+0xfc000d60>
 8001038:	01403f04 	movi	r5,252
 800103c:	01c01f84 	movi	r7,126
 8001040:	003e7b06 	br	8000a30 <__alt_data_end+0xfc000a30>
 8001044:	00c00044 	movi	r3,1
 8001048:	002b883a 	mov	r21,zero
 800104c:	003f3006 	br	8000d10 <__alt_data_end+0xfc000d10>
 8001050:	00820034 	movhi	r2,2048
 8001054:	109d6304 	addi	r2,r2,30092
 8001058:	15000015 	stw	r20,0(r2)
 800105c:	003f1b06 	br	8000ccc <__alt_data_end+0xfc000ccc>
 8001060:	9009883a 	mov	r4,r18
 8001064:	81400204 	addi	r5,r16,8
 8001068:	80022840 	call	8002284 <_free_r>
 800106c:	00820074 	movhi	r2,2049
 8001070:	10a41f04 	addi	r2,r2,-28548
 8001074:	10c00017 	ldw	r3,0(r2)
 8001078:	003f3906 	br	8000d60 <__alt_data_end+0xfc000d60>
 800107c:	01005504 	movi	r4,340
 8001080:	20800436 	bltu	r4,r2,8001094 <_malloc_r+0x774>
 8001084:	3804d3fa 	srli	r2,r7,15
 8001088:	11001dc4 	addi	r4,r2,119
 800108c:	210b883a 	add	r5,r4,r4
 8001090:	003f6206 	br	8000e1c <__alt_data_end+0xfc000e1c>
 8001094:	01015504 	movi	r4,1364
 8001098:	20800436 	bltu	r4,r2,80010ac <_malloc_r+0x78c>
 800109c:	3804d4ba 	srli	r2,r7,18
 80010a0:	11001f04 	addi	r4,r2,124
 80010a4:	210b883a 	add	r5,r4,r4
 80010a8:	003f5c06 	br	8000e1c <__alt_data_end+0xfc000e1c>
 80010ac:	01403f04 	movi	r5,252
 80010b0:	01001f84 	movi	r4,126
 80010b4:	003f5906 	br	8000e1c <__alt_data_end+0xfc000e1c>
 80010b8:	98800117 	ldw	r2,4(r19)
 80010bc:	003fa906 	br	8000f64 <__alt_data_end+0xfc000f64>
 80010c0:	6007883a 	mov	r3,r12
 80010c4:	003ea206 	br	8000b50 <__alt_data_end+0xfc000b50>

080010c8 <memchr>:
 80010c8:	208000cc 	andi	r2,r4,3
 80010cc:	280f883a 	mov	r7,r5
 80010d0:	10003526 	beq	r2,zero,80011a8 <memchr+0xe0>
 80010d4:	30bfffc4 	addi	r2,r6,-1
 80010d8:	30001b26 	beq	r6,zero,8001148 <memchr+0x80>
 80010dc:	21800003 	ldbu	r6,0(r4)
 80010e0:	28c03fcc 	andi	r3,r5,255
 80010e4:	30c01a26 	beq	r6,r3,8001150 <memchr+0x88>
 80010e8:	180d883a 	mov	r6,r3
 80010ec:	00000406 	br	8001100 <memchr+0x38>
 80010f0:	10001526 	beq	r2,zero,8001148 <memchr+0x80>
 80010f4:	20c00003 	ldbu	r3,0(r4)
 80010f8:	10bfffc4 	addi	r2,r2,-1
 80010fc:	19801426 	beq	r3,r6,8001150 <memchr+0x88>
 8001100:	21000044 	addi	r4,r4,1
 8001104:	20c000cc 	andi	r3,r4,3
 8001108:	183ff91e 	bne	r3,zero,80010f0 <__alt_data_end+0xfc0010f0>
 800110c:	024000c4 	movi	r9,3
 8001110:	48801136 	bltu	r9,r2,8001158 <memchr+0x90>
 8001114:	10000c26 	beq	r2,zero,8001148 <memchr+0x80>
 8001118:	20c00003 	ldbu	r3,0(r4)
 800111c:	29403fcc 	andi	r5,r5,255
 8001120:	19400b26 	beq	r3,r5,8001150 <memchr+0x88>
 8001124:	20c00044 	addi	r3,r4,1
 8001128:	2085883a 	add	r2,r4,r2
 800112c:	39803fcc 	andi	r6,r7,255
 8001130:	00000306 	br	8001140 <memchr+0x78>
 8001134:	18c00044 	addi	r3,r3,1
 8001138:	197fffc3 	ldbu	r5,-1(r3)
 800113c:	29800426 	beq	r5,r6,8001150 <memchr+0x88>
 8001140:	1809883a 	mov	r4,r3
 8001144:	18bffb1e 	bne	r3,r2,8001134 <__alt_data_end+0xfc001134>
 8001148:	0005883a 	mov	r2,zero
 800114c:	f800283a 	ret
 8001150:	2005883a 	mov	r2,r4
 8001154:	f800283a 	ret
 8001158:	28c03fcc 	andi	r3,r5,255
 800115c:	1810923a 	slli	r8,r3,8
 8001160:	02ffbff4 	movhi	r11,65279
 8001164:	02a02074 	movhi	r10,32897
 8001168:	40c6b03a 	or	r3,r8,r3
 800116c:	1810943a 	slli	r8,r3,16
 8001170:	5affbfc4 	addi	r11,r11,-257
 8001174:	52a02004 	addi	r10,r10,-32640
 8001178:	40d0b03a 	or	r8,r8,r3
 800117c:	20c00017 	ldw	r3,0(r4)
 8001180:	40c6f03a 	xor	r3,r8,r3
 8001184:	1acd883a 	add	r6,r3,r11
 8001188:	00c6303a 	nor	r3,zero,r3
 800118c:	30c6703a 	and	r3,r6,r3
 8001190:	1a86703a 	and	r3,r3,r10
 8001194:	183fdf1e 	bne	r3,zero,8001114 <__alt_data_end+0xfc001114>
 8001198:	10bfff04 	addi	r2,r2,-4
 800119c:	21000104 	addi	r4,r4,4
 80011a0:	48bff636 	bltu	r9,r2,800117c <__alt_data_end+0xfc00117c>
 80011a4:	003fdb06 	br	8001114 <__alt_data_end+0xfc001114>
 80011a8:	3005883a 	mov	r2,r6
 80011ac:	003fd706 	br	800110c <__alt_data_end+0xfc00110c>

080011b0 <memcpy>:
 80011b0:	deffff04 	addi	sp,sp,-4
 80011b4:	dc000015 	stw	r16,0(sp)
 80011b8:	00c003c4 	movi	r3,15
 80011bc:	2005883a 	mov	r2,r4
 80011c0:	1980432e 	bgeu	r3,r6,80012d0 <memcpy+0x120>
 80011c4:	2146b03a 	or	r3,r4,r5
 80011c8:	18c000cc 	andi	r3,r3,3
 80011cc:	1800421e 	bne	r3,zero,80012d8 <memcpy+0x128>
 80011d0:	343ffc04 	addi	r16,r6,-16
 80011d4:	8020d13a 	srli	r16,r16,4
 80011d8:	28c00104 	addi	r3,r5,4
 80011dc:	23400104 	addi	r13,r4,4
 80011e0:	801e913a 	slli	r15,r16,4
 80011e4:	2b000204 	addi	r12,r5,8
 80011e8:	22c00204 	addi	r11,r4,8
 80011ec:	7bc00504 	addi	r15,r15,20
 80011f0:	2a800304 	addi	r10,r5,12
 80011f4:	22400304 	addi	r9,r4,12
 80011f8:	2bdf883a 	add	r15,r5,r15
 80011fc:	2811883a 	mov	r8,r5
 8001200:	200f883a 	mov	r7,r4
 8001204:	41000017 	ldw	r4,0(r8)
 8001208:	39c00404 	addi	r7,r7,16
 800120c:	18c00404 	addi	r3,r3,16
 8001210:	393ffc15 	stw	r4,-16(r7)
 8001214:	1bbffc17 	ldw	r14,-16(r3)
 8001218:	6b400404 	addi	r13,r13,16
 800121c:	5ac00404 	addi	r11,r11,16
 8001220:	6bbffc15 	stw	r14,-16(r13)
 8001224:	63800017 	ldw	r14,0(r12)
 8001228:	4a400404 	addi	r9,r9,16
 800122c:	42000404 	addi	r8,r8,16
 8001230:	5bbffc15 	stw	r14,-16(r11)
 8001234:	53800017 	ldw	r14,0(r10)
 8001238:	63000404 	addi	r12,r12,16
 800123c:	52800404 	addi	r10,r10,16
 8001240:	4bbffc15 	stw	r14,-16(r9)
 8001244:	1bffef1e 	bne	r3,r15,8001204 <__alt_data_end+0xfc001204>
 8001248:	81c00044 	addi	r7,r16,1
 800124c:	380e913a 	slli	r7,r7,4
 8001250:	310003cc 	andi	r4,r6,15
 8001254:	02c000c4 	movi	r11,3
 8001258:	11c7883a 	add	r3,r2,r7
 800125c:	29cb883a 	add	r5,r5,r7
 8001260:	59001f2e 	bgeu	r11,r4,80012e0 <memcpy+0x130>
 8001264:	1813883a 	mov	r9,r3
 8001268:	2811883a 	mov	r8,r5
 800126c:	200f883a 	mov	r7,r4
 8001270:	42800017 	ldw	r10,0(r8)
 8001274:	4a400104 	addi	r9,r9,4
 8001278:	39ffff04 	addi	r7,r7,-4
 800127c:	4abfff15 	stw	r10,-4(r9)
 8001280:	42000104 	addi	r8,r8,4
 8001284:	59fffa36 	bltu	r11,r7,8001270 <__alt_data_end+0xfc001270>
 8001288:	213fff04 	addi	r4,r4,-4
 800128c:	2008d0ba 	srli	r4,r4,2
 8001290:	318000cc 	andi	r6,r6,3
 8001294:	21000044 	addi	r4,r4,1
 8001298:	2109883a 	add	r4,r4,r4
 800129c:	2109883a 	add	r4,r4,r4
 80012a0:	1907883a 	add	r3,r3,r4
 80012a4:	290b883a 	add	r5,r5,r4
 80012a8:	30000626 	beq	r6,zero,80012c4 <memcpy+0x114>
 80012ac:	198d883a 	add	r6,r3,r6
 80012b0:	29c00003 	ldbu	r7,0(r5)
 80012b4:	18c00044 	addi	r3,r3,1
 80012b8:	29400044 	addi	r5,r5,1
 80012bc:	19ffffc5 	stb	r7,-1(r3)
 80012c0:	19bffb1e 	bne	r3,r6,80012b0 <__alt_data_end+0xfc0012b0>
 80012c4:	dc000017 	ldw	r16,0(sp)
 80012c8:	dec00104 	addi	sp,sp,4
 80012cc:	f800283a 	ret
 80012d0:	2007883a 	mov	r3,r4
 80012d4:	003ff406 	br	80012a8 <__alt_data_end+0xfc0012a8>
 80012d8:	2007883a 	mov	r3,r4
 80012dc:	003ff306 	br	80012ac <__alt_data_end+0xfc0012ac>
 80012e0:	200d883a 	mov	r6,r4
 80012e4:	003ff006 	br	80012a8 <__alt_data_end+0xfc0012a8>

080012e8 <memmove>:
 80012e8:	2005883a 	mov	r2,r4
 80012ec:	29000b2e 	bgeu	r5,r4,800131c <memmove+0x34>
 80012f0:	298f883a 	add	r7,r5,r6
 80012f4:	21c0092e 	bgeu	r4,r7,800131c <memmove+0x34>
 80012f8:	2187883a 	add	r3,r4,r6
 80012fc:	198bc83a 	sub	r5,r3,r6
 8001300:	30004b26 	beq	r6,zero,8001430 <memmove+0x148>
 8001304:	39ffffc4 	addi	r7,r7,-1
 8001308:	39000003 	ldbu	r4,0(r7)
 800130c:	18ffffc4 	addi	r3,r3,-1
 8001310:	19000005 	stb	r4,0(r3)
 8001314:	197ffb1e 	bne	r3,r5,8001304 <__alt_data_end+0xfc001304>
 8001318:	f800283a 	ret
 800131c:	00c003c4 	movi	r3,15
 8001320:	1980412e 	bgeu	r3,r6,8001428 <memmove+0x140>
 8001324:	1146b03a 	or	r3,r2,r5
 8001328:	18c000cc 	andi	r3,r3,3
 800132c:	1800411e 	bne	r3,zero,8001434 <memmove+0x14c>
 8001330:	33fffc04 	addi	r15,r6,-16
 8001334:	781ed13a 	srli	r15,r15,4
 8001338:	28c00104 	addi	r3,r5,4
 800133c:	13400104 	addi	r13,r2,4
 8001340:	781c913a 	slli	r14,r15,4
 8001344:	2b000204 	addi	r12,r5,8
 8001348:	12c00204 	addi	r11,r2,8
 800134c:	73800504 	addi	r14,r14,20
 8001350:	2a800304 	addi	r10,r5,12
 8001354:	12400304 	addi	r9,r2,12
 8001358:	2b9d883a 	add	r14,r5,r14
 800135c:	2811883a 	mov	r8,r5
 8001360:	100f883a 	mov	r7,r2
 8001364:	41000017 	ldw	r4,0(r8)
 8001368:	39c00404 	addi	r7,r7,16
 800136c:	18c00404 	addi	r3,r3,16
 8001370:	393ffc15 	stw	r4,-16(r7)
 8001374:	193ffc17 	ldw	r4,-16(r3)
 8001378:	6b400404 	addi	r13,r13,16
 800137c:	5ac00404 	addi	r11,r11,16
 8001380:	693ffc15 	stw	r4,-16(r13)
 8001384:	61000017 	ldw	r4,0(r12)
 8001388:	4a400404 	addi	r9,r9,16
 800138c:	42000404 	addi	r8,r8,16
 8001390:	593ffc15 	stw	r4,-16(r11)
 8001394:	51000017 	ldw	r4,0(r10)
 8001398:	63000404 	addi	r12,r12,16
 800139c:	52800404 	addi	r10,r10,16
 80013a0:	493ffc15 	stw	r4,-16(r9)
 80013a4:	1bbfef1e 	bne	r3,r14,8001364 <__alt_data_end+0xfc001364>
 80013a8:	79000044 	addi	r4,r15,1
 80013ac:	2008913a 	slli	r4,r4,4
 80013b0:	328003cc 	andi	r10,r6,15
 80013b4:	02c000c4 	movi	r11,3
 80013b8:	1107883a 	add	r3,r2,r4
 80013bc:	290b883a 	add	r5,r5,r4
 80013c0:	5a801e2e 	bgeu	r11,r10,800143c <memmove+0x154>
 80013c4:	1813883a 	mov	r9,r3
 80013c8:	2811883a 	mov	r8,r5
 80013cc:	500f883a 	mov	r7,r10
 80013d0:	41000017 	ldw	r4,0(r8)
 80013d4:	4a400104 	addi	r9,r9,4
 80013d8:	39ffff04 	addi	r7,r7,-4
 80013dc:	493fff15 	stw	r4,-4(r9)
 80013e0:	42000104 	addi	r8,r8,4
 80013e4:	59fffa36 	bltu	r11,r7,80013d0 <__alt_data_end+0xfc0013d0>
 80013e8:	513fff04 	addi	r4,r10,-4
 80013ec:	2008d0ba 	srli	r4,r4,2
 80013f0:	318000cc 	andi	r6,r6,3
 80013f4:	21000044 	addi	r4,r4,1
 80013f8:	2109883a 	add	r4,r4,r4
 80013fc:	2109883a 	add	r4,r4,r4
 8001400:	1907883a 	add	r3,r3,r4
 8001404:	290b883a 	add	r5,r5,r4
 8001408:	30000926 	beq	r6,zero,8001430 <memmove+0x148>
 800140c:	198d883a 	add	r6,r3,r6
 8001410:	29c00003 	ldbu	r7,0(r5)
 8001414:	18c00044 	addi	r3,r3,1
 8001418:	29400044 	addi	r5,r5,1
 800141c:	19ffffc5 	stb	r7,-1(r3)
 8001420:	19bffb1e 	bne	r3,r6,8001410 <__alt_data_end+0xfc001410>
 8001424:	f800283a 	ret
 8001428:	1007883a 	mov	r3,r2
 800142c:	003ff606 	br	8001408 <__alt_data_end+0xfc001408>
 8001430:	f800283a 	ret
 8001434:	1007883a 	mov	r3,r2
 8001438:	003ff406 	br	800140c <__alt_data_end+0xfc00140c>
 800143c:	500d883a 	mov	r6,r10
 8001440:	003ff106 	br	8001408 <__alt_data_end+0xfc001408>

08001444 <_realloc_r>:
 8001444:	defff604 	addi	sp,sp,-40
 8001448:	dcc00315 	stw	r19,12(sp)
 800144c:	dc400115 	stw	r17,4(sp)
 8001450:	dfc00915 	stw	ra,36(sp)
 8001454:	df000815 	stw	fp,32(sp)
 8001458:	ddc00715 	stw	r23,28(sp)
 800145c:	dd800615 	stw	r22,24(sp)
 8001460:	dd400515 	stw	r21,20(sp)
 8001464:	dd000415 	stw	r20,16(sp)
 8001468:	dc800215 	stw	r18,8(sp)
 800146c:	dc000015 	stw	r16,0(sp)
 8001470:	2827883a 	mov	r19,r5
 8001474:	3023883a 	mov	r17,r6
 8001478:	2800bf26 	beq	r5,zero,8001778 <_realloc_r+0x334>
 800147c:	2025883a 	mov	r18,r4
 8001480:	80033e40 	call	80033e4 <__malloc_lock>
 8001484:	98ffff17 	ldw	r3,-4(r19)
 8001488:	01bfff04 	movi	r6,-4
 800148c:	890002c4 	addi	r4,r17,11
 8001490:	01c00584 	movi	r7,22
 8001494:	9d7ffe04 	addi	r21,r19,-8
 8001498:	19a0703a 	and	r16,r3,r6
 800149c:	39003f2e 	bgeu	r7,r4,800159c <_realloc_r+0x158>
 80014a0:	053ffe04 	movi	r20,-8
 80014a4:	2528703a 	and	r20,r4,r20
 80014a8:	a00f883a 	mov	r7,r20
 80014ac:	a0008216 	blt	r20,zero,80016b8 <_realloc_r+0x274>
 80014b0:	a4408136 	bltu	r20,r17,80016b8 <_realloc_r+0x274>
 80014b4:	81c03c0e 	bge	r16,r7,80015a8 <_realloc_r+0x164>
 80014b8:	07020034 	movhi	fp,2048
 80014bc:	e717d204 	addi	fp,fp,24392
 80014c0:	e1000217 	ldw	r4,8(fp)
 80014c4:	ac05883a 	add	r2,r21,r16
 80014c8:	2080bf26 	beq	r4,r2,80017c8 <_realloc_r+0x384>
 80014cc:	11000117 	ldw	r4,4(r2)
 80014d0:	023fff84 	movi	r8,-2
 80014d4:	2210703a 	and	r8,r4,r8
 80014d8:	1211883a 	add	r8,r2,r8
 80014dc:	41400117 	ldw	r5,4(r8)
 80014e0:	2940004c 	andi	r5,r5,1
 80014e4:	28004a1e 	bne	r5,zero,8001610 <_realloc_r+0x1cc>
 80014e8:	017fff04 	movi	r5,-4
 80014ec:	2148703a 	and	r4,r4,r5
 80014f0:	2409883a 	add	r4,r4,r16
 80014f4:	21c0ad0e 	bge	r4,r7,80017ac <_realloc_r+0x368>
 80014f8:	18c0004c 	andi	r3,r3,1
 80014fc:	18007f1e 	bne	r3,zero,80016fc <_realloc_r+0x2b8>
 8001500:	9dfffe17 	ldw	r23,-8(r19)
 8001504:	adefc83a 	sub	r23,r21,r23
 8001508:	bd800117 	ldw	r22,4(r23)
 800150c:	b14a703a 	and	r5,r22,r5
 8001510:	216d883a 	add	r22,r4,r5
 8001514:	b1c04516 	blt	r22,r7,800162c <_realloc_r+0x1e8>
 8001518:	10c00317 	ldw	r3,12(r2)
 800151c:	10800217 	ldw	r2,8(r2)
 8001520:	81bfff04 	addi	r6,r16,-4
 8001524:	bc400204 	addi	r17,r23,8
 8001528:	10c00315 	stw	r3,12(r2)
 800152c:	18800215 	stw	r2,8(r3)
 8001530:	b9400217 	ldw	r5,8(r23)
 8001534:	b8c00317 	ldw	r3,12(r23)
 8001538:	00800904 	movi	r2,36
 800153c:	28c00315 	stw	r3,12(r5)
 8001540:	19400215 	stw	r5,8(r3)
 8001544:	1180ef36 	bltu	r2,r6,8001904 <_realloc_r+0x4c0>
 8001548:	008004c4 	movi	r2,19
 800154c:	1180da2e 	bgeu	r2,r6,80018b8 <_realloc_r+0x474>
 8001550:	98800017 	ldw	r2,0(r19)
 8001554:	b8800215 	stw	r2,8(r23)
 8001558:	98800117 	ldw	r2,4(r19)
 800155c:	b8800315 	stw	r2,12(r23)
 8001560:	008006c4 	movi	r2,27
 8001564:	1180fc2e 	bgeu	r2,r6,8001958 <_realloc_r+0x514>
 8001568:	98800217 	ldw	r2,8(r19)
 800156c:	b8800415 	stw	r2,16(r23)
 8001570:	98800317 	ldw	r2,12(r19)
 8001574:	b8800515 	stw	r2,20(r23)
 8001578:	00800904 	movi	r2,36
 800157c:	3080421e 	bne	r6,r2,8001688 <_realloc_r+0x244>
 8001580:	98800417 	ldw	r2,16(r19)
 8001584:	9cc00604 	addi	r19,r19,24
 8001588:	b8c00804 	addi	r3,r23,32
 800158c:	b8800615 	stw	r2,24(r23)
 8001590:	98bfff17 	ldw	r2,-4(r19)
 8001594:	b8800715 	stw	r2,28(r23)
 8001598:	00003d06 	br	8001690 <_realloc_r+0x24c>
 800159c:	01c00404 	movi	r7,16
 80015a0:	3829883a 	mov	r20,r7
 80015a4:	003fc206 	br	80014b0 <__alt_data_end+0xfc0014b0>
 80015a8:	9823883a 	mov	r17,r19
 80015ac:	850fc83a 	sub	r7,r16,r20
 80015b0:	008003c4 	movi	r2,15
 80015b4:	18c0004c 	andi	r3,r3,1
 80015b8:	11c04336 	bltu	r2,r7,80016c8 <_realloc_r+0x284>
 80015bc:	1c06b03a 	or	r3,r3,r16
 80015c0:	a8c00115 	stw	r3,4(r21)
 80015c4:	ac21883a 	add	r16,r21,r16
 80015c8:	80c00117 	ldw	r3,4(r16)
 80015cc:	18c00054 	ori	r3,r3,1
 80015d0:	80c00115 	stw	r3,4(r16)
 80015d4:	9009883a 	mov	r4,r18
 80015d8:	80034040 	call	8003404 <__malloc_unlock>
 80015dc:	8805883a 	mov	r2,r17
 80015e0:	dfc00917 	ldw	ra,36(sp)
 80015e4:	df000817 	ldw	fp,32(sp)
 80015e8:	ddc00717 	ldw	r23,28(sp)
 80015ec:	dd800617 	ldw	r22,24(sp)
 80015f0:	dd400517 	ldw	r21,20(sp)
 80015f4:	dd000417 	ldw	r20,16(sp)
 80015f8:	dcc00317 	ldw	r19,12(sp)
 80015fc:	dc800217 	ldw	r18,8(sp)
 8001600:	dc400117 	ldw	r17,4(sp)
 8001604:	dc000017 	ldw	r16,0(sp)
 8001608:	dec00a04 	addi	sp,sp,40
 800160c:	f800283a 	ret
 8001610:	18c0004c 	andi	r3,r3,1
 8001614:	1800391e 	bne	r3,zero,80016fc <_realloc_r+0x2b8>
 8001618:	9dfffe17 	ldw	r23,-8(r19)
 800161c:	00bfff04 	movi	r2,-4
 8001620:	adefc83a 	sub	r23,r21,r23
 8001624:	b9400117 	ldw	r5,4(r23)
 8001628:	288a703a 	and	r5,r5,r2
 800162c:	2c2d883a 	add	r22,r5,r16
 8001630:	b1c03216 	blt	r22,r7,80016fc <_realloc_r+0x2b8>
 8001634:	b8800317 	ldw	r2,12(r23)
 8001638:	b8c00217 	ldw	r3,8(r23)
 800163c:	81bfff04 	addi	r6,r16,-4
 8001640:	01000904 	movi	r4,36
 8001644:	18800315 	stw	r2,12(r3)
 8001648:	10c00215 	stw	r3,8(r2)
 800164c:	bc400204 	addi	r17,r23,8
 8001650:	2180ac36 	bltu	r4,r6,8001904 <_realloc_r+0x4c0>
 8001654:	008004c4 	movi	r2,19
 8001658:	1180972e 	bgeu	r2,r6,80018b8 <_realloc_r+0x474>
 800165c:	98800017 	ldw	r2,0(r19)
 8001660:	b8800215 	stw	r2,8(r23)
 8001664:	98800117 	ldw	r2,4(r19)
 8001668:	b8800315 	stw	r2,12(r23)
 800166c:	008006c4 	movi	r2,27
 8001670:	1180b92e 	bgeu	r2,r6,8001958 <_realloc_r+0x514>
 8001674:	98800217 	ldw	r2,8(r19)
 8001678:	b8800415 	stw	r2,16(r23)
 800167c:	98800317 	ldw	r2,12(r19)
 8001680:	b8800515 	stw	r2,20(r23)
 8001684:	313fbe26 	beq	r6,r4,8001580 <__alt_data_end+0xfc001580>
 8001688:	b8c00604 	addi	r3,r23,24
 800168c:	9cc00404 	addi	r19,r19,16
 8001690:	98800017 	ldw	r2,0(r19)
 8001694:	b021883a 	mov	r16,r22
 8001698:	b82b883a 	mov	r21,r23
 800169c:	18800015 	stw	r2,0(r3)
 80016a0:	98800117 	ldw	r2,4(r19)
 80016a4:	18800115 	stw	r2,4(r3)
 80016a8:	98800217 	ldw	r2,8(r19)
 80016ac:	18800215 	stw	r2,8(r3)
 80016b0:	b8c00117 	ldw	r3,4(r23)
 80016b4:	003fbd06 	br	80015ac <__alt_data_end+0xfc0015ac>
 80016b8:	00800304 	movi	r2,12
 80016bc:	90800015 	stw	r2,0(r18)
 80016c0:	0005883a 	mov	r2,zero
 80016c4:	003fc606 	br	80015e0 <__alt_data_end+0xfc0015e0>
 80016c8:	1d06b03a 	or	r3,r3,r20
 80016cc:	ad0b883a 	add	r5,r21,r20
 80016d0:	a8c00115 	stw	r3,4(r21)
 80016d4:	38800054 	ori	r2,r7,1
 80016d8:	28800115 	stw	r2,4(r5)
 80016dc:	29cf883a 	add	r7,r5,r7
 80016e0:	38800117 	ldw	r2,4(r7)
 80016e4:	9009883a 	mov	r4,r18
 80016e8:	29400204 	addi	r5,r5,8
 80016ec:	10800054 	ori	r2,r2,1
 80016f0:	38800115 	stw	r2,4(r7)
 80016f4:	80022840 	call	8002284 <_free_r>
 80016f8:	003fb606 	br	80015d4 <__alt_data_end+0xfc0015d4>
 80016fc:	880b883a 	mov	r5,r17
 8001700:	9009883a 	mov	r4,r18
 8001704:	80009200 	call	8000920 <_malloc_r>
 8001708:	1023883a 	mov	r17,r2
 800170c:	1000aa26 	beq	r2,zero,80019b8 <_realloc_r+0x574>
 8001710:	98ffff17 	ldw	r3,-4(r19)
 8001714:	113ffe04 	addi	r4,r2,-8
 8001718:	00bfff84 	movi	r2,-2
 800171c:	1884703a 	and	r2,r3,r2
 8001720:	a885883a 	add	r2,r21,r2
 8001724:	20808626 	beq	r4,r2,8001940 <_realloc_r+0x4fc>
 8001728:	81bfff04 	addi	r6,r16,-4
 800172c:	00800904 	movi	r2,36
 8001730:	11807036 	bltu	r2,r6,80018f4 <_realloc_r+0x4b0>
 8001734:	00c004c4 	movi	r3,19
 8001738:	19805636 	bltu	r3,r6,8001894 <_realloc_r+0x450>
 800173c:	8805883a 	mov	r2,r17
 8001740:	9807883a 	mov	r3,r19
 8001744:	19000017 	ldw	r4,0(r3)
 8001748:	11000015 	stw	r4,0(r2)
 800174c:	19000117 	ldw	r4,4(r3)
 8001750:	11000115 	stw	r4,4(r2)
 8001754:	18c00217 	ldw	r3,8(r3)
 8001758:	10c00215 	stw	r3,8(r2)
 800175c:	980b883a 	mov	r5,r19
 8001760:	9009883a 	mov	r4,r18
 8001764:	80022840 	call	8002284 <_free_r>
 8001768:	9009883a 	mov	r4,r18
 800176c:	80034040 	call	8003404 <__malloc_unlock>
 8001770:	8805883a 	mov	r2,r17
 8001774:	003f9a06 	br	80015e0 <__alt_data_end+0xfc0015e0>
 8001778:	300b883a 	mov	r5,r6
 800177c:	dfc00917 	ldw	ra,36(sp)
 8001780:	df000817 	ldw	fp,32(sp)
 8001784:	ddc00717 	ldw	r23,28(sp)
 8001788:	dd800617 	ldw	r22,24(sp)
 800178c:	dd400517 	ldw	r21,20(sp)
 8001790:	dd000417 	ldw	r20,16(sp)
 8001794:	dcc00317 	ldw	r19,12(sp)
 8001798:	dc800217 	ldw	r18,8(sp)
 800179c:	dc400117 	ldw	r17,4(sp)
 80017a0:	dc000017 	ldw	r16,0(sp)
 80017a4:	dec00a04 	addi	sp,sp,40
 80017a8:	80009201 	jmpi	8000920 <_malloc_r>
 80017ac:	11400317 	ldw	r5,12(r2)
 80017b0:	10800217 	ldw	r2,8(r2)
 80017b4:	9823883a 	mov	r17,r19
 80017b8:	2021883a 	mov	r16,r4
 80017bc:	11400315 	stw	r5,12(r2)
 80017c0:	28800215 	stw	r2,8(r5)
 80017c4:	003f7906 	br	80015ac <__alt_data_end+0xfc0015ac>
 80017c8:	21000117 	ldw	r4,4(r4)
 80017cc:	00bfff04 	movi	r2,-4
 80017d0:	a1800404 	addi	r6,r20,16
 80017d4:	2088703a 	and	r4,r4,r2
 80017d8:	2409883a 	add	r4,r4,r16
 80017dc:	2180380e 	bge	r4,r6,80018c0 <_realloc_r+0x47c>
 80017e0:	18c0004c 	andi	r3,r3,1
 80017e4:	183fc51e 	bne	r3,zero,80016fc <__alt_data_end+0xfc0016fc>
 80017e8:	9dfffe17 	ldw	r23,-8(r19)
 80017ec:	adefc83a 	sub	r23,r21,r23
 80017f0:	b9400117 	ldw	r5,4(r23)
 80017f4:	288a703a 	and	r5,r5,r2
 80017f8:	216d883a 	add	r22,r4,r5
 80017fc:	b1bf8b16 	blt	r22,r6,800162c <__alt_data_end+0xfc00162c>
 8001800:	b8800317 	ldw	r2,12(r23)
 8001804:	b8c00217 	ldw	r3,8(r23)
 8001808:	81bfff04 	addi	r6,r16,-4
 800180c:	01000904 	movi	r4,36
 8001810:	18800315 	stw	r2,12(r3)
 8001814:	10c00215 	stw	r3,8(r2)
 8001818:	bc400204 	addi	r17,r23,8
 800181c:	21805a36 	bltu	r4,r6,8001988 <_realloc_r+0x544>
 8001820:	008004c4 	movi	r2,19
 8001824:	1180562e 	bgeu	r2,r6,8001980 <_realloc_r+0x53c>
 8001828:	98800017 	ldw	r2,0(r19)
 800182c:	b8800215 	stw	r2,8(r23)
 8001830:	98800117 	ldw	r2,4(r19)
 8001834:	b8800315 	stw	r2,12(r23)
 8001838:	008006c4 	movi	r2,27
 800183c:	11805636 	bltu	r2,r6,8001998 <_realloc_r+0x554>
 8001840:	b8800404 	addi	r2,r23,16
 8001844:	9cc00204 	addi	r19,r19,8
 8001848:	98c00017 	ldw	r3,0(r19)
 800184c:	10c00015 	stw	r3,0(r2)
 8001850:	98c00117 	ldw	r3,4(r19)
 8001854:	10c00115 	stw	r3,4(r2)
 8001858:	98c00217 	ldw	r3,8(r19)
 800185c:	10c00215 	stw	r3,8(r2)
 8001860:	bd07883a 	add	r3,r23,r20
 8001864:	b505c83a 	sub	r2,r22,r20
 8001868:	e0c00215 	stw	r3,8(fp)
 800186c:	10800054 	ori	r2,r2,1
 8001870:	18800115 	stw	r2,4(r3)
 8001874:	b8800117 	ldw	r2,4(r23)
 8001878:	9009883a 	mov	r4,r18
 800187c:	1080004c 	andi	r2,r2,1
 8001880:	a0a8b03a 	or	r20,r20,r2
 8001884:	bd000115 	stw	r20,4(r23)
 8001888:	80034040 	call	8003404 <__malloc_unlock>
 800188c:	8805883a 	mov	r2,r17
 8001890:	003f5306 	br	80015e0 <__alt_data_end+0xfc0015e0>
 8001894:	98c00017 	ldw	r3,0(r19)
 8001898:	88c00015 	stw	r3,0(r17)
 800189c:	98c00117 	ldw	r3,4(r19)
 80018a0:	88c00115 	stw	r3,4(r17)
 80018a4:	00c006c4 	movi	r3,27
 80018a8:	19801d36 	bltu	r3,r6,8001920 <_realloc_r+0x4dc>
 80018ac:	88800204 	addi	r2,r17,8
 80018b0:	98c00204 	addi	r3,r19,8
 80018b4:	003fa306 	br	8001744 <__alt_data_end+0xfc001744>
 80018b8:	8807883a 	mov	r3,r17
 80018bc:	003f7406 	br	8001690 <__alt_data_end+0xfc001690>
 80018c0:	ad2b883a 	add	r21,r21,r20
 80018c4:	2505c83a 	sub	r2,r4,r20
 80018c8:	e5400215 	stw	r21,8(fp)
 80018cc:	10800054 	ori	r2,r2,1
 80018d0:	a8800115 	stw	r2,4(r21)
 80018d4:	98bfff17 	ldw	r2,-4(r19)
 80018d8:	9009883a 	mov	r4,r18
 80018dc:	1080004c 	andi	r2,r2,1
 80018e0:	a0a8b03a 	or	r20,r20,r2
 80018e4:	9d3fff15 	stw	r20,-4(r19)
 80018e8:	80034040 	call	8003404 <__malloc_unlock>
 80018ec:	9805883a 	mov	r2,r19
 80018f0:	003f3b06 	br	80015e0 <__alt_data_end+0xfc0015e0>
 80018f4:	8809883a 	mov	r4,r17
 80018f8:	980b883a 	mov	r5,r19
 80018fc:	80012e80 	call	80012e8 <memmove>
 8001900:	003f9606 	br	800175c <__alt_data_end+0xfc00175c>
 8001904:	8809883a 	mov	r4,r17
 8001908:	980b883a 	mov	r5,r19
 800190c:	80012e80 	call	80012e8 <memmove>
 8001910:	b8c00117 	ldw	r3,4(r23)
 8001914:	b021883a 	mov	r16,r22
 8001918:	b82b883a 	mov	r21,r23
 800191c:	003f2306 	br	80015ac <__alt_data_end+0xfc0015ac>
 8001920:	98c00217 	ldw	r3,8(r19)
 8001924:	88c00215 	stw	r3,8(r17)
 8001928:	98c00317 	ldw	r3,12(r19)
 800192c:	88c00315 	stw	r3,12(r17)
 8001930:	30800c26 	beq	r6,r2,8001964 <_realloc_r+0x520>
 8001934:	88800404 	addi	r2,r17,16
 8001938:	98c00404 	addi	r3,r19,16
 800193c:	003f8106 	br	8001744 <__alt_data_end+0xfc001744>
 8001940:	893fff17 	ldw	r4,-4(r17)
 8001944:	00bfff04 	movi	r2,-4
 8001948:	9823883a 	mov	r17,r19
 800194c:	2084703a 	and	r2,r4,r2
 8001950:	80a1883a 	add	r16,r16,r2
 8001954:	003f1506 	br	80015ac <__alt_data_end+0xfc0015ac>
 8001958:	b8c00404 	addi	r3,r23,16
 800195c:	9cc00204 	addi	r19,r19,8
 8001960:	003f4b06 	br	8001690 <__alt_data_end+0xfc001690>
 8001964:	99000417 	ldw	r4,16(r19)
 8001968:	88800604 	addi	r2,r17,24
 800196c:	98c00604 	addi	r3,r19,24
 8001970:	89000415 	stw	r4,16(r17)
 8001974:	99000517 	ldw	r4,20(r19)
 8001978:	89000515 	stw	r4,20(r17)
 800197c:	003f7106 	br	8001744 <__alt_data_end+0xfc001744>
 8001980:	8805883a 	mov	r2,r17
 8001984:	003fb006 	br	8001848 <__alt_data_end+0xfc001848>
 8001988:	8809883a 	mov	r4,r17
 800198c:	980b883a 	mov	r5,r19
 8001990:	80012e80 	call	80012e8 <memmove>
 8001994:	003fb206 	br	8001860 <__alt_data_end+0xfc001860>
 8001998:	98800217 	ldw	r2,8(r19)
 800199c:	b8800415 	stw	r2,16(r23)
 80019a0:	98800317 	ldw	r2,12(r19)
 80019a4:	b8800515 	stw	r2,20(r23)
 80019a8:	31000726 	beq	r6,r4,80019c8 <_realloc_r+0x584>
 80019ac:	b8800604 	addi	r2,r23,24
 80019b0:	9cc00404 	addi	r19,r19,16
 80019b4:	003fa406 	br	8001848 <__alt_data_end+0xfc001848>
 80019b8:	9009883a 	mov	r4,r18
 80019bc:	80034040 	call	8003404 <__malloc_unlock>
 80019c0:	0005883a 	mov	r2,zero
 80019c4:	003f0606 	br	80015e0 <__alt_data_end+0xfc0015e0>
 80019c8:	98c00417 	ldw	r3,16(r19)
 80019cc:	9cc00604 	addi	r19,r19,24
 80019d0:	b8800804 	addi	r2,r23,32
 80019d4:	b8c00615 	stw	r3,24(r23)
 80019d8:	98ffff17 	ldw	r3,-4(r19)
 80019dc:	b8c00715 	stw	r3,28(r23)
 80019e0:	003f9906 	br	8001848 <__alt_data_end+0xfc001848>

080019e4 <_sbrk_r>:
 80019e4:	defffd04 	addi	sp,sp,-12
 80019e8:	dc000015 	stw	r16,0(sp)
 80019ec:	04020074 	movhi	r16,2049
 80019f0:	dc400115 	stw	r17,4(sp)
 80019f4:	84241804 	addi	r16,r16,-28576
 80019f8:	2023883a 	mov	r17,r4
 80019fc:	2809883a 	mov	r4,r5
 8001a00:	dfc00215 	stw	ra,8(sp)
 8001a04:	80000015 	stw	zero,0(r16)
 8001a08:	80035d00 	call	80035d0 <sbrk>
 8001a0c:	00ffffc4 	movi	r3,-1
 8001a10:	10c00526 	beq	r2,r3,8001a28 <_sbrk_r+0x44>
 8001a14:	dfc00217 	ldw	ra,8(sp)
 8001a18:	dc400117 	ldw	r17,4(sp)
 8001a1c:	dc000017 	ldw	r16,0(sp)
 8001a20:	dec00304 	addi	sp,sp,12
 8001a24:	f800283a 	ret
 8001a28:	80c00017 	ldw	r3,0(r16)
 8001a2c:	183ff926 	beq	r3,zero,8001a14 <__alt_data_end+0xfc001a14>
 8001a30:	88c00015 	stw	r3,0(r17)
 8001a34:	003ff706 	br	8001a14 <__alt_data_end+0xfc001a14>

08001a38 <__swsetup_r>:
 8001a38:	00820034 	movhi	r2,2048
 8001a3c:	defffd04 	addi	sp,sp,-12
 8001a40:	109d6204 	addi	r2,r2,30088
 8001a44:	dc400115 	stw	r17,4(sp)
 8001a48:	2023883a 	mov	r17,r4
 8001a4c:	11000017 	ldw	r4,0(r2)
 8001a50:	dc000015 	stw	r16,0(sp)
 8001a54:	dfc00215 	stw	ra,8(sp)
 8001a58:	2821883a 	mov	r16,r5
 8001a5c:	20000226 	beq	r4,zero,8001a68 <__swsetup_r+0x30>
 8001a60:	20c00e17 	ldw	r3,56(r4)
 8001a64:	18002e26 	beq	r3,zero,8001b20 <__swsetup_r+0xe8>
 8001a68:	8080030b 	ldhu	r2,12(r16)
 8001a6c:	10c0020c 	andi	r3,r2,8
 8001a70:	100d883a 	mov	r6,r2
 8001a74:	18000f26 	beq	r3,zero,8001ab4 <__swsetup_r+0x7c>
 8001a78:	80c00417 	ldw	r3,16(r16)
 8001a7c:	18001526 	beq	r3,zero,8001ad4 <__swsetup_r+0x9c>
 8001a80:	1100004c 	andi	r4,r2,1
 8001a84:	20001c1e 	bne	r4,zero,8001af8 <__swsetup_r+0xc0>
 8001a88:	1080008c 	andi	r2,r2,2
 8001a8c:	1000261e 	bne	r2,zero,8001b28 <__swsetup_r+0xf0>
 8001a90:	80800517 	ldw	r2,20(r16)
 8001a94:	80800215 	stw	r2,8(r16)
 8001a98:	18001c26 	beq	r3,zero,8001b0c <__swsetup_r+0xd4>
 8001a9c:	0005883a 	mov	r2,zero
 8001aa0:	dfc00217 	ldw	ra,8(sp)
 8001aa4:	dc400117 	ldw	r17,4(sp)
 8001aa8:	dc000017 	ldw	r16,0(sp)
 8001aac:	dec00304 	addi	sp,sp,12
 8001ab0:	f800283a 	ret
 8001ab4:	3080040c 	andi	r2,r6,16
 8001ab8:	10001726 	beq	r2,zero,8001b18 <__swsetup_r+0xe0>
 8001abc:	3080010c 	andi	r2,r6,4
 8001ac0:	10001b1e 	bne	r2,zero,8001b30 <__swsetup_r+0xf8>
 8001ac4:	80c00417 	ldw	r3,16(r16)
 8001ac8:	30800214 	ori	r2,r6,8
 8001acc:	8080030d 	sth	r2,12(r16)
 8001ad0:	183feb1e 	bne	r3,zero,8001a80 <__alt_data_end+0xfc001a80>
 8001ad4:	1140a00c 	andi	r5,r2,640
 8001ad8:	01008004 	movi	r4,512
 8001adc:	293fe826 	beq	r5,r4,8001a80 <__alt_data_end+0xfc001a80>
 8001ae0:	8809883a 	mov	r4,r17
 8001ae4:	800b883a 	mov	r5,r16
 8001ae8:	80026e40 	call	80026e4 <__smakebuf_r>
 8001aec:	8080030b 	ldhu	r2,12(r16)
 8001af0:	80c00417 	ldw	r3,16(r16)
 8001af4:	003fe206 	br	8001a80 <__alt_data_end+0xfc001a80>
 8001af8:	80800517 	ldw	r2,20(r16)
 8001afc:	80000215 	stw	zero,8(r16)
 8001b00:	0085c83a 	sub	r2,zero,r2
 8001b04:	80800615 	stw	r2,24(r16)
 8001b08:	183fe41e 	bne	r3,zero,8001a9c <__alt_data_end+0xfc001a9c>
 8001b0c:	8080030b 	ldhu	r2,12(r16)
 8001b10:	1080200c 	andi	r2,r2,128
 8001b14:	103fe226 	beq	r2,zero,8001aa0 <__alt_data_end+0xfc001aa0>
 8001b18:	00bfffc4 	movi	r2,-1
 8001b1c:	003fe006 	br	8001aa0 <__alt_data_end+0xfc001aa0>
 8001b20:	80021100 	call	8002110 <__sinit>
 8001b24:	003fd006 	br	8001a68 <__alt_data_end+0xfc001a68>
 8001b28:	0005883a 	mov	r2,zero
 8001b2c:	003fd906 	br	8001a94 <__alt_data_end+0xfc001a94>
 8001b30:	81400c17 	ldw	r5,48(r16)
 8001b34:	28000626 	beq	r5,zero,8001b50 <__swsetup_r+0x118>
 8001b38:	80801004 	addi	r2,r16,64
 8001b3c:	28800326 	beq	r5,r2,8001b4c <__swsetup_r+0x114>
 8001b40:	8809883a 	mov	r4,r17
 8001b44:	80022840 	call	8002284 <_free_r>
 8001b48:	8180030b 	ldhu	r6,12(r16)
 8001b4c:	80000c15 	stw	zero,48(r16)
 8001b50:	80c00417 	ldw	r3,16(r16)
 8001b54:	00bff6c4 	movi	r2,-37
 8001b58:	118c703a 	and	r6,r2,r6
 8001b5c:	80000115 	stw	zero,4(r16)
 8001b60:	80c00015 	stw	r3,0(r16)
 8001b64:	003fd806 	br	8001ac8 <__alt_data_end+0xfc001ac8>

08001b68 <_fflush_r>:
 8001b68:	defffb04 	addi	sp,sp,-20
 8001b6c:	dcc00315 	stw	r19,12(sp)
 8001b70:	dc000015 	stw	r16,0(sp)
 8001b74:	dfc00415 	stw	ra,16(sp)
 8001b78:	dc800215 	stw	r18,8(sp)
 8001b7c:	dc400115 	stw	r17,4(sp)
 8001b80:	2027883a 	mov	r19,r4
 8001b84:	2821883a 	mov	r16,r5
 8001b88:	20000226 	beq	r4,zero,8001b94 <_fflush_r+0x2c>
 8001b8c:	20800e17 	ldw	r2,56(r4)
 8001b90:	10005326 	beq	r2,zero,8001ce0 <_fflush_r+0x178>
 8001b94:	8080030b 	ldhu	r2,12(r16)
 8001b98:	10ffffcc 	andi	r3,r2,65535
 8001b9c:	18e0001c 	xori	r3,r3,32768
 8001ba0:	18e00004 	addi	r3,r3,-32768
 8001ba4:	18002c26 	beq	r3,zero,8001c58 <_fflush_r+0xf0>
 8001ba8:	10c0020c 	andi	r3,r2,8
 8001bac:	1800321e 	bne	r3,zero,8001c78 <_fflush_r+0x110>
 8001bb0:	80c00117 	ldw	r3,4(r16)
 8001bb4:	10820014 	ori	r2,r2,2048
 8001bb8:	8080030d 	sth	r2,12(r16)
 8001bbc:	00c0570e 	bge	zero,r3,8001d1c <_fflush_r+0x1b4>
 8001bc0:	82000a17 	ldw	r8,40(r16)
 8001bc4:	40002426 	beq	r8,zero,8001c58 <_fflush_r+0xf0>
 8001bc8:	9c400017 	ldw	r17,0(r19)
 8001bcc:	10c4000c 	andi	r3,r2,4096
 8001bd0:	98000015 	stw	zero,0(r19)
 8001bd4:	18004626 	beq	r3,zero,8001cf0 <_fflush_r+0x188>
 8001bd8:	81801417 	ldw	r6,80(r16)
 8001bdc:	10c0010c 	andi	r3,r2,4
 8001be0:	18000626 	beq	r3,zero,8001bfc <_fflush_r+0x94>
 8001be4:	80c00117 	ldw	r3,4(r16)
 8001be8:	80800c17 	ldw	r2,48(r16)
 8001bec:	30cdc83a 	sub	r6,r6,r3
 8001bf0:	10000226 	beq	r2,zero,8001bfc <_fflush_r+0x94>
 8001bf4:	80800f17 	ldw	r2,60(r16)
 8001bf8:	308dc83a 	sub	r6,r6,r2
 8001bfc:	81400717 	ldw	r5,28(r16)
 8001c00:	9809883a 	mov	r4,r19
 8001c04:	000f883a 	mov	r7,zero
 8001c08:	403ee83a 	callr	r8
 8001c0c:	00ffffc4 	movi	r3,-1
 8001c10:	10c04526 	beq	r2,r3,8001d28 <_fflush_r+0x1c0>
 8001c14:	80c0030b 	ldhu	r3,12(r16)
 8001c18:	81000417 	ldw	r4,16(r16)
 8001c1c:	80000115 	stw	zero,4(r16)
 8001c20:	197dffcc 	andi	r5,r3,63487
 8001c24:	8140030d 	sth	r5,12(r16)
 8001c28:	81000015 	stw	r4,0(r16)
 8001c2c:	18c4000c 	andi	r3,r3,4096
 8001c30:	18000126 	beq	r3,zero,8001c38 <_fflush_r+0xd0>
 8001c34:	80801415 	stw	r2,80(r16)
 8001c38:	81400c17 	ldw	r5,48(r16)
 8001c3c:	9c400015 	stw	r17,0(r19)
 8001c40:	28000526 	beq	r5,zero,8001c58 <_fflush_r+0xf0>
 8001c44:	80801004 	addi	r2,r16,64
 8001c48:	28800226 	beq	r5,r2,8001c54 <_fflush_r+0xec>
 8001c4c:	9809883a 	mov	r4,r19
 8001c50:	80022840 	call	8002284 <_free_r>
 8001c54:	80000c15 	stw	zero,48(r16)
 8001c58:	0005883a 	mov	r2,zero
 8001c5c:	dfc00417 	ldw	ra,16(sp)
 8001c60:	dcc00317 	ldw	r19,12(sp)
 8001c64:	dc800217 	ldw	r18,8(sp)
 8001c68:	dc400117 	ldw	r17,4(sp)
 8001c6c:	dc000017 	ldw	r16,0(sp)
 8001c70:	dec00504 	addi	sp,sp,20
 8001c74:	f800283a 	ret
 8001c78:	84800417 	ldw	r18,16(r16)
 8001c7c:	903ff626 	beq	r18,zero,8001c58 <__alt_data_end+0xfc001c58>
 8001c80:	84400017 	ldw	r17,0(r16)
 8001c84:	108000cc 	andi	r2,r2,3
 8001c88:	84800015 	stw	r18,0(r16)
 8001c8c:	8ca3c83a 	sub	r17,r17,r18
 8001c90:	10001526 	beq	r2,zero,8001ce8 <_fflush_r+0x180>
 8001c94:	0005883a 	mov	r2,zero
 8001c98:	80800215 	stw	r2,8(r16)
 8001c9c:	04400316 	blt	zero,r17,8001cac <_fflush_r+0x144>
 8001ca0:	003fed06 	br	8001c58 <__alt_data_end+0xfc001c58>
 8001ca4:	90a5883a 	add	r18,r18,r2
 8001ca8:	047feb0e 	bge	zero,r17,8001c58 <__alt_data_end+0xfc001c58>
 8001cac:	80800917 	ldw	r2,36(r16)
 8001cb0:	81400717 	ldw	r5,28(r16)
 8001cb4:	880f883a 	mov	r7,r17
 8001cb8:	900d883a 	mov	r6,r18
 8001cbc:	9809883a 	mov	r4,r19
 8001cc0:	103ee83a 	callr	r2
 8001cc4:	88a3c83a 	sub	r17,r17,r2
 8001cc8:	00bff616 	blt	zero,r2,8001ca4 <__alt_data_end+0xfc001ca4>
 8001ccc:	80c0030b 	ldhu	r3,12(r16)
 8001cd0:	00bfffc4 	movi	r2,-1
 8001cd4:	18c01014 	ori	r3,r3,64
 8001cd8:	80c0030d 	sth	r3,12(r16)
 8001cdc:	003fdf06 	br	8001c5c <__alt_data_end+0xfc001c5c>
 8001ce0:	80021100 	call	8002110 <__sinit>
 8001ce4:	003fab06 	br	8001b94 <__alt_data_end+0xfc001b94>
 8001ce8:	80800517 	ldw	r2,20(r16)
 8001cec:	003fea06 	br	8001c98 <__alt_data_end+0xfc001c98>
 8001cf0:	81400717 	ldw	r5,28(r16)
 8001cf4:	000d883a 	mov	r6,zero
 8001cf8:	9809883a 	mov	r4,r19
 8001cfc:	01c00044 	movi	r7,1
 8001d00:	403ee83a 	callr	r8
 8001d04:	100d883a 	mov	r6,r2
 8001d08:	00bfffc4 	movi	r2,-1
 8001d0c:	30801326 	beq	r6,r2,8001d5c <_fflush_r+0x1f4>
 8001d10:	8080030b 	ldhu	r2,12(r16)
 8001d14:	82000a17 	ldw	r8,40(r16)
 8001d18:	003fb006 	br	8001bdc <__alt_data_end+0xfc001bdc>
 8001d1c:	80c00f17 	ldw	r3,60(r16)
 8001d20:	00ffa716 	blt	zero,r3,8001bc0 <__alt_data_end+0xfc001bc0>
 8001d24:	003fcc06 	br	8001c58 <__alt_data_end+0xfc001c58>
 8001d28:	98c00017 	ldw	r3,0(r19)
 8001d2c:	183fb926 	beq	r3,zero,8001c14 <__alt_data_end+0xfc001c14>
 8001d30:	01000744 	movi	r4,29
 8001d34:	19000226 	beq	r3,r4,8001d40 <_fflush_r+0x1d8>
 8001d38:	01000584 	movi	r4,22
 8001d3c:	1900101e 	bne	r3,r4,8001d80 <_fflush_r+0x218>
 8001d40:	8080030b 	ldhu	r2,12(r16)
 8001d44:	80c00417 	ldw	r3,16(r16)
 8001d48:	80000115 	stw	zero,4(r16)
 8001d4c:	10bdffcc 	andi	r2,r2,63487
 8001d50:	8080030d 	sth	r2,12(r16)
 8001d54:	80c00015 	stw	r3,0(r16)
 8001d58:	003fb706 	br	8001c38 <__alt_data_end+0xfc001c38>
 8001d5c:	98800017 	ldw	r2,0(r19)
 8001d60:	103feb26 	beq	r2,zero,8001d10 <__alt_data_end+0xfc001d10>
 8001d64:	00c00744 	movi	r3,29
 8001d68:	10c00226 	beq	r2,r3,8001d74 <_fflush_r+0x20c>
 8001d6c:	00c00584 	movi	r3,22
 8001d70:	10ffd61e 	bne	r2,r3,8001ccc <__alt_data_end+0xfc001ccc>
 8001d74:	9c400015 	stw	r17,0(r19)
 8001d78:	0005883a 	mov	r2,zero
 8001d7c:	003fb706 	br	8001c5c <__alt_data_end+0xfc001c5c>
 8001d80:	80c0030b 	ldhu	r3,12(r16)
 8001d84:	18c01014 	ori	r3,r3,64
 8001d88:	80c0030d 	sth	r3,12(r16)
 8001d8c:	003fb306 	br	8001c5c <__alt_data_end+0xfc001c5c>

08001d90 <fflush>:
 8001d90:	20000526 	beq	r4,zero,8001da8 <fflush+0x18>
 8001d94:	00820034 	movhi	r2,2048
 8001d98:	109d6204 	addi	r2,r2,30088
 8001d9c:	200b883a 	mov	r5,r4
 8001da0:	11000017 	ldw	r4,0(r2)
 8001da4:	8001b681 	jmpi	8001b68 <_fflush_r>
 8001da8:	00820034 	movhi	r2,2048
 8001dac:	109d6104 	addi	r2,r2,30084
 8001db0:	11000017 	ldw	r4,0(r2)
 8001db4:	01420034 	movhi	r5,2048
 8001db8:	2946da04 	addi	r5,r5,7016
 8001dbc:	800262c1 	jmpi	800262c <_fwalk_reent>

08001dc0 <__fp_lock>:
 8001dc0:	0005883a 	mov	r2,zero
 8001dc4:	f800283a 	ret

08001dc8 <__fp_unlock>:
 8001dc8:	0005883a 	mov	r2,zero
 8001dcc:	f800283a 	ret

08001dd0 <_cleanup_r>:
 8001dd0:	01420034 	movhi	r5,2048
 8001dd4:	294b2b04 	addi	r5,r5,11436
 8001dd8:	80025741 	jmpi	8002574 <_fwalk>

08001ddc <__sinit.part.1>:
 8001ddc:	defff604 	addi	sp,sp,-40
 8001de0:	00c20034 	movhi	r3,2048
 8001de4:	dfc00915 	stw	ra,36(sp)
 8001de8:	df000815 	stw	fp,32(sp)
 8001dec:	ddc00715 	stw	r23,28(sp)
 8001df0:	dd800615 	stw	r22,24(sp)
 8001df4:	dd400515 	stw	r21,20(sp)
 8001df8:	dd000415 	stw	r20,16(sp)
 8001dfc:	dcc00315 	stw	r19,12(sp)
 8001e00:	dc800215 	stw	r18,8(sp)
 8001e04:	dc400115 	stw	r17,4(sp)
 8001e08:	dc000015 	stw	r16,0(sp)
 8001e0c:	18c77404 	addi	r3,r3,7632
 8001e10:	24000117 	ldw	r16,4(r4)
 8001e14:	20c00f15 	stw	r3,60(r4)
 8001e18:	07000044 	movi	fp,1
 8001e1c:	00c000c4 	movi	r3,3
 8001e20:	2080bb04 	addi	r2,r4,748
 8001e24:	20c0b915 	stw	r3,740(r4)
 8001e28:	27000e15 	stw	fp,56(r4)
 8001e2c:	2080ba15 	stw	r2,744(r4)
 8001e30:	2000b815 	stw	zero,736(r4)
 8001e34:	05c00204 	movi	r23,8
 8001e38:	00800104 	movi	r2,4
 8001e3c:	2025883a 	mov	r18,r4
 8001e40:	b80d883a 	mov	r6,r23
 8001e44:	81001704 	addi	r4,r16,92
 8001e48:	000b883a 	mov	r5,zero
 8001e4c:	80000015 	stw	zero,0(r16)
 8001e50:	80000115 	stw	zero,4(r16)
 8001e54:	80000215 	stw	zero,8(r16)
 8001e58:	8080030d 	sth	r2,12(r16)
 8001e5c:	80001915 	stw	zero,100(r16)
 8001e60:	8000038d 	sth	zero,14(r16)
 8001e64:	80000415 	stw	zero,16(r16)
 8001e68:	80000515 	stw	zero,20(r16)
 8001e6c:	80000615 	stw	zero,24(r16)
 8001e70:	800289c0 	call	800289c <memset>
 8001e74:	05820034 	movhi	r22,2048
 8001e78:	94400217 	ldw	r17,8(r18)
 8001e7c:	05420034 	movhi	r21,2048
 8001e80:	05020034 	movhi	r20,2048
 8001e84:	04c20034 	movhi	r19,2048
 8001e88:	b58a7004 	addi	r22,r22,10688
 8001e8c:	ad4a8704 	addi	r21,r21,10780
 8001e90:	a50aa604 	addi	r20,r20,10904
 8001e94:	9ccabd04 	addi	r19,r19,10996
 8001e98:	85800815 	stw	r22,32(r16)
 8001e9c:	85400915 	stw	r21,36(r16)
 8001ea0:	85000a15 	stw	r20,40(r16)
 8001ea4:	84c00b15 	stw	r19,44(r16)
 8001ea8:	84000715 	stw	r16,28(r16)
 8001eac:	00800284 	movi	r2,10
 8001eb0:	89001704 	addi	r4,r17,92
 8001eb4:	b80d883a 	mov	r6,r23
 8001eb8:	000b883a 	mov	r5,zero
 8001ebc:	88000015 	stw	zero,0(r17)
 8001ec0:	88000115 	stw	zero,4(r17)
 8001ec4:	88000215 	stw	zero,8(r17)
 8001ec8:	8880030d 	sth	r2,12(r17)
 8001ecc:	88001915 	stw	zero,100(r17)
 8001ed0:	8f00038d 	sth	fp,14(r17)
 8001ed4:	88000415 	stw	zero,16(r17)
 8001ed8:	88000515 	stw	zero,20(r17)
 8001edc:	88000615 	stw	zero,24(r17)
 8001ee0:	800289c0 	call	800289c <memset>
 8001ee4:	94000317 	ldw	r16,12(r18)
 8001ee8:	00800484 	movi	r2,18
 8001eec:	8c400715 	stw	r17,28(r17)
 8001ef0:	8d800815 	stw	r22,32(r17)
 8001ef4:	8d400915 	stw	r21,36(r17)
 8001ef8:	8d000a15 	stw	r20,40(r17)
 8001efc:	8cc00b15 	stw	r19,44(r17)
 8001f00:	8080030d 	sth	r2,12(r16)
 8001f04:	00800084 	movi	r2,2
 8001f08:	80000015 	stw	zero,0(r16)
 8001f0c:	80000115 	stw	zero,4(r16)
 8001f10:	80000215 	stw	zero,8(r16)
 8001f14:	80001915 	stw	zero,100(r16)
 8001f18:	8080038d 	sth	r2,14(r16)
 8001f1c:	80000415 	stw	zero,16(r16)
 8001f20:	80000515 	stw	zero,20(r16)
 8001f24:	80000615 	stw	zero,24(r16)
 8001f28:	81001704 	addi	r4,r16,92
 8001f2c:	000b883a 	mov	r5,zero
 8001f30:	b80d883a 	mov	r6,r23
 8001f34:	800289c0 	call	800289c <memset>
 8001f38:	84000715 	stw	r16,28(r16)
 8001f3c:	85800815 	stw	r22,32(r16)
 8001f40:	85400915 	stw	r21,36(r16)
 8001f44:	85000a15 	stw	r20,40(r16)
 8001f48:	84c00b15 	stw	r19,44(r16)
 8001f4c:	dfc00917 	ldw	ra,36(sp)
 8001f50:	df000817 	ldw	fp,32(sp)
 8001f54:	ddc00717 	ldw	r23,28(sp)
 8001f58:	dd800617 	ldw	r22,24(sp)
 8001f5c:	dd400517 	ldw	r21,20(sp)
 8001f60:	dd000417 	ldw	r20,16(sp)
 8001f64:	dcc00317 	ldw	r19,12(sp)
 8001f68:	dc800217 	ldw	r18,8(sp)
 8001f6c:	dc400117 	ldw	r17,4(sp)
 8001f70:	dc000017 	ldw	r16,0(sp)
 8001f74:	dec00a04 	addi	sp,sp,40
 8001f78:	f800283a 	ret

08001f7c <__sfmoreglue>:
 8001f7c:	defffc04 	addi	sp,sp,-16
 8001f80:	dc400115 	stw	r17,4(sp)
 8001f84:	2c401a24 	muli	r17,r5,104
 8001f88:	dc800215 	stw	r18,8(sp)
 8001f8c:	2825883a 	mov	r18,r5
 8001f90:	89400304 	addi	r5,r17,12
 8001f94:	dc000015 	stw	r16,0(sp)
 8001f98:	dfc00315 	stw	ra,12(sp)
 8001f9c:	80009200 	call	8000920 <_malloc_r>
 8001fa0:	1021883a 	mov	r16,r2
 8001fa4:	10000726 	beq	r2,zero,8001fc4 <__sfmoreglue+0x48>
 8001fa8:	11000304 	addi	r4,r2,12
 8001fac:	10000015 	stw	zero,0(r2)
 8001fb0:	14800115 	stw	r18,4(r2)
 8001fb4:	11000215 	stw	r4,8(r2)
 8001fb8:	000b883a 	mov	r5,zero
 8001fbc:	880d883a 	mov	r6,r17
 8001fc0:	800289c0 	call	800289c <memset>
 8001fc4:	8005883a 	mov	r2,r16
 8001fc8:	dfc00317 	ldw	ra,12(sp)
 8001fcc:	dc800217 	ldw	r18,8(sp)
 8001fd0:	dc400117 	ldw	r17,4(sp)
 8001fd4:	dc000017 	ldw	r16,0(sp)
 8001fd8:	dec00404 	addi	sp,sp,16
 8001fdc:	f800283a 	ret

08001fe0 <__sfp>:
 8001fe0:	00820034 	movhi	r2,2048
 8001fe4:	defffb04 	addi	sp,sp,-20
 8001fe8:	109d6104 	addi	r2,r2,30084
 8001fec:	dc800215 	stw	r18,8(sp)
 8001ff0:	14800017 	ldw	r18,0(r2)
 8001ff4:	dcc00315 	stw	r19,12(sp)
 8001ff8:	dfc00415 	stw	ra,16(sp)
 8001ffc:	90800e17 	ldw	r2,56(r18)
 8002000:	dc400115 	stw	r17,4(sp)
 8002004:	dc000015 	stw	r16,0(sp)
 8002008:	2027883a 	mov	r19,r4
 800200c:	1000021e 	bne	r2,zero,8002018 <__sfp+0x38>
 8002010:	9009883a 	mov	r4,r18
 8002014:	8001ddc0 	call	8001ddc <__sinit.part.1>
 8002018:	9480b804 	addi	r18,r18,736
 800201c:	047fffc4 	movi	r17,-1
 8002020:	91400117 	ldw	r5,4(r18)
 8002024:	94000217 	ldw	r16,8(r18)
 8002028:	297fffc4 	addi	r5,r5,-1
 800202c:	28000a16 	blt	r5,zero,8002058 <__sfp+0x78>
 8002030:	8080030f 	ldh	r2,12(r16)
 8002034:	10000c26 	beq	r2,zero,8002068 <__sfp+0x88>
 8002038:	80c01d04 	addi	r3,r16,116
 800203c:	00000206 	br	8002048 <__sfp+0x68>
 8002040:	18bfe60f 	ldh	r2,-104(r3)
 8002044:	10000826 	beq	r2,zero,8002068 <__sfp+0x88>
 8002048:	297fffc4 	addi	r5,r5,-1
 800204c:	1c3ffd04 	addi	r16,r3,-12
 8002050:	18c01a04 	addi	r3,r3,104
 8002054:	2c7ffa1e 	bne	r5,r17,8002040 <__alt_data_end+0xfc002040>
 8002058:	90800017 	ldw	r2,0(r18)
 800205c:	10001d26 	beq	r2,zero,80020d4 <__sfp+0xf4>
 8002060:	1025883a 	mov	r18,r2
 8002064:	003fee06 	br	8002020 <__alt_data_end+0xfc002020>
 8002068:	00bfffc4 	movi	r2,-1
 800206c:	8080038d 	sth	r2,14(r16)
 8002070:	00800044 	movi	r2,1
 8002074:	8080030d 	sth	r2,12(r16)
 8002078:	80001915 	stw	zero,100(r16)
 800207c:	80000015 	stw	zero,0(r16)
 8002080:	80000215 	stw	zero,8(r16)
 8002084:	80000115 	stw	zero,4(r16)
 8002088:	80000415 	stw	zero,16(r16)
 800208c:	80000515 	stw	zero,20(r16)
 8002090:	80000615 	stw	zero,24(r16)
 8002094:	81001704 	addi	r4,r16,92
 8002098:	000b883a 	mov	r5,zero
 800209c:	01800204 	movi	r6,8
 80020a0:	800289c0 	call	800289c <memset>
 80020a4:	8005883a 	mov	r2,r16
 80020a8:	80000c15 	stw	zero,48(r16)
 80020ac:	80000d15 	stw	zero,52(r16)
 80020b0:	80001115 	stw	zero,68(r16)
 80020b4:	80001215 	stw	zero,72(r16)
 80020b8:	dfc00417 	ldw	ra,16(sp)
 80020bc:	dcc00317 	ldw	r19,12(sp)
 80020c0:	dc800217 	ldw	r18,8(sp)
 80020c4:	dc400117 	ldw	r17,4(sp)
 80020c8:	dc000017 	ldw	r16,0(sp)
 80020cc:	dec00504 	addi	sp,sp,20
 80020d0:	f800283a 	ret
 80020d4:	9809883a 	mov	r4,r19
 80020d8:	01400104 	movi	r5,4
 80020dc:	8001f7c0 	call	8001f7c <__sfmoreglue>
 80020e0:	90800015 	stw	r2,0(r18)
 80020e4:	103fde1e 	bne	r2,zero,8002060 <__alt_data_end+0xfc002060>
 80020e8:	00800304 	movi	r2,12
 80020ec:	98800015 	stw	r2,0(r19)
 80020f0:	0005883a 	mov	r2,zero
 80020f4:	003ff006 	br	80020b8 <__alt_data_end+0xfc0020b8>

080020f8 <_cleanup>:
 80020f8:	00820034 	movhi	r2,2048
 80020fc:	109d6104 	addi	r2,r2,30084
 8002100:	11000017 	ldw	r4,0(r2)
 8002104:	01420034 	movhi	r5,2048
 8002108:	294b2b04 	addi	r5,r5,11436
 800210c:	80025741 	jmpi	8002574 <_fwalk>

08002110 <__sinit>:
 8002110:	20800e17 	ldw	r2,56(r4)
 8002114:	10000126 	beq	r2,zero,800211c <__sinit+0xc>
 8002118:	f800283a 	ret
 800211c:	8001ddc1 	jmpi	8001ddc <__sinit.part.1>

08002120 <__sfp_lock_acquire>:
 8002120:	f800283a 	ret

08002124 <__sfp_lock_release>:
 8002124:	f800283a 	ret

08002128 <__sinit_lock_acquire>:
 8002128:	f800283a 	ret

0800212c <__sinit_lock_release>:
 800212c:	f800283a 	ret

08002130 <__fp_lock_all>:
 8002130:	00820034 	movhi	r2,2048
 8002134:	109d6204 	addi	r2,r2,30088
 8002138:	11000017 	ldw	r4,0(r2)
 800213c:	01420034 	movhi	r5,2048
 8002140:	29477004 	addi	r5,r5,7616
 8002144:	80025741 	jmpi	8002574 <_fwalk>

08002148 <__fp_unlock_all>:
 8002148:	00820034 	movhi	r2,2048
 800214c:	109d6204 	addi	r2,r2,30088
 8002150:	11000017 	ldw	r4,0(r2)
 8002154:	01420034 	movhi	r5,2048
 8002158:	29477204 	addi	r5,r5,7624
 800215c:	80025741 	jmpi	8002574 <_fwalk>

08002160 <_malloc_trim_r>:
 8002160:	defffb04 	addi	sp,sp,-20
 8002164:	dcc00315 	stw	r19,12(sp)
 8002168:	04c20034 	movhi	r19,2048
 800216c:	dc800215 	stw	r18,8(sp)
 8002170:	dc400115 	stw	r17,4(sp)
 8002174:	dc000015 	stw	r16,0(sp)
 8002178:	dfc00415 	stw	ra,16(sp)
 800217c:	2821883a 	mov	r16,r5
 8002180:	9cd7d204 	addi	r19,r19,24392
 8002184:	2025883a 	mov	r18,r4
 8002188:	80033e40 	call	80033e4 <__malloc_lock>
 800218c:	98800217 	ldw	r2,8(r19)
 8002190:	14400117 	ldw	r17,4(r2)
 8002194:	00bfff04 	movi	r2,-4
 8002198:	88a2703a 	and	r17,r17,r2
 800219c:	8c21c83a 	sub	r16,r17,r16
 80021a0:	8403fbc4 	addi	r16,r16,4079
 80021a4:	8020d33a 	srli	r16,r16,12
 80021a8:	0083ffc4 	movi	r2,4095
 80021ac:	843fffc4 	addi	r16,r16,-1
 80021b0:	8020933a 	slli	r16,r16,12
 80021b4:	1400060e 	bge	r2,r16,80021d0 <_malloc_trim_r+0x70>
 80021b8:	9009883a 	mov	r4,r18
 80021bc:	000b883a 	mov	r5,zero
 80021c0:	80019e40 	call	80019e4 <_sbrk_r>
 80021c4:	98c00217 	ldw	r3,8(r19)
 80021c8:	1c47883a 	add	r3,r3,r17
 80021cc:	10c00a26 	beq	r2,r3,80021f8 <_malloc_trim_r+0x98>
 80021d0:	9009883a 	mov	r4,r18
 80021d4:	80034040 	call	8003404 <__malloc_unlock>
 80021d8:	0005883a 	mov	r2,zero
 80021dc:	dfc00417 	ldw	ra,16(sp)
 80021e0:	dcc00317 	ldw	r19,12(sp)
 80021e4:	dc800217 	ldw	r18,8(sp)
 80021e8:	dc400117 	ldw	r17,4(sp)
 80021ec:	dc000017 	ldw	r16,0(sp)
 80021f0:	dec00504 	addi	sp,sp,20
 80021f4:	f800283a 	ret
 80021f8:	9009883a 	mov	r4,r18
 80021fc:	040bc83a 	sub	r5,zero,r16
 8002200:	80019e40 	call	80019e4 <_sbrk_r>
 8002204:	00ffffc4 	movi	r3,-1
 8002208:	10c00d26 	beq	r2,r3,8002240 <_malloc_trim_r+0xe0>
 800220c:	00c20074 	movhi	r3,2049
 8002210:	18e41f04 	addi	r3,r3,-28548
 8002214:	18800017 	ldw	r2,0(r3)
 8002218:	99000217 	ldw	r4,8(r19)
 800221c:	8c23c83a 	sub	r17,r17,r16
 8002220:	8c400054 	ori	r17,r17,1
 8002224:	1421c83a 	sub	r16,r2,r16
 8002228:	24400115 	stw	r17,4(r4)
 800222c:	9009883a 	mov	r4,r18
 8002230:	1c000015 	stw	r16,0(r3)
 8002234:	80034040 	call	8003404 <__malloc_unlock>
 8002238:	00800044 	movi	r2,1
 800223c:	003fe706 	br	80021dc <__alt_data_end+0xfc0021dc>
 8002240:	9009883a 	mov	r4,r18
 8002244:	000b883a 	mov	r5,zero
 8002248:	80019e40 	call	80019e4 <_sbrk_r>
 800224c:	99000217 	ldw	r4,8(r19)
 8002250:	014003c4 	movi	r5,15
 8002254:	1107c83a 	sub	r3,r2,r4
 8002258:	28ffdd0e 	bge	r5,r3,80021d0 <__alt_data_end+0xfc0021d0>
 800225c:	01420034 	movhi	r5,2048
 8002260:	295d6304 	addi	r5,r5,30092
 8002264:	29400017 	ldw	r5,0(r5)
 8002268:	18c00054 	ori	r3,r3,1
 800226c:	20c00115 	stw	r3,4(r4)
 8002270:	00c20074 	movhi	r3,2049
 8002274:	1145c83a 	sub	r2,r2,r5
 8002278:	18e41f04 	addi	r3,r3,-28548
 800227c:	18800015 	stw	r2,0(r3)
 8002280:	003fd306 	br	80021d0 <__alt_data_end+0xfc0021d0>

08002284 <_free_r>:
 8002284:	28004c26 	beq	r5,zero,80023b8 <_free_r+0x134>
 8002288:	defffd04 	addi	sp,sp,-12
 800228c:	dc400115 	stw	r17,4(sp)
 8002290:	dc000015 	stw	r16,0(sp)
 8002294:	2023883a 	mov	r17,r4
 8002298:	2821883a 	mov	r16,r5
 800229c:	dfc00215 	stw	ra,8(sp)
 80022a0:	80033e40 	call	80033e4 <__malloc_lock>
 80022a4:	813fff17 	ldw	r4,-4(r16)
 80022a8:	00bfff84 	movi	r2,-2
 80022ac:	02420034 	movhi	r9,2048
 80022b0:	81bffe04 	addi	r6,r16,-8
 80022b4:	2084703a 	and	r2,r4,r2
 80022b8:	4a57d204 	addi	r9,r9,24392
 80022bc:	308b883a 	add	r5,r6,r2
 80022c0:	2a000117 	ldw	r8,4(r5)
 80022c4:	49c00217 	ldw	r7,8(r9)
 80022c8:	00ffff04 	movi	r3,-4
 80022cc:	40c6703a 	and	r3,r8,r3
 80022d0:	39405326 	beq	r7,r5,8002420 <_free_r+0x19c>
 80022d4:	28c00115 	stw	r3,4(r5)
 80022d8:	2100004c 	andi	r4,r4,1
 80022dc:	2000091e 	bne	r4,zero,8002304 <_free_r+0x80>
 80022e0:	81fffe17 	ldw	r7,-8(r16)
 80022e4:	4a000204 	addi	r8,r9,8
 80022e8:	31cdc83a 	sub	r6,r6,r7
 80022ec:	31000217 	ldw	r4,8(r6)
 80022f0:	11c5883a 	add	r2,r2,r7
 80022f4:	22006126 	beq	r4,r8,800247c <_free_r+0x1f8>
 80022f8:	31c00317 	ldw	r7,12(r6)
 80022fc:	21c00315 	stw	r7,12(r4)
 8002300:	39000215 	stw	r4,8(r7)
 8002304:	28c9883a 	add	r4,r5,r3
 8002308:	21c00117 	ldw	r7,4(r4)
 800230c:	39c0004c 	andi	r7,r7,1
 8002310:	38000d1e 	bne	r7,zero,8002348 <_free_r+0xc4>
 8002314:	29000217 	ldw	r4,8(r5)
 8002318:	10c5883a 	add	r2,r2,r3
 800231c:	00c20034 	movhi	r3,2048
 8002320:	18d7d404 	addi	r3,r3,24400
 8002324:	20c07526 	beq	r4,r3,80024fc <_free_r+0x278>
 8002328:	29c00317 	ldw	r7,12(r5)
 800232c:	11400054 	ori	r5,r2,1
 8002330:	3087883a 	add	r3,r6,r2
 8002334:	21c00315 	stw	r7,12(r4)
 8002338:	39000215 	stw	r4,8(r7)
 800233c:	31400115 	stw	r5,4(r6)
 8002340:	18800015 	stw	r2,0(r3)
 8002344:	00000406 	br	8002358 <_free_r+0xd4>
 8002348:	10c00054 	ori	r3,r2,1
 800234c:	30c00115 	stw	r3,4(r6)
 8002350:	3087883a 	add	r3,r6,r2
 8002354:	18800015 	stw	r2,0(r3)
 8002358:	00c07fc4 	movi	r3,511
 800235c:	18801736 	bltu	r3,r2,80023bc <_free_r+0x138>
 8002360:	1004d0fa 	srli	r2,r2,3
 8002364:	01400044 	movi	r5,1
 8002368:	49000117 	ldw	r4,4(r9)
 800236c:	1087883a 	add	r3,r2,r2
 8002370:	18c7883a 	add	r3,r3,r3
 8002374:	1005d0ba 	srai	r2,r2,2
 8002378:	18c7883a 	add	r3,r3,r3
 800237c:	1a47883a 	add	r3,r3,r9
 8002380:	19c00217 	ldw	r7,8(r3)
 8002384:	2884983a 	sll	r2,r5,r2
 8002388:	30c00315 	stw	r3,12(r6)
 800238c:	31c00215 	stw	r7,8(r6)
 8002390:	1104b03a 	or	r2,r2,r4
 8002394:	19800215 	stw	r6,8(r3)
 8002398:	48800115 	stw	r2,4(r9)
 800239c:	39800315 	stw	r6,12(r7)
 80023a0:	8809883a 	mov	r4,r17
 80023a4:	dfc00217 	ldw	ra,8(sp)
 80023a8:	dc400117 	ldw	r17,4(sp)
 80023ac:	dc000017 	ldw	r16,0(sp)
 80023b0:	dec00304 	addi	sp,sp,12
 80023b4:	80034041 	jmpi	8003404 <__malloc_unlock>
 80023b8:	f800283a 	ret
 80023bc:	1006d27a 	srli	r3,r2,9
 80023c0:	01000104 	movi	r4,4
 80023c4:	20c04036 	bltu	r4,r3,80024c8 <_free_r+0x244>
 80023c8:	1006d1ba 	srli	r3,r2,6
 80023cc:	19400e04 	addi	r5,r3,56
 80023d0:	2947883a 	add	r3,r5,r5
 80023d4:	18c7883a 	add	r3,r3,r3
 80023d8:	18c7883a 	add	r3,r3,r3
 80023dc:	1a49883a 	add	r4,r3,r9
 80023e0:	20c00217 	ldw	r3,8(r4)
 80023e4:	01c20034 	movhi	r7,2048
 80023e8:	39d7d204 	addi	r7,r7,24392
 80023ec:	19003b26 	beq	r3,r4,80024dc <_free_r+0x258>
 80023f0:	01ffff04 	movi	r7,-4
 80023f4:	19400117 	ldw	r5,4(r3)
 80023f8:	29ca703a 	and	r5,r5,r7
 80023fc:	1140022e 	bgeu	r2,r5,8002408 <_free_r+0x184>
 8002400:	18c00217 	ldw	r3,8(r3)
 8002404:	20fffb1e 	bne	r4,r3,80023f4 <__alt_data_end+0xfc0023f4>
 8002408:	18800317 	ldw	r2,12(r3)
 800240c:	30800315 	stw	r2,12(r6)
 8002410:	30c00215 	stw	r3,8(r6)
 8002414:	11800215 	stw	r6,8(r2)
 8002418:	19800315 	stw	r6,12(r3)
 800241c:	003fe006 	br	80023a0 <__alt_data_end+0xfc0023a0>
 8002420:	2100004c 	andi	r4,r4,1
 8002424:	1885883a 	add	r2,r3,r2
 8002428:	2000071e 	bne	r4,zero,8002448 <_free_r+0x1c4>
 800242c:	817ffe17 	ldw	r5,-8(r16)
 8002430:	314dc83a 	sub	r6,r6,r5
 8002434:	30c00317 	ldw	r3,12(r6)
 8002438:	31000217 	ldw	r4,8(r6)
 800243c:	1145883a 	add	r2,r2,r5
 8002440:	20c00315 	stw	r3,12(r4)
 8002444:	19000215 	stw	r4,8(r3)
 8002448:	10c00054 	ori	r3,r2,1
 800244c:	30c00115 	stw	r3,4(r6)
 8002450:	00c20034 	movhi	r3,2048
 8002454:	18dd6404 	addi	r3,r3,30096
 8002458:	18c00017 	ldw	r3,0(r3)
 800245c:	49800215 	stw	r6,8(r9)
 8002460:	10ffcf36 	bltu	r2,r3,80023a0 <__alt_data_end+0xfc0023a0>
 8002464:	00820074 	movhi	r2,2049
 8002468:	10a41704 	addi	r2,r2,-28580
 800246c:	11400017 	ldw	r5,0(r2)
 8002470:	8809883a 	mov	r4,r17
 8002474:	80021600 	call	8002160 <_malloc_trim_r>
 8002478:	003fc906 	br	80023a0 <__alt_data_end+0xfc0023a0>
 800247c:	28c9883a 	add	r4,r5,r3
 8002480:	21000117 	ldw	r4,4(r4)
 8002484:	2100004c 	andi	r4,r4,1
 8002488:	20000a1e 	bne	r4,zero,80024b4 <_free_r+0x230>
 800248c:	29000317 	ldw	r4,12(r5)
 8002490:	29400217 	ldw	r5,8(r5)
 8002494:	10c5883a 	add	r2,r2,r3
 8002498:	10c00054 	ori	r3,r2,1
 800249c:	29000315 	stw	r4,12(r5)
 80024a0:	21400215 	stw	r5,8(r4)
 80024a4:	30c00115 	stw	r3,4(r6)
 80024a8:	308d883a 	add	r6,r6,r2
 80024ac:	30800015 	stw	r2,0(r6)
 80024b0:	003fbb06 	br	80023a0 <__alt_data_end+0xfc0023a0>
 80024b4:	10c00054 	ori	r3,r2,1
 80024b8:	30c00115 	stw	r3,4(r6)
 80024bc:	308d883a 	add	r6,r6,r2
 80024c0:	30800015 	stw	r2,0(r6)
 80024c4:	003fb606 	br	80023a0 <__alt_data_end+0xfc0023a0>
 80024c8:	01000504 	movi	r4,20
 80024cc:	20c01436 	bltu	r4,r3,8002520 <_free_r+0x29c>
 80024d0:	194016c4 	addi	r5,r3,91
 80024d4:	2947883a 	add	r3,r5,r5
 80024d8:	003fbe06 	br	80023d4 <__alt_data_end+0xfc0023d4>
 80024dc:	280bd0ba 	srai	r5,r5,2
 80024e0:	00800044 	movi	r2,1
 80024e4:	39000117 	ldw	r4,4(r7)
 80024e8:	114a983a 	sll	r5,r2,r5
 80024ec:	1805883a 	mov	r2,r3
 80024f0:	2908b03a 	or	r4,r5,r4
 80024f4:	39000115 	stw	r4,4(r7)
 80024f8:	003fc406 	br	800240c <__alt_data_end+0xfc00240c>
 80024fc:	49800515 	stw	r6,20(r9)
 8002500:	49800415 	stw	r6,16(r9)
 8002504:	10c00054 	ori	r3,r2,1
 8002508:	31000315 	stw	r4,12(r6)
 800250c:	31000215 	stw	r4,8(r6)
 8002510:	30c00115 	stw	r3,4(r6)
 8002514:	308d883a 	add	r6,r6,r2
 8002518:	30800015 	stw	r2,0(r6)
 800251c:	003fa006 	br	80023a0 <__alt_data_end+0xfc0023a0>
 8002520:	01001504 	movi	r4,84
 8002524:	20c00436 	bltu	r4,r3,8002538 <_free_r+0x2b4>
 8002528:	1006d33a 	srli	r3,r2,12
 800252c:	19401b84 	addi	r5,r3,110
 8002530:	2947883a 	add	r3,r5,r5
 8002534:	003fa706 	br	80023d4 <__alt_data_end+0xfc0023d4>
 8002538:	01005504 	movi	r4,340
 800253c:	20c00436 	bltu	r4,r3,8002550 <_free_r+0x2cc>
 8002540:	1006d3fa 	srli	r3,r2,15
 8002544:	19401dc4 	addi	r5,r3,119
 8002548:	2947883a 	add	r3,r5,r5
 800254c:	003fa106 	br	80023d4 <__alt_data_end+0xfc0023d4>
 8002550:	01015504 	movi	r4,1364
 8002554:	20c00436 	bltu	r4,r3,8002568 <_free_r+0x2e4>
 8002558:	1006d4ba 	srli	r3,r2,18
 800255c:	19401f04 	addi	r5,r3,124
 8002560:	2947883a 	add	r3,r5,r5
 8002564:	003f9b06 	br	80023d4 <__alt_data_end+0xfc0023d4>
 8002568:	00c03f04 	movi	r3,252
 800256c:	01401f84 	movi	r5,126
 8002570:	003f9806 	br	80023d4 <__alt_data_end+0xfc0023d4>

08002574 <_fwalk>:
 8002574:	defff804 	addi	sp,sp,-32
 8002578:	dd400515 	stw	r21,20(sp)
 800257c:	2540b804 	addi	r21,r4,736
 8002580:	dd800615 	stw	r22,24(sp)
 8002584:	dd000415 	stw	r20,16(sp)
 8002588:	dfc00715 	stw	ra,28(sp)
 800258c:	dcc00315 	stw	r19,12(sp)
 8002590:	dc800215 	stw	r18,8(sp)
 8002594:	dc400115 	stw	r17,4(sp)
 8002598:	dc000015 	stw	r16,0(sp)
 800259c:	2829883a 	mov	r20,r5
 80025a0:	002d883a 	mov	r22,zero
 80025a4:	80021200 	call	8002120 <__sfp_lock_acquire>
 80025a8:	a8001426 	beq	r21,zero,80025fc <_fwalk+0x88>
 80025ac:	04ffffc4 	movi	r19,-1
 80025b0:	ac400117 	ldw	r17,4(r21)
 80025b4:	ac800217 	ldw	r18,8(r21)
 80025b8:	8c7fffc4 	addi	r17,r17,-1
 80025bc:	88000d16 	blt	r17,zero,80025f4 <_fwalk+0x80>
 80025c0:	94000304 	addi	r16,r18,12
 80025c4:	94800384 	addi	r18,r18,14
 80025c8:	80c0000f 	ldh	r3,0(r16)
 80025cc:	8c7fffc4 	addi	r17,r17,-1
 80025d0:	813ffd04 	addi	r4,r16,-12
 80025d4:	18000426 	beq	r3,zero,80025e8 <_fwalk+0x74>
 80025d8:	90c0000f 	ldh	r3,0(r18)
 80025dc:	1cc00226 	beq	r3,r19,80025e8 <_fwalk+0x74>
 80025e0:	a03ee83a 	callr	r20
 80025e4:	b0acb03a 	or	r22,r22,r2
 80025e8:	84001a04 	addi	r16,r16,104
 80025ec:	94801a04 	addi	r18,r18,104
 80025f0:	8cfff51e 	bne	r17,r19,80025c8 <__alt_data_end+0xfc0025c8>
 80025f4:	ad400017 	ldw	r21,0(r21)
 80025f8:	a83fed1e 	bne	r21,zero,80025b0 <__alt_data_end+0xfc0025b0>
 80025fc:	80021240 	call	8002124 <__sfp_lock_release>
 8002600:	b005883a 	mov	r2,r22
 8002604:	dfc00717 	ldw	ra,28(sp)
 8002608:	dd800617 	ldw	r22,24(sp)
 800260c:	dd400517 	ldw	r21,20(sp)
 8002610:	dd000417 	ldw	r20,16(sp)
 8002614:	dcc00317 	ldw	r19,12(sp)
 8002618:	dc800217 	ldw	r18,8(sp)
 800261c:	dc400117 	ldw	r17,4(sp)
 8002620:	dc000017 	ldw	r16,0(sp)
 8002624:	dec00804 	addi	sp,sp,32
 8002628:	f800283a 	ret

0800262c <_fwalk_reent>:
 800262c:	defff804 	addi	sp,sp,-32
 8002630:	dd400515 	stw	r21,20(sp)
 8002634:	2540b804 	addi	r21,r4,736
 8002638:	dd800615 	stw	r22,24(sp)
 800263c:	dd000415 	stw	r20,16(sp)
 8002640:	dcc00315 	stw	r19,12(sp)
 8002644:	dfc00715 	stw	ra,28(sp)
 8002648:	dc800215 	stw	r18,8(sp)
 800264c:	dc400115 	stw	r17,4(sp)
 8002650:	dc000015 	stw	r16,0(sp)
 8002654:	2027883a 	mov	r19,r4
 8002658:	2829883a 	mov	r20,r5
 800265c:	002d883a 	mov	r22,zero
 8002660:	80021200 	call	8002120 <__sfp_lock_acquire>
 8002664:	a8001326 	beq	r21,zero,80026b4 <_fwalk_reent+0x88>
 8002668:	04bfffc4 	movi	r18,-1
 800266c:	ac400117 	ldw	r17,4(r21)
 8002670:	ac000217 	ldw	r16,8(r21)
 8002674:	8c7fffc4 	addi	r17,r17,-1
 8002678:	88000c16 	blt	r17,zero,80026ac <_fwalk_reent+0x80>
 800267c:	84000304 	addi	r16,r16,12
 8002680:	80c0000f 	ldh	r3,0(r16)
 8002684:	8c7fffc4 	addi	r17,r17,-1
 8002688:	817ffd04 	addi	r5,r16,-12
 800268c:	18000526 	beq	r3,zero,80026a4 <_fwalk_reent+0x78>
 8002690:	80c0008f 	ldh	r3,2(r16)
 8002694:	9809883a 	mov	r4,r19
 8002698:	1c800226 	beq	r3,r18,80026a4 <_fwalk_reent+0x78>
 800269c:	a03ee83a 	callr	r20
 80026a0:	b0acb03a 	or	r22,r22,r2
 80026a4:	84001a04 	addi	r16,r16,104
 80026a8:	8cbff51e 	bne	r17,r18,8002680 <__alt_data_end+0xfc002680>
 80026ac:	ad400017 	ldw	r21,0(r21)
 80026b0:	a83fee1e 	bne	r21,zero,800266c <__alt_data_end+0xfc00266c>
 80026b4:	80021240 	call	8002124 <__sfp_lock_release>
 80026b8:	b005883a 	mov	r2,r22
 80026bc:	dfc00717 	ldw	ra,28(sp)
 80026c0:	dd800617 	ldw	r22,24(sp)
 80026c4:	dd400517 	ldw	r21,20(sp)
 80026c8:	dd000417 	ldw	r20,16(sp)
 80026cc:	dcc00317 	ldw	r19,12(sp)
 80026d0:	dc800217 	ldw	r18,8(sp)
 80026d4:	dc400117 	ldw	r17,4(sp)
 80026d8:	dc000017 	ldw	r16,0(sp)
 80026dc:	dec00804 	addi	sp,sp,32
 80026e0:	f800283a 	ret

080026e4 <__smakebuf_r>:
 80026e4:	2880030b 	ldhu	r2,12(r5)
 80026e8:	10c0008c 	andi	r3,r2,2
 80026ec:	1800401e 	bne	r3,zero,80027f0 <__smakebuf_r+0x10c>
 80026f0:	deffec04 	addi	sp,sp,-80
 80026f4:	dc000f15 	stw	r16,60(sp)
 80026f8:	2821883a 	mov	r16,r5
 80026fc:	2940038f 	ldh	r5,14(r5)
 8002700:	dc401015 	stw	r17,64(sp)
 8002704:	dfc01315 	stw	ra,76(sp)
 8002708:	dcc01215 	stw	r19,72(sp)
 800270c:	dc801115 	stw	r18,68(sp)
 8002710:	2023883a 	mov	r17,r4
 8002714:	28001b16 	blt	r5,zero,8002784 <__smakebuf_r+0xa0>
 8002718:	d80d883a 	mov	r6,sp
 800271c:	8002cc00 	call	8002cc0 <_fstat_r>
 8002720:	10001716 	blt	r2,zero,8002780 <__smakebuf_r+0x9c>
 8002724:	d8800117 	ldw	r2,4(sp)
 8002728:	00e00014 	movui	r3,32768
 800272c:	10bc000c 	andi	r2,r2,61440
 8002730:	10c03726 	beq	r2,r3,8002810 <__smakebuf_r+0x12c>
 8002734:	80c0030b 	ldhu	r3,12(r16)
 8002738:	18c20014 	ori	r3,r3,2048
 800273c:	80c0030d 	sth	r3,12(r16)
 8002740:	00c80004 	movi	r3,8192
 8002744:	10c03c1e 	bne	r2,r3,8002838 <__smakebuf_r+0x154>
 8002748:	8140038f 	ldh	r5,14(r16)
 800274c:	8809883a 	mov	r4,r17
 8002750:	8002d180 	call	8002d18 <_isatty_r>
 8002754:	10004e26 	beq	r2,zero,8002890 <__smakebuf_r+0x1ac>
 8002758:	8080030b 	ldhu	r2,12(r16)
 800275c:	04c00044 	movi	r19,1
 8002760:	80c010c4 	addi	r3,r16,67
 8002764:	14c4b03a 	or	r2,r2,r19
 8002768:	8080030d 	sth	r2,12(r16)
 800276c:	80c00015 	stw	r3,0(r16)
 8002770:	80c00415 	stw	r3,16(r16)
 8002774:	84c00515 	stw	r19,20(r16)
 8002778:	04810004 	movi	r18,1024
 800277c:	00000706 	br	800279c <__smakebuf_r+0xb8>
 8002780:	8080030b 	ldhu	r2,12(r16)
 8002784:	10c0200c 	andi	r3,r2,128
 8002788:	18001f1e 	bne	r3,zero,8002808 <__smakebuf_r+0x124>
 800278c:	04810004 	movi	r18,1024
 8002790:	10820014 	ori	r2,r2,2048
 8002794:	8080030d 	sth	r2,12(r16)
 8002798:	0027883a 	mov	r19,zero
 800279c:	8809883a 	mov	r4,r17
 80027a0:	900b883a 	mov	r5,r18
 80027a4:	80009200 	call	8000920 <_malloc_r>
 80027a8:	10002e26 	beq	r2,zero,8002864 <__smakebuf_r+0x180>
 80027ac:	80c0030b 	ldhu	r3,12(r16)
 80027b0:	01020034 	movhi	r4,2048
 80027b4:	21077404 	addi	r4,r4,7632
 80027b8:	89000f15 	stw	r4,60(r17)
 80027bc:	18c02014 	ori	r3,r3,128
 80027c0:	80c0030d 	sth	r3,12(r16)
 80027c4:	80800015 	stw	r2,0(r16)
 80027c8:	80800415 	stw	r2,16(r16)
 80027cc:	84800515 	stw	r18,20(r16)
 80027d0:	98001c1e 	bne	r19,zero,8002844 <__smakebuf_r+0x160>
 80027d4:	dfc01317 	ldw	ra,76(sp)
 80027d8:	dcc01217 	ldw	r19,72(sp)
 80027dc:	dc801117 	ldw	r18,68(sp)
 80027e0:	dc401017 	ldw	r17,64(sp)
 80027e4:	dc000f17 	ldw	r16,60(sp)
 80027e8:	dec01404 	addi	sp,sp,80
 80027ec:	f800283a 	ret
 80027f0:	288010c4 	addi	r2,r5,67
 80027f4:	28800015 	stw	r2,0(r5)
 80027f8:	28800415 	stw	r2,16(r5)
 80027fc:	00800044 	movi	r2,1
 8002800:	28800515 	stw	r2,20(r5)
 8002804:	f800283a 	ret
 8002808:	04801004 	movi	r18,64
 800280c:	003fe006 	br	8002790 <__alt_data_end+0xfc002790>
 8002810:	81000a17 	ldw	r4,40(r16)
 8002814:	00c20034 	movhi	r3,2048
 8002818:	18caa604 	addi	r3,r3,10904
 800281c:	20ffc51e 	bne	r4,r3,8002734 <__alt_data_end+0xfc002734>
 8002820:	80c0030b 	ldhu	r3,12(r16)
 8002824:	01010004 	movi	r4,1024
 8002828:	81001315 	stw	r4,76(r16)
 800282c:	1906b03a 	or	r3,r3,r4
 8002830:	80c0030d 	sth	r3,12(r16)
 8002834:	003fc206 	br	8002740 <__alt_data_end+0xfc002740>
 8002838:	0027883a 	mov	r19,zero
 800283c:	04810004 	movi	r18,1024
 8002840:	003fd606 	br	800279c <__alt_data_end+0xfc00279c>
 8002844:	8140038f 	ldh	r5,14(r16)
 8002848:	8809883a 	mov	r4,r17
 800284c:	8002d180 	call	8002d18 <_isatty_r>
 8002850:	103fe026 	beq	r2,zero,80027d4 <__alt_data_end+0xfc0027d4>
 8002854:	8080030b 	ldhu	r2,12(r16)
 8002858:	10800054 	ori	r2,r2,1
 800285c:	8080030d 	sth	r2,12(r16)
 8002860:	003fdc06 	br	80027d4 <__alt_data_end+0xfc0027d4>
 8002864:	8080030b 	ldhu	r2,12(r16)
 8002868:	10c0800c 	andi	r3,r2,512
 800286c:	183fd91e 	bne	r3,zero,80027d4 <__alt_data_end+0xfc0027d4>
 8002870:	10800094 	ori	r2,r2,2
 8002874:	80c010c4 	addi	r3,r16,67
 8002878:	8080030d 	sth	r2,12(r16)
 800287c:	00800044 	movi	r2,1
 8002880:	80c00015 	stw	r3,0(r16)
 8002884:	80c00415 	stw	r3,16(r16)
 8002888:	80800515 	stw	r2,20(r16)
 800288c:	003fd106 	br	80027d4 <__alt_data_end+0xfc0027d4>
 8002890:	04c00044 	movi	r19,1
 8002894:	04810004 	movi	r18,1024
 8002898:	003fc006 	br	800279c <__alt_data_end+0xfc00279c>

0800289c <memset>:
 800289c:	20c000cc 	andi	r3,r4,3
 80028a0:	2005883a 	mov	r2,r4
 80028a4:	18004326 	beq	r3,zero,80029b4 <memset+0x118>
 80028a8:	31ffffc4 	addi	r7,r6,-1
 80028ac:	30004026 	beq	r6,zero,80029b0 <memset+0x114>
 80028b0:	2813883a 	mov	r9,r5
 80028b4:	200d883a 	mov	r6,r4
 80028b8:	2007883a 	mov	r3,r4
 80028bc:	00000406 	br	80028d0 <memset+0x34>
 80028c0:	3a3fffc4 	addi	r8,r7,-1
 80028c4:	31800044 	addi	r6,r6,1
 80028c8:	38003926 	beq	r7,zero,80029b0 <memset+0x114>
 80028cc:	400f883a 	mov	r7,r8
 80028d0:	18c00044 	addi	r3,r3,1
 80028d4:	32400005 	stb	r9,0(r6)
 80028d8:	1a0000cc 	andi	r8,r3,3
 80028dc:	403ff81e 	bne	r8,zero,80028c0 <__alt_data_end+0xfc0028c0>
 80028e0:	010000c4 	movi	r4,3
 80028e4:	21c02d2e 	bgeu	r4,r7,800299c <memset+0x100>
 80028e8:	29803fcc 	andi	r6,r5,255
 80028ec:	3008923a 	slli	r4,r6,8
 80028f0:	218cb03a 	or	r6,r4,r6
 80028f4:	3008943a 	slli	r4,r6,16
 80028f8:	218cb03a 	or	r6,r4,r6
 80028fc:	010003c4 	movi	r4,15
 8002900:	21c0182e 	bgeu	r4,r7,8002964 <memset+0xc8>
 8002904:	3b3ffc04 	addi	r12,r7,-16
 8002908:	6018d13a 	srli	r12,r12,4
 800290c:	1a000104 	addi	r8,r3,4
 8002910:	1ac00204 	addi	r11,r3,8
 8002914:	6008913a 	slli	r4,r12,4
 8002918:	1a800304 	addi	r10,r3,12
 800291c:	1813883a 	mov	r9,r3
 8002920:	21000504 	addi	r4,r4,20
 8002924:	1909883a 	add	r4,r3,r4
 8002928:	49800015 	stw	r6,0(r9)
 800292c:	41800015 	stw	r6,0(r8)
 8002930:	59800015 	stw	r6,0(r11)
 8002934:	51800015 	stw	r6,0(r10)
 8002938:	42000404 	addi	r8,r8,16
 800293c:	4a400404 	addi	r9,r9,16
 8002940:	5ac00404 	addi	r11,r11,16
 8002944:	52800404 	addi	r10,r10,16
 8002948:	413ff71e 	bne	r8,r4,8002928 <__alt_data_end+0xfc002928>
 800294c:	63000044 	addi	r12,r12,1
 8002950:	6018913a 	slli	r12,r12,4
 8002954:	39c003cc 	andi	r7,r7,15
 8002958:	010000c4 	movi	r4,3
 800295c:	1b07883a 	add	r3,r3,r12
 8002960:	21c00e2e 	bgeu	r4,r7,800299c <memset+0x100>
 8002964:	1813883a 	mov	r9,r3
 8002968:	3811883a 	mov	r8,r7
 800296c:	010000c4 	movi	r4,3
 8002970:	49800015 	stw	r6,0(r9)
 8002974:	423fff04 	addi	r8,r8,-4
 8002978:	4a400104 	addi	r9,r9,4
 800297c:	223ffc36 	bltu	r4,r8,8002970 <__alt_data_end+0xfc002970>
 8002980:	393fff04 	addi	r4,r7,-4
 8002984:	2008d0ba 	srli	r4,r4,2
 8002988:	39c000cc 	andi	r7,r7,3
 800298c:	21000044 	addi	r4,r4,1
 8002990:	2109883a 	add	r4,r4,r4
 8002994:	2109883a 	add	r4,r4,r4
 8002998:	1907883a 	add	r3,r3,r4
 800299c:	38000426 	beq	r7,zero,80029b0 <memset+0x114>
 80029a0:	19cf883a 	add	r7,r3,r7
 80029a4:	19400005 	stb	r5,0(r3)
 80029a8:	18c00044 	addi	r3,r3,1
 80029ac:	19fffd1e 	bne	r3,r7,80029a4 <__alt_data_end+0xfc0029a4>
 80029b0:	f800283a 	ret
 80029b4:	2007883a 	mov	r3,r4
 80029b8:	300f883a 	mov	r7,r6
 80029bc:	003fc806 	br	80028e0 <__alt_data_end+0xfc0028e0>

080029c0 <__sread>:
 80029c0:	defffe04 	addi	sp,sp,-8
 80029c4:	dc000015 	stw	r16,0(sp)
 80029c8:	2821883a 	mov	r16,r5
 80029cc:	2940038f 	ldh	r5,14(r5)
 80029d0:	dfc00115 	stw	ra,4(sp)
 80029d4:	8002dc80 	call	8002dc8 <_read_r>
 80029d8:	10000716 	blt	r2,zero,80029f8 <__sread+0x38>
 80029dc:	80c01417 	ldw	r3,80(r16)
 80029e0:	1887883a 	add	r3,r3,r2
 80029e4:	80c01415 	stw	r3,80(r16)
 80029e8:	dfc00117 	ldw	ra,4(sp)
 80029ec:	dc000017 	ldw	r16,0(sp)
 80029f0:	dec00204 	addi	sp,sp,8
 80029f4:	f800283a 	ret
 80029f8:	80c0030b 	ldhu	r3,12(r16)
 80029fc:	18fbffcc 	andi	r3,r3,61439
 8002a00:	80c0030d 	sth	r3,12(r16)
 8002a04:	dfc00117 	ldw	ra,4(sp)
 8002a08:	dc000017 	ldw	r16,0(sp)
 8002a0c:	dec00204 	addi	sp,sp,8
 8002a10:	f800283a 	ret

08002a14 <__seofread>:
 8002a14:	0005883a 	mov	r2,zero
 8002a18:	f800283a 	ret

08002a1c <__swrite>:
 8002a1c:	2880030b 	ldhu	r2,12(r5)
 8002a20:	defffb04 	addi	sp,sp,-20
 8002a24:	dcc00315 	stw	r19,12(sp)
 8002a28:	dc800215 	stw	r18,8(sp)
 8002a2c:	dc400115 	stw	r17,4(sp)
 8002a30:	dc000015 	stw	r16,0(sp)
 8002a34:	dfc00415 	stw	ra,16(sp)
 8002a38:	10c0400c 	andi	r3,r2,256
 8002a3c:	2821883a 	mov	r16,r5
 8002a40:	2027883a 	mov	r19,r4
 8002a44:	3025883a 	mov	r18,r6
 8002a48:	3823883a 	mov	r17,r7
 8002a4c:	18000526 	beq	r3,zero,8002a64 <__swrite+0x48>
 8002a50:	2940038f 	ldh	r5,14(r5)
 8002a54:	000d883a 	mov	r6,zero
 8002a58:	01c00084 	movi	r7,2
 8002a5c:	8002d6c0 	call	8002d6c <_lseek_r>
 8002a60:	8080030b 	ldhu	r2,12(r16)
 8002a64:	8140038f 	ldh	r5,14(r16)
 8002a68:	10bbffcc 	andi	r2,r2,61439
 8002a6c:	9809883a 	mov	r4,r19
 8002a70:	900d883a 	mov	r6,r18
 8002a74:	880f883a 	mov	r7,r17
 8002a78:	8080030d 	sth	r2,12(r16)
 8002a7c:	dfc00417 	ldw	ra,16(sp)
 8002a80:	dcc00317 	ldw	r19,12(sp)
 8002a84:	dc800217 	ldw	r18,8(sp)
 8002a88:	dc400117 	ldw	r17,4(sp)
 8002a8c:	dc000017 	ldw	r16,0(sp)
 8002a90:	dec00504 	addi	sp,sp,20
 8002a94:	8002afc1 	jmpi	8002afc <_write_r>

08002a98 <__sseek>:
 8002a98:	defffe04 	addi	sp,sp,-8
 8002a9c:	dc000015 	stw	r16,0(sp)
 8002aa0:	2821883a 	mov	r16,r5
 8002aa4:	2940038f 	ldh	r5,14(r5)
 8002aa8:	dfc00115 	stw	ra,4(sp)
 8002aac:	8002d6c0 	call	8002d6c <_lseek_r>
 8002ab0:	00ffffc4 	movi	r3,-1
 8002ab4:	10c00826 	beq	r2,r3,8002ad8 <__sseek+0x40>
 8002ab8:	80c0030b 	ldhu	r3,12(r16)
 8002abc:	80801415 	stw	r2,80(r16)
 8002ac0:	18c40014 	ori	r3,r3,4096
 8002ac4:	80c0030d 	sth	r3,12(r16)
 8002ac8:	dfc00117 	ldw	ra,4(sp)
 8002acc:	dc000017 	ldw	r16,0(sp)
 8002ad0:	dec00204 	addi	sp,sp,8
 8002ad4:	f800283a 	ret
 8002ad8:	80c0030b 	ldhu	r3,12(r16)
 8002adc:	18fbffcc 	andi	r3,r3,61439
 8002ae0:	80c0030d 	sth	r3,12(r16)
 8002ae4:	dfc00117 	ldw	ra,4(sp)
 8002ae8:	dc000017 	ldw	r16,0(sp)
 8002aec:	dec00204 	addi	sp,sp,8
 8002af0:	f800283a 	ret

08002af4 <__sclose>:
 8002af4:	2940038f 	ldh	r5,14(r5)
 8002af8:	8002b581 	jmpi	8002b58 <_close_r>

08002afc <_write_r>:
 8002afc:	defffd04 	addi	sp,sp,-12
 8002b00:	dc000015 	stw	r16,0(sp)
 8002b04:	04020074 	movhi	r16,2049
 8002b08:	dc400115 	stw	r17,4(sp)
 8002b0c:	84241804 	addi	r16,r16,-28576
 8002b10:	2023883a 	mov	r17,r4
 8002b14:	2809883a 	mov	r4,r5
 8002b18:	300b883a 	mov	r5,r6
 8002b1c:	380d883a 	mov	r6,r7
 8002b20:	dfc00215 	stw	ra,8(sp)
 8002b24:	80000015 	stw	zero,0(r16)
 8002b28:	80036d00 	call	80036d0 <write>
 8002b2c:	00ffffc4 	movi	r3,-1
 8002b30:	10c00526 	beq	r2,r3,8002b48 <_write_r+0x4c>
 8002b34:	dfc00217 	ldw	ra,8(sp)
 8002b38:	dc400117 	ldw	r17,4(sp)
 8002b3c:	dc000017 	ldw	r16,0(sp)
 8002b40:	dec00304 	addi	sp,sp,12
 8002b44:	f800283a 	ret
 8002b48:	80c00017 	ldw	r3,0(r16)
 8002b4c:	183ff926 	beq	r3,zero,8002b34 <__alt_data_end+0xfc002b34>
 8002b50:	88c00015 	stw	r3,0(r17)
 8002b54:	003ff706 	br	8002b34 <__alt_data_end+0xfc002b34>

08002b58 <_close_r>:
 8002b58:	defffd04 	addi	sp,sp,-12
 8002b5c:	dc000015 	stw	r16,0(sp)
 8002b60:	04020074 	movhi	r16,2049
 8002b64:	dc400115 	stw	r17,4(sp)
 8002b68:	84241804 	addi	r16,r16,-28576
 8002b6c:	2023883a 	mov	r17,r4
 8002b70:	2809883a 	mov	r4,r5
 8002b74:	dfc00215 	stw	ra,8(sp)
 8002b78:	80000015 	stw	zero,0(r16)
 8002b7c:	8002e740 	call	8002e74 <close>
 8002b80:	00ffffc4 	movi	r3,-1
 8002b84:	10c00526 	beq	r2,r3,8002b9c <_close_r+0x44>
 8002b88:	dfc00217 	ldw	ra,8(sp)
 8002b8c:	dc400117 	ldw	r17,4(sp)
 8002b90:	dc000017 	ldw	r16,0(sp)
 8002b94:	dec00304 	addi	sp,sp,12
 8002b98:	f800283a 	ret
 8002b9c:	80c00017 	ldw	r3,0(r16)
 8002ba0:	183ff926 	beq	r3,zero,8002b88 <__alt_data_end+0xfc002b88>
 8002ba4:	88c00015 	stw	r3,0(r17)
 8002ba8:	003ff706 	br	8002b88 <__alt_data_end+0xfc002b88>

08002bac <_fclose_r>:
 8002bac:	28003226 	beq	r5,zero,8002c78 <_fclose_r+0xcc>
 8002bb0:	defffc04 	addi	sp,sp,-16
 8002bb4:	dc400115 	stw	r17,4(sp)
 8002bb8:	2023883a 	mov	r17,r4
 8002bbc:	dc000015 	stw	r16,0(sp)
 8002bc0:	dfc00315 	stw	ra,12(sp)
 8002bc4:	dc800215 	stw	r18,8(sp)
 8002bc8:	2821883a 	mov	r16,r5
 8002bcc:	80021200 	call	8002120 <__sfp_lock_acquire>
 8002bd0:	88000226 	beq	r17,zero,8002bdc <_fclose_r+0x30>
 8002bd4:	88800e17 	ldw	r2,56(r17)
 8002bd8:	10002926 	beq	r2,zero,8002c80 <_fclose_r+0xd4>
 8002bdc:	8080030f 	ldh	r2,12(r16)
 8002be0:	10002226 	beq	r2,zero,8002c6c <_fclose_r+0xc0>
 8002be4:	8809883a 	mov	r4,r17
 8002be8:	800b883a 	mov	r5,r16
 8002bec:	8001b680 	call	8001b68 <_fflush_r>
 8002bf0:	1025883a 	mov	r18,r2
 8002bf4:	80800b17 	ldw	r2,44(r16)
 8002bf8:	10000426 	beq	r2,zero,8002c0c <_fclose_r+0x60>
 8002bfc:	81400717 	ldw	r5,28(r16)
 8002c00:	8809883a 	mov	r4,r17
 8002c04:	103ee83a 	callr	r2
 8002c08:	10002616 	blt	r2,zero,8002ca4 <_fclose_r+0xf8>
 8002c0c:	8080030b 	ldhu	r2,12(r16)
 8002c10:	1080200c 	andi	r2,r2,128
 8002c14:	10001f1e 	bne	r2,zero,8002c94 <_fclose_r+0xe8>
 8002c18:	81400c17 	ldw	r5,48(r16)
 8002c1c:	28000526 	beq	r5,zero,8002c34 <_fclose_r+0x88>
 8002c20:	80801004 	addi	r2,r16,64
 8002c24:	28800226 	beq	r5,r2,8002c30 <_fclose_r+0x84>
 8002c28:	8809883a 	mov	r4,r17
 8002c2c:	80022840 	call	8002284 <_free_r>
 8002c30:	80000c15 	stw	zero,48(r16)
 8002c34:	81401117 	ldw	r5,68(r16)
 8002c38:	28000326 	beq	r5,zero,8002c48 <_fclose_r+0x9c>
 8002c3c:	8809883a 	mov	r4,r17
 8002c40:	80022840 	call	8002284 <_free_r>
 8002c44:	80001115 	stw	zero,68(r16)
 8002c48:	8000030d 	sth	zero,12(r16)
 8002c4c:	80021240 	call	8002124 <__sfp_lock_release>
 8002c50:	9005883a 	mov	r2,r18
 8002c54:	dfc00317 	ldw	ra,12(sp)
 8002c58:	dc800217 	ldw	r18,8(sp)
 8002c5c:	dc400117 	ldw	r17,4(sp)
 8002c60:	dc000017 	ldw	r16,0(sp)
 8002c64:	dec00404 	addi	sp,sp,16
 8002c68:	f800283a 	ret
 8002c6c:	80021240 	call	8002124 <__sfp_lock_release>
 8002c70:	0005883a 	mov	r2,zero
 8002c74:	003ff706 	br	8002c54 <__alt_data_end+0xfc002c54>
 8002c78:	0005883a 	mov	r2,zero
 8002c7c:	f800283a 	ret
 8002c80:	8809883a 	mov	r4,r17
 8002c84:	80021100 	call	8002110 <__sinit>
 8002c88:	8080030f 	ldh	r2,12(r16)
 8002c8c:	103fd51e 	bne	r2,zero,8002be4 <__alt_data_end+0xfc002be4>
 8002c90:	003ff606 	br	8002c6c <__alt_data_end+0xfc002c6c>
 8002c94:	81400417 	ldw	r5,16(r16)
 8002c98:	8809883a 	mov	r4,r17
 8002c9c:	80022840 	call	8002284 <_free_r>
 8002ca0:	003fdd06 	br	8002c18 <__alt_data_end+0xfc002c18>
 8002ca4:	04bfffc4 	movi	r18,-1
 8002ca8:	003fd806 	br	8002c0c <__alt_data_end+0xfc002c0c>

08002cac <fclose>:
 8002cac:	00820034 	movhi	r2,2048
 8002cb0:	109d6204 	addi	r2,r2,30088
 8002cb4:	200b883a 	mov	r5,r4
 8002cb8:	11000017 	ldw	r4,0(r2)
 8002cbc:	8002bac1 	jmpi	8002bac <_fclose_r>

08002cc0 <_fstat_r>:
 8002cc0:	defffd04 	addi	sp,sp,-12
 8002cc4:	dc000015 	stw	r16,0(sp)
 8002cc8:	04020074 	movhi	r16,2049
 8002ccc:	dc400115 	stw	r17,4(sp)
 8002cd0:	84241804 	addi	r16,r16,-28576
 8002cd4:	2023883a 	mov	r17,r4
 8002cd8:	2809883a 	mov	r4,r5
 8002cdc:	300b883a 	mov	r5,r6
 8002ce0:	dfc00215 	stw	ra,8(sp)
 8002ce4:	80000015 	stw	zero,0(r16)
 8002ce8:	8002fc00 	call	8002fc0 <fstat>
 8002cec:	00ffffc4 	movi	r3,-1
 8002cf0:	10c00526 	beq	r2,r3,8002d08 <_fstat_r+0x48>
 8002cf4:	dfc00217 	ldw	ra,8(sp)
 8002cf8:	dc400117 	ldw	r17,4(sp)
 8002cfc:	dc000017 	ldw	r16,0(sp)
 8002d00:	dec00304 	addi	sp,sp,12
 8002d04:	f800283a 	ret
 8002d08:	80c00017 	ldw	r3,0(r16)
 8002d0c:	183ff926 	beq	r3,zero,8002cf4 <__alt_data_end+0xfc002cf4>
 8002d10:	88c00015 	stw	r3,0(r17)
 8002d14:	003ff706 	br	8002cf4 <__alt_data_end+0xfc002cf4>

08002d18 <_isatty_r>:
 8002d18:	defffd04 	addi	sp,sp,-12
 8002d1c:	dc000015 	stw	r16,0(sp)
 8002d20:	04020074 	movhi	r16,2049
 8002d24:	dc400115 	stw	r17,4(sp)
 8002d28:	84241804 	addi	r16,r16,-28576
 8002d2c:	2023883a 	mov	r17,r4
 8002d30:	2809883a 	mov	r4,r5
 8002d34:	dfc00215 	stw	ra,8(sp)
 8002d38:	80000015 	stw	zero,0(r16)
 8002d3c:	80030c00 	call	80030c0 <isatty>
 8002d40:	00ffffc4 	movi	r3,-1
 8002d44:	10c00526 	beq	r2,r3,8002d5c <_isatty_r+0x44>
 8002d48:	dfc00217 	ldw	ra,8(sp)
 8002d4c:	dc400117 	ldw	r17,4(sp)
 8002d50:	dc000017 	ldw	r16,0(sp)
 8002d54:	dec00304 	addi	sp,sp,12
 8002d58:	f800283a 	ret
 8002d5c:	80c00017 	ldw	r3,0(r16)
 8002d60:	183ff926 	beq	r3,zero,8002d48 <__alt_data_end+0xfc002d48>
 8002d64:	88c00015 	stw	r3,0(r17)
 8002d68:	003ff706 	br	8002d48 <__alt_data_end+0xfc002d48>

08002d6c <_lseek_r>:
 8002d6c:	defffd04 	addi	sp,sp,-12
 8002d70:	dc000015 	stw	r16,0(sp)
 8002d74:	04020074 	movhi	r16,2049
 8002d78:	dc400115 	stw	r17,4(sp)
 8002d7c:	84241804 	addi	r16,r16,-28576
 8002d80:	2023883a 	mov	r17,r4
 8002d84:	2809883a 	mov	r4,r5
 8002d88:	300b883a 	mov	r5,r6
 8002d8c:	380d883a 	mov	r6,r7
 8002d90:	dfc00215 	stw	ra,8(sp)
 8002d94:	80000015 	stw	zero,0(r16)
 8002d98:	80032980 	call	8003298 <lseek>
 8002d9c:	00ffffc4 	movi	r3,-1
 8002da0:	10c00526 	beq	r2,r3,8002db8 <_lseek_r+0x4c>
 8002da4:	dfc00217 	ldw	ra,8(sp)
 8002da8:	dc400117 	ldw	r17,4(sp)
 8002dac:	dc000017 	ldw	r16,0(sp)
 8002db0:	dec00304 	addi	sp,sp,12
 8002db4:	f800283a 	ret
 8002db8:	80c00017 	ldw	r3,0(r16)
 8002dbc:	183ff926 	beq	r3,zero,8002da4 <__alt_data_end+0xfc002da4>
 8002dc0:	88c00015 	stw	r3,0(r17)
 8002dc4:	003ff706 	br	8002da4 <__alt_data_end+0xfc002da4>

08002dc8 <_read_r>:
 8002dc8:	defffd04 	addi	sp,sp,-12
 8002dcc:	dc000015 	stw	r16,0(sp)
 8002dd0:	04020074 	movhi	r16,2049
 8002dd4:	dc400115 	stw	r17,4(sp)
 8002dd8:	84241804 	addi	r16,r16,-28576
 8002ddc:	2023883a 	mov	r17,r4
 8002de0:	2809883a 	mov	r4,r5
 8002de4:	300b883a 	mov	r5,r6
 8002de8:	380d883a 	mov	r6,r7
 8002dec:	dfc00215 	stw	ra,8(sp)
 8002df0:	80000015 	stw	zero,0(r16)
 8002df4:	80034740 	call	8003474 <read>
 8002df8:	00ffffc4 	movi	r3,-1
 8002dfc:	10c00526 	beq	r2,r3,8002e14 <_read_r+0x4c>
 8002e00:	dfc00217 	ldw	ra,8(sp)
 8002e04:	dc400117 	ldw	r17,4(sp)
 8002e08:	dc000017 	ldw	r16,0(sp)
 8002e0c:	dec00304 	addi	sp,sp,12
 8002e10:	f800283a 	ret
 8002e14:	80c00017 	ldw	r3,0(r16)
 8002e18:	183ff926 	beq	r3,zero,8002e00 <__alt_data_end+0xfc002e00>
 8002e1c:	88c00015 	stw	r3,0(r17)
 8002e20:	003ff706 	br	8002e00 <__alt_data_end+0xfc002e00>

08002e24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8002e24:	defffe04 	addi	sp,sp,-8
 8002e28:	dfc00115 	stw	ra,4(sp)
 8002e2c:	df000015 	stw	fp,0(sp)
 8002e30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8002e34:	00820034 	movhi	r2,2048
 8002e38:	109d6a04 	addi	r2,r2,30120
 8002e3c:	10800017 	ldw	r2,0(r2)
 8002e40:	10000526 	beq	r2,zero,8002e58 <alt_get_errno+0x34>
 8002e44:	00820034 	movhi	r2,2048
 8002e48:	109d6a04 	addi	r2,r2,30120
 8002e4c:	10800017 	ldw	r2,0(r2)
 8002e50:	103ee83a 	callr	r2
 8002e54:	00000206 	br	8002e60 <alt_get_errno+0x3c>
 8002e58:	00820074 	movhi	r2,2049
 8002e5c:	10a41804 	addi	r2,r2,-28576
}
 8002e60:	e037883a 	mov	sp,fp
 8002e64:	dfc00117 	ldw	ra,4(sp)
 8002e68:	df000017 	ldw	fp,0(sp)
 8002e6c:	dec00204 	addi	sp,sp,8
 8002e70:	f800283a 	ret

08002e74 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8002e74:	defffb04 	addi	sp,sp,-20
 8002e78:	dfc00415 	stw	ra,16(sp)
 8002e7c:	df000315 	stw	fp,12(sp)
 8002e80:	df000304 	addi	fp,sp,12
 8002e84:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8002e88:	e0bfff17 	ldw	r2,-4(fp)
 8002e8c:	10000616 	blt	r2,zero,8002ea8 <close+0x34>
 8002e90:	e0bfff17 	ldw	r2,-4(fp)
 8002e94:	10c00324 	muli	r3,r2,12
 8002e98:	00820034 	movhi	r2,2048
 8002e9c:	1098de04 	addi	r2,r2,25464
 8002ea0:	1885883a 	add	r2,r3,r2
 8002ea4:	00000106 	br	8002eac <close+0x38>
 8002ea8:	0005883a 	mov	r2,zero
 8002eac:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8002eb0:	e0bffd17 	ldw	r2,-12(fp)
 8002eb4:	10001926 	beq	r2,zero,8002f1c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8002eb8:	e0bffd17 	ldw	r2,-12(fp)
 8002ebc:	10800017 	ldw	r2,0(r2)
 8002ec0:	10800417 	ldw	r2,16(r2)
 8002ec4:	10000626 	beq	r2,zero,8002ee0 <close+0x6c>
 8002ec8:	e0bffd17 	ldw	r2,-12(fp)
 8002ecc:	10800017 	ldw	r2,0(r2)
 8002ed0:	10800417 	ldw	r2,16(r2)
 8002ed4:	e13ffd17 	ldw	r4,-12(fp)
 8002ed8:	103ee83a 	callr	r2
 8002edc:	00000106 	br	8002ee4 <close+0x70>
 8002ee0:	0005883a 	mov	r2,zero
 8002ee4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8002ee8:	e13fff17 	ldw	r4,-4(fp)
 8002eec:	80035700 	call	8003570 <alt_release_fd>
    if (rval < 0)
 8002ef0:	e0bffe17 	ldw	r2,-8(fp)
 8002ef4:	1000070e 	bge	r2,zero,8002f14 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 8002ef8:	8002e240 	call	8002e24 <alt_get_errno>
 8002efc:	1007883a 	mov	r3,r2
 8002f00:	e0bffe17 	ldw	r2,-8(fp)
 8002f04:	0085c83a 	sub	r2,zero,r2
 8002f08:	18800015 	stw	r2,0(r3)
      return -1;
 8002f0c:	00bfffc4 	movi	r2,-1
 8002f10:	00000706 	br	8002f30 <close+0xbc>
    }
    return 0;
 8002f14:	0005883a 	mov	r2,zero
 8002f18:	00000506 	br	8002f30 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8002f1c:	8002e240 	call	8002e24 <alt_get_errno>
 8002f20:	1007883a 	mov	r3,r2
 8002f24:	00801444 	movi	r2,81
 8002f28:	18800015 	stw	r2,0(r3)
    return -1;
 8002f2c:	00bfffc4 	movi	r2,-1
  }
}
 8002f30:	e037883a 	mov	sp,fp
 8002f34:	dfc00117 	ldw	ra,4(sp)
 8002f38:	df000017 	ldw	fp,0(sp)
 8002f3c:	dec00204 	addi	sp,sp,8
 8002f40:	f800283a 	ret

08002f44 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8002f44:	defffc04 	addi	sp,sp,-16
 8002f48:	df000315 	stw	fp,12(sp)
 8002f4c:	df000304 	addi	fp,sp,12
 8002f50:	e13ffd15 	stw	r4,-12(fp)
 8002f54:	e17ffe15 	stw	r5,-8(fp)
 8002f58:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8002f5c:	e0bfff17 	ldw	r2,-4(fp)
}
 8002f60:	e037883a 	mov	sp,fp
 8002f64:	df000017 	ldw	fp,0(sp)
 8002f68:	dec00104 	addi	sp,sp,4
 8002f6c:	f800283a 	ret

08002f70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8002f70:	defffe04 	addi	sp,sp,-8
 8002f74:	dfc00115 	stw	ra,4(sp)
 8002f78:	df000015 	stw	fp,0(sp)
 8002f7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8002f80:	00820034 	movhi	r2,2048
 8002f84:	109d6a04 	addi	r2,r2,30120
 8002f88:	10800017 	ldw	r2,0(r2)
 8002f8c:	10000526 	beq	r2,zero,8002fa4 <alt_get_errno+0x34>
 8002f90:	00820034 	movhi	r2,2048
 8002f94:	109d6a04 	addi	r2,r2,30120
 8002f98:	10800017 	ldw	r2,0(r2)
 8002f9c:	103ee83a 	callr	r2
 8002fa0:	00000206 	br	8002fac <alt_get_errno+0x3c>
 8002fa4:	00820074 	movhi	r2,2049
 8002fa8:	10a41804 	addi	r2,r2,-28576
}
 8002fac:	e037883a 	mov	sp,fp
 8002fb0:	dfc00117 	ldw	ra,4(sp)
 8002fb4:	df000017 	ldw	fp,0(sp)
 8002fb8:	dec00204 	addi	sp,sp,8
 8002fbc:	f800283a 	ret

08002fc0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8002fc0:	defffb04 	addi	sp,sp,-20
 8002fc4:	dfc00415 	stw	ra,16(sp)
 8002fc8:	df000315 	stw	fp,12(sp)
 8002fcc:	df000304 	addi	fp,sp,12
 8002fd0:	e13ffe15 	stw	r4,-8(fp)
 8002fd4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8002fd8:	e0bffe17 	ldw	r2,-8(fp)
 8002fdc:	10000616 	blt	r2,zero,8002ff8 <fstat+0x38>
 8002fe0:	e0bffe17 	ldw	r2,-8(fp)
 8002fe4:	10c00324 	muli	r3,r2,12
 8002fe8:	00820034 	movhi	r2,2048
 8002fec:	1098de04 	addi	r2,r2,25464
 8002ff0:	1885883a 	add	r2,r3,r2
 8002ff4:	00000106 	br	8002ffc <fstat+0x3c>
 8002ff8:	0005883a 	mov	r2,zero
 8002ffc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8003000:	e0bffd17 	ldw	r2,-12(fp)
 8003004:	10001026 	beq	r2,zero,8003048 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8003008:	e0bffd17 	ldw	r2,-12(fp)
 800300c:	10800017 	ldw	r2,0(r2)
 8003010:	10800817 	ldw	r2,32(r2)
 8003014:	10000726 	beq	r2,zero,8003034 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 8003018:	e0bffd17 	ldw	r2,-12(fp)
 800301c:	10800017 	ldw	r2,0(r2)
 8003020:	10800817 	ldw	r2,32(r2)
 8003024:	e13ffd17 	ldw	r4,-12(fp)
 8003028:	e17fff17 	ldw	r5,-4(fp)
 800302c:	103ee83a 	callr	r2
 8003030:	00000a06 	br	800305c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8003034:	e0bfff17 	ldw	r2,-4(fp)
 8003038:	00c80004 	movi	r3,8192
 800303c:	10c00115 	stw	r3,4(r2)
      return 0;
 8003040:	0005883a 	mov	r2,zero
 8003044:	00000506 	br	800305c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8003048:	8002f700 	call	8002f70 <alt_get_errno>
 800304c:	1007883a 	mov	r3,r2
 8003050:	00801444 	movi	r2,81
 8003054:	18800015 	stw	r2,0(r3)
    return -1;
 8003058:	00bfffc4 	movi	r2,-1
  }
}
 800305c:	e037883a 	mov	sp,fp
 8003060:	dfc00117 	ldw	ra,4(sp)
 8003064:	df000017 	ldw	fp,0(sp)
 8003068:	dec00204 	addi	sp,sp,8
 800306c:	f800283a 	ret

08003070 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003070:	defffe04 	addi	sp,sp,-8
 8003074:	dfc00115 	stw	ra,4(sp)
 8003078:	df000015 	stw	fp,0(sp)
 800307c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8003080:	00820034 	movhi	r2,2048
 8003084:	109d6a04 	addi	r2,r2,30120
 8003088:	10800017 	ldw	r2,0(r2)
 800308c:	10000526 	beq	r2,zero,80030a4 <alt_get_errno+0x34>
 8003090:	00820034 	movhi	r2,2048
 8003094:	109d6a04 	addi	r2,r2,30120
 8003098:	10800017 	ldw	r2,0(r2)
 800309c:	103ee83a 	callr	r2
 80030a0:	00000206 	br	80030ac <alt_get_errno+0x3c>
 80030a4:	00820074 	movhi	r2,2049
 80030a8:	10a41804 	addi	r2,r2,-28576
}
 80030ac:	e037883a 	mov	sp,fp
 80030b0:	dfc00117 	ldw	ra,4(sp)
 80030b4:	df000017 	ldw	fp,0(sp)
 80030b8:	dec00204 	addi	sp,sp,8
 80030bc:	f800283a 	ret

080030c0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 80030c0:	deffed04 	addi	sp,sp,-76
 80030c4:	dfc01215 	stw	ra,72(sp)
 80030c8:	df001115 	stw	fp,68(sp)
 80030cc:	df001104 	addi	fp,sp,68
 80030d0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80030d4:	e0bfff17 	ldw	r2,-4(fp)
 80030d8:	10000616 	blt	r2,zero,80030f4 <isatty+0x34>
 80030dc:	e0bfff17 	ldw	r2,-4(fp)
 80030e0:	10c00324 	muli	r3,r2,12
 80030e4:	00820034 	movhi	r2,2048
 80030e8:	1098de04 	addi	r2,r2,25464
 80030ec:	1885883a 	add	r2,r3,r2
 80030f0:	00000106 	br	80030f8 <isatty+0x38>
 80030f4:	0005883a 	mov	r2,zero
 80030f8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 80030fc:	e0bfef17 	ldw	r2,-68(fp)
 8003100:	10000e26 	beq	r2,zero,800313c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8003104:	e0bfef17 	ldw	r2,-68(fp)
 8003108:	10800017 	ldw	r2,0(r2)
 800310c:	10800817 	ldw	r2,32(r2)
 8003110:	1000021e 	bne	r2,zero,800311c <isatty+0x5c>
    {
      return 1;
 8003114:	00800044 	movi	r2,1
 8003118:	00000d06 	br	8003150 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800311c:	e0bff004 	addi	r2,fp,-64
 8003120:	e13fff17 	ldw	r4,-4(fp)
 8003124:	100b883a 	mov	r5,r2
 8003128:	8002fc00 	call	8002fc0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800312c:	e0bff117 	ldw	r2,-60(fp)
 8003130:	10880020 	cmpeqi	r2,r2,8192
 8003134:	10803fcc 	andi	r2,r2,255
 8003138:	00000506 	br	8003150 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800313c:	80030700 	call	8003070 <alt_get_errno>
 8003140:	1007883a 	mov	r3,r2
 8003144:	00801444 	movi	r2,81
 8003148:	18800015 	stw	r2,0(r3)
    return 0;
 800314c:	0005883a 	mov	r2,zero
  }
}
 8003150:	e037883a 	mov	sp,fp
 8003154:	dfc00117 	ldw	ra,4(sp)
 8003158:	df000017 	ldw	fp,0(sp)
 800315c:	dec00204 	addi	sp,sp,8
 8003160:	f800283a 	ret

08003164 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8003164:	defffc04 	addi	sp,sp,-16
 8003168:	df000315 	stw	fp,12(sp)
 800316c:	df000304 	addi	fp,sp,12
 8003170:	e13ffd15 	stw	r4,-12(fp)
 8003174:	e17ffe15 	stw	r5,-8(fp)
 8003178:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800317c:	e0fffe17 	ldw	r3,-8(fp)
 8003180:	e0bffd17 	ldw	r2,-12(fp)
 8003184:	18800c26 	beq	r3,r2,80031b8 <alt_load_section+0x54>
  {
    while( to != end )
 8003188:	00000806 	br	80031ac <alt_load_section+0x48>
    {
      *to++ = *from++;
 800318c:	e0bffe17 	ldw	r2,-8(fp)
 8003190:	10c00104 	addi	r3,r2,4
 8003194:	e0fffe15 	stw	r3,-8(fp)
 8003198:	e0fffd17 	ldw	r3,-12(fp)
 800319c:	19000104 	addi	r4,r3,4
 80031a0:	e13ffd15 	stw	r4,-12(fp)
 80031a4:	18c00017 	ldw	r3,0(r3)
 80031a8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 80031ac:	e0fffe17 	ldw	r3,-8(fp)
 80031b0:	e0bfff17 	ldw	r2,-4(fp)
 80031b4:	18bff51e 	bne	r3,r2,800318c <__alt_data_end+0xfc00318c>
    {
      *to++ = *from++;
    }
  }
}
 80031b8:	e037883a 	mov	sp,fp
 80031bc:	df000017 	ldw	fp,0(sp)
 80031c0:	dec00104 	addi	sp,sp,4
 80031c4:	f800283a 	ret

080031c8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 80031c8:	defffe04 	addi	sp,sp,-8
 80031cc:	dfc00115 	stw	ra,4(sp)
 80031d0:	df000015 	stw	fp,0(sp)
 80031d4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 80031d8:	01020034 	movhi	r4,2048
 80031dc:	211d6f04 	addi	r4,r4,30140
 80031e0:	01420034 	movhi	r5,2048
 80031e4:	2956c904 	addi	r5,r5,23332
 80031e8:	01820034 	movhi	r6,2048
 80031ec:	319d6f04 	addi	r6,r6,30140
 80031f0:	80031640 	call	8003164 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 80031f4:	01020034 	movhi	r4,2048
 80031f8:	21000804 	addi	r4,r4,32
 80031fc:	01420034 	movhi	r5,2048
 8003200:	29400804 	addi	r5,r5,32
 8003204:	01820034 	movhi	r6,2048
 8003208:	31806f04 	addi	r6,r6,444
 800320c:	80031640 	call	8003164 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8003210:	01020034 	movhi	r4,2048
 8003214:	2116af04 	addi	r4,r4,23228
 8003218:	01420034 	movhi	r5,2048
 800321c:	2956af04 	addi	r5,r5,23228
 8003220:	01820034 	movhi	r6,2048
 8003224:	3196c904 	addi	r6,r6,23332
 8003228:	80031640 	call	8003164 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800322c:	8004a040 	call	8004a04 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8003230:	8004c5c0 	call	8004c5c <alt_icache_flush_all>
}
 8003234:	e037883a 	mov	sp,fp
 8003238:	dfc00117 	ldw	ra,4(sp)
 800323c:	df000017 	ldw	fp,0(sp)
 8003240:	dec00204 	addi	sp,sp,8
 8003244:	f800283a 	ret

08003248 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003248:	defffe04 	addi	sp,sp,-8
 800324c:	dfc00115 	stw	ra,4(sp)
 8003250:	df000015 	stw	fp,0(sp)
 8003254:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8003258:	00820034 	movhi	r2,2048
 800325c:	109d6a04 	addi	r2,r2,30120
 8003260:	10800017 	ldw	r2,0(r2)
 8003264:	10000526 	beq	r2,zero,800327c <alt_get_errno+0x34>
 8003268:	00820034 	movhi	r2,2048
 800326c:	109d6a04 	addi	r2,r2,30120
 8003270:	10800017 	ldw	r2,0(r2)
 8003274:	103ee83a 	callr	r2
 8003278:	00000206 	br	8003284 <alt_get_errno+0x3c>
 800327c:	00820074 	movhi	r2,2049
 8003280:	10a41804 	addi	r2,r2,-28576
}
 8003284:	e037883a 	mov	sp,fp
 8003288:	dfc00117 	ldw	ra,4(sp)
 800328c:	df000017 	ldw	fp,0(sp)
 8003290:	dec00204 	addi	sp,sp,8
 8003294:	f800283a 	ret

08003298 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 8003298:	defff904 	addi	sp,sp,-28
 800329c:	dfc00615 	stw	ra,24(sp)
 80032a0:	df000515 	stw	fp,20(sp)
 80032a4:	df000504 	addi	fp,sp,20
 80032a8:	e13ffd15 	stw	r4,-12(fp)
 80032ac:	e17ffe15 	stw	r5,-8(fp)
 80032b0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 80032b4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80032b8:	e0bffd17 	ldw	r2,-12(fp)
 80032bc:	10000616 	blt	r2,zero,80032d8 <lseek+0x40>
 80032c0:	e0bffd17 	ldw	r2,-12(fp)
 80032c4:	10c00324 	muli	r3,r2,12
 80032c8:	00820034 	movhi	r2,2048
 80032cc:	1098de04 	addi	r2,r2,25464
 80032d0:	1885883a 	add	r2,r3,r2
 80032d4:	00000106 	br	80032dc <lseek+0x44>
 80032d8:	0005883a 	mov	r2,zero
 80032dc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 80032e0:	e0bffc17 	ldw	r2,-16(fp)
 80032e4:	10001026 	beq	r2,zero,8003328 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 80032e8:	e0bffc17 	ldw	r2,-16(fp)
 80032ec:	10800017 	ldw	r2,0(r2)
 80032f0:	10800717 	ldw	r2,28(r2)
 80032f4:	10000926 	beq	r2,zero,800331c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 80032f8:	e0bffc17 	ldw	r2,-16(fp)
 80032fc:	10800017 	ldw	r2,0(r2)
 8003300:	10800717 	ldw	r2,28(r2)
 8003304:	e13ffc17 	ldw	r4,-16(fp)
 8003308:	e17ffe17 	ldw	r5,-8(fp)
 800330c:	e1bfff17 	ldw	r6,-4(fp)
 8003310:	103ee83a 	callr	r2
 8003314:	e0bffb15 	stw	r2,-20(fp)
 8003318:	00000506 	br	8003330 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800331c:	00bfde84 	movi	r2,-134
 8003320:	e0bffb15 	stw	r2,-20(fp)
 8003324:	00000206 	br	8003330 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 8003328:	00bfebc4 	movi	r2,-81
 800332c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8003330:	e0bffb17 	ldw	r2,-20(fp)
 8003334:	1000070e 	bge	r2,zero,8003354 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 8003338:	80032480 	call	8003248 <alt_get_errno>
 800333c:	1007883a 	mov	r3,r2
 8003340:	e0bffb17 	ldw	r2,-20(fp)
 8003344:	0085c83a 	sub	r2,zero,r2
 8003348:	18800015 	stw	r2,0(r3)
    rc = -1;
 800334c:	00bfffc4 	movi	r2,-1
 8003350:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 8003354:	e0bffb17 	ldw	r2,-20(fp)
}
 8003358:	e037883a 	mov	sp,fp
 800335c:	dfc00117 	ldw	ra,4(sp)
 8003360:	df000017 	ldw	fp,0(sp)
 8003364:	dec00204 	addi	sp,sp,8
 8003368:	f800283a 	ret

0800336c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800336c:	defffd04 	addi	sp,sp,-12
 8003370:	dfc00215 	stw	ra,8(sp)
 8003374:	df000115 	stw	fp,4(sp)
 8003378:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800337c:	0009883a 	mov	r4,zero
 8003380:	80038000 	call	8003800 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8003384:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8003388:	80038340 	call	8003834 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800338c:	01020034 	movhi	r4,2048
 8003390:	2116b904 	addi	r4,r4,23268
 8003394:	01420034 	movhi	r5,2048
 8003398:	2956b904 	addi	r5,r5,23268
 800339c:	01820034 	movhi	r6,2048
 80033a0:	3196b904 	addi	r6,r6,23268
 80033a4:	800501c0 	call	800501c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 80033a8:	8004b140 	call	8004b14 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 80033ac:	01020034 	movhi	r4,2048
 80033b0:	2112dc04 	addi	r4,r4,19312
 80033b4:	80057180 	call	8005718 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80033b8:	d126b817 	ldw	r4,-25888(gp)
 80033bc:	d0e6b917 	ldw	r3,-25884(gp)
 80033c0:	d0a6ba17 	ldw	r2,-25880(gp)
 80033c4:	180b883a 	mov	r5,r3
 80033c8:	100d883a 	mov	r6,r2
 80033cc:	80001f80 	call	80001f8 <main>
 80033d0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 80033d4:	01000044 	movi	r4,1
 80033d8:	8002e740 	call	8002e74 <close>
  exit (result);
 80033dc:	e13fff17 	ldw	r4,-4(fp)
 80033e0:	800572c0 	call	800572c <exit>

080033e4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 80033e4:	defffe04 	addi	sp,sp,-8
 80033e8:	df000115 	stw	fp,4(sp)
 80033ec:	df000104 	addi	fp,sp,4
 80033f0:	e13fff15 	stw	r4,-4(fp)
}
 80033f4:	e037883a 	mov	sp,fp
 80033f8:	df000017 	ldw	fp,0(sp)
 80033fc:	dec00104 	addi	sp,sp,4
 8003400:	f800283a 	ret

08003404 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8003404:	defffe04 	addi	sp,sp,-8
 8003408:	df000115 	stw	fp,4(sp)
 800340c:	df000104 	addi	fp,sp,4
 8003410:	e13fff15 	stw	r4,-4(fp)
}
 8003414:	e037883a 	mov	sp,fp
 8003418:	df000017 	ldw	fp,0(sp)
 800341c:	dec00104 	addi	sp,sp,4
 8003420:	f800283a 	ret

08003424 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003424:	defffe04 	addi	sp,sp,-8
 8003428:	dfc00115 	stw	ra,4(sp)
 800342c:	df000015 	stw	fp,0(sp)
 8003430:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8003434:	00820034 	movhi	r2,2048
 8003438:	109d6a04 	addi	r2,r2,30120
 800343c:	10800017 	ldw	r2,0(r2)
 8003440:	10000526 	beq	r2,zero,8003458 <alt_get_errno+0x34>
 8003444:	00820034 	movhi	r2,2048
 8003448:	109d6a04 	addi	r2,r2,30120
 800344c:	10800017 	ldw	r2,0(r2)
 8003450:	103ee83a 	callr	r2
 8003454:	00000206 	br	8003460 <alt_get_errno+0x3c>
 8003458:	00820074 	movhi	r2,2049
 800345c:	10a41804 	addi	r2,r2,-28576
}
 8003460:	e037883a 	mov	sp,fp
 8003464:	dfc00117 	ldw	ra,4(sp)
 8003468:	df000017 	ldw	fp,0(sp)
 800346c:	dec00204 	addi	sp,sp,8
 8003470:	f800283a 	ret

08003474 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8003474:	defff904 	addi	sp,sp,-28
 8003478:	dfc00615 	stw	ra,24(sp)
 800347c:	df000515 	stw	fp,20(sp)
 8003480:	df000504 	addi	fp,sp,20
 8003484:	e13ffd15 	stw	r4,-12(fp)
 8003488:	e17ffe15 	stw	r5,-8(fp)
 800348c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8003490:	e0bffd17 	ldw	r2,-12(fp)
 8003494:	10000616 	blt	r2,zero,80034b0 <read+0x3c>
 8003498:	e0bffd17 	ldw	r2,-12(fp)
 800349c:	10c00324 	muli	r3,r2,12
 80034a0:	00820034 	movhi	r2,2048
 80034a4:	1098de04 	addi	r2,r2,25464
 80034a8:	1885883a 	add	r2,r3,r2
 80034ac:	00000106 	br	80034b4 <read+0x40>
 80034b0:	0005883a 	mov	r2,zero
 80034b4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80034b8:	e0bffb17 	ldw	r2,-20(fp)
 80034bc:	10002226 	beq	r2,zero,8003548 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80034c0:	e0bffb17 	ldw	r2,-20(fp)
 80034c4:	10800217 	ldw	r2,8(r2)
 80034c8:	108000cc 	andi	r2,r2,3
 80034cc:	10800060 	cmpeqi	r2,r2,1
 80034d0:	1000181e 	bne	r2,zero,8003534 <read+0xc0>
        (fd->dev->read))
 80034d4:	e0bffb17 	ldw	r2,-20(fp)
 80034d8:	10800017 	ldw	r2,0(r2)
 80034dc:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80034e0:	10001426 	beq	r2,zero,8003534 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 80034e4:	e0bffb17 	ldw	r2,-20(fp)
 80034e8:	10800017 	ldw	r2,0(r2)
 80034ec:	10800517 	ldw	r2,20(r2)
 80034f0:	e0ffff17 	ldw	r3,-4(fp)
 80034f4:	e13ffb17 	ldw	r4,-20(fp)
 80034f8:	e17ffe17 	ldw	r5,-8(fp)
 80034fc:	180d883a 	mov	r6,r3
 8003500:	103ee83a 	callr	r2
 8003504:	e0bffc15 	stw	r2,-16(fp)
 8003508:	e0bffc17 	ldw	r2,-16(fp)
 800350c:	1000070e 	bge	r2,zero,800352c <read+0xb8>
        {
          ALT_ERRNO = -rval;
 8003510:	80034240 	call	8003424 <alt_get_errno>
 8003514:	1007883a 	mov	r3,r2
 8003518:	e0bffc17 	ldw	r2,-16(fp)
 800351c:	0085c83a 	sub	r2,zero,r2
 8003520:	18800015 	stw	r2,0(r3)
          return -1;
 8003524:	00bfffc4 	movi	r2,-1
 8003528:	00000c06 	br	800355c <read+0xe8>
        }
        return rval;
 800352c:	e0bffc17 	ldw	r2,-16(fp)
 8003530:	00000a06 	br	800355c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8003534:	80034240 	call	8003424 <alt_get_errno>
 8003538:	1007883a 	mov	r3,r2
 800353c:	00800344 	movi	r2,13
 8003540:	18800015 	stw	r2,0(r3)
 8003544:	00000406 	br	8003558 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 8003548:	80034240 	call	8003424 <alt_get_errno>
 800354c:	1007883a 	mov	r3,r2
 8003550:	00801444 	movi	r2,81
 8003554:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8003558:	00bfffc4 	movi	r2,-1
}
 800355c:	e037883a 	mov	sp,fp
 8003560:	dfc00117 	ldw	ra,4(sp)
 8003564:	df000017 	ldw	fp,0(sp)
 8003568:	dec00204 	addi	sp,sp,8
 800356c:	f800283a 	ret

08003570 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8003570:	defffe04 	addi	sp,sp,-8
 8003574:	df000115 	stw	fp,4(sp)
 8003578:	df000104 	addi	fp,sp,4
 800357c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8003580:	e0bfff17 	ldw	r2,-4(fp)
 8003584:	108000d0 	cmplti	r2,r2,3
 8003588:	10000d1e 	bne	r2,zero,80035c0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 800358c:	00820034 	movhi	r2,2048
 8003590:	1098de04 	addi	r2,r2,25464
 8003594:	e0ffff17 	ldw	r3,-4(fp)
 8003598:	18c00324 	muli	r3,r3,12
 800359c:	10c5883a 	add	r2,r2,r3
 80035a0:	10800204 	addi	r2,r2,8
 80035a4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 80035a8:	00820034 	movhi	r2,2048
 80035ac:	1098de04 	addi	r2,r2,25464
 80035b0:	e0ffff17 	ldw	r3,-4(fp)
 80035b4:	18c00324 	muli	r3,r3,12
 80035b8:	10c5883a 	add	r2,r2,r3
 80035bc:	10000015 	stw	zero,0(r2)
  }
}
 80035c0:	e037883a 	mov	sp,fp
 80035c4:	df000017 	ldw	fp,0(sp)
 80035c8:	dec00104 	addi	sp,sp,4
 80035cc:	f800283a 	ret

080035d0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 80035d0:	defff904 	addi	sp,sp,-28
 80035d4:	df000615 	stw	fp,24(sp)
 80035d8:	df000604 	addi	fp,sp,24
 80035dc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80035e0:	0005303a 	rdctl	r2,status
 80035e4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80035e8:	e0fffc17 	ldw	r3,-16(fp)
 80035ec:	00bfff84 	movi	r2,-2
 80035f0:	1884703a 	and	r2,r3,r2
 80035f4:	1001703a 	wrctl	status,r2
  
  return context;
 80035f8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 80035fc:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8003600:	d0a00a17 	ldw	r2,-32728(gp)
 8003604:	10c000c4 	addi	r3,r2,3
 8003608:	00bfff04 	movi	r2,-4
 800360c:	1884703a 	and	r2,r3,r2
 8003610:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 8003614:	d0e00a17 	ldw	r3,-32728(gp)
 8003618:	e0bfff17 	ldw	r2,-4(fp)
 800361c:	1887883a 	add	r3,r3,r2
 8003620:	00830034 	movhi	r2,3072
 8003624:	10800004 	addi	r2,r2,0
 8003628:	10c0062e 	bgeu	r2,r3,8003644 <sbrk+0x74>
 800362c:	e0bffa17 	ldw	r2,-24(fp)
 8003630:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8003634:	e0bffd17 	ldw	r2,-12(fp)
 8003638:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800363c:	00bfffc4 	movi	r2,-1
 8003640:	00000b06 	br	8003670 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 8003644:	d0a00a17 	ldw	r2,-32728(gp)
 8003648:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800364c:	d0e00a17 	ldw	r3,-32728(gp)
 8003650:	e0bfff17 	ldw	r2,-4(fp)
 8003654:	1885883a 	add	r2,r3,r2
 8003658:	d0a00a15 	stw	r2,-32728(gp)
 800365c:	e0bffa17 	ldw	r2,-24(fp)
 8003660:	e0bffe15 	stw	r2,-8(fp)
 8003664:	e0bffe17 	ldw	r2,-8(fp)
 8003668:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800366c:	e0bffb17 	ldw	r2,-20(fp)
} 
 8003670:	e037883a 	mov	sp,fp
 8003674:	df000017 	ldw	fp,0(sp)
 8003678:	dec00104 	addi	sp,sp,4
 800367c:	f800283a 	ret

08003680 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8003680:	defffe04 	addi	sp,sp,-8
 8003684:	dfc00115 	stw	ra,4(sp)
 8003688:	df000015 	stw	fp,0(sp)
 800368c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8003690:	00820034 	movhi	r2,2048
 8003694:	109d6a04 	addi	r2,r2,30120
 8003698:	10800017 	ldw	r2,0(r2)
 800369c:	10000526 	beq	r2,zero,80036b4 <alt_get_errno+0x34>
 80036a0:	00820034 	movhi	r2,2048
 80036a4:	109d6a04 	addi	r2,r2,30120
 80036a8:	10800017 	ldw	r2,0(r2)
 80036ac:	103ee83a 	callr	r2
 80036b0:	00000206 	br	80036bc <alt_get_errno+0x3c>
 80036b4:	00820074 	movhi	r2,2049
 80036b8:	10a41804 	addi	r2,r2,-28576
}
 80036bc:	e037883a 	mov	sp,fp
 80036c0:	dfc00117 	ldw	ra,4(sp)
 80036c4:	df000017 	ldw	fp,0(sp)
 80036c8:	dec00204 	addi	sp,sp,8
 80036cc:	f800283a 	ret

080036d0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 80036d0:	defff904 	addi	sp,sp,-28
 80036d4:	dfc00615 	stw	ra,24(sp)
 80036d8:	df000515 	stw	fp,20(sp)
 80036dc:	df000504 	addi	fp,sp,20
 80036e0:	e13ffd15 	stw	r4,-12(fp)
 80036e4:	e17ffe15 	stw	r5,-8(fp)
 80036e8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80036ec:	e0bffd17 	ldw	r2,-12(fp)
 80036f0:	10000616 	blt	r2,zero,800370c <write+0x3c>
 80036f4:	e0bffd17 	ldw	r2,-12(fp)
 80036f8:	10c00324 	muli	r3,r2,12
 80036fc:	00820034 	movhi	r2,2048
 8003700:	1098de04 	addi	r2,r2,25464
 8003704:	1885883a 	add	r2,r3,r2
 8003708:	00000106 	br	8003710 <write+0x40>
 800370c:	0005883a 	mov	r2,zero
 8003710:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8003714:	e0bffb17 	ldw	r2,-20(fp)
 8003718:	10002126 	beq	r2,zero,80037a0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800371c:	e0bffb17 	ldw	r2,-20(fp)
 8003720:	10800217 	ldw	r2,8(r2)
 8003724:	108000cc 	andi	r2,r2,3
 8003728:	10001826 	beq	r2,zero,800378c <write+0xbc>
 800372c:	e0bffb17 	ldw	r2,-20(fp)
 8003730:	10800017 	ldw	r2,0(r2)
 8003734:	10800617 	ldw	r2,24(r2)
 8003738:	10001426 	beq	r2,zero,800378c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800373c:	e0bffb17 	ldw	r2,-20(fp)
 8003740:	10800017 	ldw	r2,0(r2)
 8003744:	10800617 	ldw	r2,24(r2)
 8003748:	e0ffff17 	ldw	r3,-4(fp)
 800374c:	e13ffb17 	ldw	r4,-20(fp)
 8003750:	e17ffe17 	ldw	r5,-8(fp)
 8003754:	180d883a 	mov	r6,r3
 8003758:	103ee83a 	callr	r2
 800375c:	e0bffc15 	stw	r2,-16(fp)
 8003760:	e0bffc17 	ldw	r2,-16(fp)
 8003764:	1000070e 	bge	r2,zero,8003784 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 8003768:	80036800 	call	8003680 <alt_get_errno>
 800376c:	1007883a 	mov	r3,r2
 8003770:	e0bffc17 	ldw	r2,-16(fp)
 8003774:	0085c83a 	sub	r2,zero,r2
 8003778:	18800015 	stw	r2,0(r3)
        return -1;
 800377c:	00bfffc4 	movi	r2,-1
 8003780:	00000c06 	br	80037b4 <write+0xe4>
      }
      return rval;
 8003784:	e0bffc17 	ldw	r2,-16(fp)
 8003788:	00000a06 	br	80037b4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800378c:	80036800 	call	8003680 <alt_get_errno>
 8003790:	1007883a 	mov	r3,r2
 8003794:	00800344 	movi	r2,13
 8003798:	18800015 	stw	r2,0(r3)
 800379c:	00000406 	br	80037b0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 80037a0:	80036800 	call	8003680 <alt_get_errno>
 80037a4:	1007883a 	mov	r3,r2
 80037a8:	00801444 	movi	r2,81
 80037ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
 80037b0:	00bfffc4 	movi	r2,-1
}
 80037b4:	e037883a 	mov	sp,fp
 80037b8:	dfc00117 	ldw	ra,4(sp)
 80037bc:	df000017 	ldw	fp,0(sp)
 80037c0:	dec00204 	addi	sp,sp,8
 80037c4:	f800283a 	ret

080037c8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 80037c8:	defffd04 	addi	sp,sp,-12
 80037cc:	dfc00215 	stw	ra,8(sp)
 80037d0:	df000115 	stw	fp,4(sp)
 80037d4:	df000104 	addi	fp,sp,4
 80037d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 80037dc:	e13fff17 	ldw	r4,-4(fp)
 80037e0:	01420034 	movhi	r5,2048
 80037e4:	295d6704 	addi	r5,r5,30108
 80037e8:	8004a700 	call	8004a70 <alt_dev_llist_insert>
}
 80037ec:	e037883a 	mov	sp,fp
 80037f0:	dfc00117 	ldw	ra,4(sp)
 80037f4:	df000017 	ldw	fp,0(sp)
 80037f8:	dec00204 	addi	sp,sp,8
 80037fc:	f800283a 	ret

08003800 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8003800:	defffd04 	addi	sp,sp,-12
 8003804:	dfc00215 	stw	ra,8(sp)
 8003808:	df000115 	stw	fp,4(sp)
 800380c:	df000104 	addi	fp,sp,4
 8003810:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 8003814:	80054a40 	call	80054a4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8003818:	00800044 	movi	r2,1
 800381c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8003820:	e037883a 	mov	sp,fp
 8003824:	dfc00117 	ldw	ra,4(sp)
 8003828:	df000017 	ldw	fp,0(sp)
 800382c:	dec00204 	addi	sp,sp,8
 8003830:	f800283a 	ret

08003834 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8003834:	defffe04 	addi	sp,sp,-8
 8003838:	dfc00115 	stw	ra,4(sp)
 800383c:	df000015 	stw	fp,0(sp)
 8003840:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8003844:	01082004 	movi	r4,8320
 8003848:	000b883a 	mov	r5,zero
 800384c:	01800104 	movi	r6,4
 8003850:	01c0fa04 	movi	r7,1000
 8003854:	80043640 	call	8004364 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8003858:	01020034 	movhi	r4,2048
 800385c:	21194804 	addi	r4,r4,25888
 8003860:	000b883a 	mov	r5,zero
 8003864:	01800144 	movi	r6,5
 8003868:	8003a080 	call	8003a08 <altera_avalon_jtag_uart_init>
 800386c:	01020034 	movhi	r4,2048
 8003870:	21193e04 	addi	r4,r4,25848
 8003874:	80037c80 	call	80037c8 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 8003878:	01020034 	movhi	r4,2048
 800387c:	211d5604 	addi	r4,r4,30040
 8003880:	800449c0 	call	800449c <alt_up_character_lcd_init>
 8003884:	01020034 	movhi	r4,2048
 8003888:	211d5604 	addi	r4,r4,30040
 800388c:	80037c80 	call	80037c8 <alt_dev_reg>
}
 8003890:	e037883a 	mov	sp,fp
 8003894:	dfc00117 	ldw	ra,4(sp)
 8003898:	df000017 	ldw	fp,0(sp)
 800389c:	dec00204 	addi	sp,sp,8
 80038a0:	f800283a 	ret

080038a4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 80038a4:	defffa04 	addi	sp,sp,-24
 80038a8:	dfc00515 	stw	ra,20(sp)
 80038ac:	df000415 	stw	fp,16(sp)
 80038b0:	df000404 	addi	fp,sp,16
 80038b4:	e13ffd15 	stw	r4,-12(fp)
 80038b8:	e17ffe15 	stw	r5,-8(fp)
 80038bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80038c0:	e0bffd17 	ldw	r2,-12(fp)
 80038c4:	10800017 	ldw	r2,0(r2)
 80038c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 80038cc:	e0bffc17 	ldw	r2,-16(fp)
 80038d0:	10c00a04 	addi	r3,r2,40
 80038d4:	e0bffd17 	ldw	r2,-12(fp)
 80038d8:	10800217 	ldw	r2,8(r2)
 80038dc:	1809883a 	mov	r4,r3
 80038e0:	e17ffe17 	ldw	r5,-8(fp)
 80038e4:	e1bfff17 	ldw	r6,-4(fp)
 80038e8:	100f883a 	mov	r7,r2
 80038ec:	8003ecc0 	call	8003ecc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 80038f0:	e037883a 	mov	sp,fp
 80038f4:	dfc00117 	ldw	ra,4(sp)
 80038f8:	df000017 	ldw	fp,0(sp)
 80038fc:	dec00204 	addi	sp,sp,8
 8003900:	f800283a 	ret

08003904 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8003904:	defffa04 	addi	sp,sp,-24
 8003908:	dfc00515 	stw	ra,20(sp)
 800390c:	df000415 	stw	fp,16(sp)
 8003910:	df000404 	addi	fp,sp,16
 8003914:	e13ffd15 	stw	r4,-12(fp)
 8003918:	e17ffe15 	stw	r5,-8(fp)
 800391c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003920:	e0bffd17 	ldw	r2,-12(fp)
 8003924:	10800017 	ldw	r2,0(r2)
 8003928:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800392c:	e0bffc17 	ldw	r2,-16(fp)
 8003930:	10c00a04 	addi	r3,r2,40
 8003934:	e0bffd17 	ldw	r2,-12(fp)
 8003938:	10800217 	ldw	r2,8(r2)
 800393c:	1809883a 	mov	r4,r3
 8003940:	e17ffe17 	ldw	r5,-8(fp)
 8003944:	e1bfff17 	ldw	r6,-4(fp)
 8003948:	100f883a 	mov	r7,r2
 800394c:	80040d80 	call	80040d8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8003950:	e037883a 	mov	sp,fp
 8003954:	dfc00117 	ldw	ra,4(sp)
 8003958:	df000017 	ldw	fp,0(sp)
 800395c:	dec00204 	addi	sp,sp,8
 8003960:	f800283a 	ret

08003964 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8003964:	defffc04 	addi	sp,sp,-16
 8003968:	dfc00315 	stw	ra,12(sp)
 800396c:	df000215 	stw	fp,8(sp)
 8003970:	df000204 	addi	fp,sp,8
 8003974:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8003978:	e0bfff17 	ldw	r2,-4(fp)
 800397c:	10800017 	ldw	r2,0(r2)
 8003980:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8003984:	e0bffe17 	ldw	r2,-8(fp)
 8003988:	10c00a04 	addi	r3,r2,40
 800398c:	e0bfff17 	ldw	r2,-4(fp)
 8003990:	10800217 	ldw	r2,8(r2)
 8003994:	1809883a 	mov	r4,r3
 8003998:	100b883a 	mov	r5,r2
 800399c:	8003d780 	call	8003d78 <altera_avalon_jtag_uart_close>
}
 80039a0:	e037883a 	mov	sp,fp
 80039a4:	dfc00117 	ldw	ra,4(sp)
 80039a8:	df000017 	ldw	fp,0(sp)
 80039ac:	dec00204 	addi	sp,sp,8
 80039b0:	f800283a 	ret

080039b4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 80039b4:	defffa04 	addi	sp,sp,-24
 80039b8:	dfc00515 	stw	ra,20(sp)
 80039bc:	df000415 	stw	fp,16(sp)
 80039c0:	df000404 	addi	fp,sp,16
 80039c4:	e13ffd15 	stw	r4,-12(fp)
 80039c8:	e17ffe15 	stw	r5,-8(fp)
 80039cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 80039d0:	e0bffd17 	ldw	r2,-12(fp)
 80039d4:	10800017 	ldw	r2,0(r2)
 80039d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 80039dc:	e0bffc17 	ldw	r2,-16(fp)
 80039e0:	10800a04 	addi	r2,r2,40
 80039e4:	1009883a 	mov	r4,r2
 80039e8:	e17ffe17 	ldw	r5,-8(fp)
 80039ec:	e1bfff17 	ldw	r6,-4(fp)
 80039f0:	8003de00 	call	8003de0 <altera_avalon_jtag_uart_ioctl>
}
 80039f4:	e037883a 	mov	sp,fp
 80039f8:	dfc00117 	ldw	ra,4(sp)
 80039fc:	df000017 	ldw	fp,0(sp)
 8003a00:	dec00204 	addi	sp,sp,8
 8003a04:	f800283a 	ret

08003a08 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8003a08:	defffa04 	addi	sp,sp,-24
 8003a0c:	dfc00515 	stw	ra,20(sp)
 8003a10:	df000415 	stw	fp,16(sp)
 8003a14:	df000404 	addi	fp,sp,16
 8003a18:	e13ffd15 	stw	r4,-12(fp)
 8003a1c:	e17ffe15 	stw	r5,-8(fp)
 8003a20:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8003a24:	e0bffd17 	ldw	r2,-12(fp)
 8003a28:	00c00044 	movi	r3,1
 8003a2c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8003a30:	e0bffd17 	ldw	r2,-12(fp)
 8003a34:	10800017 	ldw	r2,0(r2)
 8003a38:	10800104 	addi	r2,r2,4
 8003a3c:	1007883a 	mov	r3,r2
 8003a40:	e0bffd17 	ldw	r2,-12(fp)
 8003a44:	10800817 	ldw	r2,32(r2)
 8003a48:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8003a4c:	e0fffe17 	ldw	r3,-8(fp)
 8003a50:	e0bfff17 	ldw	r2,-4(fp)
 8003a54:	d8000015 	stw	zero,0(sp)
 8003a58:	1809883a 	mov	r4,r3
 8003a5c:	100b883a 	mov	r5,r2
 8003a60:	01820034 	movhi	r6,2048
 8003a64:	318eb304 	addi	r6,r6,15052
 8003a68:	e1fffd17 	ldw	r7,-12(fp)
 8003a6c:	8004c8c0 	call	8004c8c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8003a70:	e0bffd17 	ldw	r2,-12(fp)
 8003a74:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8003a78:	e0bffd17 	ldw	r2,-12(fp)
 8003a7c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8003a80:	00820074 	movhi	r2,2049
 8003a84:	10a41d04 	addi	r2,r2,-28556
 8003a88:	10800017 	ldw	r2,0(r2)
 8003a8c:	1809883a 	mov	r4,r3
 8003a90:	100b883a 	mov	r5,r2
 8003a94:	01820034 	movhi	r6,2048
 8003a98:	318f3404 	addi	r6,r6,15568
 8003a9c:	e1fffd17 	ldw	r7,-12(fp)
 8003aa0:	80048c40 	call	80048c4 <alt_alarm_start>
 8003aa4:	1000040e 	bge	r2,zero,8003ab8 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8003aa8:	e0fffd17 	ldw	r3,-12(fp)
 8003aac:	00a00034 	movhi	r2,32768
 8003ab0:	10bfffc4 	addi	r2,r2,-1
 8003ab4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8003ab8:	e037883a 	mov	sp,fp
 8003abc:	dfc00117 	ldw	ra,4(sp)
 8003ac0:	df000017 	ldw	fp,0(sp)
 8003ac4:	dec00204 	addi	sp,sp,8
 8003ac8:	f800283a 	ret

08003acc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8003acc:	defff804 	addi	sp,sp,-32
 8003ad0:	df000715 	stw	fp,28(sp)
 8003ad4:	df000704 	addi	fp,sp,28
 8003ad8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8003adc:	e0bfff17 	ldw	r2,-4(fp)
 8003ae0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 8003ae4:	e0bffb17 	ldw	r2,-20(fp)
 8003ae8:	10800017 	ldw	r2,0(r2)
 8003aec:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003af0:	e0bffc17 	ldw	r2,-16(fp)
 8003af4:	10800104 	addi	r2,r2,4
 8003af8:	10800037 	ldwio	r2,0(r2)
 8003afc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8003b00:	e0bffd17 	ldw	r2,-12(fp)
 8003b04:	1080c00c 	andi	r2,r2,768
 8003b08:	1000011e 	bne	r2,zero,8003b10 <altera_avalon_jtag_uart_irq+0x44>
      break;
 8003b0c:	00006c06 	br	8003cc0 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8003b10:	e0bffd17 	ldw	r2,-12(fp)
 8003b14:	1080400c 	andi	r2,r2,256
 8003b18:	10003426 	beq	r2,zero,8003bec <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8003b1c:	00800074 	movhi	r2,1
 8003b20:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003b24:	e0bffb17 	ldw	r2,-20(fp)
 8003b28:	10800a17 	ldw	r2,40(r2)
 8003b2c:	10800044 	addi	r2,r2,1
 8003b30:	1081ffcc 	andi	r2,r2,2047
 8003b34:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8003b38:	e0bffb17 	ldw	r2,-20(fp)
 8003b3c:	10c00b17 	ldw	r3,44(r2)
 8003b40:	e0bffe17 	ldw	r2,-8(fp)
 8003b44:	1880011e 	bne	r3,r2,8003b4c <altera_avalon_jtag_uart_irq+0x80>
          break;
 8003b48:	00001606 	br	8003ba4 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8003b4c:	e0bffc17 	ldw	r2,-16(fp)
 8003b50:	10800037 	ldwio	r2,0(r2)
 8003b54:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8003b58:	e0bff917 	ldw	r2,-28(fp)
 8003b5c:	10a0000c 	andi	r2,r2,32768
 8003b60:	1000011e 	bne	r2,zero,8003b68 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 8003b64:	00000f06 	br	8003ba4 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8003b68:	e0bffb17 	ldw	r2,-20(fp)
 8003b6c:	10800a17 	ldw	r2,40(r2)
 8003b70:	e0fff917 	ldw	r3,-28(fp)
 8003b74:	1809883a 	mov	r4,r3
 8003b78:	e0fffb17 	ldw	r3,-20(fp)
 8003b7c:	1885883a 	add	r2,r3,r2
 8003b80:	10800e04 	addi	r2,r2,56
 8003b84:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003b88:	e0bffb17 	ldw	r2,-20(fp)
 8003b8c:	10800a17 	ldw	r2,40(r2)
 8003b90:	10800044 	addi	r2,r2,1
 8003b94:	10c1ffcc 	andi	r3,r2,2047
 8003b98:	e0bffb17 	ldw	r2,-20(fp)
 8003b9c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8003ba0:	003fe006 	br	8003b24 <__alt_data_end+0xfc003b24>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8003ba4:	e0bff917 	ldw	r2,-28(fp)
 8003ba8:	10bfffec 	andhi	r2,r2,65535
 8003bac:	10000f26 	beq	r2,zero,8003bec <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8003bb0:	e0bffb17 	ldw	r2,-20(fp)
 8003bb4:	10c00817 	ldw	r3,32(r2)
 8003bb8:	00bfff84 	movi	r2,-2
 8003bbc:	1886703a 	and	r3,r3,r2
 8003bc0:	e0bffb17 	ldw	r2,-20(fp)
 8003bc4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8003bc8:	e0bffc17 	ldw	r2,-16(fp)
 8003bcc:	10800104 	addi	r2,r2,4
 8003bd0:	1007883a 	mov	r3,r2
 8003bd4:	e0bffb17 	ldw	r2,-20(fp)
 8003bd8:	10800817 	ldw	r2,32(r2)
 8003bdc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003be0:	e0bffc17 	ldw	r2,-16(fp)
 8003be4:	10800104 	addi	r2,r2,4
 8003be8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8003bec:	e0bffd17 	ldw	r2,-12(fp)
 8003bf0:	1080800c 	andi	r2,r2,512
 8003bf4:	10003126 	beq	r2,zero,8003cbc <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8003bf8:	e0bffd17 	ldw	r2,-12(fp)
 8003bfc:	1004d43a 	srli	r2,r2,16
 8003c00:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8003c04:	00001406 	br	8003c58 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8003c08:	e0bffc17 	ldw	r2,-16(fp)
 8003c0c:	e0fffb17 	ldw	r3,-20(fp)
 8003c10:	18c00d17 	ldw	r3,52(r3)
 8003c14:	e13ffb17 	ldw	r4,-20(fp)
 8003c18:	20c7883a 	add	r3,r4,r3
 8003c1c:	18c20e04 	addi	r3,r3,2104
 8003c20:	18c00003 	ldbu	r3,0(r3)
 8003c24:	18c03fcc 	andi	r3,r3,255
 8003c28:	18c0201c 	xori	r3,r3,128
 8003c2c:	18ffe004 	addi	r3,r3,-128
 8003c30:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003c34:	e0bffb17 	ldw	r2,-20(fp)
 8003c38:	10800d17 	ldw	r2,52(r2)
 8003c3c:	10800044 	addi	r2,r2,1
 8003c40:	10c1ffcc 	andi	r3,r2,2047
 8003c44:	e0bffb17 	ldw	r2,-20(fp)
 8003c48:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8003c4c:	e0bffa17 	ldw	r2,-24(fp)
 8003c50:	10bfffc4 	addi	r2,r2,-1
 8003c54:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8003c58:	e0bffa17 	ldw	r2,-24(fp)
 8003c5c:	10000526 	beq	r2,zero,8003c74 <altera_avalon_jtag_uart_irq+0x1a8>
 8003c60:	e0bffb17 	ldw	r2,-20(fp)
 8003c64:	10c00d17 	ldw	r3,52(r2)
 8003c68:	e0bffb17 	ldw	r2,-20(fp)
 8003c6c:	10800c17 	ldw	r2,48(r2)
 8003c70:	18bfe51e 	bne	r3,r2,8003c08 <__alt_data_end+0xfc003c08>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8003c74:	e0bffa17 	ldw	r2,-24(fp)
 8003c78:	10001026 	beq	r2,zero,8003cbc <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8003c7c:	e0bffb17 	ldw	r2,-20(fp)
 8003c80:	10c00817 	ldw	r3,32(r2)
 8003c84:	00bfff44 	movi	r2,-3
 8003c88:	1886703a 	and	r3,r3,r2
 8003c8c:	e0bffb17 	ldw	r2,-20(fp)
 8003c90:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8003c94:	e0bffb17 	ldw	r2,-20(fp)
 8003c98:	10800017 	ldw	r2,0(r2)
 8003c9c:	10800104 	addi	r2,r2,4
 8003ca0:	1007883a 	mov	r3,r2
 8003ca4:	e0bffb17 	ldw	r2,-20(fp)
 8003ca8:	10800817 	ldw	r2,32(r2)
 8003cac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8003cb0:	e0bffc17 	ldw	r2,-16(fp)
 8003cb4:	10800104 	addi	r2,r2,4
 8003cb8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8003cbc:	003f8c06 	br	8003af0 <__alt_data_end+0xfc003af0>
}
 8003cc0:	e037883a 	mov	sp,fp
 8003cc4:	df000017 	ldw	fp,0(sp)
 8003cc8:	dec00104 	addi	sp,sp,4
 8003ccc:	f800283a 	ret

08003cd0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8003cd0:	defff804 	addi	sp,sp,-32
 8003cd4:	df000715 	stw	fp,28(sp)
 8003cd8:	df000704 	addi	fp,sp,28
 8003cdc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8003ce0:	e0bffb17 	ldw	r2,-20(fp)
 8003ce4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8003ce8:	e0bff917 	ldw	r2,-28(fp)
 8003cec:	10800017 	ldw	r2,0(r2)
 8003cf0:	10800104 	addi	r2,r2,4
 8003cf4:	10800037 	ldwio	r2,0(r2)
 8003cf8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8003cfc:	e0bffa17 	ldw	r2,-24(fp)
 8003d00:	1081000c 	andi	r2,r2,1024
 8003d04:	10000b26 	beq	r2,zero,8003d34 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8003d08:	e0bff917 	ldw	r2,-28(fp)
 8003d0c:	10800017 	ldw	r2,0(r2)
 8003d10:	10800104 	addi	r2,r2,4
 8003d14:	1007883a 	mov	r3,r2
 8003d18:	e0bff917 	ldw	r2,-28(fp)
 8003d1c:	10800817 	ldw	r2,32(r2)
 8003d20:	10810014 	ori	r2,r2,1024
 8003d24:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8003d28:	e0bff917 	ldw	r2,-28(fp)
 8003d2c:	10000915 	stw	zero,36(r2)
 8003d30:	00000a06 	br	8003d5c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8003d34:	e0bff917 	ldw	r2,-28(fp)
 8003d38:	10c00917 	ldw	r3,36(r2)
 8003d3c:	00a00034 	movhi	r2,32768
 8003d40:	10bfff04 	addi	r2,r2,-4
 8003d44:	10c00536 	bltu	r2,r3,8003d5c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8003d48:	e0bff917 	ldw	r2,-28(fp)
 8003d4c:	10800917 	ldw	r2,36(r2)
 8003d50:	10c00044 	addi	r3,r2,1
 8003d54:	e0bff917 	ldw	r2,-28(fp)
 8003d58:	10c00915 	stw	r3,36(r2)
 8003d5c:	00820074 	movhi	r2,2049
 8003d60:	10a41d04 	addi	r2,r2,-28556
 8003d64:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8003d68:	e037883a 	mov	sp,fp
 8003d6c:	df000017 	ldw	fp,0(sp)
 8003d70:	dec00104 	addi	sp,sp,4
 8003d74:	f800283a 	ret

08003d78 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8003d78:	defffd04 	addi	sp,sp,-12
 8003d7c:	df000215 	stw	fp,8(sp)
 8003d80:	df000204 	addi	fp,sp,8
 8003d84:	e13ffe15 	stw	r4,-8(fp)
 8003d88:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8003d8c:	00000506 	br	8003da4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8003d90:	e0bfff17 	ldw	r2,-4(fp)
 8003d94:	1090000c 	andi	r2,r2,16384
 8003d98:	10000226 	beq	r2,zero,8003da4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8003d9c:	00bffd44 	movi	r2,-11
 8003da0:	00000b06 	br	8003dd0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8003da4:	e0bffe17 	ldw	r2,-8(fp)
 8003da8:	10c00d17 	ldw	r3,52(r2)
 8003dac:	e0bffe17 	ldw	r2,-8(fp)
 8003db0:	10800c17 	ldw	r2,48(r2)
 8003db4:	18800526 	beq	r3,r2,8003dcc <altera_avalon_jtag_uart_close+0x54>
 8003db8:	e0bffe17 	ldw	r2,-8(fp)
 8003dbc:	10c00917 	ldw	r3,36(r2)
 8003dc0:	e0bffe17 	ldw	r2,-8(fp)
 8003dc4:	10800117 	ldw	r2,4(r2)
 8003dc8:	18bff136 	bltu	r3,r2,8003d90 <__alt_data_end+0xfc003d90>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8003dcc:	0005883a 	mov	r2,zero
}
 8003dd0:	e037883a 	mov	sp,fp
 8003dd4:	df000017 	ldw	fp,0(sp)
 8003dd8:	dec00104 	addi	sp,sp,4
 8003ddc:	f800283a 	ret

08003de0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8003de0:	defffa04 	addi	sp,sp,-24
 8003de4:	df000515 	stw	fp,20(sp)
 8003de8:	df000504 	addi	fp,sp,20
 8003dec:	e13ffd15 	stw	r4,-12(fp)
 8003df0:	e17ffe15 	stw	r5,-8(fp)
 8003df4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 8003df8:	00bff9c4 	movi	r2,-25
 8003dfc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8003e00:	e0bffe17 	ldw	r2,-8(fp)
 8003e04:	10da8060 	cmpeqi	r3,r2,27137
 8003e08:	1800031e 	bne	r3,zero,8003e18 <altera_avalon_jtag_uart_ioctl+0x38>
 8003e0c:	109a80a0 	cmpeqi	r2,r2,27138
 8003e10:	1000191e 	bne	r2,zero,8003e78 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 8003e14:	00002806 	br	8003eb8 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 8003e18:	e0bffd17 	ldw	r2,-12(fp)
 8003e1c:	10c00117 	ldw	r3,4(r2)
 8003e20:	00a00034 	movhi	r2,32768
 8003e24:	10bfffc4 	addi	r2,r2,-1
 8003e28:	18801226 	beq	r3,r2,8003e74 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 8003e2c:	e0bfff17 	ldw	r2,-4(fp)
 8003e30:	10800017 	ldw	r2,0(r2)
 8003e34:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8003e38:	e0bffc17 	ldw	r2,-16(fp)
 8003e3c:	10800090 	cmplti	r2,r2,2
 8003e40:	1000061e 	bne	r2,zero,8003e5c <altera_avalon_jtag_uart_ioctl+0x7c>
 8003e44:	e0fffc17 	ldw	r3,-16(fp)
 8003e48:	00a00034 	movhi	r2,32768
 8003e4c:	10bfffc4 	addi	r2,r2,-1
 8003e50:	18800226 	beq	r3,r2,8003e5c <altera_avalon_jtag_uart_ioctl+0x7c>
 8003e54:	e0bffc17 	ldw	r2,-16(fp)
 8003e58:	00000206 	br	8003e64 <altera_avalon_jtag_uart_ioctl+0x84>
 8003e5c:	00a00034 	movhi	r2,32768
 8003e60:	10bfff84 	addi	r2,r2,-2
 8003e64:	e0fffd17 	ldw	r3,-12(fp)
 8003e68:	18800115 	stw	r2,4(r3)
      rc = 0;
 8003e6c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8003e70:	00001106 	br	8003eb8 <altera_avalon_jtag_uart_ioctl+0xd8>
 8003e74:	00001006 	br	8003eb8 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8003e78:	e0bffd17 	ldw	r2,-12(fp)
 8003e7c:	10c00117 	ldw	r3,4(r2)
 8003e80:	00a00034 	movhi	r2,32768
 8003e84:	10bfffc4 	addi	r2,r2,-1
 8003e88:	18800a26 	beq	r3,r2,8003eb4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8003e8c:	e0bffd17 	ldw	r2,-12(fp)
 8003e90:	10c00917 	ldw	r3,36(r2)
 8003e94:	e0bffd17 	ldw	r2,-12(fp)
 8003e98:	10800117 	ldw	r2,4(r2)
 8003e9c:	1885803a 	cmpltu	r2,r3,r2
 8003ea0:	10c03fcc 	andi	r3,r2,255
 8003ea4:	e0bfff17 	ldw	r2,-4(fp)
 8003ea8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8003eac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8003eb0:	00000006 	br	8003eb4 <altera_avalon_jtag_uart_ioctl+0xd4>
 8003eb4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8003eb8:	e0bffb17 	ldw	r2,-20(fp)
}
 8003ebc:	e037883a 	mov	sp,fp
 8003ec0:	df000017 	ldw	fp,0(sp)
 8003ec4:	dec00104 	addi	sp,sp,4
 8003ec8:	f800283a 	ret

08003ecc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8003ecc:	defff304 	addi	sp,sp,-52
 8003ed0:	dfc00c15 	stw	ra,48(sp)
 8003ed4:	df000b15 	stw	fp,44(sp)
 8003ed8:	df000b04 	addi	fp,sp,44
 8003edc:	e13ffc15 	stw	r4,-16(fp)
 8003ee0:	e17ffd15 	stw	r5,-12(fp)
 8003ee4:	e1bffe15 	stw	r6,-8(fp)
 8003ee8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8003eec:	e0bffd17 	ldw	r2,-12(fp)
 8003ef0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8003ef4:	00004906 	br	800401c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8003ef8:	e0bffc17 	ldw	r2,-16(fp)
 8003efc:	10800a17 	ldw	r2,40(r2)
 8003f00:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 8003f04:	e0bffc17 	ldw	r2,-16(fp)
 8003f08:	10800b17 	ldw	r2,44(r2)
 8003f0c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 8003f10:	e0fff717 	ldw	r3,-36(fp)
 8003f14:	e0bff817 	ldw	r2,-32(fp)
 8003f18:	18800536 	bltu	r3,r2,8003f30 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 8003f1c:	e0fff717 	ldw	r3,-36(fp)
 8003f20:	e0bff817 	ldw	r2,-32(fp)
 8003f24:	1885c83a 	sub	r2,r3,r2
 8003f28:	e0bff615 	stw	r2,-40(fp)
 8003f2c:	00000406 	br	8003f40 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8003f30:	00c20004 	movi	r3,2048
 8003f34:	e0bff817 	ldw	r2,-32(fp)
 8003f38:	1885c83a 	sub	r2,r3,r2
 8003f3c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8003f40:	e0bff617 	ldw	r2,-40(fp)
 8003f44:	1000011e 	bne	r2,zero,8003f4c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 8003f48:	00001d06 	br	8003fc0 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 8003f4c:	e0fffe17 	ldw	r3,-8(fp)
 8003f50:	e0bff617 	ldw	r2,-40(fp)
 8003f54:	1880022e 	bgeu	r3,r2,8003f60 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 8003f58:	e0bffe17 	ldw	r2,-8(fp)
 8003f5c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8003f60:	e0bff817 	ldw	r2,-32(fp)
 8003f64:	10800e04 	addi	r2,r2,56
 8003f68:	e0fffc17 	ldw	r3,-16(fp)
 8003f6c:	1885883a 	add	r2,r3,r2
 8003f70:	e13ff517 	ldw	r4,-44(fp)
 8003f74:	100b883a 	mov	r5,r2
 8003f78:	e1bff617 	ldw	r6,-40(fp)
 8003f7c:	80011b00 	call	80011b0 <memcpy>
      ptr   += n;
 8003f80:	e0fff517 	ldw	r3,-44(fp)
 8003f84:	e0bff617 	ldw	r2,-40(fp)
 8003f88:	1885883a 	add	r2,r3,r2
 8003f8c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8003f90:	e0fffe17 	ldw	r3,-8(fp)
 8003f94:	e0bff617 	ldw	r2,-40(fp)
 8003f98:	1885c83a 	sub	r2,r3,r2
 8003f9c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8003fa0:	e0fff817 	ldw	r3,-32(fp)
 8003fa4:	e0bff617 	ldw	r2,-40(fp)
 8003fa8:	1885883a 	add	r2,r3,r2
 8003fac:	10c1ffcc 	andi	r3,r2,2047
 8003fb0:	e0bffc17 	ldw	r2,-16(fp)
 8003fb4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8003fb8:	e0bffe17 	ldw	r2,-8(fp)
 8003fbc:	00bfce16 	blt	zero,r2,8003ef8 <__alt_data_end+0xfc003ef8>

    /* If we read any data then return it */
    if (ptr != buffer)
 8003fc0:	e0fff517 	ldw	r3,-44(fp)
 8003fc4:	e0bffd17 	ldw	r2,-12(fp)
 8003fc8:	18800126 	beq	r3,r2,8003fd0 <altera_avalon_jtag_uart_read+0x104>
      break;
 8003fcc:	00001506 	br	8004024 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8003fd0:	e0bfff17 	ldw	r2,-4(fp)
 8003fd4:	1090000c 	andi	r2,r2,16384
 8003fd8:	10000126 	beq	r2,zero,8003fe0 <altera_avalon_jtag_uart_read+0x114>
      break;
 8003fdc:	00001106 	br	8004024 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8003fe0:	0001883a 	nop
 8003fe4:	e0bffc17 	ldw	r2,-16(fp)
 8003fe8:	10c00a17 	ldw	r3,40(r2)
 8003fec:	e0bff717 	ldw	r2,-36(fp)
 8003ff0:	1880051e 	bne	r3,r2,8004008 <altera_avalon_jtag_uart_read+0x13c>
 8003ff4:	e0bffc17 	ldw	r2,-16(fp)
 8003ff8:	10c00917 	ldw	r3,36(r2)
 8003ffc:	e0bffc17 	ldw	r2,-16(fp)
 8004000:	10800117 	ldw	r2,4(r2)
 8004004:	18bff736 	bltu	r3,r2,8003fe4 <__alt_data_end+0xfc003fe4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8004008:	e0bffc17 	ldw	r2,-16(fp)
 800400c:	10c00a17 	ldw	r3,40(r2)
 8004010:	e0bff717 	ldw	r2,-36(fp)
 8004014:	1880011e 	bne	r3,r2,800401c <altera_avalon_jtag_uart_read+0x150>
      break;
 8004018:	00000206 	br	8004024 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800401c:	e0bffe17 	ldw	r2,-8(fp)
 8004020:	00bfb516 	blt	zero,r2,8003ef8 <__alt_data_end+0xfc003ef8>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8004024:	e0fff517 	ldw	r3,-44(fp)
 8004028:	e0bffd17 	ldw	r2,-12(fp)
 800402c:	18801826 	beq	r3,r2,8004090 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004030:	0005303a 	rdctl	r2,status
 8004034:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004038:	e0fffa17 	ldw	r3,-24(fp)
 800403c:	00bfff84 	movi	r2,-2
 8004040:	1884703a 	and	r2,r3,r2
 8004044:	1001703a 	wrctl	status,r2
  
  return context;
 8004048:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800404c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8004050:	e0bffc17 	ldw	r2,-16(fp)
 8004054:	10800817 	ldw	r2,32(r2)
 8004058:	10c00054 	ori	r3,r2,1
 800405c:	e0bffc17 	ldw	r2,-16(fp)
 8004060:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8004064:	e0bffc17 	ldw	r2,-16(fp)
 8004068:	10800017 	ldw	r2,0(r2)
 800406c:	10800104 	addi	r2,r2,4
 8004070:	1007883a 	mov	r3,r2
 8004074:	e0bffc17 	ldw	r2,-16(fp)
 8004078:	10800817 	ldw	r2,32(r2)
 800407c:	18800035 	stwio	r2,0(r3)
 8004080:	e0bff917 	ldw	r2,-28(fp)
 8004084:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004088:	e0bffb17 	ldw	r2,-20(fp)
 800408c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8004090:	e0fff517 	ldw	r3,-44(fp)
 8004094:	e0bffd17 	ldw	r2,-12(fp)
 8004098:	18800426 	beq	r3,r2,80040ac <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 800409c:	e0fff517 	ldw	r3,-44(fp)
 80040a0:	e0bffd17 	ldw	r2,-12(fp)
 80040a4:	1885c83a 	sub	r2,r3,r2
 80040a8:	00000606 	br	80040c4 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 80040ac:	e0bfff17 	ldw	r2,-4(fp)
 80040b0:	1090000c 	andi	r2,r2,16384
 80040b4:	10000226 	beq	r2,zero,80040c0 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 80040b8:	00bffd44 	movi	r2,-11
 80040bc:	00000106 	br	80040c4 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 80040c0:	00bffec4 	movi	r2,-5
}
 80040c4:	e037883a 	mov	sp,fp
 80040c8:	dfc00117 	ldw	ra,4(sp)
 80040cc:	df000017 	ldw	fp,0(sp)
 80040d0:	dec00204 	addi	sp,sp,8
 80040d4:	f800283a 	ret

080040d8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80040d8:	defff304 	addi	sp,sp,-52
 80040dc:	dfc00c15 	stw	ra,48(sp)
 80040e0:	df000b15 	stw	fp,44(sp)
 80040e4:	df000b04 	addi	fp,sp,44
 80040e8:	e13ffc15 	stw	r4,-16(fp)
 80040ec:	e17ffd15 	stw	r5,-12(fp)
 80040f0:	e1bffe15 	stw	r6,-8(fp)
 80040f4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 80040f8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 80040fc:	e0bffd17 	ldw	r2,-12(fp)
 8004100:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8004104:	00003806 	br	80041e8 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8004108:	e0bffc17 	ldw	r2,-16(fp)
 800410c:	10800c17 	ldw	r2,48(r2)
 8004110:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 8004114:	e0bffc17 	ldw	r2,-16(fp)
 8004118:	10800d17 	ldw	r2,52(r2)
 800411c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8004120:	e0fff817 	ldw	r3,-32(fp)
 8004124:	e0bff517 	ldw	r2,-44(fp)
 8004128:	1880062e 	bgeu	r3,r2,8004144 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800412c:	e0fff517 	ldw	r3,-44(fp)
 8004130:	e0bff817 	ldw	r2,-32(fp)
 8004134:	1885c83a 	sub	r2,r3,r2
 8004138:	10bfffc4 	addi	r2,r2,-1
 800413c:	e0bff615 	stw	r2,-40(fp)
 8004140:	00000b06 	br	8004170 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8004144:	e0bff517 	ldw	r2,-44(fp)
 8004148:	10000526 	beq	r2,zero,8004160 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800414c:	00c20004 	movi	r3,2048
 8004150:	e0bff817 	ldw	r2,-32(fp)
 8004154:	1885c83a 	sub	r2,r3,r2
 8004158:	e0bff615 	stw	r2,-40(fp)
 800415c:	00000406 	br	8004170 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8004160:	00c1ffc4 	movi	r3,2047
 8004164:	e0bff817 	ldw	r2,-32(fp)
 8004168:	1885c83a 	sub	r2,r3,r2
 800416c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8004170:	e0bff617 	ldw	r2,-40(fp)
 8004174:	1000011e 	bne	r2,zero,800417c <altera_avalon_jtag_uart_write+0xa4>
        break;
 8004178:	00001d06 	br	80041f0 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 800417c:	e0fffe17 	ldw	r3,-8(fp)
 8004180:	e0bff617 	ldw	r2,-40(fp)
 8004184:	1880022e 	bgeu	r3,r2,8004190 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 8004188:	e0bffe17 	ldw	r2,-8(fp)
 800418c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8004190:	e0bff817 	ldw	r2,-32(fp)
 8004194:	10820e04 	addi	r2,r2,2104
 8004198:	e0fffc17 	ldw	r3,-16(fp)
 800419c:	1885883a 	add	r2,r3,r2
 80041a0:	1009883a 	mov	r4,r2
 80041a4:	e17ffd17 	ldw	r5,-12(fp)
 80041a8:	e1bff617 	ldw	r6,-40(fp)
 80041ac:	80011b00 	call	80011b0 <memcpy>
      ptr   += n;
 80041b0:	e0fffd17 	ldw	r3,-12(fp)
 80041b4:	e0bff617 	ldw	r2,-40(fp)
 80041b8:	1885883a 	add	r2,r3,r2
 80041bc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 80041c0:	e0fffe17 	ldw	r3,-8(fp)
 80041c4:	e0bff617 	ldw	r2,-40(fp)
 80041c8:	1885c83a 	sub	r2,r3,r2
 80041cc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80041d0:	e0fff817 	ldw	r3,-32(fp)
 80041d4:	e0bff617 	ldw	r2,-40(fp)
 80041d8:	1885883a 	add	r2,r3,r2
 80041dc:	10c1ffcc 	andi	r3,r2,2047
 80041e0:	e0bffc17 	ldw	r2,-16(fp)
 80041e4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80041e8:	e0bffe17 	ldw	r2,-8(fp)
 80041ec:	00bfc616 	blt	zero,r2,8004108 <__alt_data_end+0xfc004108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80041f0:	0005303a 	rdctl	r2,status
 80041f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80041f8:	e0fffa17 	ldw	r3,-24(fp)
 80041fc:	00bfff84 	movi	r2,-2
 8004200:	1884703a 	and	r2,r3,r2
 8004204:	1001703a 	wrctl	status,r2
  
  return context;
 8004208:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800420c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8004210:	e0bffc17 	ldw	r2,-16(fp)
 8004214:	10800817 	ldw	r2,32(r2)
 8004218:	10c00094 	ori	r3,r2,2
 800421c:	e0bffc17 	ldw	r2,-16(fp)
 8004220:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8004224:	e0bffc17 	ldw	r2,-16(fp)
 8004228:	10800017 	ldw	r2,0(r2)
 800422c:	10800104 	addi	r2,r2,4
 8004230:	1007883a 	mov	r3,r2
 8004234:	e0bffc17 	ldw	r2,-16(fp)
 8004238:	10800817 	ldw	r2,32(r2)
 800423c:	18800035 	stwio	r2,0(r3)
 8004240:	e0bff917 	ldw	r2,-28(fp)
 8004244:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004248:	e0bffb17 	ldw	r2,-20(fp)
 800424c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8004250:	e0bffe17 	ldw	r2,-8(fp)
 8004254:	0080120e 	bge	zero,r2,80042a0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 8004258:	e0bfff17 	ldw	r2,-4(fp)
 800425c:	1090000c 	andi	r2,r2,16384
 8004260:	10000126 	beq	r2,zero,8004268 <altera_avalon_jtag_uart_write+0x190>
        break;
 8004264:	00001006 	br	80042a8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8004268:	0001883a 	nop
 800426c:	e0bffc17 	ldw	r2,-16(fp)
 8004270:	10c00d17 	ldw	r3,52(r2)
 8004274:	e0bff517 	ldw	r2,-44(fp)
 8004278:	1880051e 	bne	r3,r2,8004290 <altera_avalon_jtag_uart_write+0x1b8>
 800427c:	e0bffc17 	ldw	r2,-16(fp)
 8004280:	10c00917 	ldw	r3,36(r2)
 8004284:	e0bffc17 	ldw	r2,-16(fp)
 8004288:	10800117 	ldw	r2,4(r2)
 800428c:	18bff736 	bltu	r3,r2,800426c <__alt_data_end+0xfc00426c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8004290:	e0bffc17 	ldw	r2,-16(fp)
 8004294:	10800917 	ldw	r2,36(r2)
 8004298:	10000126 	beq	r2,zero,80042a0 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 800429c:	00000206 	br	80042a8 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 80042a0:	e0bffe17 	ldw	r2,-8(fp)
 80042a4:	00bf9716 	blt	zero,r2,8004104 <__alt_data_end+0xfc004104>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 80042a8:	e0fffd17 	ldw	r3,-12(fp)
 80042ac:	e0bff717 	ldw	r2,-36(fp)
 80042b0:	18800426 	beq	r3,r2,80042c4 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 80042b4:	e0fffd17 	ldw	r3,-12(fp)
 80042b8:	e0bff717 	ldw	r2,-36(fp)
 80042bc:	1885c83a 	sub	r2,r3,r2
 80042c0:	00000606 	br	80042dc <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 80042c4:	e0bfff17 	ldw	r2,-4(fp)
 80042c8:	1090000c 	andi	r2,r2,16384
 80042cc:	10000226 	beq	r2,zero,80042d8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 80042d0:	00bffd44 	movi	r2,-11
 80042d4:	00000106 	br	80042dc <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 80042d8:	00bffec4 	movi	r2,-5
}
 80042dc:	e037883a 	mov	sp,fp
 80042e0:	dfc00117 	ldw	ra,4(sp)
 80042e4:	df000017 	ldw	fp,0(sp)
 80042e8:	dec00204 	addi	sp,sp,8
 80042ec:	f800283a 	ret

080042f0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 80042f0:	defffa04 	addi	sp,sp,-24
 80042f4:	dfc00515 	stw	ra,20(sp)
 80042f8:	df000415 	stw	fp,16(sp)
 80042fc:	df000404 	addi	fp,sp,16
 8004300:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8004304:	0007883a 	mov	r3,zero
 8004308:	e0bfff17 	ldw	r2,-4(fp)
 800430c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8004310:	e0bfff17 	ldw	r2,-4(fp)
 8004314:	10800104 	addi	r2,r2,4
 8004318:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800431c:	0005303a 	rdctl	r2,status
 8004320:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004324:	e0fffd17 	ldw	r3,-12(fp)
 8004328:	00bfff84 	movi	r2,-2
 800432c:	1884703a 	and	r2,r3,r2
 8004330:	1001703a 	wrctl	status,r2
  
  return context;
 8004334:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8004338:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800433c:	80053a00 	call	80053a0 <alt_tick>
 8004340:	e0bffc17 	ldw	r2,-16(fp)
 8004344:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004348:	e0bffe17 	ldw	r2,-8(fp)
 800434c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8004350:	e037883a 	mov	sp,fp
 8004354:	dfc00117 	ldw	ra,4(sp)
 8004358:	df000017 	ldw	fp,0(sp)
 800435c:	dec00204 	addi	sp,sp,8
 8004360:	f800283a 	ret

08004364 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8004364:	defff804 	addi	sp,sp,-32
 8004368:	dfc00715 	stw	ra,28(sp)
 800436c:	df000615 	stw	fp,24(sp)
 8004370:	df000604 	addi	fp,sp,24
 8004374:	e13ffc15 	stw	r4,-16(fp)
 8004378:	e17ffd15 	stw	r5,-12(fp)
 800437c:	e1bffe15 	stw	r6,-8(fp)
 8004380:	e1ffff15 	stw	r7,-4(fp)
 8004384:	e0bfff17 	ldw	r2,-4(fp)
 8004388:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 800438c:	00820074 	movhi	r2,2049
 8004390:	10a41d04 	addi	r2,r2,-28556
 8004394:	10800017 	ldw	r2,0(r2)
 8004398:	1000041e 	bne	r2,zero,80043ac <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 800439c:	00820074 	movhi	r2,2049
 80043a0:	10a41d04 	addi	r2,r2,-28556
 80043a4:	e0fffb17 	ldw	r3,-20(fp)
 80043a8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 80043ac:	e0bffc17 	ldw	r2,-16(fp)
 80043b0:	10800104 	addi	r2,r2,4
 80043b4:	00c001c4 	movi	r3,7
 80043b8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 80043bc:	d8000015 	stw	zero,0(sp)
 80043c0:	e13ffd17 	ldw	r4,-12(fp)
 80043c4:	e17ffe17 	ldw	r5,-8(fp)
 80043c8:	01820034 	movhi	r6,2048
 80043cc:	3190bc04 	addi	r6,r6,17136
 80043d0:	e1fffc17 	ldw	r7,-16(fp)
 80043d4:	8004c8c0 	call	8004c8c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 80043d8:	e037883a 	mov	sp,fp
 80043dc:	dfc00117 	ldw	ra,4(sp)
 80043e0:	df000017 	ldw	fp,0(sp)
 80043e4:	dec00204 	addi	sp,sp,8
 80043e8:	f800283a 	ret

080043ec <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 80043ec:	defffc04 	addi	sp,sp,-16
 80043f0:	df000315 	stw	fp,12(sp)
 80043f4:	df000304 	addi	fp,sp,12
 80043f8:	e13ffe15 	stw	r4,-8(fp)
 80043fc:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 8004400:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 8004404:	e0bfff17 	ldw	r2,-4(fp)
 8004408:	1000061e 	bne	r2,zero,8004424 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 800440c:	e0bffe17 	ldw	r2,-8(fp)
 8004410:	1007883a 	mov	r3,r2
 8004414:	e0bffd03 	ldbu	r2,-12(fp)
 8004418:	1884b03a 	or	r2,r3,r2
 800441c:	e0bffd05 	stb	r2,-12(fp)
 8004420:	00000806 	br	8004444 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 8004424:	e0bffe17 	ldw	r2,-8(fp)
 8004428:	1007883a 	mov	r3,r2
 800442c:	e0bffd03 	ldbu	r2,-12(fp)
 8004430:	1884b03a 	or	r2,r3,r2
 8004434:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 8004438:	e0bffd03 	ldbu	r2,-12(fp)
 800443c:	10801014 	ori	r2,r2,64
 8004440:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 8004444:	e0fffd03 	ldbu	r3,-12(fp)
 8004448:	00bfe004 	movi	r2,-128
 800444c:	1884b03a 	or	r2,r3,r2
}
 8004450:	e037883a 	mov	sp,fp
 8004454:	df000017 	ldw	fp,0(sp)
 8004458:	dec00104 	addi	sp,sp,4
 800445c:	f800283a 	ret

08004460 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 8004460:	defffd04 	addi	sp,sp,-12
 8004464:	df000215 	stw	fp,8(sp)
 8004468:	df000204 	addi	fp,sp,8
 800446c:	e13ffe15 	stw	r4,-8(fp)
 8004470:	2805883a 	mov	r2,r5
 8004474:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 8004478:	e0bffe17 	ldw	r2,-8(fp)
 800447c:	10800a17 	ldw	r2,40(r2)
 8004480:	1007883a 	mov	r3,r2
 8004484:	e0bfff03 	ldbu	r2,-4(fp)
 8004488:	18800025 	stbio	r2,0(r3)
}
 800448c:	e037883a 	mov	sp,fp
 8004490:	df000017 	ldw	fp,0(sp)
 8004494:	dec00104 	addi	sp,sp,4
 8004498:	f800283a 	ret

0800449c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 800449c:	defffe04 	addi	sp,sp,-8
 80044a0:	df000115 	stw	fp,4(sp)
 80044a4:	df000104 	addi	fp,sp,4
 80044a8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 80044ac:	e0bfff17 	ldw	r2,-4(fp)
 80044b0:	10800a17 	ldw	r2,40(r2)
 80044b4:	1007883a 	mov	r3,r2
 80044b8:	00800044 	movi	r2,1
 80044bc:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 80044c0:	e037883a 	mov	sp,fp
 80044c4:	df000017 	ldw	fp,0(sp)
 80044c8:	dec00104 	addi	sp,sp,4
 80044cc:	f800283a 	ret

080044d0 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 80044d0:	defffc04 	addi	sp,sp,-16
 80044d4:	dfc00315 	stw	ra,12(sp)
 80044d8:	df000215 	stw	fp,8(sp)
 80044dc:	df000204 	addi	fp,sp,8
 80044e0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 80044e4:	e13fff17 	ldw	r4,-4(fp)
 80044e8:	01420034 	movhi	r5,2048
 80044ec:	295d6704 	addi	r5,r5,30108
 80044f0:	8004bcc0 	call	8004bcc <alt_find_dev>
 80044f4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 80044f8:	e0bffe17 	ldw	r2,-8(fp)
}
 80044fc:	e037883a 	mov	sp,fp
 8004500:	dfc00117 	ldw	ra,4(sp)
 8004504:	df000017 	ldw	fp,0(sp)
 8004508:	dec00204 	addi	sp,sp,8
 800450c:	f800283a 	ret

08004510 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 8004510:	defffb04 	addi	sp,sp,-20
 8004514:	df000415 	stw	fp,16(sp)
 8004518:	df000404 	addi	fp,sp,16
 800451c:	e13ffd15 	stw	r4,-12(fp)
 8004520:	e17ffe15 	stw	r5,-8(fp)
 8004524:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 8004528:	e03ffc15 	stw	zero,-16(fp)
 800452c:	00000f06 	br	800456c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 8004530:	e0bffd17 	ldw	r2,-12(fp)
 8004534:	10800a17 	ldw	r2,40(r2)
 8004538:	10800044 	addi	r2,r2,1
 800453c:	1009883a 	mov	r4,r2
 8004540:	e0fffe17 	ldw	r3,-8(fp)
 8004544:	e0bffc17 	ldw	r2,-16(fp)
 8004548:	1885883a 	add	r2,r3,r2
 800454c:	10800003 	ldbu	r2,0(r2)
 8004550:	10803fcc 	andi	r2,r2,255
 8004554:	1080201c 	xori	r2,r2,128
 8004558:	10bfe004 	addi	r2,r2,-128
 800455c:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 8004560:	e0bffc17 	ldw	r2,-16(fp)
 8004564:	10800044 	addi	r2,r2,1
 8004568:	e0bffc15 	stw	r2,-16(fp)
 800456c:	e0fffc17 	ldw	r3,-16(fp)
 8004570:	e0bfff17 	ldw	r2,-4(fp)
 8004574:	18bfee36 	bltu	r3,r2,8004530 <__alt_data_end+0xfc004530>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 8004578:	e037883a 	mov	sp,fp
 800457c:	df000017 	ldw	fp,0(sp)
 8004580:	dec00104 	addi	sp,sp,4
 8004584:	f800283a 	ret

08004588 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 8004588:	defffd04 	addi	sp,sp,-12
 800458c:	df000215 	stw	fp,8(sp)
 8004590:	df000204 	addi	fp,sp,8
 8004594:	e13ffe15 	stw	r4,-8(fp)
 8004598:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 800459c:	00000d06 	br	80045d4 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 80045a0:	e0bffe17 	ldw	r2,-8(fp)
 80045a4:	10800a17 	ldw	r2,40(r2)
 80045a8:	10800044 	addi	r2,r2,1
 80045ac:	1007883a 	mov	r3,r2
 80045b0:	e0bfff17 	ldw	r2,-4(fp)
 80045b4:	10800003 	ldbu	r2,0(r2)
 80045b8:	10803fcc 	andi	r2,r2,255
 80045bc:	1080201c 	xori	r2,r2,128
 80045c0:	10bfe004 	addi	r2,r2,-128
 80045c4:	18800025 	stbio	r2,0(r3)
		++ptr;
 80045c8:	e0bfff17 	ldw	r2,-4(fp)
 80045cc:	10800044 	addi	r2,r2,1
 80045d0:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 80045d4:	e0bfff17 	ldw	r2,-4(fp)
 80045d8:	10800003 	ldbu	r2,0(r2)
 80045dc:	10803fcc 	andi	r2,r2,255
 80045e0:	1080201c 	xori	r2,r2,128
 80045e4:	10bfe004 	addi	r2,r2,-128
 80045e8:	103fed1e 	bne	r2,zero,80045a0 <__alt_data_end+0xfc0045a0>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 80045ec:	e037883a 	mov	sp,fp
 80045f0:	df000017 	ldw	fp,0(sp)
 80045f4:	dec00104 	addi	sp,sp,4
 80045f8:	f800283a 	ret

080045fc <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 80045fc:	defffb04 	addi	sp,sp,-20
 8004600:	dfc00415 	stw	ra,16(sp)
 8004604:	df000315 	stw	fp,12(sp)
 8004608:	df000304 	addi	fp,sp,12
 800460c:	e13ffd15 	stw	r4,-12(fp)
 8004610:	e17ffe15 	stw	r5,-8(fp)
 8004614:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 8004618:	e0bffd17 	ldw	r2,-12(fp)
 800461c:	10c00017 	ldw	r3,0(r2)
 8004620:	e0bfff17 	ldw	r2,-4(fp)
 8004624:	1809883a 	mov	r4,r3
 8004628:	e17ffe17 	ldw	r5,-8(fp)
 800462c:	100d883a 	mov	r6,r2
 8004630:	80045100 	call	8004510 <alt_up_character_lcd_write>
	return 0;
 8004634:	0005883a 	mov	r2,zero
}
 8004638:	e037883a 	mov	sp,fp
 800463c:	dfc00117 	ldw	ra,4(sp)
 8004640:	df000017 	ldw	fp,0(sp)
 8004644:	dec00204 	addi	sp,sp,8
 8004648:	f800283a 	ret

0800464c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 800464c:	defffa04 	addi	sp,sp,-24
 8004650:	dfc00515 	stw	ra,20(sp)
 8004654:	df000415 	stw	fp,16(sp)
 8004658:	df000404 	addi	fp,sp,16
 800465c:	e13ffd15 	stw	r4,-12(fp)
 8004660:	e17ffe15 	stw	r5,-8(fp)
 8004664:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 8004668:	e0bffe17 	ldw	r2,-8(fp)
 800466c:	10800a28 	cmpgeui	r2,r2,40
 8004670:	1000031e 	bne	r2,zero,8004680 <alt_up_character_lcd_set_cursor_pos+0x34>
 8004674:	e0bfff17 	ldw	r2,-4(fp)
 8004678:	108000b0 	cmpltui	r2,r2,2
 800467c:	1000021e 	bne	r2,zero,8004688 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 8004680:	00bfffc4 	movi	r2,-1
 8004684:	00000906 	br	80046ac <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 8004688:	e13ffe17 	ldw	r4,-8(fp)
 800468c:	e17fff17 	ldw	r5,-4(fp)
 8004690:	80043ec0 	call	80043ec <get_DDRAM_addr>
 8004694:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 8004698:	e0bffc03 	ldbu	r2,-16(fp)
 800469c:	e13ffd17 	ldw	r4,-12(fp)
 80046a0:	100b883a 	mov	r5,r2
 80046a4:	80044600 	call	8004460 <alt_up_character_lcd_send_cmd>
	return 0;
 80046a8:	0005883a 	mov	r2,zero
}
 80046ac:	e037883a 	mov	sp,fp
 80046b0:	dfc00117 	ldw	ra,4(sp)
 80046b4:	df000017 	ldw	fp,0(sp)
 80046b8:	dec00204 	addi	sp,sp,8
 80046bc:	f800283a 	ret

080046c0 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 80046c0:	defffb04 	addi	sp,sp,-20
 80046c4:	dfc00415 	stw	ra,16(sp)
 80046c8:	df000315 	stw	fp,12(sp)
 80046cc:	df000304 	addi	fp,sp,12
 80046d0:	e13ffe15 	stw	r4,-8(fp)
 80046d4:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 80046d8:	e0bfff17 	ldw	r2,-4(fp)
 80046dc:	1000011e 	bne	r2,zero,80046e4 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
 80046e0:	00001406 	br	8004734 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 80046e4:	e0bfff17 	ldw	r2,-4(fp)
 80046e8:	0080020e 	bge	zero,r2,80046f4 <alt_up_character_lcd_shift_cursor+0x34>
 80046ec:	00800504 	movi	r2,20
 80046f0:	00000106 	br	80046f8 <alt_up_character_lcd_shift_cursor+0x38>
 80046f4:	00800404 	movi	r2,16
 80046f8:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 80046fc:	e0bfff17 	ldw	r2,-4(fp)
 8004700:	1000010e 	bge	r2,zero,8004708 <alt_up_character_lcd_shift_cursor+0x48>
 8004704:	0085c83a 	sub	r2,zero,r2
 8004708:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800470c:	00000406 	br	8004720 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 8004710:	e0bffd43 	ldbu	r2,-11(fp)
 8004714:	e13ffe17 	ldw	r4,-8(fp)
 8004718:	100b883a 	mov	r5,r2
 800471c:	80044600 	call	8004460 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8004720:	e0bffd03 	ldbu	r2,-12(fp)
 8004724:	10ffffc4 	addi	r3,r2,-1
 8004728:	e0fffd05 	stb	r3,-12(fp)
 800472c:	10803fcc 	andi	r2,r2,255
 8004730:	103ff71e 	bne	r2,zero,8004710 <__alt_data_end+0xfc004710>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 8004734:	e037883a 	mov	sp,fp
 8004738:	dfc00117 	ldw	ra,4(sp)
 800473c:	df000017 	ldw	fp,0(sp)
 8004740:	dec00204 	addi	sp,sp,8
 8004744:	f800283a 	ret

08004748 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 8004748:	defffb04 	addi	sp,sp,-20
 800474c:	dfc00415 	stw	ra,16(sp)
 8004750:	df000315 	stw	fp,12(sp)
 8004754:	df000304 	addi	fp,sp,12
 8004758:	e13ffe15 	stw	r4,-8(fp)
 800475c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 8004760:	e0bfff17 	ldw	r2,-4(fp)
 8004764:	1000011e 	bne	r2,zero,800476c <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
 8004768:	00001406 	br	80047bc <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 800476c:	e0bfff17 	ldw	r2,-4(fp)
 8004770:	0080020e 	bge	zero,r2,800477c <alt_up_character_lcd_shift_display+0x34>
 8004774:	00800704 	movi	r2,28
 8004778:	00000106 	br	8004780 <alt_up_character_lcd_shift_display+0x38>
 800477c:	00800604 	movi	r2,24
 8004780:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 8004784:	e0bfff17 	ldw	r2,-4(fp)
 8004788:	1000010e 	bge	r2,zero,8004790 <alt_up_character_lcd_shift_display+0x48>
 800478c:	0085c83a 	sub	r2,zero,r2
 8004790:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 8004794:	00000406 	br	80047a8 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 8004798:	e0bffd43 	ldbu	r2,-11(fp)
 800479c:	e13ffe17 	ldw	r4,-8(fp)
 80047a0:	100b883a 	mov	r5,r2
 80047a4:	80044600 	call	8004460 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 80047a8:	e0bffd03 	ldbu	r2,-12(fp)
 80047ac:	10ffffc4 	addi	r3,r2,-1
 80047b0:	e0fffd05 	stb	r3,-12(fp)
 80047b4:	10803fcc 	andi	r2,r2,255
 80047b8:	103ff71e 	bne	r2,zero,8004798 <__alt_data_end+0xfc004798>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 80047bc:	e037883a 	mov	sp,fp
 80047c0:	dfc00117 	ldw	ra,4(sp)
 80047c4:	df000017 	ldw	fp,0(sp)
 80047c8:	dec00204 	addi	sp,sp,8
 80047cc:	f800283a 	ret

080047d0 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 80047d0:	defffa04 	addi	sp,sp,-24
 80047d4:	dfc00515 	stw	ra,20(sp)
 80047d8:	df000415 	stw	fp,16(sp)
 80047dc:	df000404 	addi	fp,sp,16
 80047e0:	e13ffd15 	stw	r4,-12(fp)
 80047e4:	e17ffe15 	stw	r5,-8(fp)
 80047e8:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 80047ec:	e0bffe17 	ldw	r2,-8(fp)
 80047f0:	10800a28 	cmpgeui	r2,r2,40
 80047f4:	1000031e 	bne	r2,zero,8004804 <alt_up_character_lcd_erase_pos+0x34>
 80047f8:	e0bfff17 	ldw	r2,-4(fp)
 80047fc:	108000b0 	cmpltui	r2,r2,2
 8004800:	1000021e 	bne	r2,zero,800480c <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 8004804:	00bfffc4 	movi	r2,-1
 8004808:	00000f06 	br	8004848 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 800480c:	e13ffe17 	ldw	r4,-8(fp)
 8004810:	e17fff17 	ldw	r5,-4(fp)
 8004814:	80043ec0 	call	80043ec <get_DDRAM_addr>
 8004818:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 800481c:	e0bffc03 	ldbu	r2,-16(fp)
 8004820:	e13ffd17 	ldw	r4,-12(fp)
 8004824:	100b883a 	mov	r5,r2
 8004828:	80044600 	call	8004460 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 800482c:	e0bffd17 	ldw	r2,-12(fp)
 8004830:	10800a17 	ldw	r2,40(r2)
 8004834:	10800044 	addi	r2,r2,1
 8004838:	1007883a 	mov	r3,r2
 800483c:	00800084 	movi	r2,2
 8004840:	18800025 	stbio	r2,0(r3)
	return 0;
 8004844:	0005883a 	mov	r2,zero
}
 8004848:	e037883a 	mov	sp,fp
 800484c:	dfc00117 	ldw	ra,4(sp)
 8004850:	df000017 	ldw	fp,0(sp)
 8004854:	dec00204 	addi	sp,sp,8
 8004858:	f800283a 	ret

0800485c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 800485c:	defffd04 	addi	sp,sp,-12
 8004860:	dfc00215 	stw	ra,8(sp)
 8004864:	df000115 	stw	fp,4(sp)
 8004868:	df000104 	addi	fp,sp,4
 800486c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 8004870:	e13fff17 	ldw	r4,-4(fp)
 8004874:	01400304 	movi	r5,12
 8004878:	80044600 	call	8004460 <alt_up_character_lcd_send_cmd>
}
 800487c:	e037883a 	mov	sp,fp
 8004880:	dfc00117 	ldw	ra,4(sp)
 8004884:	df000017 	ldw	fp,0(sp)
 8004888:	dec00204 	addi	sp,sp,8
 800488c:	f800283a 	ret

08004890 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 8004890:	defffd04 	addi	sp,sp,-12
 8004894:	dfc00215 	stw	ra,8(sp)
 8004898:	df000115 	stw	fp,4(sp)
 800489c:	df000104 	addi	fp,sp,4
 80048a0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 80048a4:	e13fff17 	ldw	r4,-4(fp)
 80048a8:	014003c4 	movi	r5,15
 80048ac:	80044600 	call	8004460 <alt_up_character_lcd_send_cmd>
}
 80048b0:	e037883a 	mov	sp,fp
 80048b4:	dfc00117 	ldw	ra,4(sp)
 80048b8:	df000017 	ldw	fp,0(sp)
 80048bc:	dec00204 	addi	sp,sp,8
 80048c0:	f800283a 	ret

080048c4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 80048c4:	defff504 	addi	sp,sp,-44
 80048c8:	df000a15 	stw	fp,40(sp)
 80048cc:	df000a04 	addi	fp,sp,40
 80048d0:	e13ffc15 	stw	r4,-16(fp)
 80048d4:	e17ffd15 	stw	r5,-12(fp)
 80048d8:	e1bffe15 	stw	r6,-8(fp)
 80048dc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80048e0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80048e4:	00820074 	movhi	r2,2049
 80048e8:	10a41d04 	addi	r2,r2,-28556
 80048ec:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 80048f0:	10003f26 	beq	r2,zero,80049f0 <alt_alarm_start+0x12c>
  {
    if (alarm)
 80048f4:	e0bffc17 	ldw	r2,-16(fp)
 80048f8:	10003b26 	beq	r2,zero,80049e8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 80048fc:	e0bffc17 	ldw	r2,-16(fp)
 8004900:	e0fffe17 	ldw	r3,-8(fp)
 8004904:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8004908:	e0bffc17 	ldw	r2,-16(fp)
 800490c:	e0ffff17 	ldw	r3,-4(fp)
 8004910:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004914:	0005303a 	rdctl	r2,status
 8004918:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800491c:	e0fff817 	ldw	r3,-32(fp)
 8004920:	00bfff84 	movi	r2,-2
 8004924:	1884703a 	and	r2,r3,r2
 8004928:	1001703a 	wrctl	status,r2
  
  return context;
 800492c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 8004930:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8004934:	00820074 	movhi	r2,2049
 8004938:	10a41e04 	addi	r2,r2,-28552
 800493c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 8004940:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8004944:	e0fffd17 	ldw	r3,-12(fp)
 8004948:	e0bff617 	ldw	r2,-40(fp)
 800494c:	1885883a 	add	r2,r3,r2
 8004950:	10c00044 	addi	r3,r2,1
 8004954:	e0bffc17 	ldw	r2,-16(fp)
 8004958:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800495c:	e0bffc17 	ldw	r2,-16(fp)
 8004960:	10c00217 	ldw	r3,8(r2)
 8004964:	e0bff617 	ldw	r2,-40(fp)
 8004968:	1880042e 	bgeu	r3,r2,800497c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 800496c:	e0bffc17 	ldw	r2,-16(fp)
 8004970:	00c00044 	movi	r3,1
 8004974:	10c00405 	stb	r3,16(r2)
 8004978:	00000206 	br	8004984 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 800497c:	e0bffc17 	ldw	r2,-16(fp)
 8004980:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8004984:	e0fffc17 	ldw	r3,-16(fp)
 8004988:	00820034 	movhi	r2,2048
 800498c:	109d6d04 	addi	r2,r2,30132
 8004990:	e0bff915 	stw	r2,-28(fp)
 8004994:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8004998:	e0bffa17 	ldw	r2,-24(fp)
 800499c:	e0fff917 	ldw	r3,-28(fp)
 80049a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80049a4:	e0bff917 	ldw	r2,-28(fp)
 80049a8:	10c00017 	ldw	r3,0(r2)
 80049ac:	e0bffa17 	ldw	r2,-24(fp)
 80049b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80049b4:	e0bff917 	ldw	r2,-28(fp)
 80049b8:	10800017 	ldw	r2,0(r2)
 80049bc:	e0fffa17 	ldw	r3,-24(fp)
 80049c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80049c4:	e0bff917 	ldw	r2,-28(fp)
 80049c8:	e0fffa17 	ldw	r3,-24(fp)
 80049cc:	10c00015 	stw	r3,0(r2)
 80049d0:	e0bff717 	ldw	r2,-36(fp)
 80049d4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80049d8:	e0bffb17 	ldw	r2,-20(fp)
 80049dc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 80049e0:	0005883a 	mov	r2,zero
 80049e4:	00000306 	br	80049f4 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 80049e8:	00bffa84 	movi	r2,-22
 80049ec:	00000106 	br	80049f4 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 80049f0:	00bfde84 	movi	r2,-134
  }
}
 80049f4:	e037883a 	mov	sp,fp
 80049f8:	df000017 	ldw	fp,0(sp)
 80049fc:	dec00104 	addi	sp,sp,4
 8004a00:	f800283a 	ret

08004a04 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8004a04:	deffff04 	addi	sp,sp,-4
 8004a08:	df000015 	stw	fp,0(sp)
 8004a0c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8004a10:	e037883a 	mov	sp,fp
 8004a14:	df000017 	ldw	fp,0(sp)
 8004a18:	dec00104 	addi	sp,sp,4
 8004a1c:	f800283a 	ret

08004a20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004a20:	defffe04 	addi	sp,sp,-8
 8004a24:	dfc00115 	stw	ra,4(sp)
 8004a28:	df000015 	stw	fp,0(sp)
 8004a2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004a30:	00820034 	movhi	r2,2048
 8004a34:	109d6a04 	addi	r2,r2,30120
 8004a38:	10800017 	ldw	r2,0(r2)
 8004a3c:	10000526 	beq	r2,zero,8004a54 <alt_get_errno+0x34>
 8004a40:	00820034 	movhi	r2,2048
 8004a44:	109d6a04 	addi	r2,r2,30120
 8004a48:	10800017 	ldw	r2,0(r2)
 8004a4c:	103ee83a 	callr	r2
 8004a50:	00000206 	br	8004a5c <alt_get_errno+0x3c>
 8004a54:	00820074 	movhi	r2,2049
 8004a58:	10a41804 	addi	r2,r2,-28576
}
 8004a5c:	e037883a 	mov	sp,fp
 8004a60:	dfc00117 	ldw	ra,4(sp)
 8004a64:	df000017 	ldw	fp,0(sp)
 8004a68:	dec00204 	addi	sp,sp,8
 8004a6c:	f800283a 	ret

08004a70 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8004a70:	defffa04 	addi	sp,sp,-24
 8004a74:	dfc00515 	stw	ra,20(sp)
 8004a78:	df000415 	stw	fp,16(sp)
 8004a7c:	df000404 	addi	fp,sp,16
 8004a80:	e13ffe15 	stw	r4,-8(fp)
 8004a84:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8004a88:	e0bffe17 	ldw	r2,-8(fp)
 8004a8c:	10000326 	beq	r2,zero,8004a9c <alt_dev_llist_insert+0x2c>
 8004a90:	e0bffe17 	ldw	r2,-8(fp)
 8004a94:	10800217 	ldw	r2,8(r2)
 8004a98:	1000061e 	bne	r2,zero,8004ab4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8004a9c:	8004a200 	call	8004a20 <alt_get_errno>
 8004aa0:	1007883a 	mov	r3,r2
 8004aa4:	00800584 	movi	r2,22
 8004aa8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8004aac:	00bffa84 	movi	r2,-22
 8004ab0:	00001306 	br	8004b00 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8004ab4:	e0bffe17 	ldw	r2,-8(fp)
 8004ab8:	e0ffff17 	ldw	r3,-4(fp)
 8004abc:	e0fffc15 	stw	r3,-16(fp)
 8004ac0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8004ac4:	e0bffd17 	ldw	r2,-12(fp)
 8004ac8:	e0fffc17 	ldw	r3,-16(fp)
 8004acc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8004ad0:	e0bffc17 	ldw	r2,-16(fp)
 8004ad4:	10c00017 	ldw	r3,0(r2)
 8004ad8:	e0bffd17 	ldw	r2,-12(fp)
 8004adc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8004ae0:	e0bffc17 	ldw	r2,-16(fp)
 8004ae4:	10800017 	ldw	r2,0(r2)
 8004ae8:	e0fffd17 	ldw	r3,-12(fp)
 8004aec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8004af0:	e0bffc17 	ldw	r2,-16(fp)
 8004af4:	e0fffd17 	ldw	r3,-12(fp)
 8004af8:	10c00015 	stw	r3,0(r2)

  return 0;  
 8004afc:	0005883a 	mov	r2,zero
}
 8004b00:	e037883a 	mov	sp,fp
 8004b04:	dfc00117 	ldw	ra,4(sp)
 8004b08:	df000017 	ldw	fp,0(sp)
 8004b0c:	dec00204 	addi	sp,sp,8
 8004b10:	f800283a 	ret

08004b14 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8004b14:	defffd04 	addi	sp,sp,-12
 8004b18:	dfc00215 	stw	ra,8(sp)
 8004b1c:	df000115 	stw	fp,4(sp)
 8004b20:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8004b24:	00820034 	movhi	r2,2048
 8004b28:	1096ae04 	addi	r2,r2,23224
 8004b2c:	e0bfff15 	stw	r2,-4(fp)
 8004b30:	00000606 	br	8004b4c <_do_ctors+0x38>
        (*ctor) (); 
 8004b34:	e0bfff17 	ldw	r2,-4(fp)
 8004b38:	10800017 	ldw	r2,0(r2)
 8004b3c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8004b40:	e0bfff17 	ldw	r2,-4(fp)
 8004b44:	10bfff04 	addi	r2,r2,-4
 8004b48:	e0bfff15 	stw	r2,-4(fp)
 8004b4c:	e0ffff17 	ldw	r3,-4(fp)
 8004b50:	00820034 	movhi	r2,2048
 8004b54:	1096af04 	addi	r2,r2,23228
 8004b58:	18bff62e 	bgeu	r3,r2,8004b34 <__alt_data_end+0xfc004b34>
        (*ctor) (); 
}
 8004b5c:	e037883a 	mov	sp,fp
 8004b60:	dfc00117 	ldw	ra,4(sp)
 8004b64:	df000017 	ldw	fp,0(sp)
 8004b68:	dec00204 	addi	sp,sp,8
 8004b6c:	f800283a 	ret

08004b70 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8004b70:	defffd04 	addi	sp,sp,-12
 8004b74:	dfc00215 	stw	ra,8(sp)
 8004b78:	df000115 	stw	fp,4(sp)
 8004b7c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8004b80:	00820034 	movhi	r2,2048
 8004b84:	1096ae04 	addi	r2,r2,23224
 8004b88:	e0bfff15 	stw	r2,-4(fp)
 8004b8c:	00000606 	br	8004ba8 <_do_dtors+0x38>
        (*dtor) (); 
 8004b90:	e0bfff17 	ldw	r2,-4(fp)
 8004b94:	10800017 	ldw	r2,0(r2)
 8004b98:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8004b9c:	e0bfff17 	ldw	r2,-4(fp)
 8004ba0:	10bfff04 	addi	r2,r2,-4
 8004ba4:	e0bfff15 	stw	r2,-4(fp)
 8004ba8:	e0ffff17 	ldw	r3,-4(fp)
 8004bac:	00820034 	movhi	r2,2048
 8004bb0:	1096af04 	addi	r2,r2,23228
 8004bb4:	18bff62e 	bgeu	r3,r2,8004b90 <__alt_data_end+0xfc004b90>
        (*dtor) (); 
}
 8004bb8:	e037883a 	mov	sp,fp
 8004bbc:	dfc00117 	ldw	ra,4(sp)
 8004bc0:	df000017 	ldw	fp,0(sp)
 8004bc4:	dec00204 	addi	sp,sp,8
 8004bc8:	f800283a 	ret

08004bcc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8004bcc:	defffa04 	addi	sp,sp,-24
 8004bd0:	dfc00515 	stw	ra,20(sp)
 8004bd4:	df000415 	stw	fp,16(sp)
 8004bd8:	df000404 	addi	fp,sp,16
 8004bdc:	e13ffe15 	stw	r4,-8(fp)
 8004be0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8004be4:	e0bfff17 	ldw	r2,-4(fp)
 8004be8:	10800017 	ldw	r2,0(r2)
 8004bec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8004bf0:	e13ffe17 	ldw	r4,-8(fp)
 8004bf4:	80003e40 	call	80003e4 <strlen>
 8004bf8:	10800044 	addi	r2,r2,1
 8004bfc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8004c00:	00000d06 	br	8004c38 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8004c04:	e0bffc17 	ldw	r2,-16(fp)
 8004c08:	10c00217 	ldw	r3,8(r2)
 8004c0c:	e0bffd17 	ldw	r2,-12(fp)
 8004c10:	1809883a 	mov	r4,r3
 8004c14:	e17ffe17 	ldw	r5,-8(fp)
 8004c18:	100d883a 	mov	r6,r2
 8004c1c:	80057640 	call	8005764 <memcmp>
 8004c20:	1000021e 	bne	r2,zero,8004c2c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8004c24:	e0bffc17 	ldw	r2,-16(fp)
 8004c28:	00000706 	br	8004c48 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8004c2c:	e0bffc17 	ldw	r2,-16(fp)
 8004c30:	10800017 	ldw	r2,0(r2)
 8004c34:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8004c38:	e0fffc17 	ldw	r3,-16(fp)
 8004c3c:	e0bfff17 	ldw	r2,-4(fp)
 8004c40:	18bff01e 	bne	r3,r2,8004c04 <__alt_data_end+0xfc004c04>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8004c44:	0005883a 	mov	r2,zero
}
 8004c48:	e037883a 	mov	sp,fp
 8004c4c:	dfc00117 	ldw	ra,4(sp)
 8004c50:	df000017 	ldw	fp,0(sp)
 8004c54:	dec00204 	addi	sp,sp,8
 8004c58:	f800283a 	ret

08004c5c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8004c5c:	defffe04 	addi	sp,sp,-8
 8004c60:	dfc00115 	stw	ra,4(sp)
 8004c64:	df000015 	stw	fp,0(sp)
 8004c68:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8004c6c:	0009883a 	mov	r4,zero
 8004c70:	01440004 	movi	r5,4096
 8004c74:	800568c0 	call	800568c <alt_icache_flush>
#endif
}
 8004c78:	e037883a 	mov	sp,fp
 8004c7c:	dfc00117 	ldw	ra,4(sp)
 8004c80:	df000017 	ldw	fp,0(sp)
 8004c84:	dec00204 	addi	sp,sp,8
 8004c88:	f800283a 	ret

08004c8c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8004c8c:	defff904 	addi	sp,sp,-28
 8004c90:	dfc00615 	stw	ra,24(sp)
 8004c94:	df000515 	stw	fp,20(sp)
 8004c98:	df000504 	addi	fp,sp,20
 8004c9c:	e13ffc15 	stw	r4,-16(fp)
 8004ca0:	e17ffd15 	stw	r5,-12(fp)
 8004ca4:	e1bffe15 	stw	r6,-8(fp)
 8004ca8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8004cac:	e0800217 	ldw	r2,8(fp)
 8004cb0:	d8800015 	stw	r2,0(sp)
 8004cb4:	e13ffc17 	ldw	r4,-16(fp)
 8004cb8:	e17ffd17 	ldw	r5,-12(fp)
 8004cbc:	e1bffe17 	ldw	r6,-8(fp)
 8004cc0:	e1ffff17 	ldw	r7,-4(fp)
 8004cc4:	8004e6c0 	call	8004e6c <alt_iic_isr_register>
}  
 8004cc8:	e037883a 	mov	sp,fp
 8004ccc:	dfc00117 	ldw	ra,4(sp)
 8004cd0:	df000017 	ldw	fp,0(sp)
 8004cd4:	dec00204 	addi	sp,sp,8
 8004cd8:	f800283a 	ret

08004cdc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8004cdc:	defff904 	addi	sp,sp,-28
 8004ce0:	df000615 	stw	fp,24(sp)
 8004ce4:	df000604 	addi	fp,sp,24
 8004ce8:	e13ffe15 	stw	r4,-8(fp)
 8004cec:	e17fff15 	stw	r5,-4(fp)
 8004cf0:	e0bfff17 	ldw	r2,-4(fp)
 8004cf4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004cf8:	0005303a 	rdctl	r2,status
 8004cfc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004d00:	e0fffb17 	ldw	r3,-20(fp)
 8004d04:	00bfff84 	movi	r2,-2
 8004d08:	1884703a 	and	r2,r3,r2
 8004d0c:	1001703a 	wrctl	status,r2
  
  return context;
 8004d10:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8004d14:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8004d18:	e0bffa17 	ldw	r2,-24(fp)
 8004d1c:	00c00044 	movi	r3,1
 8004d20:	1884983a 	sll	r2,r3,r2
 8004d24:	1007883a 	mov	r3,r2
 8004d28:	00820074 	movhi	r2,2049
 8004d2c:	10a41c04 	addi	r2,r2,-28560
 8004d30:	10800017 	ldw	r2,0(r2)
 8004d34:	1886b03a 	or	r3,r3,r2
 8004d38:	00820074 	movhi	r2,2049
 8004d3c:	10a41c04 	addi	r2,r2,-28560
 8004d40:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8004d44:	00820074 	movhi	r2,2049
 8004d48:	10a41c04 	addi	r2,r2,-28560
 8004d4c:	10800017 	ldw	r2,0(r2)
 8004d50:	100170fa 	wrctl	ienable,r2
 8004d54:	e0bffc17 	ldw	r2,-16(fp)
 8004d58:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004d5c:	e0bffd17 	ldw	r2,-12(fp)
 8004d60:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8004d64:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8004d68:	0001883a 	nop
}
 8004d6c:	e037883a 	mov	sp,fp
 8004d70:	df000017 	ldw	fp,0(sp)
 8004d74:	dec00104 	addi	sp,sp,4
 8004d78:	f800283a 	ret

08004d7c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8004d7c:	defff904 	addi	sp,sp,-28
 8004d80:	df000615 	stw	fp,24(sp)
 8004d84:	df000604 	addi	fp,sp,24
 8004d88:	e13ffe15 	stw	r4,-8(fp)
 8004d8c:	e17fff15 	stw	r5,-4(fp)
 8004d90:	e0bfff17 	ldw	r2,-4(fp)
 8004d94:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004d98:	0005303a 	rdctl	r2,status
 8004d9c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004da0:	e0fffb17 	ldw	r3,-20(fp)
 8004da4:	00bfff84 	movi	r2,-2
 8004da8:	1884703a 	and	r2,r3,r2
 8004dac:	1001703a 	wrctl	status,r2
  
  return context;
 8004db0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8004db4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8004db8:	e0bffa17 	ldw	r2,-24(fp)
 8004dbc:	00c00044 	movi	r3,1
 8004dc0:	1884983a 	sll	r2,r3,r2
 8004dc4:	0084303a 	nor	r2,zero,r2
 8004dc8:	1007883a 	mov	r3,r2
 8004dcc:	00820074 	movhi	r2,2049
 8004dd0:	10a41c04 	addi	r2,r2,-28560
 8004dd4:	10800017 	ldw	r2,0(r2)
 8004dd8:	1886703a 	and	r3,r3,r2
 8004ddc:	00820074 	movhi	r2,2049
 8004de0:	10a41c04 	addi	r2,r2,-28560
 8004de4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8004de8:	00820074 	movhi	r2,2049
 8004dec:	10a41c04 	addi	r2,r2,-28560
 8004df0:	10800017 	ldw	r2,0(r2)
 8004df4:	100170fa 	wrctl	ienable,r2
 8004df8:	e0bffc17 	ldw	r2,-16(fp)
 8004dfc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004e00:	e0bffd17 	ldw	r2,-12(fp)
 8004e04:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8004e08:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8004e0c:	0001883a 	nop
}
 8004e10:	e037883a 	mov	sp,fp
 8004e14:	df000017 	ldw	fp,0(sp)
 8004e18:	dec00104 	addi	sp,sp,4
 8004e1c:	f800283a 	ret

08004e20 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8004e20:	defffc04 	addi	sp,sp,-16
 8004e24:	df000315 	stw	fp,12(sp)
 8004e28:	df000304 	addi	fp,sp,12
 8004e2c:	e13ffe15 	stw	r4,-8(fp)
 8004e30:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8004e34:	000530fa 	rdctl	r2,ienable
 8004e38:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8004e3c:	e0bfff17 	ldw	r2,-4(fp)
 8004e40:	00c00044 	movi	r3,1
 8004e44:	1884983a 	sll	r2,r3,r2
 8004e48:	1007883a 	mov	r3,r2
 8004e4c:	e0bffd17 	ldw	r2,-12(fp)
 8004e50:	1884703a 	and	r2,r3,r2
 8004e54:	1004c03a 	cmpne	r2,r2,zero
 8004e58:	10803fcc 	andi	r2,r2,255
}
 8004e5c:	e037883a 	mov	sp,fp
 8004e60:	df000017 	ldw	fp,0(sp)
 8004e64:	dec00104 	addi	sp,sp,4
 8004e68:	f800283a 	ret

08004e6c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8004e6c:	defff504 	addi	sp,sp,-44
 8004e70:	dfc00a15 	stw	ra,40(sp)
 8004e74:	df000915 	stw	fp,36(sp)
 8004e78:	df000904 	addi	fp,sp,36
 8004e7c:	e13ffc15 	stw	r4,-16(fp)
 8004e80:	e17ffd15 	stw	r5,-12(fp)
 8004e84:	e1bffe15 	stw	r6,-8(fp)
 8004e88:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8004e8c:	00bffa84 	movi	r2,-22
 8004e90:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8004e94:	e0bffd17 	ldw	r2,-12(fp)
 8004e98:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8004e9c:	e0bff817 	ldw	r2,-32(fp)
 8004ea0:	10800808 	cmpgei	r2,r2,32
 8004ea4:	1000271e 	bne	r2,zero,8004f44 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8004ea8:	0005303a 	rdctl	r2,status
 8004eac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8004eb0:	e0fffa17 	ldw	r3,-24(fp)
 8004eb4:	00bfff84 	movi	r2,-2
 8004eb8:	1884703a 	and	r2,r3,r2
 8004ebc:	1001703a 	wrctl	status,r2
  
  return context;
 8004ec0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8004ec4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 8004ec8:	00820074 	movhi	r2,2049
 8004ecc:	10a42904 	addi	r2,r2,-28508
 8004ed0:	e0fff817 	ldw	r3,-32(fp)
 8004ed4:	180690fa 	slli	r3,r3,3
 8004ed8:	10c5883a 	add	r2,r2,r3
 8004edc:	e0fffe17 	ldw	r3,-8(fp)
 8004ee0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8004ee4:	00820074 	movhi	r2,2049
 8004ee8:	10a42904 	addi	r2,r2,-28508
 8004eec:	e0fff817 	ldw	r3,-32(fp)
 8004ef0:	180690fa 	slli	r3,r3,3
 8004ef4:	10c5883a 	add	r2,r2,r3
 8004ef8:	10800104 	addi	r2,r2,4
 8004efc:	e0ffff17 	ldw	r3,-4(fp)
 8004f00:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8004f04:	e0bffe17 	ldw	r2,-8(fp)
 8004f08:	10000526 	beq	r2,zero,8004f20 <alt_iic_isr_register+0xb4>
 8004f0c:	e0bff817 	ldw	r2,-32(fp)
 8004f10:	e13ffc17 	ldw	r4,-16(fp)
 8004f14:	100b883a 	mov	r5,r2
 8004f18:	8004cdc0 	call	8004cdc <alt_ic_irq_enable>
 8004f1c:	00000406 	br	8004f30 <alt_iic_isr_register+0xc4>
 8004f20:	e0bff817 	ldw	r2,-32(fp)
 8004f24:	e13ffc17 	ldw	r4,-16(fp)
 8004f28:	100b883a 	mov	r5,r2
 8004f2c:	8004d7c0 	call	8004d7c <alt_ic_irq_disable>
 8004f30:	e0bff715 	stw	r2,-36(fp)
 8004f34:	e0bff917 	ldw	r2,-28(fp)
 8004f38:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8004f3c:	e0bffb17 	ldw	r2,-20(fp)
 8004f40:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8004f44:	e0bff717 	ldw	r2,-36(fp)
}
 8004f48:	e037883a 	mov	sp,fp
 8004f4c:	dfc00117 	ldw	ra,4(sp)
 8004f50:	df000017 	ldw	fp,0(sp)
 8004f54:	dec00204 	addi	sp,sp,8
 8004f58:	f800283a 	ret

08004f5c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8004f5c:	defff904 	addi	sp,sp,-28
 8004f60:	dfc00615 	stw	ra,24(sp)
 8004f64:	df000515 	stw	fp,20(sp)
 8004f68:	df000504 	addi	fp,sp,20
 8004f6c:	e13ffc15 	stw	r4,-16(fp)
 8004f70:	e17ffd15 	stw	r5,-12(fp)
 8004f74:	e1bffe15 	stw	r6,-8(fp)
 8004f78:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8004f7c:	e13ffd17 	ldw	r4,-12(fp)
 8004f80:	e17ffe17 	ldw	r5,-8(fp)
 8004f84:	e1bfff17 	ldw	r6,-4(fp)
 8004f88:	80051b00 	call	80051b0 <open>
 8004f8c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8004f90:	e0bffb17 	ldw	r2,-20(fp)
 8004f94:	10001c16 	blt	r2,zero,8005008 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 8004f98:	00820034 	movhi	r2,2048
 8004f9c:	1098de04 	addi	r2,r2,25464
 8004fa0:	e0fffb17 	ldw	r3,-20(fp)
 8004fa4:	18c00324 	muli	r3,r3,12
 8004fa8:	10c5883a 	add	r2,r2,r3
 8004fac:	10c00017 	ldw	r3,0(r2)
 8004fb0:	e0bffc17 	ldw	r2,-16(fp)
 8004fb4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8004fb8:	00820034 	movhi	r2,2048
 8004fbc:	1098de04 	addi	r2,r2,25464
 8004fc0:	e0fffb17 	ldw	r3,-20(fp)
 8004fc4:	18c00324 	muli	r3,r3,12
 8004fc8:	10c5883a 	add	r2,r2,r3
 8004fcc:	10800104 	addi	r2,r2,4
 8004fd0:	10c00017 	ldw	r3,0(r2)
 8004fd4:	e0bffc17 	ldw	r2,-16(fp)
 8004fd8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8004fdc:	00820034 	movhi	r2,2048
 8004fe0:	1098de04 	addi	r2,r2,25464
 8004fe4:	e0fffb17 	ldw	r3,-20(fp)
 8004fe8:	18c00324 	muli	r3,r3,12
 8004fec:	10c5883a 	add	r2,r2,r3
 8004ff0:	10800204 	addi	r2,r2,8
 8004ff4:	10c00017 	ldw	r3,0(r2)
 8004ff8:	e0bffc17 	ldw	r2,-16(fp)
 8004ffc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8005000:	e13ffb17 	ldw	r4,-20(fp)
 8005004:	80035700 	call	8003570 <alt_release_fd>
  }
} 
 8005008:	e037883a 	mov	sp,fp
 800500c:	dfc00117 	ldw	ra,4(sp)
 8005010:	df000017 	ldw	fp,0(sp)
 8005014:	dec00204 	addi	sp,sp,8
 8005018:	f800283a 	ret

0800501c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800501c:	defffb04 	addi	sp,sp,-20
 8005020:	dfc00415 	stw	ra,16(sp)
 8005024:	df000315 	stw	fp,12(sp)
 8005028:	df000304 	addi	fp,sp,12
 800502c:	e13ffd15 	stw	r4,-12(fp)
 8005030:	e17ffe15 	stw	r5,-8(fp)
 8005034:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8005038:	01020034 	movhi	r4,2048
 800503c:	2118e104 	addi	r4,r4,25476
 8005040:	e17ffd17 	ldw	r5,-12(fp)
 8005044:	01800044 	movi	r6,1
 8005048:	01c07fc4 	movi	r7,511
 800504c:	8004f5c0 	call	8004f5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8005050:	01020034 	movhi	r4,2048
 8005054:	2118de04 	addi	r4,r4,25464
 8005058:	e17ffe17 	ldw	r5,-8(fp)
 800505c:	000d883a 	mov	r6,zero
 8005060:	01c07fc4 	movi	r7,511
 8005064:	8004f5c0 	call	8004f5c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8005068:	01020034 	movhi	r4,2048
 800506c:	2118e404 	addi	r4,r4,25488
 8005070:	e17fff17 	ldw	r5,-4(fp)
 8005074:	01800044 	movi	r6,1
 8005078:	01c07fc4 	movi	r7,511
 800507c:	8004f5c0 	call	8004f5c <alt_open_fd>
}  
 8005080:	e037883a 	mov	sp,fp
 8005084:	dfc00117 	ldw	ra,4(sp)
 8005088:	df000017 	ldw	fp,0(sp)
 800508c:	dec00204 	addi	sp,sp,8
 8005090:	f800283a 	ret

08005094 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8005094:	defffe04 	addi	sp,sp,-8
 8005098:	dfc00115 	stw	ra,4(sp)
 800509c:	df000015 	stw	fp,0(sp)
 80050a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80050a4:	00820034 	movhi	r2,2048
 80050a8:	109d6a04 	addi	r2,r2,30120
 80050ac:	10800017 	ldw	r2,0(r2)
 80050b0:	10000526 	beq	r2,zero,80050c8 <alt_get_errno+0x34>
 80050b4:	00820034 	movhi	r2,2048
 80050b8:	109d6a04 	addi	r2,r2,30120
 80050bc:	10800017 	ldw	r2,0(r2)
 80050c0:	103ee83a 	callr	r2
 80050c4:	00000206 	br	80050d0 <alt_get_errno+0x3c>
 80050c8:	00820074 	movhi	r2,2049
 80050cc:	10a41804 	addi	r2,r2,-28576
}
 80050d0:	e037883a 	mov	sp,fp
 80050d4:	dfc00117 	ldw	ra,4(sp)
 80050d8:	df000017 	ldw	fp,0(sp)
 80050dc:	dec00204 	addi	sp,sp,8
 80050e0:	f800283a 	ret

080050e4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 80050e4:	defffd04 	addi	sp,sp,-12
 80050e8:	df000215 	stw	fp,8(sp)
 80050ec:	df000204 	addi	fp,sp,8
 80050f0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80050f4:	e0bfff17 	ldw	r2,-4(fp)
 80050f8:	10800217 	ldw	r2,8(r2)
 80050fc:	10d00034 	orhi	r3,r2,16384
 8005100:	e0bfff17 	ldw	r2,-4(fp)
 8005104:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8005108:	e03ffe15 	stw	zero,-8(fp)
 800510c:	00001d06 	br	8005184 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8005110:	00820034 	movhi	r2,2048
 8005114:	1098de04 	addi	r2,r2,25464
 8005118:	e0fffe17 	ldw	r3,-8(fp)
 800511c:	18c00324 	muli	r3,r3,12
 8005120:	10c5883a 	add	r2,r2,r3
 8005124:	10c00017 	ldw	r3,0(r2)
 8005128:	e0bfff17 	ldw	r2,-4(fp)
 800512c:	10800017 	ldw	r2,0(r2)
 8005130:	1880111e 	bne	r3,r2,8005178 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8005134:	00820034 	movhi	r2,2048
 8005138:	1098de04 	addi	r2,r2,25464
 800513c:	e0fffe17 	ldw	r3,-8(fp)
 8005140:	18c00324 	muli	r3,r3,12
 8005144:	10c5883a 	add	r2,r2,r3
 8005148:	10800204 	addi	r2,r2,8
 800514c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8005150:	1000090e 	bge	r2,zero,8005178 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8005154:	e0bffe17 	ldw	r2,-8(fp)
 8005158:	10c00324 	muli	r3,r2,12
 800515c:	00820034 	movhi	r2,2048
 8005160:	1098de04 	addi	r2,r2,25464
 8005164:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8005168:	e0bfff17 	ldw	r2,-4(fp)
 800516c:	18800226 	beq	r3,r2,8005178 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8005170:	00bffcc4 	movi	r2,-13
 8005174:	00000a06 	br	80051a0 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8005178:	e0bffe17 	ldw	r2,-8(fp)
 800517c:	10800044 	addi	r2,r2,1
 8005180:	e0bffe15 	stw	r2,-8(fp)
 8005184:	00820034 	movhi	r2,2048
 8005188:	109d6904 	addi	r2,r2,30116
 800518c:	10800017 	ldw	r2,0(r2)
 8005190:	1007883a 	mov	r3,r2
 8005194:	e0bffe17 	ldw	r2,-8(fp)
 8005198:	18bfdd2e 	bgeu	r3,r2,8005110 <__alt_data_end+0xfc005110>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800519c:	0005883a 	mov	r2,zero
}
 80051a0:	e037883a 	mov	sp,fp
 80051a4:	df000017 	ldw	fp,0(sp)
 80051a8:	dec00104 	addi	sp,sp,4
 80051ac:	f800283a 	ret

080051b0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80051b0:	defff604 	addi	sp,sp,-40
 80051b4:	dfc00915 	stw	ra,36(sp)
 80051b8:	df000815 	stw	fp,32(sp)
 80051bc:	df000804 	addi	fp,sp,32
 80051c0:	e13ffd15 	stw	r4,-12(fp)
 80051c4:	e17ffe15 	stw	r5,-8(fp)
 80051c8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 80051cc:	00bfffc4 	movi	r2,-1
 80051d0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 80051d4:	00bffb44 	movi	r2,-19
 80051d8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 80051dc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80051e0:	e13ffd17 	ldw	r4,-12(fp)
 80051e4:	01420034 	movhi	r5,2048
 80051e8:	295d6704 	addi	r5,r5,30108
 80051ec:	8004bcc0 	call	8004bcc <alt_find_dev>
 80051f0:	e0bff815 	stw	r2,-32(fp)
 80051f4:	e0bff817 	ldw	r2,-32(fp)
 80051f8:	1000051e 	bne	r2,zero,8005210 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80051fc:	e13ffd17 	ldw	r4,-12(fp)
 8005200:	80054c40 	call	80054c4 <alt_find_file>
 8005204:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8005208:	00800044 	movi	r2,1
 800520c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8005210:	e0bff817 	ldw	r2,-32(fp)
 8005214:	10002926 	beq	r2,zero,80052bc <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8005218:	e13ff817 	ldw	r4,-32(fp)
 800521c:	80055d80 	call	80055d8 <alt_get_fd>
 8005220:	e0bff915 	stw	r2,-28(fp)
 8005224:	e0bff917 	ldw	r2,-28(fp)
 8005228:	1000030e 	bge	r2,zero,8005238 <open+0x88>
    {
      status = index;
 800522c:	e0bff917 	ldw	r2,-28(fp)
 8005230:	e0bffa15 	stw	r2,-24(fp)
 8005234:	00002306 	br	80052c4 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 8005238:	e0bff917 	ldw	r2,-28(fp)
 800523c:	10c00324 	muli	r3,r2,12
 8005240:	00820034 	movhi	r2,2048
 8005244:	1098de04 	addi	r2,r2,25464
 8005248:	1885883a 	add	r2,r3,r2
 800524c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8005250:	e0fffe17 	ldw	r3,-8(fp)
 8005254:	00900034 	movhi	r2,16384
 8005258:	10bfffc4 	addi	r2,r2,-1
 800525c:	1886703a 	and	r3,r3,r2
 8005260:	e0bffc17 	ldw	r2,-16(fp)
 8005264:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8005268:	e0bffb17 	ldw	r2,-20(fp)
 800526c:	1000051e 	bne	r2,zero,8005284 <open+0xd4>
 8005270:	e13ffc17 	ldw	r4,-16(fp)
 8005274:	80050e40 	call	80050e4 <alt_file_locked>
 8005278:	e0bffa15 	stw	r2,-24(fp)
 800527c:	e0bffa17 	ldw	r2,-24(fp)
 8005280:	10001016 	blt	r2,zero,80052c4 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8005284:	e0bff817 	ldw	r2,-32(fp)
 8005288:	10800317 	ldw	r2,12(r2)
 800528c:	10000826 	beq	r2,zero,80052b0 <open+0x100>
 8005290:	e0bff817 	ldw	r2,-32(fp)
 8005294:	10800317 	ldw	r2,12(r2)
 8005298:	e13ffc17 	ldw	r4,-16(fp)
 800529c:	e17ffd17 	ldw	r5,-12(fp)
 80052a0:	e1bffe17 	ldw	r6,-8(fp)
 80052a4:	e1ffff17 	ldw	r7,-4(fp)
 80052a8:	103ee83a 	callr	r2
 80052ac:	00000106 	br	80052b4 <open+0x104>
 80052b0:	0005883a 	mov	r2,zero
 80052b4:	e0bffa15 	stw	r2,-24(fp)
 80052b8:	00000206 	br	80052c4 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 80052bc:	00bffb44 	movi	r2,-19
 80052c0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 80052c4:	e0bffa17 	ldw	r2,-24(fp)
 80052c8:	1000090e 	bge	r2,zero,80052f0 <open+0x140>
  {
    alt_release_fd (index);  
 80052cc:	e13ff917 	ldw	r4,-28(fp)
 80052d0:	80035700 	call	8003570 <alt_release_fd>
    ALT_ERRNO = -status;
 80052d4:	80050940 	call	8005094 <alt_get_errno>
 80052d8:	1007883a 	mov	r3,r2
 80052dc:	e0bffa17 	ldw	r2,-24(fp)
 80052e0:	0085c83a 	sub	r2,zero,r2
 80052e4:	18800015 	stw	r2,0(r3)
    return -1;
 80052e8:	00bfffc4 	movi	r2,-1
 80052ec:	00000106 	br	80052f4 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 80052f0:	e0bff917 	ldw	r2,-28(fp)
}
 80052f4:	e037883a 	mov	sp,fp
 80052f8:	dfc00117 	ldw	ra,4(sp)
 80052fc:	df000017 	ldw	fp,0(sp)
 8005300:	dec00204 	addi	sp,sp,8
 8005304:	f800283a 	ret

08005308 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8005308:	defffa04 	addi	sp,sp,-24
 800530c:	df000515 	stw	fp,20(sp)
 8005310:	df000504 	addi	fp,sp,20
 8005314:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005318:	0005303a 	rdctl	r2,status
 800531c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005320:	e0fffc17 	ldw	r3,-16(fp)
 8005324:	00bfff84 	movi	r2,-2
 8005328:	1884703a 	and	r2,r3,r2
 800532c:	1001703a 	wrctl	status,r2
  
  return context;
 8005330:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8005334:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8005338:	e0bfff17 	ldw	r2,-4(fp)
 800533c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8005340:	e0bffd17 	ldw	r2,-12(fp)
 8005344:	10800017 	ldw	r2,0(r2)
 8005348:	e0fffd17 	ldw	r3,-12(fp)
 800534c:	18c00117 	ldw	r3,4(r3)
 8005350:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8005354:	e0bffd17 	ldw	r2,-12(fp)
 8005358:	10800117 	ldw	r2,4(r2)
 800535c:	e0fffd17 	ldw	r3,-12(fp)
 8005360:	18c00017 	ldw	r3,0(r3)
 8005364:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8005368:	e0bffd17 	ldw	r2,-12(fp)
 800536c:	e0fffd17 	ldw	r3,-12(fp)
 8005370:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8005374:	e0bffd17 	ldw	r2,-12(fp)
 8005378:	e0fffd17 	ldw	r3,-12(fp)
 800537c:	10c00015 	stw	r3,0(r2)
 8005380:	e0bffb17 	ldw	r2,-20(fp)
 8005384:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005388:	e0bffe17 	ldw	r2,-8(fp)
 800538c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8005390:	e037883a 	mov	sp,fp
 8005394:	df000017 	ldw	fp,0(sp)
 8005398:	dec00104 	addi	sp,sp,4
 800539c:	f800283a 	ret

080053a0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 80053a0:	defffb04 	addi	sp,sp,-20
 80053a4:	dfc00415 	stw	ra,16(sp)
 80053a8:	df000315 	stw	fp,12(sp)
 80053ac:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 80053b0:	d0a00c17 	ldw	r2,-32720(gp)
 80053b4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 80053b8:	d0a6bd17 	ldw	r2,-25868(gp)
 80053bc:	10800044 	addi	r2,r2,1
 80053c0:	d0a6bd15 	stw	r2,-25868(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80053c4:	00002e06 	br	8005480 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 80053c8:	e0bffd17 	ldw	r2,-12(fp)
 80053cc:	10800017 	ldw	r2,0(r2)
 80053d0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 80053d4:	e0bffd17 	ldw	r2,-12(fp)
 80053d8:	10800403 	ldbu	r2,16(r2)
 80053dc:	10803fcc 	andi	r2,r2,255
 80053e0:	10000426 	beq	r2,zero,80053f4 <alt_tick+0x54>
 80053e4:	d0a6bd17 	ldw	r2,-25868(gp)
 80053e8:	1000021e 	bne	r2,zero,80053f4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 80053ec:	e0bffd17 	ldw	r2,-12(fp)
 80053f0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 80053f4:	e0bffd17 	ldw	r2,-12(fp)
 80053f8:	10800217 	ldw	r2,8(r2)
 80053fc:	d0e6bd17 	ldw	r3,-25868(gp)
 8005400:	18801d36 	bltu	r3,r2,8005478 <alt_tick+0xd8>
 8005404:	e0bffd17 	ldw	r2,-12(fp)
 8005408:	10800403 	ldbu	r2,16(r2)
 800540c:	10803fcc 	andi	r2,r2,255
 8005410:	1000191e 	bne	r2,zero,8005478 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8005414:	e0bffd17 	ldw	r2,-12(fp)
 8005418:	10800317 	ldw	r2,12(r2)
 800541c:	e0fffd17 	ldw	r3,-12(fp)
 8005420:	18c00517 	ldw	r3,20(r3)
 8005424:	1809883a 	mov	r4,r3
 8005428:	103ee83a 	callr	r2
 800542c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8005430:	e0bfff17 	ldw	r2,-4(fp)
 8005434:	1000031e 	bne	r2,zero,8005444 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8005438:	e13ffd17 	ldw	r4,-12(fp)
 800543c:	80053080 	call	8005308 <alt_alarm_stop>
 8005440:	00000d06 	br	8005478 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8005444:	e0bffd17 	ldw	r2,-12(fp)
 8005448:	10c00217 	ldw	r3,8(r2)
 800544c:	e0bfff17 	ldw	r2,-4(fp)
 8005450:	1887883a 	add	r3,r3,r2
 8005454:	e0bffd17 	ldw	r2,-12(fp)
 8005458:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800545c:	e0bffd17 	ldw	r2,-12(fp)
 8005460:	10c00217 	ldw	r3,8(r2)
 8005464:	d0a6bd17 	ldw	r2,-25868(gp)
 8005468:	1880032e 	bgeu	r3,r2,8005478 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800546c:	e0bffd17 	ldw	r2,-12(fp)
 8005470:	00c00044 	movi	r3,1
 8005474:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8005478:	e0bffe17 	ldw	r2,-8(fp)
 800547c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8005480:	e0fffd17 	ldw	r3,-12(fp)
 8005484:	d0a00c04 	addi	r2,gp,-32720
 8005488:	18bfcf1e 	bne	r3,r2,80053c8 <__alt_data_end+0xfc0053c8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800548c:	0001883a 	nop
}
 8005490:	e037883a 	mov	sp,fp
 8005494:	dfc00117 	ldw	ra,4(sp)
 8005498:	df000017 	ldw	fp,0(sp)
 800549c:	dec00204 	addi	sp,sp,8
 80054a0:	f800283a 	ret

080054a4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 80054a4:	deffff04 	addi	sp,sp,-4
 80054a8:	df000015 	stw	fp,0(sp)
 80054ac:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80054b0:	000170fa 	wrctl	ienable,zero
}
 80054b4:	e037883a 	mov	sp,fp
 80054b8:	df000017 	ldw	fp,0(sp)
 80054bc:	dec00104 	addi	sp,sp,4
 80054c0:	f800283a 	ret

080054c4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 80054c4:	defffb04 	addi	sp,sp,-20
 80054c8:	dfc00415 	stw	ra,16(sp)
 80054cc:	df000315 	stw	fp,12(sp)
 80054d0:	df000304 	addi	fp,sp,12
 80054d4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80054d8:	00820034 	movhi	r2,2048
 80054dc:	109d6504 	addi	r2,r2,30100
 80054e0:	10800017 	ldw	r2,0(r2)
 80054e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80054e8:	00003106 	br	80055b0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 80054ec:	e0bffd17 	ldw	r2,-12(fp)
 80054f0:	10800217 	ldw	r2,8(r2)
 80054f4:	1009883a 	mov	r4,r2
 80054f8:	80003e40 	call	80003e4 <strlen>
 80054fc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8005500:	e0bffd17 	ldw	r2,-12(fp)
 8005504:	10c00217 	ldw	r3,8(r2)
 8005508:	e0bffe17 	ldw	r2,-8(fp)
 800550c:	10bfffc4 	addi	r2,r2,-1
 8005510:	1885883a 	add	r2,r3,r2
 8005514:	10800003 	ldbu	r2,0(r2)
 8005518:	10803fcc 	andi	r2,r2,255
 800551c:	1080201c 	xori	r2,r2,128
 8005520:	10bfe004 	addi	r2,r2,-128
 8005524:	10800bd8 	cmpnei	r2,r2,47
 8005528:	1000031e 	bne	r2,zero,8005538 <alt_find_file+0x74>
    {
      len -= 1;
 800552c:	e0bffe17 	ldw	r2,-8(fp)
 8005530:	10bfffc4 	addi	r2,r2,-1
 8005534:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8005538:	e0bffe17 	ldw	r2,-8(fp)
 800553c:	e0ffff17 	ldw	r3,-4(fp)
 8005540:	1885883a 	add	r2,r3,r2
 8005544:	10800003 	ldbu	r2,0(r2)
 8005548:	10803fcc 	andi	r2,r2,255
 800554c:	1080201c 	xori	r2,r2,128
 8005550:	10bfe004 	addi	r2,r2,-128
 8005554:	10800be0 	cmpeqi	r2,r2,47
 8005558:	1000081e 	bne	r2,zero,800557c <alt_find_file+0xb8>
 800555c:	e0bffe17 	ldw	r2,-8(fp)
 8005560:	e0ffff17 	ldw	r3,-4(fp)
 8005564:	1885883a 	add	r2,r3,r2
 8005568:	10800003 	ldbu	r2,0(r2)
 800556c:	10803fcc 	andi	r2,r2,255
 8005570:	1080201c 	xori	r2,r2,128
 8005574:	10bfe004 	addi	r2,r2,-128
 8005578:	10000a1e 	bne	r2,zero,80055a4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 800557c:	e0bffd17 	ldw	r2,-12(fp)
 8005580:	10c00217 	ldw	r3,8(r2)
 8005584:	e0bffe17 	ldw	r2,-8(fp)
 8005588:	1809883a 	mov	r4,r3
 800558c:	e17fff17 	ldw	r5,-4(fp)
 8005590:	100d883a 	mov	r6,r2
 8005594:	80057640 	call	8005764 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8005598:	1000021e 	bne	r2,zero,80055a4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800559c:	e0bffd17 	ldw	r2,-12(fp)
 80055a0:	00000806 	br	80055c4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 80055a4:	e0bffd17 	ldw	r2,-12(fp)
 80055a8:	10800017 	ldw	r2,0(r2)
 80055ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80055b0:	e0fffd17 	ldw	r3,-12(fp)
 80055b4:	00820034 	movhi	r2,2048
 80055b8:	109d6504 	addi	r2,r2,30100
 80055bc:	18bfcb1e 	bne	r3,r2,80054ec <__alt_data_end+0xfc0054ec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 80055c0:	0005883a 	mov	r2,zero
}
 80055c4:	e037883a 	mov	sp,fp
 80055c8:	dfc00117 	ldw	ra,4(sp)
 80055cc:	df000017 	ldw	fp,0(sp)
 80055d0:	dec00204 	addi	sp,sp,8
 80055d4:	f800283a 	ret

080055d8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 80055d8:	defffc04 	addi	sp,sp,-16
 80055dc:	df000315 	stw	fp,12(sp)
 80055e0:	df000304 	addi	fp,sp,12
 80055e4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 80055e8:	00bffa04 	movi	r2,-24
 80055ec:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80055f0:	e03ffd15 	stw	zero,-12(fp)
 80055f4:	00001d06 	br	800566c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 80055f8:	00820034 	movhi	r2,2048
 80055fc:	1098de04 	addi	r2,r2,25464
 8005600:	e0fffd17 	ldw	r3,-12(fp)
 8005604:	18c00324 	muli	r3,r3,12
 8005608:	10c5883a 	add	r2,r2,r3
 800560c:	10800017 	ldw	r2,0(r2)
 8005610:	1000131e 	bne	r2,zero,8005660 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 8005614:	00820034 	movhi	r2,2048
 8005618:	1098de04 	addi	r2,r2,25464
 800561c:	e0fffd17 	ldw	r3,-12(fp)
 8005620:	18c00324 	muli	r3,r3,12
 8005624:	10c5883a 	add	r2,r2,r3
 8005628:	e0ffff17 	ldw	r3,-4(fp)
 800562c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8005630:	00820034 	movhi	r2,2048
 8005634:	109d6904 	addi	r2,r2,30116
 8005638:	10c00017 	ldw	r3,0(r2)
 800563c:	e0bffd17 	ldw	r2,-12(fp)
 8005640:	1880040e 	bge	r3,r2,8005654 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 8005644:	00820034 	movhi	r2,2048
 8005648:	109d6904 	addi	r2,r2,30116
 800564c:	e0fffd17 	ldw	r3,-12(fp)
 8005650:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8005654:	e0bffd17 	ldw	r2,-12(fp)
 8005658:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 800565c:	00000606 	br	8005678 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8005660:	e0bffd17 	ldw	r2,-12(fp)
 8005664:	10800044 	addi	r2,r2,1
 8005668:	e0bffd15 	stw	r2,-12(fp)
 800566c:	e0bffd17 	ldw	r2,-12(fp)
 8005670:	10800810 	cmplti	r2,r2,32
 8005674:	103fe01e 	bne	r2,zero,80055f8 <__alt_data_end+0xfc0055f8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8005678:	e0bffe17 	ldw	r2,-8(fp)
}
 800567c:	e037883a 	mov	sp,fp
 8005680:	df000017 	ldw	fp,0(sp)
 8005684:	dec00104 	addi	sp,sp,4
 8005688:	f800283a 	ret

0800568c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 800568c:	defffb04 	addi	sp,sp,-20
 8005690:	df000415 	stw	fp,16(sp)
 8005694:	df000404 	addi	fp,sp,16
 8005698:	e13ffe15 	stw	r4,-8(fp)
 800569c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 80056a0:	e0bfff17 	ldw	r2,-4(fp)
 80056a4:	10840070 	cmpltui	r2,r2,4097
 80056a8:	1000021e 	bne	r2,zero,80056b4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 80056ac:	00840004 	movi	r2,4096
 80056b0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 80056b4:	e0fffe17 	ldw	r3,-8(fp)
 80056b8:	e0bfff17 	ldw	r2,-4(fp)
 80056bc:	1885883a 	add	r2,r3,r2
 80056c0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80056c4:	e0bffe17 	ldw	r2,-8(fp)
 80056c8:	e0bffc15 	stw	r2,-16(fp)
 80056cc:	00000506 	br	80056e4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 80056d0:	e0bffc17 	ldw	r2,-16(fp)
 80056d4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 80056d8:	e0bffc17 	ldw	r2,-16(fp)
 80056dc:	10800804 	addi	r2,r2,32
 80056e0:	e0bffc15 	stw	r2,-16(fp)
 80056e4:	e0fffc17 	ldw	r3,-16(fp)
 80056e8:	e0bffd17 	ldw	r2,-12(fp)
 80056ec:	18bff836 	bltu	r3,r2,80056d0 <__alt_data_end+0xfc0056d0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 80056f0:	e0bffe17 	ldw	r2,-8(fp)
 80056f4:	108007cc 	andi	r2,r2,31
 80056f8:	10000226 	beq	r2,zero,8005704 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 80056fc:	e0bffc17 	ldw	r2,-16(fp)
 8005700:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8005704:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8005708:	e037883a 	mov	sp,fp
 800570c:	df000017 	ldw	fp,0(sp)
 8005710:	dec00104 	addi	sp,sp,4
 8005714:	f800283a 	ret

08005718 <atexit>:
 8005718:	200b883a 	mov	r5,r4
 800571c:	000d883a 	mov	r6,zero
 8005720:	0009883a 	mov	r4,zero
 8005724:	000f883a 	mov	r7,zero
 8005728:	80057e01 	jmpi	80057e0 <__register_exitproc>

0800572c <exit>:
 800572c:	defffe04 	addi	sp,sp,-8
 8005730:	000b883a 	mov	r5,zero
 8005734:	dc000015 	stw	r16,0(sp)
 8005738:	dfc00115 	stw	ra,4(sp)
 800573c:	2021883a 	mov	r16,r4
 8005740:	80058f40 	call	80058f4 <__call_exitprocs>
 8005744:	00820034 	movhi	r2,2048
 8005748:	109d6104 	addi	r2,r2,30084
 800574c:	11000017 	ldw	r4,0(r2)
 8005750:	20800f17 	ldw	r2,60(r4)
 8005754:	10000126 	beq	r2,zero,800575c <exit+0x30>
 8005758:	103ee83a 	callr	r2
 800575c:	8009883a 	mov	r4,r16
 8005760:	8005a880 	call	8005a88 <_exit>

08005764 <memcmp>:
 8005764:	01c000c4 	movi	r7,3
 8005768:	3980192e 	bgeu	r7,r6,80057d0 <memcmp+0x6c>
 800576c:	2144b03a 	or	r2,r4,r5
 8005770:	11c4703a 	and	r2,r2,r7
 8005774:	10000f26 	beq	r2,zero,80057b4 <memcmp+0x50>
 8005778:	20800003 	ldbu	r2,0(r4)
 800577c:	28c00003 	ldbu	r3,0(r5)
 8005780:	10c0151e 	bne	r2,r3,80057d8 <memcmp+0x74>
 8005784:	31bfff84 	addi	r6,r6,-2
 8005788:	01ffffc4 	movi	r7,-1
 800578c:	00000406 	br	80057a0 <memcmp+0x3c>
 8005790:	20800003 	ldbu	r2,0(r4)
 8005794:	28c00003 	ldbu	r3,0(r5)
 8005798:	31bfffc4 	addi	r6,r6,-1
 800579c:	10c00e1e 	bne	r2,r3,80057d8 <memcmp+0x74>
 80057a0:	21000044 	addi	r4,r4,1
 80057a4:	29400044 	addi	r5,r5,1
 80057a8:	31fff91e 	bne	r6,r7,8005790 <__alt_data_end+0xfc005790>
 80057ac:	0005883a 	mov	r2,zero
 80057b0:	f800283a 	ret
 80057b4:	20c00017 	ldw	r3,0(r4)
 80057b8:	28800017 	ldw	r2,0(r5)
 80057bc:	1880041e 	bne	r3,r2,80057d0 <memcmp+0x6c>
 80057c0:	31bfff04 	addi	r6,r6,-4
 80057c4:	21000104 	addi	r4,r4,4
 80057c8:	29400104 	addi	r5,r5,4
 80057cc:	39bff936 	bltu	r7,r6,80057b4 <__alt_data_end+0xfc0057b4>
 80057d0:	303fe91e 	bne	r6,zero,8005778 <__alt_data_end+0xfc005778>
 80057d4:	003ff506 	br	80057ac <__alt_data_end+0xfc0057ac>
 80057d8:	10c5c83a 	sub	r2,r2,r3
 80057dc:	f800283a 	ret

080057e0 <__register_exitproc>:
 80057e0:	00820034 	movhi	r2,2048
 80057e4:	defffa04 	addi	sp,sp,-24
 80057e8:	109d6104 	addi	r2,r2,30084
 80057ec:	dc000315 	stw	r16,12(sp)
 80057f0:	14000017 	ldw	r16,0(r2)
 80057f4:	dc400415 	stw	r17,16(sp)
 80057f8:	dfc00515 	stw	ra,20(sp)
 80057fc:	80805217 	ldw	r2,328(r16)
 8005800:	2023883a 	mov	r17,r4
 8005804:	10003626 	beq	r2,zero,80058e0 <__register_exitproc+0x100>
 8005808:	10c00117 	ldw	r3,4(r2)
 800580c:	010007c4 	movi	r4,31
 8005810:	20c00e16 	blt	r4,r3,800584c <__register_exitproc+0x6c>
 8005814:	1a400044 	addi	r9,r3,1
 8005818:	8800211e 	bne	r17,zero,80058a0 <__register_exitproc+0xc0>
 800581c:	18c00084 	addi	r3,r3,2
 8005820:	18c7883a 	add	r3,r3,r3
 8005824:	18c7883a 	add	r3,r3,r3
 8005828:	12400115 	stw	r9,4(r2)
 800582c:	10c7883a 	add	r3,r2,r3
 8005830:	19400015 	stw	r5,0(r3)
 8005834:	0005883a 	mov	r2,zero
 8005838:	dfc00517 	ldw	ra,20(sp)
 800583c:	dc400417 	ldw	r17,16(sp)
 8005840:	dc000317 	ldw	r16,12(sp)
 8005844:	dec00604 	addi	sp,sp,24
 8005848:	f800283a 	ret
 800584c:	00800034 	movhi	r2,0
 8005850:	10800004 	addi	r2,r2,0
 8005854:	10002526 	beq	r2,zero,80058ec <__register_exitproc+0x10c>
 8005858:	01006404 	movi	r4,400
 800585c:	d9400015 	stw	r5,0(sp)
 8005860:	d9800115 	stw	r6,4(sp)
 8005864:	d9c00215 	stw	r7,8(sp)
 8005868:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 800586c:	d9400017 	ldw	r5,0(sp)
 8005870:	d9800117 	ldw	r6,4(sp)
 8005874:	d9c00217 	ldw	r7,8(sp)
 8005878:	10001c26 	beq	r2,zero,80058ec <__register_exitproc+0x10c>
 800587c:	80c05217 	ldw	r3,328(r16)
 8005880:	10000115 	stw	zero,4(r2)
 8005884:	02400044 	movi	r9,1
 8005888:	10c00015 	stw	r3,0(r2)
 800588c:	80805215 	stw	r2,328(r16)
 8005890:	10006215 	stw	zero,392(r2)
 8005894:	10006315 	stw	zero,396(r2)
 8005898:	0007883a 	mov	r3,zero
 800589c:	883fdf26 	beq	r17,zero,800581c <__alt_data_end+0xfc00581c>
 80058a0:	18d1883a 	add	r8,r3,r3
 80058a4:	4211883a 	add	r8,r8,r8
 80058a8:	1211883a 	add	r8,r2,r8
 80058ac:	41802215 	stw	r6,136(r8)
 80058b0:	01000044 	movi	r4,1
 80058b4:	11806217 	ldw	r6,392(r2)
 80058b8:	20c8983a 	sll	r4,r4,r3
 80058bc:	310cb03a 	or	r6,r6,r4
 80058c0:	11806215 	stw	r6,392(r2)
 80058c4:	41c04215 	stw	r7,264(r8)
 80058c8:	01800084 	movi	r6,2
 80058cc:	89bfd31e 	bne	r17,r6,800581c <__alt_data_end+0xfc00581c>
 80058d0:	11806317 	ldw	r6,396(r2)
 80058d4:	3108b03a 	or	r4,r6,r4
 80058d8:	11006315 	stw	r4,396(r2)
 80058dc:	003fcf06 	br	800581c <__alt_data_end+0xfc00581c>
 80058e0:	80805304 	addi	r2,r16,332
 80058e4:	80805215 	stw	r2,328(r16)
 80058e8:	003fc706 	br	8005808 <__alt_data_end+0xfc005808>
 80058ec:	00bfffc4 	movi	r2,-1
 80058f0:	003fd106 	br	8005838 <__alt_data_end+0xfc005838>

080058f4 <__call_exitprocs>:
 80058f4:	00820034 	movhi	r2,2048
 80058f8:	109d6104 	addi	r2,r2,30084
 80058fc:	10800017 	ldw	r2,0(r2)
 8005900:	defff404 	addi	sp,sp,-48
 8005904:	dd800815 	stw	r22,32(sp)
 8005908:	d8800015 	stw	r2,0(sp)
 800590c:	10805204 	addi	r2,r2,328
 8005910:	dd000615 	stw	r20,24(sp)
 8005914:	dc800415 	stw	r18,16(sp)
 8005918:	dfc00b15 	stw	ra,44(sp)
 800591c:	df000a15 	stw	fp,40(sp)
 8005920:	ddc00915 	stw	r23,36(sp)
 8005924:	dd400715 	stw	r21,28(sp)
 8005928:	dcc00515 	stw	r19,20(sp)
 800592c:	dc400315 	stw	r17,12(sp)
 8005930:	dc000215 	stw	r16,8(sp)
 8005934:	2025883a 	mov	r18,r4
 8005938:	2829883a 	mov	r20,r5
 800593c:	d8800115 	stw	r2,4(sp)
 8005940:	05bfffc4 	movi	r22,-1
 8005944:	d8800017 	ldw	r2,0(sp)
 8005948:	14c05217 	ldw	r19,328(r2)
 800594c:	98001d26 	beq	r19,zero,80059c4 <__call_exitprocs+0xd0>
 8005950:	dd400117 	ldw	r21,4(sp)
 8005954:	98800117 	ldw	r2,4(r19)
 8005958:	173fffc4 	addi	fp,r2,-1
 800595c:	e0000d16 	blt	fp,zero,8005994 <__call_exitprocs+0xa0>
 8005960:	14000044 	addi	r16,r2,1
 8005964:	8421883a 	add	r16,r16,r16
 8005968:	8421883a 	add	r16,r16,r16
 800596c:	84402004 	addi	r17,r16,128
 8005970:	9c63883a 	add	r17,r19,r17
 8005974:	9c21883a 	add	r16,r19,r16
 8005978:	a0001e26 	beq	r20,zero,80059f4 <__call_exitprocs+0x100>
 800597c:	80804017 	ldw	r2,256(r16)
 8005980:	15001c26 	beq	r2,r20,80059f4 <__call_exitprocs+0x100>
 8005984:	e73fffc4 	addi	fp,fp,-1
 8005988:	843fff04 	addi	r16,r16,-4
 800598c:	8c7fff04 	addi	r17,r17,-4
 8005990:	e5bff91e 	bne	fp,r22,8005978 <__alt_data_end+0xfc005978>
 8005994:	00800034 	movhi	r2,0
 8005998:	10800004 	addi	r2,r2,0
 800599c:	10000926 	beq	r2,zero,80059c4 <__call_exitprocs+0xd0>
 80059a0:	98800117 	ldw	r2,4(r19)
 80059a4:	1000311e 	bne	r2,zero,8005a6c <__call_exitprocs+0x178>
 80059a8:	98800017 	ldw	r2,0(r19)
 80059ac:	10003426 	beq	r2,zero,8005a80 <__call_exitprocs+0x18c>
 80059b0:	9809883a 	mov	r4,r19
 80059b4:	a8800015 	stw	r2,0(r21)
 80059b8:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 80059bc:	acc00017 	ldw	r19,0(r21)
 80059c0:	983fe41e 	bne	r19,zero,8005954 <__alt_data_end+0xfc005954>
 80059c4:	dfc00b17 	ldw	ra,44(sp)
 80059c8:	df000a17 	ldw	fp,40(sp)
 80059cc:	ddc00917 	ldw	r23,36(sp)
 80059d0:	dd800817 	ldw	r22,32(sp)
 80059d4:	dd400717 	ldw	r21,28(sp)
 80059d8:	dd000617 	ldw	r20,24(sp)
 80059dc:	dcc00517 	ldw	r19,20(sp)
 80059e0:	dc800417 	ldw	r18,16(sp)
 80059e4:	dc400317 	ldw	r17,12(sp)
 80059e8:	dc000217 	ldw	r16,8(sp)
 80059ec:	dec00c04 	addi	sp,sp,48
 80059f0:	f800283a 	ret
 80059f4:	98800117 	ldw	r2,4(r19)
 80059f8:	80c00017 	ldw	r3,0(r16)
 80059fc:	10bfffc4 	addi	r2,r2,-1
 8005a00:	17001526 	beq	r2,fp,8005a58 <__call_exitprocs+0x164>
 8005a04:	80000015 	stw	zero,0(r16)
 8005a08:	183fde26 	beq	r3,zero,8005984 <__alt_data_end+0xfc005984>
 8005a0c:	00800044 	movi	r2,1
 8005a10:	1708983a 	sll	r4,r2,fp
 8005a14:	98806217 	ldw	r2,392(r19)
 8005a18:	9dc00117 	ldw	r23,4(r19)
 8005a1c:	2084703a 	and	r2,r4,r2
 8005a20:	1000061e 	bne	r2,zero,8005a3c <__call_exitprocs+0x148>
 8005a24:	183ee83a 	callr	r3
 8005a28:	98800117 	ldw	r2,4(r19)
 8005a2c:	15ffc51e 	bne	r2,r23,8005944 <__alt_data_end+0xfc005944>
 8005a30:	a8800017 	ldw	r2,0(r21)
 8005a34:	14ffd326 	beq	r2,r19,8005984 <__alt_data_end+0xfc005984>
 8005a38:	003fc206 	br	8005944 <__alt_data_end+0xfc005944>
 8005a3c:	98806317 	ldw	r2,396(r19)
 8005a40:	2084703a 	and	r2,r4,r2
 8005a44:	1000061e 	bne	r2,zero,8005a60 <__call_exitprocs+0x16c>
 8005a48:	89400017 	ldw	r5,0(r17)
 8005a4c:	9009883a 	mov	r4,r18
 8005a50:	183ee83a 	callr	r3
 8005a54:	003ff406 	br	8005a28 <__alt_data_end+0xfc005a28>
 8005a58:	9f000115 	stw	fp,4(r19)
 8005a5c:	003fea06 	br	8005a08 <__alt_data_end+0xfc005a08>
 8005a60:	89000017 	ldw	r4,0(r17)
 8005a64:	183ee83a 	callr	r3
 8005a68:	003fef06 	br	8005a28 <__alt_data_end+0xfc005a28>
 8005a6c:	98800017 	ldw	r2,0(r19)
 8005a70:	982b883a 	mov	r21,r19
 8005a74:	1027883a 	mov	r19,r2
 8005a78:	983fb61e 	bne	r19,zero,8005954 <__alt_data_end+0xfc005954>
 8005a7c:	003fd106 	br	80059c4 <__alt_data_end+0xfc0059c4>
 8005a80:	0005883a 	mov	r2,zero
 8005a84:	003ffa06 	br	8005a70 <__alt_data_end+0xfc005a70>

08005a88 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8005a88:	defffd04 	addi	sp,sp,-12
 8005a8c:	df000215 	stw	fp,8(sp)
 8005a90:	df000204 	addi	fp,sp,8
 8005a94:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8005a98:	0001883a 	nop
 8005a9c:	e0bfff17 	ldw	r2,-4(fp)
 8005aa0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8005aa4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8005aa8:	10000226 	beq	r2,zero,8005ab4 <_exit+0x2c>
    ALT_SIM_FAIL();
 8005aac:	002af070 	cmpltui	zero,zero,43969
 8005ab0:	00000106 	br	8005ab8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8005ab4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8005ab8:	003fff06 	br	8005ab8 <__alt_data_end+0xfc005ab8>
