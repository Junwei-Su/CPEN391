/*
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example
 * designs. It runs with or without the MicroC/OS-II RTOS and requires a STDOUT
 * device in your system's hardware.
 * The memory footprint of this hosted application is ~69 kbytes by default
 * using the standard reference design.
 *
 * For a reduced footprint version of this template, and an explanation of how
 * to reduce the memory footprint for a given application, see the
 * "small_hello_world" template.
 *
 */

#include <stdio.h>
#include "Colours.h"
#include "graphic.h"



//menu constants
#define BOXW 150;
#define BOXH 150;

void menuBox(int x1, int y1) {

	int boxW = BOXW;
	int boxH = BOXH;

	DrawSolidRectangle(x1, y1, x1+boxW, y1, x1, y1+boxH, x1+boxW, y1+boxH, GRAY);
	DrawRectangle(x1, y1, x1+boxW, y1, x1, y1+boxH, x1+boxW, y1+boxH, LIGHT_SLATE_GRAY);

}

void keyPad(int x1, int y1) {

	int boxW = 100;
	int boxH = 100;

	DrawSolidRectangle(x1, y1, x1+boxW, y1, x1, y1+boxH, x1+boxW, y1+boxH, GRAY);
	DrawRectangle(x1, y1, x1+boxW, y1, x1, y1+boxH, x1+boxW, y1+boxH, LIGHT_SLATE_GRAY);

}

void symbolGPS(int xCentre, int yCentre, int rad){

	int colour = STEEL_BLUE;

	drawcircle(xCentre, yCentre, rad, colour);
	drawSolidcircle(xCentre, yCentre, rad/2, colour);

	DrawVline(xCentre, yCentre + rad - 10, xCentre, yCentre + rad + 10, colour);
	DrawVline(xCentre, yCentre - rad - 10, xCentre, yCentre - rad + 10, colour);
	DrawHline(xCentre + rad - 10, yCentre, xCentre + rad + 10, yCentre, colour);
	DrawHline(xCentre - rad - 10, yCentre, xCentre - rad + 10, yCentre, colour);


}

void symbolHELP(int x1, int y1) {

	int size = 75;

	int i;
	for(i = 0; i<7; i++){
	DrawVline(x1+i, y1, x1, y1+size, RED);
	DrawVline(x1-i, y1, x1, y1+size, RED);
	}

	drawSolidcircle(x1, y1+size+20, 7, RED);

}

void cross(int xc, int yc) {

	int size = 100;


	int xLeft = xc - 50;
	int yTop = yc - 50;

	int i;
	for(i = 0; i<15; i++){
		DrawVline(xc+i, yTop, xc+i, yTop+size, LIME);
		DrawVline(xc-i, yTop, xc-i, yTop+size, LIME);
	}

	yc -= 17;

	for(i = 0; i<30; i++){
		DrawHline(xLeft, yc+i, xLeft+size, yc+i, LIME);
		DrawHline(xLeft, yc-1, xLeft+size, yc-i, LIME);
	}
}


void prompt(){


	int i;
	for (i = 1; i < 5; i++){
		keyPad(400,100*i-50);
		keyPad(500,100*i-50);
		keyPad(600,100*i-50);

	}

	write(450, 100, "1", 16, WHITE, GRAY);
	write(550, 100, "2", 16, WHITE, GRAY);
	write(650, 100, "3", 16, WHITE, GRAY);

	write(450, 200, "4", 16, WHITE, GRAY);
	write(550, 200, "5", 16, WHITE, GRAY);
	write(650, 200, "6", 16, WHITE, GRAY);

	write(450, 300, "7", 16, WHITE, GRAY);
	write(550, 300, "8", 16, WHITE, GRAY);
	write(650, 300, "9", 16, WHITE, GRAY);

	write(450, 400, "<-", 16, RED, GRAY);
	write(550, 400, "8", 16, WHITE, GRAY);
	write(650, 400, "OK", 16, GREEN, GRAY);
}


int touchBox(Point p, int size, int x, int y){
	if (p.x > x && p.x < x+size && p.y > y && p.y < y+size)
		return 1;
	else
		return 0;
}


int main()
{

	clearScreen(LIGHT_CYAN);
	int y_offset = 50;

	prompt();
/*
	write(325, y_offset, "NeverLost", 16, SLATE_GRAY, LIGHT_CYAN);

	DrawSolidRectangle(0, 120, 800, 120, 0, 440, 800, 440, MEDIUM_SPRING_GREEN);
	DrawRectangle(0, 120, 800, 120, 0, 440, 800, 440, BLUE);


	menuBox(100,205);
	writeSmall(135,375,"DANGER",16, SLATE_GRAY, MEDIUM_SPRING_GREEN);
	symbolHELP(175, 230);
	menuBox(325,205);
	writeSmall(385,375,"GPS",16, SLATE_GRAY, MEDIUM_SPRING_GREEN);
	symbolGPS(400,280,50);
	menuBox(550,205);
	writeSmall(585,375,"HEALTH",16, SLATE_GRAY, MEDIUM_SPRING_GREEN);
	cross(625, 280);


*/

	return 0;
}
