
NeverLost.elf:     file format elf32-littlenios2
NeverLost.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0002b0f8 memsz 0x0002b0f8 flags r-x
    LOAD off    0x0002c118 vaddr 0x0802b118 paddr 0x0802cc98 align 2**12
         filesz 0x00001b80 memsz 0x00001b80 flags rw-
    LOAD off    0x0002e818 vaddr 0x0802e818 paddr 0x0802e818 align 2**12
         filesz 0x00000000 memsz 0x000003d4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001fef4  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000b068  080200b0  080200b0  000210b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b80  0802b118  0802cc98  0002c118  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000003d4  0802e818  0802e818  0002e818  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0802ebec  0802ebec  0002dc98  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0002dc98  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000013f8  00000000  00000000  0002dcc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000351ba  00000000  00000000  0002f0b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000dab2  00000000  00000000  00064272  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000125c3  00000000  00000000  00071d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003dc8  00000000  00000000  000842e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00005479  00000000  00000000  000880b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00025c18  00000000  00000000  0008d529  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  000b3144  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000019b8  00000000  00000000  000b3168  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000b983e  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000b9841  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000b984d  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000b984e  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000b984f  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000b985a  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000b9865  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  000b9870  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000045  00000000  00000000  000b987b  2**0
                  CONTENTS, READONLY
 26 .jdi          00004b4c  00000000  00000000  000b98c0  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0006f74b  00000000  00000000  000be40c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
080200b0 l    d  .rodata	00000000 .rodata
0802b118 l    d  .rwdata	00000000 .rwdata
0802e818 l    d  .bss	00000000 .bss
0802ebec l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../NeverLost_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 NeverLostMain.c
00000000 l    df *ABS*	00000000 RS232.c
00000000 l    df *ABS*	00000000 wifi.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 w_asin.c
00000000 l    df *ABS*	00000000 w_atan2.c
00000000 l    df *ABS*	00000000 w_fmod.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 w_sqrt.c
00000000 l    df *ABS*	00000000 e_asin.c
00000000 l    df *ABS*	00000000 e_atan2.c
00000000 l    df *ABS*	00000000 e_fmod.c
0802a888 l     O .rodata	00000010 Zero
00000000 l    df *ABS*	00000000 e_pow.c
0802a8b8 l     O .rodata	00000010 bp
0802a898 l     O .rodata	00000010 dp_l
0802a8a8 l     O .rodata	00000010 dp_h
00000000 l    df *ABS*	00000000 e_rem_pio2.c
0802a948 l     O .rodata	00000108 two_over_pi
0802a8c8 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
0802aa90 l     O .rodata	00000010 init_jk
0802aa50 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_atan.c
0802aac0 l     O .rodata	00000020 atanhi
0802aaa0 l     O .rodata	00000020 atanlo
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
0802aae0 l     O .rodata	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800a89c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 atof.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 impure.c
0802b140 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtod.c
0802b980 l     O .rwdata	00000014 fpi.2638
0802ac04 l     O .rodata	00000028 tinytens
0802b96c l     O .rwdata	00000014 fpinan.2674
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 vfprintf.c
0802ac6e l     O .rodata	00000010 zeroes.4166
0802ac7e l     O .rodata	00000010 blanks.4165
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 vfprintf.c
0802ac8e l     O .rodata	00000010 zeroes.4181
0802ac9e l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 ctype_.c
0802adaf l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 dtoa.c
08013f28 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08015aa8 l     F .text	00000008 __fp_lock
08015ab0 l     F .text	00000008 __fp_unlock
08015ac4 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gdtoa-gethex.c
080163cc l     F .text	00000100 rshift
00000000 l    df *ABS*	00000000 gdtoa-hexnan.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0802b9b4 l     O .rwdata	00000020 lc_ctype_charset
0802b994 l     O .rwdata	00000020 lc_message_charset
0802b9d4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0802af68 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0802b08c l     O .rodata	00000010 zeroes.4110
0802b09c l     O .rodata	00000010 blanks.4109
00000000 l    df *ABS*	00000000 vfprintf.c
08019b54 l     F .text	000000fc __sprint_r.part.0
0802b0bc l     O .rodata	00000010 blanks.4125
0802b0ac l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0801d30c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0801d42c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0801d458 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0801d74c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0801d840 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0801d924 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0801db00 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0802cc88 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0801def8 l     F .text	00000038 alt_dev_reg
0802bbb4 l     O .rwdata	00001060 jtag_uart_0
0802cc14 l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0801e1fc l     F .text	00000204 altera_avalon_jtag_uart_irq
0801e400 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0801ea20 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0801f150 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0801f68c l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0801f7c4 l     F .text	00000050 alt_get_errno
0801f814 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
0800df1c g     F .text	00000018 putchar
08018448 g     F .text	00000074 _mprec_log10
08018534 g     F .text	0000008c __any_on
0801bab8 g     F .text	00000054 _isatty_r
0802af74 g     O .rodata	00000028 __mprec_tinytens
0801da48 g     F .text	00000078 alt_main
0800e334 g     F .text	00000090 strcpy
080011f8 g     F .text	000002e4 drawBox1
0802eaec g     O .bss	00000100 alt_irq
0800a418 g     F .text	00000014 fabs
0801bb0c g     F .text	0000005c _lseek_r
0800603c g     F .text	00000130 sqrt
0802cc98 g       *ABS*	00000000 __flash_rwdata_start
08002a84 g     F .text	000000fc gps
0801eb90 g     F .text	0000003c alt_up_character_lcd_send_cmd
0800c010 g     F .text	00000084 .hidden __eqdf2
08003594 g     F .text	0000009c init_gps
08017000 g     F .text	00000058 _gettimeofday_r
08000b90 g     F .text	0000007c ProgramPalette
0800532c g     F .text	00000088 rs232_send_string
08003cb4 g     F .text	00000040 drawYaxis
0802ebec g       *ABS*	00000000 __alt_heap_start
0800fb6c g     F .text	00000008 strtok_r
0800415c g     F .text	00000078 computeAve
0800ded8 g     F .text	0000003c printf
0802034a g     O .rodata	00000a64 Font10x14
0801c2c0 g     F .text	0000009c _wcrtomb_r
08000d20 g     F .text	00000074 DrawVlineWeighted
08018800 g     F .text	0000005c __sseek
08015df8 g     F .text	00000010 __sinit
08003a64 g     F .text	0000003c initRS232HR
0801afe8 g     F .text	00000154 __swbuf_r
08017058 g     F .text	0000007c _setlocale_r
08015c64 g     F .text	00000064 __sfmoreglue
0801dae0 g     F .text	00000020 __malloc_unlock
0800e45c g     F .text	00001540 _strtod_r
0802e898 g     O .bss	00000014 default_loc
080048cc g     F .text	00000188 menu
080033d4 g     F .text	000001c0 scan_line
0801bb68 g     F .text	0000015c memmove
08015de0 g     F .text	00000018 _cleanup
0800e060 g     F .text	000000e4 snprintf
08017634 g     F .text	000000a8 _Balloc
0800fad4 g     F .text	00000098 __strtok_r
08000948 g     F .text	000000b4 getPressTime
080006c4 g     F .text	00000050 screenTouched
08003178 g     F .text	0000025c draw_radar
0800c094 g     F .text	000000e0 .hidden __gtdf2
0800d6cc g     F .text	00000010 __errno
0801eb1c g     F .text	00000074 get_DDRAM_addr
08004530 g     F .text	00000150 symbolGPS
08000000 g     F .entry	0000001c __reset
0802cc48 g     O .rwdata	00000004 historical_average
08000020 g       *ABS*	00000000 __flash_exceptions_start
08001984 g     F .text	000001cc drawcircle
0801b5bc g     F .text	00000058 _fstat_r
08006bd8 g     F .text	00000330 __ieee754_fmod
0802e838 g     O .bss	00000004 errno
08005630 g     F .text	000001f4 floor
0801877c g     F .text	00000008 __seofread
08018aec g     F .text	00001068 ___svfiprintf_internal_r
0802e85c g     O .bss	00000004 alt_argv
08034c40 g       *ABS*	00000000 _gp
08000a40 g     F .text	00000044 getRelease
08005404 g     F .text	00000050 rs232_print_response
0802ba34 g     O .rwdata	00000180 alt_fd_list
08007fd4 g     F .text	0000079c __ieee754_rem_pio2
0800df14 g     F .text	00000008 _putchar_r
0801f2fc g     F .text	00000090 alt_find_dev
080173d8 g     F .text	00000138 memcpy
08016d6c g     F .text	00000294 __hexnan
08004344 g     F .text	00000038 update_HistAVE
0801ed2c g     F .text	00000050 alt_up_character_lcd_write_fd
080028d8 g     F .text	000000b0 concat2
080003a4 g     F .text	00000190 OutGraphicsCharFont2a
08015ab8 g     F .text	0000000c _cleanup_r
0800d2d0 g     F .text	000000d0 .hidden __floatsidf
0801f74c g     F .text	00000078 alt_io_redirect
0800c174 g     F .text	000000e0 .hidden __ltdf2
080200b0 g       *ABS*	00000000 __DTOR_END__
08000534 g     F .text	0000003c initRS232Touch
08003ae4 g     F .text	0000004c putCharRS232HR
0800a448 g     F .text	00000074 __fpclassifyd
080183a4 g     F .text	000000a4 __ratio
0801afc4 g     F .text	00000024 __vfiprintf_internal
080021cc g     F .text	00000098 space2
0801e5fc g     F .text	0000020c altera_avalon_jtag_uart_read
0800d6dc g     F .text	00000014 malloc
0800deac g     F .text	0000002c _printf_r
0800a9b8 g     F .text	00000008 .hidden __udivsi3
0801d79c g     F .text	000000a4 isatty
0802afc4 g     O .rodata	000000c8 __mprec_tens
0802e818 g     O .bss	00000004 hr_index
08024e40 g     O .rodata	00005794 Font38x59
080170d4 g     F .text	0000000c __locale_charset
08008a04 g     F .text	000004a4 __kernel_cos
0801d1b0 g     F .text	000000b8 .hidden __lesf2
0802e848 g     O .bss	00000008 alt_timezone
0801c4c0 g     F .text	00000074 .hidden __fixunsdfsi
0801fc20 g     F .text	0000008c alt_icache_flush
0802e834 g     O .bss	00000004 __malloc_top_pad
08000cac g     F .text	00000074 DrawHlineWeighted
0802cc68 g     O .rwdata	00000004 __mb_cur_max
08002988 g     F .text	000000fc itoa
08017104 g     F .text	0000000c _localeconv_r
0801b614 g     F .text	000004a4 __sfvwrite_r
08017a34 g     F .text	0000003c __i2b
08003f18 g     F .text	0000002c hr_calx
0800df34 g     F .text	00000054 _sbrk_r
0801bcc4 g     F .text	0000005c _read_r
0802cc80 g     O .rwdata	00000004 alt_max_fd
0801b2cc g     F .text	00000100 _fclose_r
08015a78 g     F .text	00000030 fflush
08003bbc g     F .text	000000b8 getHR
0802e830 g     O .bss	00000004 __malloc_max_sbrked_mem
08009bd0 g     F .text	000002c8 __kernel_sin
0800d3a0 g     F .text	00000110 .hidden __extendsfdf2
0800aea8 g     F .text	0000089c .hidden __adddf3
0801d084 g     F .text	00000074 .hidden __nesf2
08003c74 g     F .text	00000040 drawXaxis
0801814c g     F .text	0000011c __b2d
0801caf4 g     F .text	00000590 .hidden __umoddi3
0801d974 g     F .text	000000d4 lseek
0802cc50 g     O .rwdata	00000004 __fdlib_version
0802cc54 g     O .rwdata	00000004 _global_impure_ptr
080022c8 g     F .text	00000078 concat
0801bd20 g     F .text	000005a0 _realloc_r
0802ebec g       *ABS*	00000000 __bss_end
0801f59c g     F .text	000000f0 alt_iic_isr_register
0801ddf4 g     F .text	00000104 alt_tick
0802e9ec g     O .bss	00000100 __hexdig
0801c534 g     F .text	000005c0 .hidden __udivdi3
0801b3e0 g     F .text	00000184 _fputwc_r
0802af9c g     O .rodata	00000028 __mprec_bigtens
08017818 g     F .text	00000104 __s2b
0801d268 g     F .text	000000a4 .hidden __floatunsidf
08017ef4 g     F .text	00000060 __mcmp
08002040 g     F .text	000000f4 keyPad
08015e18 g     F .text	00000018 __fp_lock_all
0801f550 g     F .text	0000004c alt_ic_irq_enabled
08005454 g     F .text	00000048 rs232_get_char
0801dd5c g     F .text	00000098 alt_alarm_stop
08020dae g     O .rodata	0000140a Font16x27
0800fdd4 g     F .text	00000024 strtol
0802e86c g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
0802ba0c g     O .rwdata	00000028 alt_dev_null
08000e34 g     F .text	000000a0 Drawline
08008ea8 g     F .text	00000d28 __kernel_rem_pio2
080001f8 g     F .text	000001ac OutGraphicsCharFont1
0800a4d0 g     F .text	000001e4 rint
080043b4 g     F .text	00000088 healthB
0801efc0 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
08004680 g     F .text	000000d8 symbolHELP
0802cc4c g     O .rwdata	00000004 historical_SD
0801f134 g     F .text	0000001c alt_dcache_flush_all
0801791c g     F .text	00000068 __hi0bits
0800d248 g     F .text	00000088 .hidden __fixdfsi
0802e81c g     O .bss	00000004 Average
0802e820 g     O .bss	00000004 GPS_index
0800549c g     F .text	00000030 rs232_check_if_received_data
080052f0 g     F .text	0000003c rs232_init
0800f99c g     F .text	0000001c strtod
0802cc98 g       *ABS*	00000000 __ram_rwdata_end
0802cc78 g     O .rwdata	00000008 alt_dev_list
080010a0 g     F .text	000000ac write
080185c0 g     F .text	000000a0 _putc_r
08006904 g     F .text	000002d4 __ieee754_atan2
0800d6ac g     F .text	00000008 atof
0801d0f8 g     F .text	000000b8 .hidden __gtsf2
08003b7c g     F .text	00000040 getHRData
0802b118 g       *ABS*	00000000 __ram_rodata_end
0801d4a8 g     F .text	000000b0 fstat
0800c174 g     F .text	000000e0 .hidden __ledf2
0800e208 g     F .text	00000088 strcat
08000664 g     F .text	00000030 waitForTouch
08017c6c g     F .text	00000140 __pow5mult
08019c68 g     F .text	0000135c ___vfiprintf_internal_r
0802e844 g     O .bss	00000004 __nlocale_changed
0800a9c0 g     F .text	00000008 .hidden __umodsi3
0802e8ac g     O .bss	00000050 HR_data
0802ebec g       *ABS*	00000000 end
0800d6c0 g     F .text	0000000c _atoi_r
08004314 g     F .text	00000030 alert
0801e138 g     F .text	000000c4 altera_avalon_jtag_uart_init
0800616c g     F .text	00000798 __ieee754_asin
080200b0 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0801ea94 g     F .text	00000088 alt_avalon_timer_sc_init
0800d648 g     F .text	00000064 .hidden __clzsi2
0800df88 g     F .text	000000d8 _snprintf_r
08005a40 g     F .text	00000158 fmod
0801e808 g     F .text	00000218 altera_avalon_jtag_uart_write
08005544 g     F .text	000000ec cos
08000d94 g     F .text	000000a0 DrawVline
08015e08 g     F .text	00000004 __sfp_lock_acquire
080172f0 g     F .text	000000e8 memchr
08001004 g     F .text	00000058 waitFor
0801ec40 g     F .text	00000078 alt_up_character_lcd_write
08011dd8 g     F .text	00001ffc ___vfprintf_internal_r
0800e144 g     F .text	00000058 _sprintf_r
08015f6c g     F .text	000002f0 _free_r
080170e0 g     F .text	00000010 __locale_mb_cur_max
0802b118 g     O .rwdata	00000028 WIFI_MESSAGE_DEPENDENT_IS_SAFE
0801fe88 g     F .text	00000194 __call_exitprocs
080041d4 g     F .text	00000140 computeSD
0802e840 g     O .bss	00000004 __mlocale_changed
0802cc5c g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
0802e864 g     O .bss	00000004 _alt_tick_rate
08002c10 g     F .text	0000023c latlng_heading
08005824 g     F .text	000000f0 sin
08017dac g     F .text	00000148 __lshift
080007b8 g     F .text	0000015c getPoint
08003734 g     F .text	000002a8 drawLocation
0800190c g     F .text	00000078 touchBox
08005a3c g     F .text	00000004 atan2
0802e868 g     O .bss	00000004 _alt_nticks
0801db50 g     F .text	000000fc read
0801df64 g     F .text	00000070 alt_sys_init
0801ee78 g     F .text	00000088 alt_up_character_lcd_shift_display
08018924 g     F .text	000001c8 __ssprint_r
08004758 g     F .text	00000174 cross
08000c0c g     F .text	000000a0 DrawHline
0801fd74 g     F .text	00000114 __register_exitproc
08018864 g     F .text	000000c0 strncmp
08002134 g     F .text	00000098 space
08000570 g     F .text	00000044 getCharRS232Touch
08017a70 g     F .text	000001fc __multiply
0801ef00 g     F .text	0000008c alt_up_character_lcd_erase_pos
08006f08 g     F .text	000010cc __ieee754_pow
0801e4a8 g     F .text	00000068 altera_avalon_jtag_uart_close
08005b98 g     F .text	000004a4 pow
0802b118 g       *ABS*	00000000 __ram_rwdata_start
080200b0 g       *ABS*	00000000 __ram_rodata_start
0802e870 g     O .bss	00000028 __malloc_current_mallinfo
0801d084 g     F .text	00000074 .hidden __eqsf2
08018268 g     F .text	0000013c __d2b
080039dc g     F .text	00000088 gpsB
080005b4 g     F .text	0000004c putCharRS232Touch
0801dfd4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0801fb6c g     F .text	000000b4 alt_get_fd
0801b1b4 g     F .text	00000054 _close_r
0800fabc g     F .text	00000018 strtok
08001b50 g     F .text	000001ac drawSolidcircle
0801fcf8 g     F .text	0000007c memcmp
0801e094 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0800437c g     F .text	00000038 update_HistSD
0802ebec g       *ABS*	00000000 __alt_stack_base
0801e0e4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08013df8 g     F .text	00000130 __swsetup_r
0800b744 g     F .text	000008cc .hidden __divdf3
08015cc8 g     F .text	00000118 __sfp
080184bc g     F .text	00000078 __copybits
0802e8fc g     O .bss	000000a0 GPS_data
0802b564 g     O .rwdata	00000408 __malloc_av_
08015e14 g     F .text	00000004 __sinit_lock_release
0800c254 g     F .text	00000724 .hidden __muldf3
08018728 g     F .text	00000054 __sread
0801fa58 g     F .text	00000114 alt_find_file
0801f1a0 g     F .text	000000a4 alt_dev_llist_insert
0801dac0 g     F .text	00000020 __malloc_lock
0801dcac g     F .text	000000b0 sbrk
0800fdf8 g     F .text	00001f90 ___svfprintf_internal_r
08015850 g     F .text	00000228 _fflush_r
0801b208 g     F .text	000000c4 _calloc_r
0800237c g     F .text	00000044 getCharRS232GPS
0801d558 g     F .text	000001f4 gettimeofday
08000914 g     F .text	00000034 getTime
0802e818 g       *ABS*	00000000 __bss_start
08017510 g     F .text	00000124 memset
08004ab0 g     F .text	00000840 main
08003f44 g     F .text	0000005c fresh_hr
0802e99c g     O .bss	00000050 HR_plotdata
0802e860 g     O .bss	00000004 alt_envp
0802e82c g     O .bss	00000004 __malloc_max_total_mem
0801e034 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0801b13c g     F .text	0000001c __swbuf
0801d1b0 g     F .text	000000b8 .hidden __ltsf2
08000b00 g     F .text	00000090 ReadAPixel
0801edf0 g     F .text	00000088 alt_up_character_lcd_shift_cursor
0801885c g     F .text	00000008 __sclose
0800a4bc g     F .text	00000008 matherr
0c000000 g       *ABS*	00000000 __alt_heap_limit
0801b3cc g     F .text	00000014 fclose
0800fb74 g     F .text	00000260 _strtol_r
0800d4b0 g     F .text	00000198 .hidden __truncdfsf2
08014128 g     F .text	00001728 _dtoa_r
0800d704 g     F .text	000007a8 _malloc_r
0801c434 g     F .text	00000030 __ascii_wctomb
08011d88 g     F .text	00000050 time
0802cc84 g     O .rwdata	00000004 alt_errno
0801625c g     F .text	000000b8 _fwalk
08000714 g     F .text	00000058 screenReleased
080014dc g     F .text	00000430 drawBox2
08018660 g     F .text	000000c8 putc
0800a908 g     F .text	00000054 .hidden __divsi3
0801ec00 g     F .text	00000040 alt_up_character_lcd_open_dev
08015e48 g     F .text	00000124 _malloc_trim_r
080200b0 g       *ABS*	00000000 __CTOR_END__
0800a42c g     F .text	0000001c finite
0801ebcc g     F .text	00000034 alt_up_character_lcd_init
0800e290 g     F .text	000000a4 strcmp
08003e38 g     F .text	000000e0 graph_hr_wait
080200b0 g       *ABS*	00000000 __flash_rodata_start
080200b0 g       *ABS*	00000000 __DTOR_LIST__
08000694 g     F .text	00000030 waitForRelease
0800a880 g     F .text	0000001c copysign
0800c010 g     F .text	00000084 .hidden __nedf2
08004040 g     F .text	0000011c drawLabel
0801df30 g     F .text	00000034 alt_irq_init
0801dc4c g     F .text	00000060 alt_release_fd
08009e98 g     F .text	00000580 atan
080054fc g     F .text	00000048 wifi_send_sms
0800e19c g     F .text	0000006c sprintf
0801ef8c g     F .text	00000034 alt_up_character_lcd_cursor_off
0802aaf0 g     O .rodata	00000100 .hidden __clz_tab
0802e83c g     O .bss	00000004 _PathLocale
08004a54 g     F .text	0000005c exitB
0800f9b8 g     F .text	00000104 strtof
0801fcac g     F .text	00000014 atexit
0800240c g     F .text	000004cc getGPSdata
0801d0f8 g     F .text	000000b8 .hidden __gesf2
0801b158 g     F .text	0000005c _write_r
08005914 g     F .text	00000128 asin
08017110 g     F .text	0000001c setlocale
0802e824 g     O .bss	00000004 SD
080023c0 g     F .text	0000004c putCharRS232GPS
0802cc58 g     O .rwdata	00000004 _impure_ptr
0802e858 g     O .bss	00000004 alt_argc
08000a84 g     F .text	0000007c WriteAPixel
0800a6b4 g     F .text	000001cc scalbn
0801f2a0 g     F .text	0000005c _do_dtors
080170fc g     F .text	00000008 __locale_cjk_lang
0802e828 g     O .bss	00000004 scan_angle
080200b0 g     O .rodata	00000299 Font5x7
08000020 g       .exceptions	00000000 alt_irq_entry
0802cc40 g     O .rwdata	00000004 speed
080180ec g     F .text	00000060 __ulp
08015e30 g     F .text	00000018 __fp_unlock_all
0802cc70 g     O .rwdata	00000008 alt_fs_list
08002b80 g     F .text	00000090 toRadians
08002e4c g     F .text	0000032c latlng_distance
080009fc g     F .text	00000044 getPress
0802e850 g     O .bss	00000008 alt_resettime
0800a4c4 g     F .text	0000000c nan
08000020 g       *ABS*	00000000 __ram_exceptions_start
0801712c g     F .text	0000000c localeconv
08008770 g     F .text	00000294 __ieee754_sqrt
08003aa0 g     F .text	00000044 getCharRS232HR
08001cfc g     F .text	00000344 prompt
0801f3bc g     F .text	00000050 alt_ic_isr_register
080164cc g     F .text	00000084 __hexdig_init
0802cc98 g       *ABS*	00000000 _edata
08003fa0 g     F .text	000000a0 init_hr
0802ebec g       *ABS*	00000000 _end
080001bc g       *ABS*	00000000 __ram_exceptions_end
080054cc g     F .text	00000030 wifi_init
0801e510 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0801f4ac g     F .text	000000a4 alt_ic_irq_disable
08002340 g     F .text	0000003c initRS232GPS
08018784 g     F .text	0000007c __swrite
0802cc60 g     O .rwdata	00000004 __malloc_trim_threshold
0801fa38 g     F .text	00000020 altera_nios2_qsys_irq_init
080170f0 g     F .text	0000000c __locale_msgcharset
0801fcc0 g     F .text	00000038 exit
08016314 g     F .text	000000b8 _fwalk_reent
08017f54 g     F .text	00000198 __mdiff
08002264 g     F .text	00000064 append
08000ed4 g     F .text	0000008c DrawSolidRectangle
080053b4 g     F .text	00000050 rs232_send_char
0800a95c g     F .text	0000005c .hidden __modsi3
0802cc64 g     O .rwdata	00000004 __ctype_ptr__
08003630 g     F .text	00000104 computeLoc
08003b30 g     F .text	0000004c waitChar
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08015e0c g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
0801ecb8 g     F .text	00000074 alt_up_character_lcd_string
0800d6b4 g     F .text	0000000c atoi
0802acae g     O .rodata	00000101 _ctype_
080221b8 g     O .rodata	00002c88 Font22x40
0802007c g     F .text	00000034 _exit
0801eff4 g     F .text	00000140 alt_alarm_start
0802001c g     F .text	00000060 .hidden __muldi3
08017138 g     F .text	000001b8 __smakebuf_r
0800e3c4 g     F .text	00000098 strlen
0801f8e0 g     F .text	00000158 open
0800c094 g     F .text	000000e0 .hidden __gedf2
08016550 g     F .text	0000081c __gethex
0800105c g     F .text	00000044 clearScreen
0802cc6c g     O .rwdata	00000004 __wctomb
08000f60 g     F .text	000000a4 DrawRectangle
08019c50 g     F .text	00000018 __sprint_r
0801f38c g     F .text	00000030 alt_icache_flush_all
0800114c g     F .text	000000ac writeSmall
08003cf4 g     F .text	00000144 graph_hr
0801ed7c g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
0802cc94 g     O .rwdata	00000004 alt_priority_mask
0801f40c g     F .text	000000a0 alt_ic_irq_enable
08013dd4 g     F .text	00000024 __vfprintf_internal
0801c464 g     F .text	0000005c _wctomb_r
0800443c g     F .text	000000f4 menuBox
0800c978 g     F .text	000008d0 .hidden __subdf3
08017984 g     F .text	000000b0 __lo0bits
0802cc8c g     O .rwdata	00000008 alt_alarm_list
0801f244 g     F .text	0000005c _do_ctors
0802cc44 g     O .rwdata	00000004 HR_MAX
0801c35c g     F .text	000000d8 wcrtomb
0801d35c g     F .text	000000d0 close
0800a9c8 g     F .text	000004e0 .hidden __addsf3
0801d8a4 g     F .text	00000080 alt_load
0800076c g     F .text	0000004c check_bounds
08000600 g     F .text	00000064 initTouchScreen
0801b564 g     F .text	00000058 fputwc
0800d6f0 g     F .text	00000014 free
08015e10 g     F .text	00000004 __sinit_lock_acquire
08017704 g     F .text	00000114 __multadd
080176dc g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406f14 	ori	at,at,444
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_sdram-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	008200f4 	movhi	r2,2051
 8000130:	10babb04 	addi	r2,r2,-5396
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	008200f4 	movhi	r2,2051
 8000148:	10babb04 	addi	r2,r2,-5396
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	068200f4 	movhi	gp,2051
    ori gp, gp, %lo(_gp)
 80001c8:	d6931014 	ori	gp,gp,19520
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	008200b4 	movhi	r2,2050
    ori r2, r2, %lo(__bss_start)
 80001d0:	10ba0614 	ori	r2,r2,59416

    movhi r3, %hi(__bss_end)
 80001d4:	00c200b4 	movhi	r3,2050
    ori r3, r3, %lo(__bss_end)
 80001d8:	18fafb14 	ori	r3,r3,60396

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	801d8a40 	call	801d8a4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	801da480 	call	801da48 <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <OutGraphicsCharFont1>:
#define YRES 480
#define TRUE 1
#include "Fonts.h"

void OutGraphicsCharFont1(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 80001f8:	defff204 	addi	sp,sp,-56
 80001fc:	dfc00d15 	stw	ra,52(sp)
 8000200:	df000c15 	stw	fp,48(sp)
 8000204:	ddc00b15 	stw	r23,44(sp)
 8000208:	dd800a15 	stw	r22,40(sp)
 800020c:	dd400915 	stw	r21,36(sp)
 8000210:	dd000815 	stw	r20,32(sp)
 8000214:	dcc00715 	stw	r19,28(sp)
 8000218:	dc800615 	stw	r18,24(sp)
 800021c:	dc400515 	stw	r17,20(sp)
 8000220:	dc000415 	stw	r16,16(sp)
 8000224:	df000c04 	addi	fp,sp,48
 8000228:	e13ff415 	stw	r4,-48(fp)
 800022c:	e17ff515 	stw	r5,-44(fp)
 8000230:	e1bff615 	stw	r6,-40(fp)
 8000234:	e1fff715 	stw	r7,-36(fp)
// using register variables (as opposed to stack based ones) may make execution faster
// depends on compiler and CPU

	register int row, column, theX = x, theY = y ;
 8000238:	e53ff417 	ldw	r20,-48(fp)
 800023c:	e57ff517 	ldw	r21,-44(fp)
	register int pixels ;
	register char theColour = fontcolour  ;
 8000240:	e0bff617 	ldw	r2,-40(fp)
 8000244:	102f883a 	mov	r23,r2
	register int BitMask, theC = c ;
 8000248:	e4400217 	ldw	r17,8(fp)

// if x,y coord off edge of screen don't bother
// XRES and YRES are #defined to be 800 and 480 respectively
    if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
 800024c:	e0bff417 	ldw	r2,-48(fp)
 8000250:	10bfffcc 	andi	r2,r2,65535
 8000254:	10a0001c 	xori	r2,r2,32768
 8000258:	10a00004 	addi	r2,r2,-32768
 800025c:	1080c808 	cmpgei	r2,r2,800
 8000260:	1000061e 	bne	r2,zero,800027c <OutGraphicsCharFont1+0x84>
 8000264:	e0bff517 	ldw	r2,-44(fp)
 8000268:	10bfffcc 	andi	r2,r2,65535
 800026c:	10a0001c 	xori	r2,r2,32768
 8000270:	10a00004 	addi	r2,r2,-32768
 8000274:	10807810 	cmplti	r2,r2,480
 8000278:	1000011e 	bne	r2,zero,8000280 <OutGraphicsCharFont1+0x88>
        return ;
 800027c:	00003c06 	br	8000370 <OutGraphicsCharFont1+0x178>


// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
 8000280:	8805883a 	mov	r2,r17
 8000284:	10bfffcc 	andi	r2,r2,65535
 8000288:	10a0001c 	xori	r2,r2,32768
 800028c:	10a00004 	addi	r2,r2,-32768
 8000290:	10800810 	cmplti	r2,r2,32
 8000294:	1000361e 	bne	r2,zero,8000370 <OutGraphicsCharFont1+0x178>
 8000298:	8805883a 	mov	r2,r17
 800029c:	10bfffcc 	andi	r2,r2,65535
 80002a0:	10a0001c 	xori	r2,r2,32768
 80002a4:	10a00004 	addi	r2,r2,-32768
 80002a8:	10801fc8 	cmpgei	r2,r2,127
 80002ac:	1000301e 	bne	r2,zero,8000370 <OutGraphicsCharFont1+0x178>
		theC = theC - 0x20 ;
 80002b0:	8c7ff804 	addi	r17,r17,-32
		for(row = 0; (char)(row) < (char)(7); row ++)	{
 80002b4:	0021883a 	mov	r16,zero
 80002b8:	00002706 	br	8000358 <OutGraphicsCharFont1+0x160>

// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row] ;
 80002bc:	008200b4 	movhi	r2,2050
 80002c0:	10802c04 	addi	r2,r2,176
 80002c4:	88c001e4 	muli	r3,r17,7
 80002c8:	1c07883a 	add	r3,r3,r16
 80002cc:	10c5883a 	add	r2,r2,r3
 80002d0:	10800003 	ldbu	r2,0(r2)
 80002d4:	15803fcc 	andi	r22,r2,255
			BitMask = 16 ;
 80002d8:	04c00404 	movi	r19,16

			for(column = 0; (char)(column) < (char)(5); column ++)	{
 80002dc:	0025883a 	mov	r18,zero
 80002e0:	00001606 	br	800033c <OutGraphicsCharFont1+0x144>

// if a pixel in the character display it
				if((pixels & BitMask))
 80002e4:	b4c4703a 	and	r2,r22,r19
 80002e8:	10000926 	beq	r2,zero,8000310 <OutGraphicsCharFont1+0x118>
					WriteAPixel(theX+column, theY+row, theColour) ;
 80002ec:	a489883a 	add	r4,r20,r18
 80002f0:	ac07883a 	add	r3,r21,r16
 80002f4:	b8803fcc 	andi	r2,r23,255
 80002f8:	1080201c 	xori	r2,r2,128
 80002fc:	10bfe004 	addi	r2,r2,-128
 8000300:	180b883a 	mov	r5,r3
 8000304:	100d883a 	mov	r6,r2
 8000308:	8000a840 	call	8000a84 <WriteAPixel>
 800030c:	00000906 	br	8000334 <OutGraphicsCharFont1+0x13c>

				else {
					if(Erase == TRUE)
 8000310:	e0800317 	ldw	r2,12(fp)
 8000314:	10800058 	cmpnei	r2,r2,1
 8000318:	1000061e 	bne	r2,zero,8000334 <OutGraphicsCharFont1+0x13c>

// if pixel is part of background (not part of character)
// erase the background to value of variable BackGroundColour

						WriteAPixel(theX+column, theY+row, backgroundcolour) ;
 800031c:	a487883a 	add	r3,r20,r18
 8000320:	ac05883a 	add	r2,r21,r16
 8000324:	1809883a 	mov	r4,r3
 8000328:	100b883a 	mov	r5,r2
 800032c:	e1bff717 	ldw	r6,-36(fp)
 8000330:	8000a840 	call	8000a84 <WriteAPixel>
				}
				BitMask = BitMask >> 1 ;
 8000334:	9827d07a 	srai	r19,r19,1

// get the bit pattern for row 0 of the character from the software font
			pixels = Font5x7[theC][row] ;
			BitMask = 16 ;

			for(column = 0; (char)(column) < (char)(5); column ++)	{
 8000338:	94800044 	addi	r18,r18,1
 800033c:	9005883a 	mov	r2,r18
 8000340:	10803fcc 	andi	r2,r2,255
 8000344:	1080201c 	xori	r2,r2,128
 8000348:	10bfe004 	addi	r2,r2,-128
 800034c:	10800150 	cmplti	r2,r2,5
 8000350:	103fe41e 	bne	r2,zero,80002e4 <__alt_data_end+0xfc0002e4>


// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(7); row ++)	{
 8000354:	84000044 	addi	r16,r16,1
 8000358:	8005883a 	mov	r2,r16
 800035c:	10803fcc 	andi	r2,r2,255
 8000360:	1080201c 	xori	r2,r2,128
 8000364:	10bfe004 	addi	r2,r2,-128
 8000368:	108001d0 	cmplti	r2,r2,7
 800036c:	103fd31e 	bne	r2,zero,80002bc <__alt_data_end+0xfc0002bc>
				}
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 8000370:	e6fff804 	addi	sp,fp,-32
 8000374:	dfc00917 	ldw	ra,36(sp)
 8000378:	df000817 	ldw	fp,32(sp)
 800037c:	ddc00717 	ldw	r23,28(sp)
 8000380:	dd800617 	ldw	r22,24(sp)
 8000384:	dd400517 	ldw	r21,20(sp)
 8000388:	dd000417 	ldw	r20,16(sp)
 800038c:	dcc00317 	ldw	r19,12(sp)
 8000390:	dc800217 	ldw	r18,8(sp)
 8000394:	dc400117 	ldw	r17,4(sp)
 8000398:	dc000017 	ldw	r16,0(sp)
 800039c:	dec00a04 	addi	sp,sp,40
 80003a0:	f800283a 	ret

080003a4 <OutGraphicsCharFont2a>:
** OutGraphicsCharFont2(100,100, RED, 'A', TRUE, FALSE, 1, 1) ;	// display upper case 'A' in RED at coords 100,100, erase background
** no scroll, scale x,y= 1,1
**
******************************************************************************************************************************/
void OutGraphicsCharFont2a(int x, int y, int colour, int backgroundcolour, int c, int Erase)
{
 80003a4:	defff004 	addi	sp,sp,-64
 80003a8:	dfc00f15 	stw	ra,60(sp)
 80003ac:	df000e15 	stw	fp,56(sp)
 80003b0:	ddc00d15 	stw	r23,52(sp)
 80003b4:	dd800c15 	stw	r22,48(sp)
 80003b8:	dd400b15 	stw	r21,44(sp)
 80003bc:	dd000a15 	stw	r20,40(sp)
 80003c0:	dcc00915 	stw	r19,36(sp)
 80003c4:	dc800815 	stw	r18,32(sp)
 80003c8:	dc400715 	stw	r17,28(sp)
 80003cc:	dc000615 	stw	r16,24(sp)
 80003d0:	df000e04 	addi	fp,sp,56
 80003d4:	e13ff215 	stw	r4,-56(fp)
 80003d8:	e17ff315 	stw	r5,-52(fp)
 80003dc:	e1bff415 	stw	r6,-48(fp)
 80003e0:	e1fff515 	stw	r7,-44(fp)
	register int 	row,
					column,
					theX = x,
 80003e4:	e53ff217 	ldw	r20,-56(fp)
					theY = y ;
 80003e8:	e57ff317 	ldw	r21,-52(fp)
	register int 	pixels ;
	register char 	theColour = colour  ;
 80003ec:	e0bff417 	ldw	r2,-48(fp)
 80003f0:	e0bff605 	stb	r2,-40(fp)
	register int 	BitMask,
					theCharacter = c,
 80003f4:	e4800217 	ldw	r18,8(fp)
					j,
					theRow, theColumn;

    if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))  // if start off edge of screen don't bother
 80003f8:	e0bff217 	ldw	r2,-56(fp)
 80003fc:	10bfffcc 	andi	r2,r2,65535
 8000400:	10a0001c 	xori	r2,r2,32768
 8000404:	10a00004 	addi	r2,r2,-32768
 8000408:	1080c808 	cmpgei	r2,r2,800
 800040c:	1000061e 	bne	r2,zero,8000428 <OutGraphicsCharFont2a+0x84>
 8000410:	e0bff317 	ldw	r2,-52(fp)
 8000414:	10bfffcc 	andi	r2,r2,65535
 8000418:	10a0001c 	xori	r2,r2,32768
 800041c:	10a00004 	addi	r2,r2,-32768
 8000420:	10807810 	cmplti	r2,r2,480
 8000424:	1000011e 	bne	r2,zero,800042c <OutGraphicsCharFont2a+0x88>
        return ;
 8000428:	00003506 	br	8000500 <OutGraphicsCharFont2a+0x15c>

	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
 800042c:	9005883a 	mov	r2,r18
 8000430:	10bfffcc 	andi	r2,r2,65535
 8000434:	10a0001c 	xori	r2,r2,32768
 8000438:	10a00004 	addi	r2,r2,-32768
 800043c:	10800810 	cmplti	r2,r2,32
 8000440:	10002f1e 	bne	r2,zero,8000500 <OutGraphicsCharFont2a+0x15c>
 8000444:	9005883a 	mov	r2,r18
 8000448:	10bfffcc 	andi	r2,r2,65535
 800044c:	10a0001c 	xori	r2,r2,32768
 8000450:	10a00004 	addi	r2,r2,-32768
 8000454:	10801fc8 	cmpgei	r2,r2,127
 8000458:	1000291e 	bne	r2,zero,8000500 <OutGraphicsCharFont2a+0x15c>
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
 800045c:	94bff804 	addi	r18,r18,-32
		theRow = FONT2_YPIXELS;
 8000460:	05800384 	movi	r22,14
		theColumn = FONT2_XPIXELS;
 8000464:	05c00284 	movi	r23,10

		for(row = 0; row < theRow ; row ++)	{
 8000468:	0021883a 	mov	r16,zero
 800046c:	00002306 	br	80004fc <OutGraphicsCharFont2a+0x158>
			pixels = Font10x14[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
 8000470:	008200b4 	movhi	r2,2050
 8000474:	1080d284 	addi	r2,r2,842
 8000478:	90c003a4 	muli	r3,r18,14
 800047c:	1c07883a 	add	r3,r3,r16
 8000480:	18c7883a 	add	r3,r3,r3
 8000484:	10c5883a 	add	r2,r2,r3
 8000488:	1080000b 	ldhu	r2,0(r2)
 800048c:	10bfffcc 	andi	r2,r2,65535
 8000490:	e0bff715 	stw	r2,-36(fp)
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
 8000494:	04c08004 	movi	r19,512
			for(column = 0; column < theColumn;   )  	{
 8000498:	0023883a 	mov	r17,zero
 800049c:	00001506 	br	80004f4 <OutGraphicsCharFont2a+0x150>
				if((pixels & BitMask))														// if valid pixel, then write it
 80004a0:	e0fff717 	ldw	r3,-36(fp)
 80004a4:	1cc4703a 	and	r2,r3,r19
 80004a8:	10000726 	beq	r2,zero,80004c8 <OutGraphicsCharFont2a+0x124>
					WriteAPixel(theX+column, theY+row, theColour) ;
 80004ac:	a449883a 	add	r4,r20,r17
 80004b0:	ac07883a 	add	r3,r21,r16
 80004b4:	e0bff607 	ldb	r2,-40(fp)
 80004b8:	180b883a 	mov	r5,r3
 80004bc:	100d883a 	mov	r6,r2
 80004c0:	8000a840 	call	8000a84 <WriteAPixel>
 80004c4:	00000906 	br	80004ec <OutGraphicsCharFont2a+0x148>
				else {																		// if not a valid pixel, do we erase or leave it along (no erase)
					if(Erase == TRUE)
 80004c8:	e0800317 	ldw	r2,12(fp)
 80004cc:	10800058 	cmpnei	r2,r2,1
 80004d0:	1000061e 	bne	r2,zero,80004ec <OutGraphicsCharFont2a+0x148>
						WriteAPixel(theX+column, theY+row, backgroundcolour) ;
 80004d4:	a447883a 	add	r3,r20,r17
 80004d8:	ac05883a 	add	r2,r21,r16
 80004dc:	1809883a 	mov	r4,r3
 80004e0:	100b883a 	mov	r5,r2
 80004e4:	e1bff517 	ldw	r6,-44(fp)
 80004e8:	8000a840 	call	8000a84 <WriteAPixel>
					// else leave it alone
				}
					column ++ ;
 80004ec:	8c400044 	addi	r17,r17,1
				BitMask = BitMask >> 1 ;
 80004f0:	9827d07a 	srai	r19,r19,1
		theColumn = FONT2_XPIXELS;

		for(row = 0; row < theRow ; row ++)	{
			pixels = Font10x14[theCharacter][row] ;		     								// get the pixels for row 0 of the character to be displayed
			BitMask = 512 ;							   											// set of hex 200 i.e. bit 7-0 = 0010 0000 0000
			for(column = 0; column < theColumn;   )  	{
 80004f4:	8dffea16 	blt	r17,r23,80004a0 <__alt_data_end+0xfc0004a0>
	if(((short)(theCharacter) >= (short)(' ')) && ((short)(theCharacter) <= (short)('~'))) {			// if printable character
		theCharacter -= 0x20 ;																			// subtract hex 20 to get index of first printable character (the space character)
		theRow = FONT2_YPIXELS;
		theColumn = FONT2_XPIXELS;

		for(row = 0; row < theRow ; row ++)	{
 80004f8:	84000044 	addi	r16,r16,1
 80004fc:	85bfdc16 	blt	r16,r22,8000470 <__alt_data_end+0xfc000470>
					column ++ ;
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 8000500:	e6fff804 	addi	sp,fp,-32
 8000504:	dfc00917 	ldw	ra,36(sp)
 8000508:	df000817 	ldw	fp,32(sp)
 800050c:	ddc00717 	ldw	r23,28(sp)
 8000510:	dd800617 	ldw	r22,24(sp)
 8000514:	dd400517 	ldw	r21,20(sp)
 8000518:	dd000417 	ldw	r20,16(sp)
 800051c:	dcc00317 	ldw	r19,12(sp)
 8000520:	dc800217 	ldw	r18,8(sp)
 8000524:	dc400117 	ldw	r17,4(sp)
 8000528:	dc000017 	ldw	r16,0(sp)
 800052c:	dec00a04 	addi	sp,sp,40
 8000530:	f800283a 	ret

08000534 <initRS232Touch>:

/* a data type to hold a point/coord */
typedef struct { int x, y; } Point ;

//initialize
void initRS232Touch(void){
 8000534:	deffff04 	addi	sp,sp,-4
 8000538:	df000015 	stw	fp,0(sp)
 800053c:	d839883a 	mov	fp,sp
	//8 data bits, 1 stop bit
	RS232_Control = 0x15;
 8000540:	00a10034 	movhi	r2,33792
 8000544:	10808c04 	addi	r2,r2,560
 8000548:	00c00544 	movi	r3,21
 800054c:	10c00005 	stb	r3,0(r2)

	//9600 baud
	RS232_Baud = 0x05;
 8000550:	00a10034 	movhi	r2,33792
 8000554:	10808d04 	addi	r2,r2,564
 8000558:	00c00144 	movi	r3,5
 800055c:	10c00005 	stb	r3,0(r2)
}
 8000560:	e037883a 	mov	sp,fp
 8000564:	df000017 	ldw	fp,0(sp)
 8000568:	dec00104 	addi	sp,sp,4
 800056c:	f800283a 	ret

08000570 <getCharRS232Touch>:

//write to tx
char getCharRS232Touch( void ){
 8000570:	deffff04 	addi	sp,sp,-4
 8000574:	df000015 	stw	fp,0(sp)
 8000578:	d839883a 	mov	fp,sp
	while(!(RS232_Status&0x01)){};
 800057c:	0001883a 	nop
 8000580:	00a10034 	movhi	r2,33792
 8000584:	10808c04 	addi	r2,r2,560
 8000588:	10800003 	ldbu	r2,0(r2)
 800058c:	10803fcc 	andi	r2,r2,255
 8000590:	1080004c 	andi	r2,r2,1
 8000594:	103ffa26 	beq	r2,zero,8000580 <__alt_data_end+0xfc000580>
	return RS232_RxData;
 8000598:	00a10034 	movhi	r2,33792
 800059c:	10808c84 	addi	r2,r2,562
 80005a0:	10800003 	ldbu	r2,0(r2)
}
 80005a4:	e037883a 	mov	sp,fp
 80005a8:	df000017 	ldw	fp,0(sp)
 80005ac:	dec00104 	addi	sp,sp,4
 80005b0:	f800283a 	ret

080005b4 <putCharRS232Touch>:

//read from rx
void putCharRS232Touch(int c){
 80005b4:	defffe04 	addi	sp,sp,-8
 80005b8:	df000115 	stw	fp,4(sp)
 80005bc:	df000104 	addi	fp,sp,4
 80005c0:	e13fff15 	stw	r4,-4(fp)
	while(!(0x02&RS232_Status)){};
 80005c4:	0001883a 	nop
 80005c8:	00a10034 	movhi	r2,33792
 80005cc:	10808c04 	addi	r2,r2,560
 80005d0:	10800003 	ldbu	r2,0(r2)
 80005d4:	1080008c 	andi	r2,r2,2
 80005d8:	10803fcc 	andi	r2,r2,255
 80005dc:	103ffa26 	beq	r2,zero,80005c8 <__alt_data_end+0xfc0005c8>
	RS232_TxData = c;
 80005e0:	00a10034 	movhi	r2,33792
 80005e4:	10808c84 	addi	r2,r2,562
 80005e8:	e0ffff17 	ldw	r3,-4(fp)
 80005ec:	10c00005 	stb	r3,0(r2)
}
 80005f0:	e037883a 	mov	sp,fp
 80005f4:	df000017 	ldw	fp,0(sp)
 80005f8:	dec00104 	addi	sp,sp,4
 80005fc:	f800283a 	ret

08000600 <initTouchScreen>:

//initalize touchscreen
void initTouchScreen(void){
 8000600:	defffc04 	addi	sp,sp,-16
 8000604:	dfc00315 	stw	ra,12(sp)
 8000608:	df000215 	stw	fp,8(sp)
 800060c:	df000204 	addi	fp,sp,8
	putCharRS232Touch(0x55);
 8000610:	01001544 	movi	r4,85
 8000614:	80005b40 	call	80005b4 <putCharRS232Touch>
    putCharRS232Touch(0x01);
 8000618:	01000044 	movi	r4,1
 800061c:	80005b40 	call	80005b4 <putCharRS232Touch>
	putCharRS232Touch(0x12);
 8000620:	01000484 	movi	r4,18
 8000624:	80005b40 	call	80005b4 <putCharRS232Touch>
	int i;
	for (i = 0; i < 4; i++){
 8000628:	e03ffe15 	stw	zero,-8(fp)
 800062c:	00000506 	br	8000644 <initTouchScreen+0x44>
		char c = getCharRS232Touch();
 8000630:	80005700 	call	8000570 <getCharRS232Touch>
 8000634:	e0bfff05 	stb	r2,-4(fp)
void initTouchScreen(void){
	putCharRS232Touch(0x55);
    putCharRS232Touch(0x01);
	putCharRS232Touch(0x12);
	int i;
	for (i = 0; i < 4; i++){
 8000638:	e0bffe17 	ldw	r2,-8(fp)
 800063c:	10800044 	addi	r2,r2,1
 8000640:	e0bffe15 	stw	r2,-8(fp)
 8000644:	e0bffe17 	ldw	r2,-8(fp)
 8000648:	10800110 	cmplti	r2,r2,4
 800064c:	103ff81e 	bne	r2,zero,8000630 <__alt_data_end+0xfc000630>
		char c = getCharRS232Touch();
	}
}
 8000650:	e037883a 	mov	sp,fp
 8000654:	dfc00117 	ldw	ra,4(sp)
 8000658:	df000017 	ldw	fp,0(sp)
 800065c:	dec00204 	addi	sp,sp,8
 8000660:	f800283a 	ret

08000664 <waitForTouch>:

//wait for touch
void waitForTouch(){
 8000664:	defffe04 	addi	sp,sp,-8
 8000668:	dfc00115 	stw	ra,4(sp)
 800066c:	df000015 	stw	fp,0(sp)
 8000670:	d839883a 	mov	fp,sp
	while(!screenTouched());
 8000674:	0001883a 	nop
 8000678:	80006c40 	call	80006c4 <screenTouched>
 800067c:	103ffe26 	beq	r2,zero,8000678 <__alt_data_end+0xfc000678>
}
 8000680:	e037883a 	mov	sp,fp
 8000684:	dfc00117 	ldw	ra,4(sp)
 8000688:	df000017 	ldw	fp,0(sp)
 800068c:	dec00204 	addi	sp,sp,8
 8000690:	f800283a 	ret

08000694 <waitForRelease>:

//wait for release
void waitForRelease(){
 8000694:	defffe04 	addi	sp,sp,-8
 8000698:	dfc00115 	stw	ra,4(sp)
 800069c:	df000015 	stw	fp,0(sp)
 80006a0:	d839883a 	mov	fp,sp
     while(!screenReleased());
 80006a4:	0001883a 	nop
 80006a8:	80007140 	call	8000714 <screenReleased>
 80006ac:	103ffe26 	beq	r2,zero,80006a8 <__alt_data_end+0xfc0006a8>
}
 80006b0:	e037883a 	mov	sp,fp
 80006b4:	dfc00117 	ldw	ra,4(sp)
 80006b8:	df000017 	ldw	fp,0(sp)
 80006bc:	dec00204 	addi	sp,sp,8
 80006c0:	f800283a 	ret

080006c4 <screenTouched>:

//test if touched
int screenTouched( void ){
 80006c4:	defffd04 	addi	sp,sp,-12
 80006c8:	dfc00215 	stw	ra,8(sp)
 80006cc:	df000115 	stw	fp,4(sp)
 80006d0:	df000104 	addi	fp,sp,4
	char c = getCharRS232Touch();
 80006d4:	80005700 	call	8000570 <getCharRS232Touch>
 80006d8:	e0bfff05 	stb	r2,-4(fp)
	return (c&0x01)&(c>>7);
 80006dc:	e0bfff03 	ldbu	r2,-4(fp)
 80006e0:	10803fcc 	andi	r2,r2,255
 80006e4:	10c0004c 	andi	r3,r2,1
 80006e8:	e0bfff07 	ldb	r2,-4(fp)
 80006ec:	1005d1fa 	srai	r2,r2,7
 80006f0:	10803fcc 	andi	r2,r2,255
 80006f4:	1080201c 	xori	r2,r2,128
 80006f8:	10bfe004 	addi	r2,r2,-128
 80006fc:	1884703a 	and	r2,r3,r2
}
 8000700:	e037883a 	mov	sp,fp
 8000704:	dfc00117 	ldw	ra,4(sp)
 8000708:	df000017 	ldw	fp,0(sp)
 800070c:	dec00204 	addi	sp,sp,8
 8000710:	f800283a 	ret

08000714 <screenReleased>:

//test if released
int screenReleased( void ){
 8000714:	defffd04 	addi	sp,sp,-12
 8000718:	dfc00215 	stw	ra,8(sp)
 800071c:	df000115 	stw	fp,4(sp)
 8000720:	df000104 	addi	fp,sp,4
	char c = getCharRS232Touch();
 8000724:	80005700 	call	8000570 <getCharRS232Touch>
 8000728:	e0bfff05 	stb	r2,-4(fp)
	return (!(c&0x01))&(c>>7);
 800072c:	e0bfff03 	ldbu	r2,-4(fp)
 8000730:	10803fcc 	andi	r2,r2,255
 8000734:	1080004c 	andi	r2,r2,1
 8000738:	1005003a 	cmpeq	r2,r2,zero
 800073c:	10c03fcc 	andi	r3,r2,255
 8000740:	e0bfff07 	ldb	r2,-4(fp)
 8000744:	1005d1fa 	srai	r2,r2,7
 8000748:	10803fcc 	andi	r2,r2,255
 800074c:	1080201c 	xori	r2,r2,128
 8000750:	10bfe004 	addi	r2,r2,-128
 8000754:	1884703a 	and	r2,r3,r2
}
 8000758:	e037883a 	mov	sp,fp
 800075c:	dfc00117 	ldw	ra,4(sp)
 8000760:	df000017 	ldw	fp,0(sp)
 8000764:	dec00204 	addi	sp,sp,8
 8000768:	f800283a 	ret

0800076c <check_bounds>:

//forces point into set range
int check_bounds(int a, int b){
 800076c:	defffd04 	addi	sp,sp,-12
 8000770:	df000215 	stw	fp,8(sp)
 8000774:	df000204 	addi	fp,sp,8
 8000778:	e13ffe15 	stw	r4,-8(fp)
 800077c:	e17fff15 	stw	r5,-4(fp)
	if (a < 0)
 8000780:	e0bffe17 	ldw	r2,-8(fp)
 8000784:	1000020e 	bge	r2,zero,8000790 <check_bounds+0x24>
		return 0;
 8000788:	0005883a 	mov	r2,zero
 800078c:	00000606 	br	80007a8 <check_bounds+0x3c>
	else if (a > b)
 8000790:	e0bffe17 	ldw	r2,-8(fp)
 8000794:	e0ffff17 	ldw	r3,-4(fp)
 8000798:	1880020e 	bge	r3,r2,80007a4 <check_bounds+0x38>
		return b;
 800079c:	e0bfff17 	ldw	r2,-4(fp)
 80007a0:	00000106 	br	80007a8 <check_bounds+0x3c>
	else
		return a;
 80007a4:	e0bffe17 	ldw	r2,-8(fp)
}
 80007a8:	e037883a 	mov	sp,fp
 80007ac:	df000017 	ldw	fp,0(sp)
 80007b0:	dec00104 	addi	sp,sp,4
 80007b4:	f800283a 	ret

080007b8 <getPoint>:

//get the touched/release point and map it
Point getPoint(){
 80007b8:	defff804 	addi	sp,sp,-32
 80007bc:	dfc00715 	stw	ra,28(sp)
 80007c0:	df000615 	stw	fp,24(sp)
 80007c4:	df000604 	addi	fp,sp,24

	Point p1;

	//get x and y coordinate from next 4 bytes
	int x_coord = 0x7F&getCharRS232Touch();
 80007c8:	80005700 	call	8000570 <getCharRS232Touch>
 80007cc:	10803fcc 	andi	r2,r2,255
 80007d0:	10801fcc 	andi	r2,r2,127
 80007d4:	e0bffa15 	stw	r2,-24(fp)
	x_coord = x_coord + ((0x1F&getCharRS232Touch())<<7);
 80007d8:	80005700 	call	8000570 <getCharRS232Touch>
 80007dc:	10803fcc 	andi	r2,r2,255
 80007e0:	108007cc 	andi	r2,r2,31
 80007e4:	100491fa 	slli	r2,r2,7
 80007e8:	e0fffa17 	ldw	r3,-24(fp)
 80007ec:	1885883a 	add	r2,r3,r2
 80007f0:	e0bffa15 	stw	r2,-24(fp)

	int y_coord = 0x7F&getCharRS232Touch();
 80007f4:	80005700 	call	8000570 <getCharRS232Touch>
 80007f8:	10803fcc 	andi	r2,r2,255
 80007fc:	10801fcc 	andi	r2,r2,127
 8000800:	e0bffb15 	stw	r2,-20(fp)
	y_coord = y_coord + ((0x1F&getCharRS232Touch())<<7);
 8000804:	80005700 	call	8000570 <getCharRS232Touch>
 8000808:	10803fcc 	andi	r2,r2,255
 800080c:	108007cc 	andi	r2,r2,31
 8000810:	100491fa 	slli	r2,r2,7
 8000814:	e0fffb17 	ldw	r3,-20(fp)
 8000818:	1885883a 	add	r2,r3,r2
 800081c:	e0bffb15 	stw	r2,-20(fp)

	printf("x_coord: %i\n", x_coord);
 8000820:	010200f4 	movhi	r4,2051
 8000824:	21297504 	addi	r4,r4,-23084
 8000828:	e17ffa17 	ldw	r5,-24(fp)
 800082c:	800ded80 	call	800ded8 <printf>
	printf("y_coord: %i\n\n", y_coord);
 8000830:	010200f4 	movhi	r4,2051
 8000834:	21297904 	addi	r4,r4,-23068
 8000838:	e17ffb17 	ldw	r5,-20(fp)
 800083c:	800ded80 	call	800ded8 <printf>

	//map touched coordinates to pixels on display
	//mapping x from 200-3800 to 0-800 range
	//mapping y from 450-3800 to 0-480 range

	int mapped_x_coord = check_bounds((x_coord-200)/4.5, 800);
 8000840:	e0bffa17 	ldw	r2,-24(fp)
 8000844:	10bfce04 	addi	r2,r2,-200
 8000848:	1009883a 	mov	r4,r2
 800084c:	800d2d00 	call	800d2d0 <__floatsidf>
 8000850:	100b883a 	mov	r5,r2
 8000854:	180d883a 	mov	r6,r3
 8000858:	2809883a 	mov	r4,r5
 800085c:	300b883a 	mov	r5,r6
 8000860:	000d883a 	mov	r6,zero
 8000864:	01d004b4 	movhi	r7,16402
 8000868:	800b7440 	call	800b744 <__divdf3>
 800086c:	1009883a 	mov	r4,r2
 8000870:	180b883a 	mov	r5,r3
 8000874:	2005883a 	mov	r2,r4
 8000878:	2807883a 	mov	r3,r5
 800087c:	1009883a 	mov	r4,r2
 8000880:	180b883a 	mov	r5,r3
 8000884:	800d2480 	call	800d248 <__fixdfsi>
 8000888:	1009883a 	mov	r4,r2
 800088c:	0140c804 	movi	r5,800
 8000890:	800076c0 	call	800076c <check_bounds>
 8000894:	e0bffc15 	stw	r2,-16(fp)
	int mapped_y_coord = check_bounds((y_coord-450)/7, 480);
 8000898:	e0bffb17 	ldw	r2,-20(fp)
 800089c:	10ff8f84 	addi	r3,r2,-450
 80008a0:	008001c4 	movi	r2,7
 80008a4:	1885283a 	div	r2,r3,r2
 80008a8:	1009883a 	mov	r4,r2
 80008ac:	01407804 	movi	r5,480
 80008b0:	800076c0 	call	800076c <check_bounds>
 80008b4:	e0bffd15 	stw	r2,-12(fp)

	printf("mapped_x_coord: %i\n", mapped_x_coord);
 80008b8:	010200f4 	movhi	r4,2051
 80008bc:	21297d04 	addi	r4,r4,-23052
 80008c0:	e17ffc17 	ldw	r5,-16(fp)
 80008c4:	800ded80 	call	800ded8 <printf>
	printf("mapped_y_coord: %i\n\n", mapped_y_coord);
 80008c8:	010200f4 	movhi	r4,2051
 80008cc:	21298204 	addi	r4,r4,-23032
 80008d0:	e17ffd17 	ldw	r5,-12(fp)
 80008d4:	800ded80 	call	800ded8 <printf>

	p1.x = mapped_x_coord;
 80008d8:	e0bffc17 	ldw	r2,-16(fp)
 80008dc:	e0bffe15 	stw	r2,-8(fp)
	p1.y = mapped_y_coord;
 80008e0:	e0bffd17 	ldw	r2,-12(fp)
 80008e4:	e0bfff15 	stw	r2,-4(fp)

 return p1;
 80008e8:	e0bffe17 	ldw	r2,-8(fp)
 80008ec:	e0ffff17 	ldw	r3,-4(fp)
 80008f0:	1009883a 	mov	r4,r2
 80008f4:	180b883a 	mov	r5,r3
}
 80008f8:	2005883a 	mov	r2,r4
 80008fc:	2807883a 	mov	r3,r5
 8000900:	e037883a 	mov	sp,fp
 8000904:	dfc00117 	ldw	ra,4(sp)
 8000908:	df000017 	ldw	fp,0(sp)
 800090c:	dec00204 	addi	sp,sp,8
 8000910:	f800283a 	ret

08000914 <getTime>:

long getTime(){
 8000914:	defffd04 	addi	sp,sp,-12
 8000918:	dfc00215 	stw	ra,8(sp)
 800091c:	df000115 	stw	fp,4(sp)
 8000920:	df000104 	addi	fp,sp,4
	  time_t seconds;
	  seconds = time (NULL);
 8000924:	0009883a 	mov	r4,zero
 8000928:	8011d880 	call	8011d88 <time>
 800092c:	e0bfff15 	stw	r2,-4(fp)
	  return seconds;
 8000930:	e0bfff17 	ldw	r2,-4(fp)
}
 8000934:	e037883a 	mov	sp,fp
 8000938:	dfc00117 	ldw	ra,4(sp)
 800093c:	df000017 	ldw	fp,0(sp)
 8000940:	dec00204 	addi	sp,sp,8
 8000944:	f800283a 	ret

08000948 <getPressTime>:

Point getPressTime(int time){
 8000948:	defff904 	addi	sp,sp,-28
 800094c:	dfc00615 	stw	ra,24(sp)
 8000950:	df000515 	stw	fp,20(sp)
 8000954:	df000504 	addi	fp,sp,20
 8000958:	e13fff15 	stw	r4,-4(fp)
	long currentTime = getTime();
 800095c:	80009140 	call	8000914 <getTime>
 8000960:	e0bffb15 	stw	r2,-20(fp)
	while (getTime()-currentTime < time){
 8000964:	00001006 	br	80009a8 <getPressTime+0x60>
		char c = getCharRS232Touch();
 8000968:	80005700 	call	8000570 <getCharRS232Touch>
 800096c:	e0bffc05 	stb	r2,-16(fp)
		if((c&0x01)&(c>>7)){
 8000970:	e0bffc03 	ldbu	r2,-16(fp)
 8000974:	10803fcc 	andi	r2,r2,255
 8000978:	10c0004c 	andi	r3,r2,1
 800097c:	e0bffc07 	ldb	r2,-16(fp)
 8000980:	1005d1fa 	srai	r2,r2,7
 8000984:	10803fcc 	andi	r2,r2,255
 8000988:	1080201c 	xori	r2,r2,128
 800098c:	10bfe004 	addi	r2,r2,-128
 8000990:	1884703a 	and	r2,r3,r2
 8000994:	10000426 	beq	r2,zero,80009a8 <getPressTime+0x60>
			return getPoint();
 8000998:	80007b80 	call	80007b8 <getPoint>
 800099c:	1009883a 	mov	r4,r2
 80009a0:	180b883a 	mov	r5,r3
 80009a4:	00000c06 	br	80009d8 <getPressTime+0x90>
	  return seconds;
}

Point getPressTime(int time){
	long currentTime = getTime();
	while (getTime()-currentTime < time){
 80009a8:	80009140 	call	8000914 <getTime>
 80009ac:	1007883a 	mov	r3,r2
 80009b0:	e0bffb17 	ldw	r2,-20(fp)
 80009b4:	1887c83a 	sub	r3,r3,r2
 80009b8:	e0bfff17 	ldw	r2,-4(fp)
 80009bc:	18bfea16 	blt	r3,r2,8000968 <__alt_data_end+0xfc000968>
		if((c&0x01)&(c>>7)){
			return getPoint();
		}
	}
	Point p;
	p.x = -1;
 80009c0:	00bfffc4 	movi	r2,-1
 80009c4:	e0bffd15 	stw	r2,-12(fp)
	p.y = -1;
 80009c8:	00bfffc4 	movi	r2,-1
 80009cc:	e0bffe15 	stw	r2,-8(fp)
	return p;
 80009d0:	e13ffd17 	ldw	r4,-12(fp)
 80009d4:	e17ffe17 	ldw	r5,-8(fp)
 80009d8:	200d883a 	mov	r6,r4
 80009dc:	280f883a 	mov	r7,r5
}
 80009e0:	3005883a 	mov	r2,r6
 80009e4:	3807883a 	mov	r3,r7
 80009e8:	e037883a 	mov	sp,fp
 80009ec:	dfc00117 	ldw	ra,4(sp)
 80009f0:	df000017 	ldw	fp,0(sp)
 80009f4:	dec00204 	addi	sp,sp,8
 80009f8:	f800283a 	ret

080009fc <getPress>:

//waits for a touch screen press event and returns X,Y coord
Point getPress(void){
 80009fc:	defffe04 	addi	sp,sp,-8
 8000a00:	dfc00115 	stw	ra,4(sp)
 8000a04:	df000015 	stw	fp,0(sp)
 8000a08:	d839883a 	mov	fp,sp
	waitForTouch();
 8000a0c:	80006640 	call	8000664 <waitForTouch>
	return getPoint();
 8000a10:	80007b80 	call	80007b8 <getPoint>
 8000a14:	100b883a 	mov	r5,r2
 8000a18:	180d883a 	mov	r6,r3
 8000a1c:	2807883a 	mov	r3,r5
 8000a20:	3009883a 	mov	r4,r6
}
 8000a24:	1805883a 	mov	r2,r3
 8000a28:	2007883a 	mov	r3,r4
 8000a2c:	e037883a 	mov	sp,fp
 8000a30:	dfc00117 	ldw	ra,4(sp)
 8000a34:	df000017 	ldw	fp,0(sp)
 8000a38:	dec00204 	addi	sp,sp,8
 8000a3c:	f800283a 	ret

08000a40 <getRelease>:

//waits for a touch screen release event and returns X,Y coord
Point getRelease(void){
 8000a40:	defffe04 	addi	sp,sp,-8
 8000a44:	dfc00115 	stw	ra,4(sp)
 8000a48:	df000015 	stw	fp,0(sp)
 8000a4c:	d839883a 	mov	fp,sp
	waitForRelease();
 8000a50:	80006940 	call	8000694 <waitForRelease>
	return getPoint();
 8000a54:	80007b80 	call	80007b8 <getPoint>
 8000a58:	100b883a 	mov	r5,r2
 8000a5c:	180d883a 	mov	r6,r3
 8000a60:	2807883a 	mov	r3,r5
 8000a64:	3009883a 	mov	r4,r6
}
 8000a68:	1805883a 	mov	r2,r3
 8000a6c:	2007883a 	mov	r3,r4
 8000a70:	e037883a 	mov	sp,fp
 8000a74:	dfc00117 	ldw	ra,4(sp)
 8000a78:	df000017 	ldw	fp,0(sp)
 8000a7c:	dec00204 	addi	sp,sp,8
 8000a80:	f800283a 	ret

08000a84 <WriteAPixel>:
/**********************************************************************
* This function writes a single pixel to the x,y coords specified in the specified colour
* Note colour is a palette number (0-255) not a 24 bit RGB value
**********************************************************************/
void WriteAPixel (int x, int y, int Colour)
{
 8000a84:	defffc04 	addi	sp,sp,-16
 8000a88:	df000315 	stw	fp,12(sp)
 8000a8c:	df000304 	addi	fp,sp,12
 8000a90:	e13ffd15 	stw	r4,-12(fp)
 8000a94:	e17ffe15 	stw	r5,-8(fp)
 8000a98:	e1bfff15 	stw	r6,-4(fp)
	WAIT_FOR_GRAPHICS;			// is graphics ready for new command
 8000a9c:	0001883a 	nop
 8000aa0:	00a10034 	movhi	r2,33792
 8000aa4:	1080000b 	ldhu	r2,0(r2)
 8000aa8:	10bfffcc 	andi	r2,r2,65535
 8000aac:	1080004c 	andi	r2,r2,1
 8000ab0:	103ffb26 	beq	r2,zero,8000aa0 <__alt_data_end+0xfc000aa0>

	GraphicsX1Reg = x;			// write coords to x1, y1
 8000ab4:	00a10034 	movhi	r2,33792
 8000ab8:	10800084 	addi	r2,r2,2
 8000abc:	e0fffd17 	ldw	r3,-12(fp)
 8000ac0:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 8000ac4:	00a10034 	movhi	r2,33792
 8000ac8:	10800104 	addi	r2,r2,4
 8000acc:	e0fffe17 	ldw	r3,-8(fp)
 8000ad0:	10c0000d 	sth	r3,0(r2)
	GraphicsColourReg = Colour;		// set pixel colour with a palette number
 8000ad4:	00a10034 	movhi	r2,33792
 8000ad8:	10800384 	addi	r2,r2,14
 8000adc:	e0ffff17 	ldw	r3,-4(fp)
 8000ae0:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = PutAPixel;		// give graphics a "write pixel" command
 8000ae4:	00a10034 	movhi	r2,33792
 8000ae8:	00c00284 	movi	r3,10
 8000aec:	10c0000d 	sth	r3,0(r2)
}
 8000af0:	e037883a 	mov	sp,fp
 8000af4:	df000017 	ldw	fp,0(sp)
 8000af8:	dec00104 	addi	sp,sp,4
 8000afc:	f800283a 	ret

08000b00 <ReadAPixel>:
/*****************************************************************************************
* This function read a single pixel from x,y coords specified and returns its colour
* Note returned colour is a palette number (0-255) not a 24 bit RGB value
******************************************************************************************/
int ReadAPixel (int x, int y)
{
 8000b00:	defffd04 	addi	sp,sp,-12
 8000b04:	df000215 	stw	fp,8(sp)
 8000b08:	df000204 	addi	fp,sp,8
 8000b0c:	e13ffe15 	stw	r4,-8(fp)
 8000b10:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS;			// is graphics ready for new command
 8000b14:	0001883a 	nop
 8000b18:	00a10034 	movhi	r2,33792
 8000b1c:	1080000b 	ldhu	r2,0(r2)
 8000b20:	10bfffcc 	andi	r2,r2,65535
 8000b24:	1080004c 	andi	r2,r2,1
 8000b28:	103ffb26 	beq	r2,zero,8000b18 <__alt_data_end+0xfc000b18>

	GraphicsX1Reg = x;			// write coords to x1, y1
 8000b2c:	00a10034 	movhi	r2,33792
 8000b30:	10800084 	addi	r2,r2,2
 8000b34:	e0fffe17 	ldw	r3,-8(fp)
 8000b38:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y;
 8000b3c:	00a10034 	movhi	r2,33792
 8000b40:	10800104 	addi	r2,r2,4
 8000b44:	e0ffff17 	ldw	r3,-4(fp)
 8000b48:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = GetAPixel;		// give graphics a "get pixel" command
 8000b4c:	00a10034 	movhi	r2,33792
 8000b50:	00c002c4 	movi	r3,11
 8000b54:	10c0000d 	sth	r3,0(r2)

	WAIT_FOR_GRAPHICS;			// is graphics done reading pixel
 8000b58:	0001883a 	nop
 8000b5c:	00a10034 	movhi	r2,33792
 8000b60:	1080000b 	ldhu	r2,0(r2)
 8000b64:	10bfffcc 	andi	r2,r2,65535
 8000b68:	1080004c 	andi	r2,r2,1
 8000b6c:	103ffb26 	beq	r2,zero,8000b5c <__alt_data_end+0xfc000b5c>
	return (int)(GraphicsColourReg) ;		// return the palette number (colour)
 8000b70:	00a10034 	movhi	r2,33792
 8000b74:	10800384 	addi	r2,r2,14
 8000b78:	1080000b 	ldhu	r2,0(r2)
 8000b7c:	10bfffcc 	andi	r2,r2,65535
}
 8000b80:	e037883a 	mov	sp,fp
 8000b84:	df000017 	ldw	fp,0(sp)
 8000b88:	dec00104 	addi	sp,sp,4
 8000b8c:	f800283a 	ret

08000b90 <ProgramPalette>:
** subroutine to program a hardware (graphics chip) palette number with an RGB value
** e.g. ProgramPalette(RED, 0x00FF0000) ;
****************************************************************************************************/

void ProgramPalette(int PaletteNumber, int RGB)
{
 8000b90:	defffd04 	addi	sp,sp,-12
 8000b94:	df000215 	stw	fp,8(sp)
 8000b98:	df000204 	addi	fp,sp,8
 8000b9c:	e13ffe15 	stw	r4,-8(fp)
 8000ba0:	e17fff15 	stw	r5,-4(fp)
    WAIT_FOR_GRAPHICS;
 8000ba4:	0001883a 	nop
 8000ba8:	00a10034 	movhi	r2,33792
 8000bac:	1080000b 	ldhu	r2,0(r2)
 8000bb0:	10bfffcc 	andi	r2,r2,65535
 8000bb4:	1080004c 	andi	r2,r2,1
 8000bb8:	103ffb26 	beq	r2,zero,8000ba8 <__alt_data_end+0xfc000ba8>
    GraphicsColourReg = PaletteNumber;
 8000bbc:	00a10034 	movhi	r2,33792
 8000bc0:	10800384 	addi	r2,r2,14
 8000bc4:	e0fffe17 	ldw	r3,-8(fp)
 8000bc8:	10c0000d 	sth	r3,0(r2)
    GraphicsX1Reg = RGB >> 16   ;          // program red value in ls.8 bit of X1 reg
 8000bcc:	00a10034 	movhi	r2,33792
 8000bd0:	10800084 	addi	r2,r2,2
 8000bd4:	e0ffff17 	ldw	r3,-4(fp)
 8000bd8:	1807d43a 	srai	r3,r3,16
 8000bdc:	10c0000d 	sth	r3,0(r2)
    GraphicsY1Reg = RGB ;                	 // program green and blue into 16 bit of Y1 reg
 8000be0:	00a10034 	movhi	r2,33792
 8000be4:	10800104 	addi	r2,r2,4
 8000be8:	e0ffff17 	ldw	r3,-4(fp)
 8000bec:	10c0000d 	sth	r3,0(r2)
    GraphicsCommandReg = ProgramPaletteColour;	// issue command
 8000bf0:	00a10034 	movhi	r2,33792
 8000bf4:	00c00404 	movi	r3,16
 8000bf8:	10c0000d 	sth	r3,0(r2)
}
 8000bfc:	e037883a 	mov	sp,fp
 8000c00:	df000017 	ldw	fp,0(sp)
 8000c04:	dec00104 	addi	sp,sp,4
 8000c08:	f800283a 	ret

08000c0c <DrawHline>:

void DrawHline(int x1, int y1, int x2, int y2, int color)
{
 8000c0c:	defffb04 	addi	sp,sp,-20
 8000c10:	df000415 	stw	fp,16(sp)
 8000c14:	df000404 	addi	fp,sp,16
 8000c18:	e13ffc15 	stw	r4,-16(fp)
 8000c1c:	e17ffd15 	stw	r5,-12(fp)
 8000c20:	e1bffe15 	stw	r6,-8(fp)
 8000c24:	e1ffff15 	stw	r7,-4(fp)
    WAIT_FOR_GRAPHICS;
 8000c28:	0001883a 	nop
 8000c2c:	00a10034 	movhi	r2,33792
 8000c30:	1080000b 	ldhu	r2,0(r2)
 8000c34:	10bfffcc 	andi	r2,r2,65535
 8000c38:	1080004c 	andi	r2,r2,1
 8000c3c:	103ffb26 	beq	r2,zero,8000c2c <__alt_data_end+0xfc000c2c>

	GraphicsX1Reg = x1;			// write coords to x1, y1
 8000c40:	00a10034 	movhi	r2,33792
 8000c44:	10800084 	addi	r2,r2,2
 8000c48:	e0fffc17 	ldw	r3,-16(fp)
 8000c4c:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 8000c50:	00a10034 	movhi	r2,33792
 8000c54:	10800104 	addi	r2,r2,4
 8000c58:	e0fffd17 	ldw	r3,-12(fp)
 8000c5c:	10c0000d 	sth	r3,0(r2)

	GraphicsX2Reg = x2;			// write coords to x1, y1
 8000c60:	00a10034 	movhi	r2,33792
 8000c64:	10800184 	addi	r2,r2,6
 8000c68:	e0fffe17 	ldw	r3,-8(fp)
 8000c6c:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 8000c70:	00a10034 	movhi	r2,33792
 8000c74:	10800204 	addi	r2,r2,8
 8000c78:	e0ffff17 	ldw	r3,-4(fp)
 8000c7c:	10c0000d 	sth	r3,0(r2)

	GraphicsColourReg = color;		// set pixel colour with a palette number
 8000c80:	00a10034 	movhi	r2,33792
 8000c84:	10800384 	addi	r2,r2,14
 8000c88:	e0c00117 	ldw	r3,4(fp)
 8000c8c:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawHLine;		// give graphics a "write pixel" command
 8000c90:	00a10034 	movhi	r2,33792
 8000c94:	00c00044 	movi	r3,1
 8000c98:	10c0000d 	sth	r3,0(r2)
}
 8000c9c:	e037883a 	mov	sp,fp
 8000ca0:	df000017 	ldw	fp,0(sp)
 8000ca4:	dec00104 	addi	sp,sp,4
 8000ca8:	f800283a 	ret

08000cac <DrawHlineWeighted>:

void DrawHlineWeighted(int x1, int y1, int x2, int y2, int color){
 8000cac:	defff804 	addi	sp,sp,-32
 8000cb0:	dfc00715 	stw	ra,28(sp)
 8000cb4:	df000615 	stw	fp,24(sp)
 8000cb8:	df000604 	addi	fp,sp,24
 8000cbc:	e13ffc15 	stw	r4,-16(fp)
 8000cc0:	e17ffd15 	stw	r5,-12(fp)
 8000cc4:	e1bffe15 	stw	r6,-8(fp)
 8000cc8:	e1ffff15 	stw	r7,-4(fp)
	int y;
	for (y = y1; y <= y2; y++){
 8000ccc:	e0bffd17 	ldw	r2,-12(fp)
 8000cd0:	e0bffb15 	stw	r2,-20(fp)
 8000cd4:	00000a06 	br	8000d00 <DrawHlineWeighted+0x54>
		DrawHline(x1, y, x2, y, color);
 8000cd8:	e0800217 	ldw	r2,8(fp)
 8000cdc:	d8800015 	stw	r2,0(sp)
 8000ce0:	e13ffc17 	ldw	r4,-16(fp)
 8000ce4:	e17ffb17 	ldw	r5,-20(fp)
 8000ce8:	e1bffe17 	ldw	r6,-8(fp)
 8000cec:	e1fffb17 	ldw	r7,-20(fp)
 8000cf0:	8000c0c0 	call	8000c0c <DrawHline>
	GraphicsCommandReg = DrawHLine;		// give graphics a "write pixel" command
}

void DrawHlineWeighted(int x1, int y1, int x2, int y2, int color){
	int y;
	for (y = y1; y <= y2; y++){
 8000cf4:	e0bffb17 	ldw	r2,-20(fp)
 8000cf8:	10800044 	addi	r2,r2,1
 8000cfc:	e0bffb15 	stw	r2,-20(fp)
 8000d00:	e0bffb17 	ldw	r2,-20(fp)
 8000d04:	e0ffff17 	ldw	r3,-4(fp)
 8000d08:	18bff30e 	bge	r3,r2,8000cd8 <__alt_data_end+0xfc000cd8>
		DrawHline(x1, y, x2, y, color);
	}
}
 8000d0c:	e037883a 	mov	sp,fp
 8000d10:	dfc00117 	ldw	ra,4(sp)
 8000d14:	df000017 	ldw	fp,0(sp)
 8000d18:	dec00204 	addi	sp,sp,8
 8000d1c:	f800283a 	ret

08000d20 <DrawVlineWeighted>:

void DrawVlineWeighted(int x1, int y1, int x2, int y2, int color){
 8000d20:	defff804 	addi	sp,sp,-32
 8000d24:	dfc00715 	stw	ra,28(sp)
 8000d28:	df000615 	stw	fp,24(sp)
 8000d2c:	df000604 	addi	fp,sp,24
 8000d30:	e13ffc15 	stw	r4,-16(fp)
 8000d34:	e17ffd15 	stw	r5,-12(fp)
 8000d38:	e1bffe15 	stw	r6,-8(fp)
 8000d3c:	e1ffff15 	stw	r7,-4(fp)
	int x;
	for (x = x1; x <= x2; x++){
 8000d40:	e0bffc17 	ldw	r2,-16(fp)
 8000d44:	e0bffb15 	stw	r2,-20(fp)
 8000d48:	00000a06 	br	8000d74 <DrawVlineWeighted+0x54>
		DrawVline(x, y1, x, y2, color);
 8000d4c:	e0800217 	ldw	r2,8(fp)
 8000d50:	d8800015 	stw	r2,0(sp)
 8000d54:	e13ffb17 	ldw	r4,-20(fp)
 8000d58:	e17ffd17 	ldw	r5,-12(fp)
 8000d5c:	e1bffb17 	ldw	r6,-20(fp)
 8000d60:	e1ffff17 	ldw	r7,-4(fp)
 8000d64:	8000d940 	call	8000d94 <DrawVline>
	}
}

void DrawVlineWeighted(int x1, int y1, int x2, int y2, int color){
	int x;
	for (x = x1; x <= x2; x++){
 8000d68:	e0bffb17 	ldw	r2,-20(fp)
 8000d6c:	10800044 	addi	r2,r2,1
 8000d70:	e0bffb15 	stw	r2,-20(fp)
 8000d74:	e0bffb17 	ldw	r2,-20(fp)
 8000d78:	e0fffe17 	ldw	r3,-8(fp)
 8000d7c:	18bff30e 	bge	r3,r2,8000d4c <__alt_data_end+0xfc000d4c>
		DrawVline(x, y1, x, y2, color);
	}
}
 8000d80:	e037883a 	mov	sp,fp
 8000d84:	dfc00117 	ldw	ra,4(sp)
 8000d88:	df000017 	ldw	fp,0(sp)
 8000d8c:	dec00204 	addi	sp,sp,8
 8000d90:	f800283a 	ret

08000d94 <DrawVline>:

void DrawVline(int x1, int y1, int x2, int y2, int color)
{
 8000d94:	defffb04 	addi	sp,sp,-20
 8000d98:	df000415 	stw	fp,16(sp)
 8000d9c:	df000404 	addi	fp,sp,16
 8000da0:	e13ffc15 	stw	r4,-16(fp)
 8000da4:	e17ffd15 	stw	r5,-12(fp)
 8000da8:	e1bffe15 	stw	r6,-8(fp)
 8000dac:	e1ffff15 	stw	r7,-4(fp)
    WAIT_FOR_GRAPHICS;
 8000db0:	0001883a 	nop
 8000db4:	00a10034 	movhi	r2,33792
 8000db8:	1080000b 	ldhu	r2,0(r2)
 8000dbc:	10bfffcc 	andi	r2,r2,65535
 8000dc0:	1080004c 	andi	r2,r2,1
 8000dc4:	103ffb26 	beq	r2,zero,8000db4 <__alt_data_end+0xfc000db4>

	GraphicsX1Reg = x1;			// write coords to x1, y1
 8000dc8:	00a10034 	movhi	r2,33792
 8000dcc:	10800084 	addi	r2,r2,2
 8000dd0:	e0fffc17 	ldw	r3,-16(fp)
 8000dd4:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 8000dd8:	00a10034 	movhi	r2,33792
 8000ddc:	10800104 	addi	r2,r2,4
 8000de0:	e0fffd17 	ldw	r3,-12(fp)
 8000de4:	10c0000d 	sth	r3,0(r2)

	GraphicsX2Reg = x2;			// write coords to x1, y1
 8000de8:	00a10034 	movhi	r2,33792
 8000dec:	10800184 	addi	r2,r2,6
 8000df0:	e0fffe17 	ldw	r3,-8(fp)
 8000df4:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 8000df8:	00a10034 	movhi	r2,33792
 8000dfc:	10800204 	addi	r2,r2,8
 8000e00:	e0ffff17 	ldw	r3,-4(fp)
 8000e04:	10c0000d 	sth	r3,0(r2)

	GraphicsColourReg = color;		// set pixel colour with a palette number
 8000e08:	00a10034 	movhi	r2,33792
 8000e0c:	10800384 	addi	r2,r2,14
 8000e10:	e0c00117 	ldw	r3,4(fp)
 8000e14:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawVLine;		// give graphics a "write pixel" command
 8000e18:	00a10034 	movhi	r2,33792
 8000e1c:	00c00084 	movi	r3,2
 8000e20:	10c0000d 	sth	r3,0(r2)
}
 8000e24:	e037883a 	mov	sp,fp
 8000e28:	df000017 	ldw	fp,0(sp)
 8000e2c:	dec00104 	addi	sp,sp,4
 8000e30:	f800283a 	ret

08000e34 <Drawline>:

void Drawline(int x1, int y1, int x2, int y2, int color)
{
 8000e34:	defffb04 	addi	sp,sp,-20
 8000e38:	df000415 	stw	fp,16(sp)
 8000e3c:	df000404 	addi	fp,sp,16
 8000e40:	e13ffc15 	stw	r4,-16(fp)
 8000e44:	e17ffd15 	stw	r5,-12(fp)
 8000e48:	e1bffe15 	stw	r6,-8(fp)
 8000e4c:	e1ffff15 	stw	r7,-4(fp)
    WAIT_FOR_GRAPHICS;
 8000e50:	0001883a 	nop
 8000e54:	00a10034 	movhi	r2,33792
 8000e58:	1080000b 	ldhu	r2,0(r2)
 8000e5c:	10bfffcc 	andi	r2,r2,65535
 8000e60:	1080004c 	andi	r2,r2,1
 8000e64:	103ffb26 	beq	r2,zero,8000e54 <__alt_data_end+0xfc000e54>

	GraphicsX1Reg = x1;			// write coords to x1, y1
 8000e68:	00a10034 	movhi	r2,33792
 8000e6c:	10800084 	addi	r2,r2,2
 8000e70:	e0fffc17 	ldw	r3,-16(fp)
 8000e74:	10c0000d 	sth	r3,0(r2)
	GraphicsY1Reg = y1;
 8000e78:	00a10034 	movhi	r2,33792
 8000e7c:	10800104 	addi	r2,r2,4
 8000e80:	e0fffd17 	ldw	r3,-12(fp)
 8000e84:	10c0000d 	sth	r3,0(r2)

	GraphicsX2Reg = x2;			// write coords to x1, y1
 8000e88:	00a10034 	movhi	r2,33792
 8000e8c:	10800184 	addi	r2,r2,6
 8000e90:	e0fffe17 	ldw	r3,-8(fp)
 8000e94:	10c0000d 	sth	r3,0(r2)
	GraphicsY2Reg = y2;
 8000e98:	00a10034 	movhi	r2,33792
 8000e9c:	10800204 	addi	r2,r2,8
 8000ea0:	e0ffff17 	ldw	r3,-4(fp)
 8000ea4:	10c0000d 	sth	r3,0(r2)

	GraphicsColourReg = color;		// set pixel colour with a palette number
 8000ea8:	00a10034 	movhi	r2,33792
 8000eac:	10800384 	addi	r2,r2,14
 8000eb0:	e0c00117 	ldw	r3,4(fp)
 8000eb4:	10c0000d 	sth	r3,0(r2)
	GraphicsCommandReg = DrawLine;		// give graphics a "write pixel" command
 8000eb8:	00a10034 	movhi	r2,33792
 8000ebc:	00c000c4 	movi	r3,3
 8000ec0:	10c0000d 	sth	r3,0(r2)
}
 8000ec4:	e037883a 	mov	sp,fp
 8000ec8:	df000017 	ldw	fp,0(sp)
 8000ecc:	dec00104 	addi	sp,sp,4
 8000ed0:	f800283a 	ret

08000ed4 <DrawSolidRectangle>:

void DrawSolidRectangle(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4, int color){
 8000ed4:	defff804 	addi	sp,sp,-32
 8000ed8:	dfc00715 	stw	ra,28(sp)
 8000edc:	df000615 	stw	fp,24(sp)
 8000ee0:	df000604 	addi	fp,sp,24
 8000ee4:	e13ffc15 	stw	r4,-16(fp)
 8000ee8:	e17ffd15 	stw	r5,-12(fp)
 8000eec:	e1bffe15 	stw	r6,-8(fp)
 8000ef0:	e1ffff15 	stw	r7,-4(fp)
    int i;
    for(i=0; i<y3-y1; i++){
 8000ef4:	e03ffb15 	stw	zero,-20(fp)
 8000ef8:	00000f06 	br	8000f38 <DrawSolidRectangle+0x64>
        DrawHline(x1,y1+i,x2,y2+i,color);
 8000efc:	e0fffd17 	ldw	r3,-12(fp)
 8000f00:	e0bffb17 	ldw	r2,-20(fp)
 8000f04:	188b883a 	add	r5,r3,r2
 8000f08:	e0ffff17 	ldw	r3,-4(fp)
 8000f0c:	e0bffb17 	ldw	r2,-20(fp)
 8000f10:	1887883a 	add	r3,r3,r2
 8000f14:	e0800617 	ldw	r2,24(fp)
 8000f18:	d8800015 	stw	r2,0(sp)
 8000f1c:	e13ffc17 	ldw	r4,-16(fp)
 8000f20:	e1bffe17 	ldw	r6,-8(fp)
 8000f24:	180f883a 	mov	r7,r3
 8000f28:	8000c0c0 	call	8000c0c <DrawHline>
	GraphicsCommandReg = DrawLine;		// give graphics a "write pixel" command
}

void DrawSolidRectangle(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4, int color){
    int i;
    for(i=0; i<y3-y1; i++){
 8000f2c:	e0bffb17 	ldw	r2,-20(fp)
 8000f30:	10800044 	addi	r2,r2,1
 8000f34:	e0bffb15 	stw	r2,-20(fp)
 8000f38:	e0c00317 	ldw	r3,12(fp)
 8000f3c:	e0bffd17 	ldw	r2,-12(fp)
 8000f40:	1885c83a 	sub	r2,r3,r2
 8000f44:	e0fffb17 	ldw	r3,-20(fp)
 8000f48:	18bfec16 	blt	r3,r2,8000efc <__alt_data_end+0xfc000efc>
        DrawHline(x1,y1+i,x2,y2+i,color);
    }
}
 8000f4c:	e037883a 	mov	sp,fp
 8000f50:	dfc00117 	ldw	ra,4(sp)
 8000f54:	df000017 	ldw	fp,0(sp)
 8000f58:	dec00204 	addi	sp,sp,8
 8000f5c:	f800283a 	ret

08000f60 <DrawRectangle>:

void DrawRectangle(int x1, int y1, int x2, int y2, int x3, int y3, int x4, int y4, int color){
 8000f60:	defff904 	addi	sp,sp,-28
 8000f64:	dfc00615 	stw	ra,24(sp)
 8000f68:	df000515 	stw	fp,20(sp)
 8000f6c:	df000504 	addi	fp,sp,20
 8000f70:	e13ffc15 	stw	r4,-16(fp)
 8000f74:	e17ffd15 	stw	r5,-12(fp)
 8000f78:	e1bffe15 	stw	r6,-8(fp)
 8000f7c:	e1ffff15 	stw	r7,-4(fp)
    DrawHline(x1,y1,x2,y2,color);
 8000f80:	e0800617 	ldw	r2,24(fp)
 8000f84:	d8800015 	stw	r2,0(sp)
 8000f88:	e13ffc17 	ldw	r4,-16(fp)
 8000f8c:	e17ffd17 	ldw	r5,-12(fp)
 8000f90:	e1bffe17 	ldw	r6,-8(fp)
 8000f94:	e1ffff17 	ldw	r7,-4(fp)
 8000f98:	8000c0c0 	call	8000c0c <DrawHline>
    DrawHline(x3,y3,x4,y4,color);
 8000f9c:	e0800617 	ldw	r2,24(fp)
 8000fa0:	d8800015 	stw	r2,0(sp)
 8000fa4:	e1000217 	ldw	r4,8(fp)
 8000fa8:	e1400317 	ldw	r5,12(fp)
 8000fac:	e1800417 	ldw	r6,16(fp)
 8000fb0:	e1c00517 	ldw	r7,20(fp)
 8000fb4:	8000c0c0 	call	8000c0c <DrawHline>
    DrawVline(x1,y1,x3,y3,color);
 8000fb8:	e0800617 	ldw	r2,24(fp)
 8000fbc:	d8800015 	stw	r2,0(sp)
 8000fc0:	e13ffc17 	ldw	r4,-16(fp)
 8000fc4:	e17ffd17 	ldw	r5,-12(fp)
 8000fc8:	e1800217 	ldw	r6,8(fp)
 8000fcc:	e1c00317 	ldw	r7,12(fp)
 8000fd0:	8000d940 	call	8000d94 <DrawVline>
    DrawVline(x2,y2,x4,y4,color);
 8000fd4:	e0800617 	ldw	r2,24(fp)
 8000fd8:	d8800015 	stw	r2,0(sp)
 8000fdc:	e13ffe17 	ldw	r4,-8(fp)
 8000fe0:	e17fff17 	ldw	r5,-4(fp)
 8000fe4:	e1800417 	ldw	r6,16(fp)
 8000fe8:	e1c00517 	ldw	r7,20(fp)
 8000fec:	8000d940 	call	8000d94 <DrawVline>
}
 8000ff0:	e037883a 	mov	sp,fp
 8000ff4:	dfc00117 	ldw	ra,4(sp)
 8000ff8:	df000017 	ldw	fp,0(sp)
 8000ffc:	dec00204 	addi	sp,sp,8
 8001000:	f800283a 	ret

08001004 <waitFor>:

void waitFor (unsigned int secs) {
 8001004:	defffc04 	addi	sp,sp,-16
 8001008:	dfc00315 	stw	ra,12(sp)
 800100c:	df000215 	stw	fp,8(sp)
 8001010:	df000204 	addi	fp,sp,8
 8001014:	e13fff15 	stw	r4,-4(fp)
    unsigned int retTime = time(0) + secs;
 8001018:	0009883a 	mov	r4,zero
 800101c:	8011d880 	call	8011d88 <time>
 8001020:	1007883a 	mov	r3,r2
 8001024:	e0bfff17 	ldw	r2,-4(fp)
 8001028:	1885883a 	add	r2,r3,r2
 800102c:	e0bffe15 	stw	r2,-8(fp)
    while (time(0) < retTime);
 8001030:	0001883a 	nop
 8001034:	0009883a 	mov	r4,zero
 8001038:	8011d880 	call	8011d88 <time>
 800103c:	1007883a 	mov	r3,r2
 8001040:	e0bffe17 	ldw	r2,-8(fp)
 8001044:	18bffb36 	bltu	r3,r2,8001034 <__alt_data_end+0xfc001034>
}
 8001048:	e037883a 	mov	sp,fp
 800104c:	dfc00117 	ldw	ra,4(sp)
 8001050:	df000017 	ldw	fp,0(sp)
 8001054:	dec00204 	addi	sp,sp,8
 8001058:	f800283a 	ret

0800105c <clearScreen>:

void clearScreen(int colour){
 800105c:	defffc04 	addi	sp,sp,-16
 8001060:	dfc00315 	stw	ra,12(sp)
 8001064:	df000215 	stw	fp,8(sp)
 8001068:	df000204 	addi	fp,sp,8
 800106c:	e13fff15 	stw	r4,-4(fp)
	DrawHlineWeighted(0, 0, 800, 480, colour);
 8001070:	e0bfff17 	ldw	r2,-4(fp)
 8001074:	d8800015 	stw	r2,0(sp)
 8001078:	0009883a 	mov	r4,zero
 800107c:	000b883a 	mov	r5,zero
 8001080:	0180c804 	movi	r6,800
 8001084:	01c07804 	movi	r7,480
 8001088:	8000cac0 	call	8000cac <DrawHlineWeighted>
}
 800108c:	e037883a 	mov	sp,fp
 8001090:	dfc00117 	ldw	ra,4(sp)
 8001094:	df000017 	ldw	fp,0(sp)
 8001098:	dec00204 	addi	sp,sp,8
 800109c:	f800283a 	ret

080010a0 <write>:

void write(int x, int y, char *string, int spacing, int color, int backgroundcolor){
 80010a0:	defff604 	addi	sp,sp,-40
 80010a4:	dfc00915 	stw	ra,36(sp)
 80010a8:	df000815 	stw	fp,32(sp)
 80010ac:	dc000715 	stw	r16,28(sp)
 80010b0:	df000804 	addi	fp,sp,32
 80010b4:	e13ffb15 	stw	r4,-20(fp)
 80010b8:	e17ffc15 	stw	r5,-16(fp)
 80010bc:	e1bffd15 	stw	r6,-12(fp)
 80010c0:	e1fffe15 	stw	r7,-8(fp)
	int i;
	for (i = 0; i < strlen(string); i++){
 80010c4:	e03ffa15 	stw	zero,-24(fp)
 80010c8:	00001606 	br	8001124 <write+0x84>
		OutGraphicsCharFont2a(x+(i*spacing), y, color, backgroundcolor, string[i], 1);
 80010cc:	e0fffa17 	ldw	r3,-24(fp)
 80010d0:	e0bffe17 	ldw	r2,-8(fp)
 80010d4:	1887383a 	mul	r3,r3,r2
 80010d8:	e0bffb17 	ldw	r2,-20(fp)
 80010dc:	1889883a 	add	r4,r3,r2
 80010e0:	e0bffa17 	ldw	r2,-24(fp)
 80010e4:	e0fffd17 	ldw	r3,-12(fp)
 80010e8:	1885883a 	add	r2,r3,r2
 80010ec:	10800003 	ldbu	r2,0(r2)
 80010f0:	10803fcc 	andi	r2,r2,255
 80010f4:	1080201c 	xori	r2,r2,128
 80010f8:	10bfe004 	addi	r2,r2,-128
 80010fc:	d8800015 	stw	r2,0(sp)
 8001100:	00800044 	movi	r2,1
 8001104:	d8800115 	stw	r2,4(sp)
 8001108:	e17ffc17 	ldw	r5,-16(fp)
 800110c:	e1800217 	ldw	r6,8(fp)
 8001110:	e1c00317 	ldw	r7,12(fp)
 8001114:	80003a40 	call	80003a4 <OutGraphicsCharFont2a>
	DrawHlineWeighted(0, 0, 800, 480, colour);
}

void write(int x, int y, char *string, int spacing, int color, int backgroundcolor){
	int i;
	for (i = 0; i < strlen(string); i++){
 8001118:	e0bffa17 	ldw	r2,-24(fp)
 800111c:	10800044 	addi	r2,r2,1
 8001120:	e0bffa15 	stw	r2,-24(fp)
 8001124:	e43ffa17 	ldw	r16,-24(fp)
 8001128:	e13ffd17 	ldw	r4,-12(fp)
 800112c:	800e3c40 	call	800e3c4 <strlen>
 8001130:	80bfe636 	bltu	r16,r2,80010cc <__alt_data_end+0xfc0010cc>
		OutGraphicsCharFont2a(x+(i*spacing), y, color, backgroundcolor, string[i], 1);
	}
}
 8001134:	e6ffff04 	addi	sp,fp,-4
 8001138:	dfc00217 	ldw	ra,8(sp)
 800113c:	df000117 	ldw	fp,4(sp)
 8001140:	dc000017 	ldw	r16,0(sp)
 8001144:	dec00304 	addi	sp,sp,12
 8001148:	f800283a 	ret

0800114c <writeSmall>:

void writeSmall(int x, int y, char *string, int spacing, int color, int backgroundcolor){
 800114c:	defff604 	addi	sp,sp,-40
 8001150:	dfc00915 	stw	ra,36(sp)
 8001154:	df000815 	stw	fp,32(sp)
 8001158:	dc000715 	stw	r16,28(sp)
 800115c:	df000804 	addi	fp,sp,32
 8001160:	e13ffb15 	stw	r4,-20(fp)
 8001164:	e17ffc15 	stw	r5,-16(fp)
 8001168:	e1bffd15 	stw	r6,-12(fp)
 800116c:	e1fffe15 	stw	r7,-8(fp)
	int i;
	for (i = 0; i < strlen(string); i++){
 8001170:	e03ffa15 	stw	zero,-24(fp)
 8001174:	00001606 	br	80011d0 <writeSmall+0x84>
		OutGraphicsCharFont1(x+(i*spacing), y, color, backgroundcolor, string[i], 1);
 8001178:	e0fffa17 	ldw	r3,-24(fp)
 800117c:	e0bffe17 	ldw	r2,-8(fp)
 8001180:	1887383a 	mul	r3,r3,r2
 8001184:	e0bffb17 	ldw	r2,-20(fp)
 8001188:	1889883a 	add	r4,r3,r2
 800118c:	e0bffa17 	ldw	r2,-24(fp)
 8001190:	e0fffd17 	ldw	r3,-12(fp)
 8001194:	1885883a 	add	r2,r3,r2
 8001198:	10800003 	ldbu	r2,0(r2)
 800119c:	10803fcc 	andi	r2,r2,255
 80011a0:	1080201c 	xori	r2,r2,128
 80011a4:	10bfe004 	addi	r2,r2,-128
 80011a8:	d8800015 	stw	r2,0(sp)
 80011ac:	00800044 	movi	r2,1
 80011b0:	d8800115 	stw	r2,4(sp)
 80011b4:	e17ffc17 	ldw	r5,-16(fp)
 80011b8:	e1800217 	ldw	r6,8(fp)
 80011bc:	e1c00317 	ldw	r7,12(fp)
 80011c0:	80001f80 	call	80001f8 <OutGraphicsCharFont1>
	}
}

void writeSmall(int x, int y, char *string, int spacing, int color, int backgroundcolor){
	int i;
	for (i = 0; i < strlen(string); i++){
 80011c4:	e0bffa17 	ldw	r2,-24(fp)
 80011c8:	10800044 	addi	r2,r2,1
 80011cc:	e0bffa15 	stw	r2,-24(fp)
 80011d0:	e43ffa17 	ldw	r16,-24(fp)
 80011d4:	e13ffd17 	ldw	r4,-12(fp)
 80011d8:	800e3c40 	call	800e3c4 <strlen>
 80011dc:	80bfe636 	bltu	r16,r2,8001178 <__alt_data_end+0xfc001178>
		OutGraphicsCharFont1(x+(i*spacing), y, color, backgroundcolor, string[i], 1);
	}
}
 80011e0:	e6ffff04 	addi	sp,fp,-4
 80011e4:	dfc00217 	ldw	ra,8(sp)
 80011e8:	df000117 	ldw	fp,4(sp)
 80011ec:	dc000017 	ldw	r16,0(sp)
 80011f0:	dec00304 	addi	sp,sp,12
 80011f4:	f800283a 	ret

080011f8 <drawBox1>:


void drawBox1(int colour){
 80011f8:	defff204 	addi	sp,sp,-56
 80011fc:	dfc00d15 	stw	ra,52(sp)
 8001200:	df000c15 	stw	fp,48(sp)
 8001204:	df000c04 	addi	fp,sp,48
 8001208:	e13fff15 	stw	r4,-4(fp)
	int border = 10;
 800120c:	00800284 	movi	r2,10
 8001210:	e0bff915 	stw	r2,-28(fp)
	int x_s = 150;
 8001214:	00802584 	movi	r2,150
 8001218:	e0bffa15 	stw	r2,-24(fp)
	int y_s = 150;
 800121c:	00802584 	movi	r2,150
 8001220:	e0bffb15 	stw	r2,-20(fp)
	int b_x1 = 167;
 8001224:	008029c4 	movi	r2,167
 8001228:	e0bffc15 	stw	r2,-16(fp)
	int b_y1 = 100;
 800122c:	00801904 	movi	r2,100
 8001230:	e0bffd15 	stw	r2,-12(fp)
	int line_weight = 6;
 8001234:	00800184 	movi	r2,6
 8001238:	e0bffe15 	stw	r2,-8(fp)

	DrawRectangle(b_x1, b_y1, b_x1+x_s, b_y1, b_x1, b_y1+y_s, b_x1+x_s, b_y1+y_s, WHITE);
 800123c:	e0fffc17 	ldw	r3,-16(fp)
 8001240:	e0bffa17 	ldw	r2,-24(fp)
 8001244:	188d883a 	add	r6,r3,r2
 8001248:	e0fffd17 	ldw	r3,-12(fp)
 800124c:	e0bffb17 	ldw	r2,-20(fp)
 8001250:	1889883a 	add	r4,r3,r2
 8001254:	e0fffc17 	ldw	r3,-16(fp)
 8001258:	e0bffa17 	ldw	r2,-24(fp)
 800125c:	1887883a 	add	r3,r3,r2
 8001260:	e17ffd17 	ldw	r5,-12(fp)
 8001264:	e0bffb17 	ldw	r2,-20(fp)
 8001268:	2885883a 	add	r2,r5,r2
 800126c:	e17ffc17 	ldw	r5,-16(fp)
 8001270:	d9400015 	stw	r5,0(sp)
 8001274:	d9000115 	stw	r4,4(sp)
 8001278:	d8c00215 	stw	r3,8(sp)
 800127c:	d8800315 	stw	r2,12(sp)
 8001280:	00800044 	movi	r2,1
 8001284:	d8800415 	stw	r2,16(sp)
 8001288:	e13ffc17 	ldw	r4,-16(fp)
 800128c:	e17ffd17 	ldw	r5,-12(fp)
 8001290:	e1fffd17 	ldw	r7,-12(fp)
 8001294:	8000f600 	call	8000f60 <DrawRectangle>
	DrawSolidRectangle(b_x1+border, b_y1+border, b_x1+x_s-border, b_y1+border, b_x1+border, b_y1+y_s-border, b_x1+x_s-border, b_y1+y_s-border, colour);
 8001298:	e0fffc17 	ldw	r3,-16(fp)
 800129c:	e0bff917 	ldw	r2,-28(fp)
 80012a0:	1895883a 	add	r10,r3,r2
 80012a4:	e0fffd17 	ldw	r3,-12(fp)
 80012a8:	e0bff917 	ldw	r2,-28(fp)
 80012ac:	1893883a 	add	r9,r3,r2
 80012b0:	e0fffc17 	ldw	r3,-16(fp)
 80012b4:	e0bffa17 	ldw	r2,-24(fp)
 80012b8:	1887883a 	add	r3,r3,r2
 80012bc:	e0bff917 	ldw	r2,-28(fp)
 80012c0:	1891c83a 	sub	r8,r3,r2
 80012c4:	e0fffd17 	ldw	r3,-12(fp)
 80012c8:	e0bff917 	ldw	r2,-28(fp)
 80012cc:	188f883a 	add	r7,r3,r2
 80012d0:	e0fffc17 	ldw	r3,-16(fp)
 80012d4:	e0bff917 	ldw	r2,-28(fp)
 80012d8:	188b883a 	add	r5,r3,r2
 80012dc:	e0fffd17 	ldw	r3,-12(fp)
 80012e0:	e0bffb17 	ldw	r2,-20(fp)
 80012e4:	1887883a 	add	r3,r3,r2
 80012e8:	e0bff917 	ldw	r2,-28(fp)
 80012ec:	1889c83a 	sub	r4,r3,r2
 80012f0:	e0fffc17 	ldw	r3,-16(fp)
 80012f4:	e0bffa17 	ldw	r2,-24(fp)
 80012f8:	1887883a 	add	r3,r3,r2
 80012fc:	e0bff917 	ldw	r2,-28(fp)
 8001300:	1887c83a 	sub	r3,r3,r2
 8001304:	e1bffd17 	ldw	r6,-12(fp)
 8001308:	e0bffb17 	ldw	r2,-20(fp)
 800130c:	308d883a 	add	r6,r6,r2
 8001310:	e0bff917 	ldw	r2,-28(fp)
 8001314:	3085c83a 	sub	r2,r6,r2
 8001318:	d9400015 	stw	r5,0(sp)
 800131c:	d9000115 	stw	r4,4(sp)
 8001320:	d8c00215 	stw	r3,8(sp)
 8001324:	d8800315 	stw	r2,12(sp)
 8001328:	e0bfff17 	ldw	r2,-4(fp)
 800132c:	d8800415 	stw	r2,16(sp)
 8001330:	5009883a 	mov	r4,r10
 8001334:	480b883a 	mov	r5,r9
 8001338:	400d883a 	mov	r6,r8
 800133c:	8000ed40 	call	8000ed4 <DrawSolidRectangle>

	DrawVlineWeighted(b_x1+((x_s-line_weight)/2), b_y1+border*2, b_x1+((x_s-line_weight)/2)+line_weight, y_s+b_y1-border*2, WHITE);
 8001340:	e0fffa17 	ldw	r3,-24(fp)
 8001344:	e0bffe17 	ldw	r2,-8(fp)
 8001348:	1885c83a 	sub	r2,r3,r2
 800134c:	1006d7fa 	srli	r3,r2,31
 8001350:	1885883a 	add	r2,r3,r2
 8001354:	1005d07a 	srai	r2,r2,1
 8001358:	1007883a 	mov	r3,r2
 800135c:	e0bffc17 	ldw	r2,-16(fp)
 8001360:	188f883a 	add	r7,r3,r2
 8001364:	e0bff917 	ldw	r2,-28(fp)
 8001368:	1085883a 	add	r2,r2,r2
 800136c:	1007883a 	mov	r3,r2
 8001370:	e0bffd17 	ldw	r2,-12(fp)
 8001374:	188b883a 	add	r5,r3,r2
 8001378:	e0fffa17 	ldw	r3,-24(fp)
 800137c:	e0bffe17 	ldw	r2,-8(fp)
 8001380:	1885c83a 	sub	r2,r3,r2
 8001384:	1006d7fa 	srli	r3,r2,31
 8001388:	1885883a 	add	r2,r3,r2
 800138c:	1005d07a 	srai	r2,r2,1
 8001390:	1007883a 	mov	r3,r2
 8001394:	e0bffc17 	ldw	r2,-16(fp)
 8001398:	1887883a 	add	r3,r3,r2
 800139c:	e0bffe17 	ldw	r2,-8(fp)
 80013a0:	188d883a 	add	r6,r3,r2
 80013a4:	e0fffb17 	ldw	r3,-20(fp)
 80013a8:	e0bffd17 	ldw	r2,-12(fp)
 80013ac:	1887883a 	add	r3,r3,r2
 80013b0:	e13ff917 	ldw	r4,-28(fp)
 80013b4:	0005883a 	mov	r2,zero
 80013b8:	1105c83a 	sub	r2,r2,r4
 80013bc:	1085883a 	add	r2,r2,r2
 80013c0:	1887883a 	add	r3,r3,r2
 80013c4:	00800044 	movi	r2,1
 80013c8:	d8800015 	stw	r2,0(sp)
 80013cc:	3809883a 	mov	r4,r7
 80013d0:	180f883a 	mov	r7,r3
 80013d4:	8000d200 	call	8000d20 <DrawVlineWeighted>
	DrawHlineWeighted(b_x1+border*2, b_y1+((y_s-line_weight)/2), x_s+b_x1-border*2, b_y1+((y_s-line_weight)/2)+line_weight, WHITE);
 80013d8:	e0bff917 	ldw	r2,-28(fp)
 80013dc:	1085883a 	add	r2,r2,r2
 80013e0:	1007883a 	mov	r3,r2
 80013e4:	e0bffc17 	ldw	r2,-16(fp)
 80013e8:	188f883a 	add	r7,r3,r2
 80013ec:	e0fffb17 	ldw	r3,-20(fp)
 80013f0:	e0bffe17 	ldw	r2,-8(fp)
 80013f4:	1885c83a 	sub	r2,r3,r2
 80013f8:	1006d7fa 	srli	r3,r2,31
 80013fc:	1885883a 	add	r2,r3,r2
 8001400:	1005d07a 	srai	r2,r2,1
 8001404:	1007883a 	mov	r3,r2
 8001408:	e0bffd17 	ldw	r2,-12(fp)
 800140c:	188b883a 	add	r5,r3,r2
 8001410:	e0fffa17 	ldw	r3,-24(fp)
 8001414:	e0bffc17 	ldw	r2,-16(fp)
 8001418:	1887883a 	add	r3,r3,r2
 800141c:	e13ff917 	ldw	r4,-28(fp)
 8001420:	0005883a 	mov	r2,zero
 8001424:	1105c83a 	sub	r2,r2,r4
 8001428:	1085883a 	add	r2,r2,r2
 800142c:	188d883a 	add	r6,r3,r2
 8001430:	e0fffb17 	ldw	r3,-20(fp)
 8001434:	e0bffe17 	ldw	r2,-8(fp)
 8001438:	1885c83a 	sub	r2,r3,r2
 800143c:	1006d7fa 	srli	r3,r2,31
 8001440:	1885883a 	add	r2,r3,r2
 8001444:	1005d07a 	srai	r2,r2,1
 8001448:	1007883a 	mov	r3,r2
 800144c:	e0bffd17 	ldw	r2,-12(fp)
 8001450:	1887883a 	add	r3,r3,r2
 8001454:	e0bffe17 	ldw	r2,-8(fp)
 8001458:	1887883a 	add	r3,r3,r2
 800145c:	00800044 	movi	r2,1
 8001460:	d8800015 	stw	r2,0(sp)
 8001464:	3809883a 	mov	r4,r7
 8001468:	180f883a 	mov	r7,r3
 800146c:	8000cac0 	call	8000cac <DrawHlineWeighted>

	write(b_x1+border*2, b_y1+y_s+border*3, "Respond", 16, WHITE, BLACK);
 8001470:	e0bff917 	ldw	r2,-28(fp)
 8001474:	1085883a 	add	r2,r2,r2
 8001478:	1007883a 	mov	r3,r2
 800147c:	e0bffc17 	ldw	r2,-16(fp)
 8001480:	188b883a 	add	r5,r3,r2
 8001484:	e0fffd17 	ldw	r3,-12(fp)
 8001488:	e0bffb17 	ldw	r2,-20(fp)
 800148c:	1889883a 	add	r4,r3,r2
 8001490:	e0fff917 	ldw	r3,-28(fp)
 8001494:	1805883a 	mov	r2,r3
 8001498:	1085883a 	add	r2,r2,r2
 800149c:	10c5883a 	add	r2,r2,r3
 80014a0:	2087883a 	add	r3,r4,r2
 80014a4:	00800044 	movi	r2,1
 80014a8:	d8800015 	stw	r2,0(sp)
 80014ac:	d8000115 	stw	zero,4(sp)
 80014b0:	2809883a 	mov	r4,r5
 80014b4:	180b883a 	mov	r5,r3
 80014b8:	018200f4 	movhi	r6,2051
 80014bc:	31a98804 	addi	r6,r6,-23008
 80014c0:	01c00404 	movi	r7,16
 80014c4:	80010a00 	call	80010a0 <write>
}
 80014c8:	e037883a 	mov	sp,fp
 80014cc:	dfc00117 	ldw	ra,4(sp)
 80014d0:	df000017 	ldw	fp,0(sp)
 80014d4:	dec00204 	addi	sp,sp,8
 80014d8:	f800283a 	ret

080014dc <drawBox2>:

void drawBox2(int colour){
 80014dc:	defff004 	addi	sp,sp,-64
 80014e0:	dfc00f15 	stw	ra,60(sp)
 80014e4:	df000e15 	stw	fp,56(sp)
 80014e8:	dc400d15 	stw	r17,52(sp)
 80014ec:	dc000c15 	stw	r16,48(sp)
 80014f0:	df000e04 	addi	fp,sp,56
 80014f4:	e13ffd15 	stw	r4,-12(fp)
	int border = 10;
 80014f8:	00800284 	movi	r2,10
 80014fc:	e0bff715 	stw	r2,-36(fp)
	int x_s = 150;
 8001500:	00802584 	movi	r2,150
 8001504:	e0bff815 	stw	r2,-32(fp)
	int y_s = 150;
 8001508:	00802584 	movi	r2,150
 800150c:	e0bff915 	stw	r2,-28(fp)
	int b_x2 = 483;
 8001510:	008078c4 	movi	r2,483
 8001514:	e0bffa15 	stw	r2,-24(fp)
	int b_y2 = 100;
 8001518:	00801904 	movi	r2,100
 800151c:	e0bffb15 	stw	r2,-20(fp)
	int line_weight = 6;
 8001520:	00800184 	movi	r2,6
 8001524:	e0bffc15 	stw	r2,-16(fp)

	DrawRectangle(b_x2, b_y2, b_x2+x_s, b_y2, b_x2, b_y2+y_s, b_x2+x_s, b_y2+y_s, WHITE);
 8001528:	e0fffa17 	ldw	r3,-24(fp)
 800152c:	e0bff817 	ldw	r2,-32(fp)
 8001530:	188d883a 	add	r6,r3,r2
 8001534:	e0fffb17 	ldw	r3,-20(fp)
 8001538:	e0bff917 	ldw	r2,-28(fp)
 800153c:	1889883a 	add	r4,r3,r2
 8001540:	e0fffa17 	ldw	r3,-24(fp)
 8001544:	e0bff817 	ldw	r2,-32(fp)
 8001548:	1887883a 	add	r3,r3,r2
 800154c:	e17ffb17 	ldw	r5,-20(fp)
 8001550:	e0bff917 	ldw	r2,-28(fp)
 8001554:	2885883a 	add	r2,r5,r2
 8001558:	e17ffa17 	ldw	r5,-24(fp)
 800155c:	d9400015 	stw	r5,0(sp)
 8001560:	d9000115 	stw	r4,4(sp)
 8001564:	d8c00215 	stw	r3,8(sp)
 8001568:	d8800315 	stw	r2,12(sp)
 800156c:	00800044 	movi	r2,1
 8001570:	d8800415 	stw	r2,16(sp)
 8001574:	e13ffa17 	ldw	r4,-24(fp)
 8001578:	e17ffb17 	ldw	r5,-20(fp)
 800157c:	e1fffb17 	ldw	r7,-20(fp)
 8001580:	8000f600 	call	8000f60 <DrawRectangle>
	DrawSolidRectangle(b_x2+border, b_y2+border, b_x2+x_s-border, b_y2+border, b_x2+border, b_y2+y_s-border, b_x2+x_s-border, b_y2+y_s-border, colour);
 8001584:	e0fffa17 	ldw	r3,-24(fp)
 8001588:	e0bff717 	ldw	r2,-36(fp)
 800158c:	1895883a 	add	r10,r3,r2
 8001590:	e0fffb17 	ldw	r3,-20(fp)
 8001594:	e0bff717 	ldw	r2,-36(fp)
 8001598:	1893883a 	add	r9,r3,r2
 800159c:	e0fffa17 	ldw	r3,-24(fp)
 80015a0:	e0bff817 	ldw	r2,-32(fp)
 80015a4:	1887883a 	add	r3,r3,r2
 80015a8:	e0bff717 	ldw	r2,-36(fp)
 80015ac:	1891c83a 	sub	r8,r3,r2
 80015b0:	e0fffb17 	ldw	r3,-20(fp)
 80015b4:	e0bff717 	ldw	r2,-36(fp)
 80015b8:	188f883a 	add	r7,r3,r2
 80015bc:	e0fffa17 	ldw	r3,-24(fp)
 80015c0:	e0bff717 	ldw	r2,-36(fp)
 80015c4:	188b883a 	add	r5,r3,r2
 80015c8:	e0fffb17 	ldw	r3,-20(fp)
 80015cc:	e0bff917 	ldw	r2,-28(fp)
 80015d0:	1887883a 	add	r3,r3,r2
 80015d4:	e0bff717 	ldw	r2,-36(fp)
 80015d8:	1889c83a 	sub	r4,r3,r2
 80015dc:	e0fffa17 	ldw	r3,-24(fp)
 80015e0:	e0bff817 	ldw	r2,-32(fp)
 80015e4:	1887883a 	add	r3,r3,r2
 80015e8:	e0bff717 	ldw	r2,-36(fp)
 80015ec:	1887c83a 	sub	r3,r3,r2
 80015f0:	e1bffb17 	ldw	r6,-20(fp)
 80015f4:	e0bff917 	ldw	r2,-28(fp)
 80015f8:	308d883a 	add	r6,r6,r2
 80015fc:	e0bff717 	ldw	r2,-36(fp)
 8001600:	3085c83a 	sub	r2,r6,r2
 8001604:	d9400015 	stw	r5,0(sp)
 8001608:	d9000115 	stw	r4,4(sp)
 800160c:	d8c00215 	stw	r3,8(sp)
 8001610:	d8800315 	stw	r2,12(sp)
 8001614:	e0bffd17 	ldw	r2,-12(fp)
 8001618:	d8800415 	stw	r2,16(sp)
 800161c:	5009883a 	mov	r4,r10
 8001620:	480b883a 	mov	r5,r9
 8001624:	400d883a 	mov	r6,r8
 8001628:	8000ed40 	call	8000ed4 <DrawSolidRectangle>

	DrawVlineWeighted(b_x2+((x_s-line_weight)/2), b_y2+border*2, b_x2+((x_s-line_weight)/2)+line_weight, y_s+b_y2-border*2, WHITE);
 800162c:	e0fff817 	ldw	r3,-32(fp)
 8001630:	e0bffc17 	ldw	r2,-16(fp)
 8001634:	1885c83a 	sub	r2,r3,r2
 8001638:	1006d7fa 	srli	r3,r2,31
 800163c:	1885883a 	add	r2,r3,r2
 8001640:	1005d07a 	srai	r2,r2,1
 8001644:	1007883a 	mov	r3,r2
 8001648:	e0bffa17 	ldw	r2,-24(fp)
 800164c:	188f883a 	add	r7,r3,r2
 8001650:	e0bff717 	ldw	r2,-36(fp)
 8001654:	1085883a 	add	r2,r2,r2
 8001658:	1007883a 	mov	r3,r2
 800165c:	e0bffb17 	ldw	r2,-20(fp)
 8001660:	188b883a 	add	r5,r3,r2
 8001664:	e0fff817 	ldw	r3,-32(fp)
 8001668:	e0bffc17 	ldw	r2,-16(fp)
 800166c:	1885c83a 	sub	r2,r3,r2
 8001670:	1006d7fa 	srli	r3,r2,31
 8001674:	1885883a 	add	r2,r3,r2
 8001678:	1005d07a 	srai	r2,r2,1
 800167c:	1007883a 	mov	r3,r2
 8001680:	e0bffa17 	ldw	r2,-24(fp)
 8001684:	1887883a 	add	r3,r3,r2
 8001688:	e0bffc17 	ldw	r2,-16(fp)
 800168c:	188d883a 	add	r6,r3,r2
 8001690:	e0fff917 	ldw	r3,-28(fp)
 8001694:	e0bffb17 	ldw	r2,-20(fp)
 8001698:	1887883a 	add	r3,r3,r2
 800169c:	e13ff717 	ldw	r4,-36(fp)
 80016a0:	0005883a 	mov	r2,zero
 80016a4:	1105c83a 	sub	r2,r2,r4
 80016a8:	1085883a 	add	r2,r2,r2
 80016ac:	1887883a 	add	r3,r3,r2
 80016b0:	00800044 	movi	r2,1
 80016b4:	d8800015 	stw	r2,0(sp)
 80016b8:	3809883a 	mov	r4,r7
 80016bc:	180f883a 	mov	r7,r3
 80016c0:	8000d200 	call	8000d20 <DrawVlineWeighted>
	DrawVlineWeighted(b_x2+((x_s-line_weight)/2)-border*3, b_y2+border*2, b_x2+((x_s-line_weight)/2)+line_weight-border*3, y_s+b_y2-border*2, WHITE);
 80016c4:	e0fff817 	ldw	r3,-32(fp)
 80016c8:	e0bffc17 	ldw	r2,-16(fp)
 80016cc:	1885c83a 	sub	r2,r3,r2
 80016d0:	1006d7fa 	srli	r3,r2,31
 80016d4:	1885883a 	add	r2,r3,r2
 80016d8:	1005d07a 	srai	r2,r2,1
 80016dc:	1007883a 	mov	r3,r2
 80016e0:	e0bffa17 	ldw	r2,-24(fp)
 80016e4:	1887883a 	add	r3,r3,r2
 80016e8:	e0bff717 	ldw	r2,-36(fp)
 80016ec:	10bfff64 	muli	r2,r2,-3
 80016f0:	188f883a 	add	r7,r3,r2
 80016f4:	e0bff717 	ldw	r2,-36(fp)
 80016f8:	1085883a 	add	r2,r2,r2
 80016fc:	1007883a 	mov	r3,r2
 8001700:	e0bffb17 	ldw	r2,-20(fp)
 8001704:	188b883a 	add	r5,r3,r2
 8001708:	e0fff817 	ldw	r3,-32(fp)
 800170c:	e0bffc17 	ldw	r2,-16(fp)
 8001710:	1885c83a 	sub	r2,r3,r2
 8001714:	1006d7fa 	srli	r3,r2,31
 8001718:	1885883a 	add	r2,r3,r2
 800171c:	1005d07a 	srai	r2,r2,1
 8001720:	1007883a 	mov	r3,r2
 8001724:	e0bffa17 	ldw	r2,-24(fp)
 8001728:	1887883a 	add	r3,r3,r2
 800172c:	e0bffc17 	ldw	r2,-16(fp)
 8001730:	1887883a 	add	r3,r3,r2
 8001734:	e0bff717 	ldw	r2,-36(fp)
 8001738:	10bfff64 	muli	r2,r2,-3
 800173c:	188d883a 	add	r6,r3,r2
 8001740:	e0fff917 	ldw	r3,-28(fp)
 8001744:	e0bffb17 	ldw	r2,-20(fp)
 8001748:	1887883a 	add	r3,r3,r2
 800174c:	e13ff717 	ldw	r4,-36(fp)
 8001750:	0005883a 	mov	r2,zero
 8001754:	1105c83a 	sub	r2,r2,r4
 8001758:	1085883a 	add	r2,r2,r2
 800175c:	1887883a 	add	r3,r3,r2
 8001760:	00800044 	movi	r2,1
 8001764:	d8800015 	stw	r2,0(sp)
 8001768:	3809883a 	mov	r4,r7
 800176c:	180f883a 	mov	r7,r3
 8001770:	8000d200 	call	8000d20 <DrawVlineWeighted>
	DrawVlineWeighted(b_x2+((x_s-line_weight)/2)+border*3, b_y2+border*2, b_x2+((x_s-line_weight)/2)+line_weight+border*3, y_s+b_y2-border*2, WHITE);
 8001774:	e0fff817 	ldw	r3,-32(fp)
 8001778:	e0bffc17 	ldw	r2,-16(fp)
 800177c:	1885c83a 	sub	r2,r3,r2
 8001780:	1006d7fa 	srli	r3,r2,31
 8001784:	1885883a 	add	r2,r3,r2
 8001788:	1005d07a 	srai	r2,r2,1
 800178c:	1007883a 	mov	r3,r2
 8001790:	e0bffa17 	ldw	r2,-24(fp)
 8001794:	1889883a 	add	r4,r3,r2
 8001798:	e0fff717 	ldw	r3,-36(fp)
 800179c:	1805883a 	mov	r2,r3
 80017a0:	1085883a 	add	r2,r2,r2
 80017a4:	10c5883a 	add	r2,r2,r3
 80017a8:	208f883a 	add	r7,r4,r2
 80017ac:	e0bff717 	ldw	r2,-36(fp)
 80017b0:	1085883a 	add	r2,r2,r2
 80017b4:	1007883a 	mov	r3,r2
 80017b8:	e0bffb17 	ldw	r2,-20(fp)
 80017bc:	188b883a 	add	r5,r3,r2
 80017c0:	e0fff817 	ldw	r3,-32(fp)
 80017c4:	e0bffc17 	ldw	r2,-16(fp)
 80017c8:	1885c83a 	sub	r2,r3,r2
 80017cc:	1006d7fa 	srli	r3,r2,31
 80017d0:	1885883a 	add	r2,r3,r2
 80017d4:	1005d07a 	srai	r2,r2,1
 80017d8:	1007883a 	mov	r3,r2
 80017dc:	e0bffa17 	ldw	r2,-24(fp)
 80017e0:	1887883a 	add	r3,r3,r2
 80017e4:	e0bffc17 	ldw	r2,-16(fp)
 80017e8:	1889883a 	add	r4,r3,r2
 80017ec:	e0fff717 	ldw	r3,-36(fp)
 80017f0:	1805883a 	mov	r2,r3
 80017f4:	1085883a 	add	r2,r2,r2
 80017f8:	10c5883a 	add	r2,r2,r3
 80017fc:	208d883a 	add	r6,r4,r2
 8001800:	e0fff917 	ldw	r3,-28(fp)
 8001804:	e0bffb17 	ldw	r2,-20(fp)
 8001808:	1887883a 	add	r3,r3,r2
 800180c:	e13ff717 	ldw	r4,-36(fp)
 8001810:	0005883a 	mov	r2,zero
 8001814:	1105c83a 	sub	r2,r2,r4
 8001818:	1085883a 	add	r2,r2,r2
 800181c:	1887883a 	add	r3,r3,r2
 8001820:	00800044 	movi	r2,1
 8001824:	d8800015 	stw	r2,0(sp)
 8001828:	3809883a 	mov	r4,r7
 800182c:	180f883a 	mov	r7,r3
 8001830:	8000d200 	call	8000d20 <DrawVlineWeighted>

	write(b_x2+5.5*border, b_y2+y_s+border*3, "GPS", 16, WHITE, BLACK);
 8001834:	e13ffa17 	ldw	r4,-24(fp)
 8001838:	800d2d00 	call	800d2d0 <__floatsidf>
 800183c:	1021883a 	mov	r16,r2
 8001840:	1823883a 	mov	r17,r3
 8001844:	e13ff717 	ldw	r4,-36(fp)
 8001848:	800d2d00 	call	800d2d0 <__floatsidf>
 800184c:	100b883a 	mov	r5,r2
 8001850:	180d883a 	mov	r6,r3
 8001854:	2809883a 	mov	r4,r5
 8001858:	300b883a 	mov	r5,r6
 800185c:	000d883a 	mov	r6,zero
 8001860:	01d005b4 	movhi	r7,16406
 8001864:	800c2540 	call	800c254 <__muldf3>
 8001868:	1009883a 	mov	r4,r2
 800186c:	180b883a 	mov	r5,r3
 8001870:	2005883a 	mov	r2,r4
 8001874:	2807883a 	mov	r3,r5
 8001878:	8009883a 	mov	r4,r16
 800187c:	880b883a 	mov	r5,r17
 8001880:	100d883a 	mov	r6,r2
 8001884:	180f883a 	mov	r7,r3
 8001888:	800aea80 	call	800aea8 <__adddf3>
 800188c:	1009883a 	mov	r4,r2
 8001890:	180b883a 	mov	r5,r3
 8001894:	2005883a 	mov	r2,r4
 8001898:	2807883a 	mov	r3,r5
 800189c:	1009883a 	mov	r4,r2
 80018a0:	180b883a 	mov	r5,r3
 80018a4:	800d2480 	call	800d248 <__fixdfsi>
 80018a8:	100b883a 	mov	r5,r2
 80018ac:	e0fffb17 	ldw	r3,-20(fp)
 80018b0:	e0bff917 	ldw	r2,-28(fp)
 80018b4:	1889883a 	add	r4,r3,r2
 80018b8:	e0fff717 	ldw	r3,-36(fp)
 80018bc:	1805883a 	mov	r2,r3
 80018c0:	1085883a 	add	r2,r2,r2
 80018c4:	10c5883a 	add	r2,r2,r3
 80018c8:	2087883a 	add	r3,r4,r2
 80018cc:	00800044 	movi	r2,1
 80018d0:	d8800015 	stw	r2,0(sp)
 80018d4:	d8000115 	stw	zero,4(sp)
 80018d8:	2809883a 	mov	r4,r5
 80018dc:	180b883a 	mov	r5,r3
 80018e0:	018200f4 	movhi	r6,2051
 80018e4:	31a98a04 	addi	r6,r6,-23000
 80018e8:	01c00404 	movi	r7,16
 80018ec:	80010a00 	call	80010a0 <write>
}
 80018f0:	e6fffe04 	addi	sp,fp,-8
 80018f4:	dfc00317 	ldw	ra,12(sp)
 80018f8:	df000217 	ldw	fp,8(sp)
 80018fc:	dc400117 	ldw	r17,4(sp)
 8001900:	dc000017 	ldw	r16,0(sp)
 8001904:	dec00404 	addi	sp,sp,16
 8001908:	f800283a 	ret

0800190c <touchBox>:

int touchBox(Point p, int size, int x, int y){
 800190c:	defffb04 	addi	sp,sp,-20
 8001910:	df000415 	stw	fp,16(sp)
 8001914:	df000404 	addi	fp,sp,16
 8001918:	e13ffc15 	stw	r4,-16(fp)
 800191c:	e17ffd15 	stw	r5,-12(fp)
 8001920:	e1bffe15 	stw	r6,-8(fp)
 8001924:	e1ffff15 	stw	r7,-4(fp)
	if (p.x > x && p.x < x+size && p.y > y && p.y < y+size)
 8001928:	e0bffc17 	ldw	r2,-16(fp)
 800192c:	e0ffff17 	ldw	r3,-4(fp)
 8001930:	18800f0e 	bge	r3,r2,8001970 <touchBox+0x64>
 8001934:	e0fffc17 	ldw	r3,-16(fp)
 8001938:	e13fff17 	ldw	r4,-4(fp)
 800193c:	e0bffe17 	ldw	r2,-8(fp)
 8001940:	2085883a 	add	r2,r4,r2
 8001944:	18800a0e 	bge	r3,r2,8001970 <touchBox+0x64>
 8001948:	e0bffd17 	ldw	r2,-12(fp)
 800194c:	e0c00117 	ldw	r3,4(fp)
 8001950:	1880070e 	bge	r3,r2,8001970 <touchBox+0x64>
 8001954:	e0fffd17 	ldw	r3,-12(fp)
 8001958:	e1000117 	ldw	r4,4(fp)
 800195c:	e0bffe17 	ldw	r2,-8(fp)
 8001960:	2085883a 	add	r2,r4,r2
 8001964:	1880020e 	bge	r3,r2,8001970 <touchBox+0x64>
		return 1;
 8001968:	00800044 	movi	r2,1
 800196c:	00000106 	br	8001974 <touchBox+0x68>
	else
		return 0;
 8001970:	0005883a 	mov	r2,zero
}
 8001974:	e037883a 	mov	sp,fp
 8001978:	df000017 	ldw	fp,0(sp)
 800197c:	dec00104 	addi	sp,sp,4
 8001980:	f800283a 	ret

08001984 <drawcircle>:

void drawcircle(int x0, int y0, int radius, int colour)
{
 8001984:	defff704 	addi	sp,sp,-36
 8001988:	dfc00815 	stw	ra,32(sp)
 800198c:	df000715 	stw	fp,28(sp)
 8001990:	df000704 	addi	fp,sp,28
 8001994:	e13ffc15 	stw	r4,-16(fp)
 8001998:	e17ffd15 	stw	r5,-12(fp)
 800199c:	e1bffe15 	stw	r6,-8(fp)
 80019a0:	e1ffff15 	stw	r7,-4(fp)
    int x = radius;
 80019a4:	e0bffe17 	ldw	r2,-8(fp)
 80019a8:	e0bff915 	stw	r2,-28(fp)
    int y = 0;
 80019ac:	e03ffa15 	stw	zero,-24(fp)
    int err = 0;
 80019b0:	e03ffb15 	stw	zero,-20(fp)

    while (x >= y)
 80019b4:	00005e06 	br	8001b30 <drawcircle+0x1ac>
    {
    	WriteAPixel(x0 + x, y0 + y, colour);
 80019b8:	e0fffc17 	ldw	r3,-16(fp)
 80019bc:	e0bff917 	ldw	r2,-28(fp)
 80019c0:	1889883a 	add	r4,r3,r2
 80019c4:	e0fffd17 	ldw	r3,-12(fp)
 80019c8:	e0bffa17 	ldw	r2,-24(fp)
 80019cc:	1885883a 	add	r2,r3,r2
 80019d0:	100b883a 	mov	r5,r2
 80019d4:	e1bfff17 	ldw	r6,-4(fp)
 80019d8:	8000a840 	call	8000a84 <WriteAPixel>
    	WriteAPixel(x0 + y, y0 + x, colour);
 80019dc:	e0fffc17 	ldw	r3,-16(fp)
 80019e0:	e0bffa17 	ldw	r2,-24(fp)
 80019e4:	1889883a 	add	r4,r3,r2
 80019e8:	e0fffd17 	ldw	r3,-12(fp)
 80019ec:	e0bff917 	ldw	r2,-28(fp)
 80019f0:	1885883a 	add	r2,r3,r2
 80019f4:	100b883a 	mov	r5,r2
 80019f8:	e1bfff17 	ldw	r6,-4(fp)
 80019fc:	8000a840 	call	8000a84 <WriteAPixel>
    	WriteAPixel(x0 - y, y0 + x, colour);
 8001a00:	e0fffc17 	ldw	r3,-16(fp)
 8001a04:	e0bffa17 	ldw	r2,-24(fp)
 8001a08:	1889c83a 	sub	r4,r3,r2
 8001a0c:	e0fffd17 	ldw	r3,-12(fp)
 8001a10:	e0bff917 	ldw	r2,-28(fp)
 8001a14:	1885883a 	add	r2,r3,r2
 8001a18:	100b883a 	mov	r5,r2
 8001a1c:	e1bfff17 	ldw	r6,-4(fp)
 8001a20:	8000a840 	call	8000a84 <WriteAPixel>
    	WriteAPixel(x0 - x, y0 + y, colour);
 8001a24:	e0fffc17 	ldw	r3,-16(fp)
 8001a28:	e0bff917 	ldw	r2,-28(fp)
 8001a2c:	1889c83a 	sub	r4,r3,r2
 8001a30:	e0fffd17 	ldw	r3,-12(fp)
 8001a34:	e0bffa17 	ldw	r2,-24(fp)
 8001a38:	1885883a 	add	r2,r3,r2
 8001a3c:	100b883a 	mov	r5,r2
 8001a40:	e1bfff17 	ldw	r6,-4(fp)
 8001a44:	8000a840 	call	8000a84 <WriteAPixel>
    	WriteAPixel(x0 - x, y0 - y, colour);
 8001a48:	e0fffc17 	ldw	r3,-16(fp)
 8001a4c:	e0bff917 	ldw	r2,-28(fp)
 8001a50:	1889c83a 	sub	r4,r3,r2
 8001a54:	e0fffd17 	ldw	r3,-12(fp)
 8001a58:	e0bffa17 	ldw	r2,-24(fp)
 8001a5c:	1885c83a 	sub	r2,r3,r2
 8001a60:	100b883a 	mov	r5,r2
 8001a64:	e1bfff17 	ldw	r6,-4(fp)
 8001a68:	8000a840 	call	8000a84 <WriteAPixel>
    	WriteAPixel(x0 - y, y0 - x, colour);
 8001a6c:	e0fffc17 	ldw	r3,-16(fp)
 8001a70:	e0bffa17 	ldw	r2,-24(fp)
 8001a74:	1889c83a 	sub	r4,r3,r2
 8001a78:	e0fffd17 	ldw	r3,-12(fp)
 8001a7c:	e0bff917 	ldw	r2,-28(fp)
 8001a80:	1885c83a 	sub	r2,r3,r2
 8001a84:	100b883a 	mov	r5,r2
 8001a88:	e1bfff17 	ldw	r6,-4(fp)
 8001a8c:	8000a840 	call	8000a84 <WriteAPixel>
    	WriteAPixel(x0 + y, y0 - x, colour);
 8001a90:	e0fffc17 	ldw	r3,-16(fp)
 8001a94:	e0bffa17 	ldw	r2,-24(fp)
 8001a98:	1889883a 	add	r4,r3,r2
 8001a9c:	e0fffd17 	ldw	r3,-12(fp)
 8001aa0:	e0bff917 	ldw	r2,-28(fp)
 8001aa4:	1885c83a 	sub	r2,r3,r2
 8001aa8:	100b883a 	mov	r5,r2
 8001aac:	e1bfff17 	ldw	r6,-4(fp)
 8001ab0:	8000a840 	call	8000a84 <WriteAPixel>
    	WriteAPixel(x0 + x, y0 - y, colour);
 8001ab4:	e0fffc17 	ldw	r3,-16(fp)
 8001ab8:	e0bff917 	ldw	r2,-28(fp)
 8001abc:	1889883a 	add	r4,r3,r2
 8001ac0:	e0fffd17 	ldw	r3,-12(fp)
 8001ac4:	e0bffa17 	ldw	r2,-24(fp)
 8001ac8:	1885c83a 	sub	r2,r3,r2
 8001acc:	100b883a 	mov	r5,r2
 8001ad0:	e1bfff17 	ldw	r6,-4(fp)
 8001ad4:	8000a840 	call	8000a84 <WriteAPixel>

        if (err <= 0)
 8001ad8:	e0bffb17 	ldw	r2,-20(fp)
 8001adc:	00800916 	blt	zero,r2,8001b04 <drawcircle+0x180>
        {
            y += 1;
 8001ae0:	e0bffa17 	ldw	r2,-24(fp)
 8001ae4:	10800044 	addi	r2,r2,1
 8001ae8:	e0bffa15 	stw	r2,-24(fp)
            err += 2*y + 1;
 8001aec:	e0bffa17 	ldw	r2,-24(fp)
 8001af0:	1085883a 	add	r2,r2,r2
 8001af4:	10800044 	addi	r2,r2,1
 8001af8:	e0fffb17 	ldw	r3,-20(fp)
 8001afc:	1885883a 	add	r2,r3,r2
 8001b00:	e0bffb15 	stw	r2,-20(fp)
        }
        if (err > 0)
 8001b04:	e0bffb17 	ldw	r2,-20(fp)
 8001b08:	0080090e 	bge	zero,r2,8001b30 <drawcircle+0x1ac>
        {
            x -= 1;
 8001b0c:	e0bff917 	ldw	r2,-28(fp)
 8001b10:	10bfffc4 	addi	r2,r2,-1
 8001b14:	e0bff915 	stw	r2,-28(fp)
            err -= 2*x + 1;
 8001b18:	e0bff917 	ldw	r2,-28(fp)
 8001b1c:	1085883a 	add	r2,r2,r2
 8001b20:	0084303a 	nor	r2,zero,r2
 8001b24:	e0fffb17 	ldw	r3,-20(fp)
 8001b28:	1885883a 	add	r2,r3,r2
 8001b2c:	e0bffb15 	stw	r2,-20(fp)
{
    int x = radius;
    int y = 0;
    int err = 0;

    while (x >= y)
 8001b30:	e0fff917 	ldw	r3,-28(fp)
 8001b34:	e0bffa17 	ldw	r2,-24(fp)
 8001b38:	18bf9f0e 	bge	r3,r2,80019b8 <__alt_data_end+0xfc0019b8>
        {
            x -= 1;
            err -= 2*x + 1;
        }
    }
}
 8001b3c:	e037883a 	mov	sp,fp
 8001b40:	dfc00117 	ldw	ra,4(sp)
 8001b44:	df000017 	ldw	fp,0(sp)
 8001b48:	dec00204 	addi	sp,sp,8
 8001b4c:	f800283a 	ret

08001b50 <drawSolidcircle>:

void drawSolidcircle(int x0, int y0, int radius, int colour)
{
 8001b50:	defff604 	addi	sp,sp,-40
 8001b54:	dfc00915 	stw	ra,36(sp)
 8001b58:	df000815 	stw	fp,32(sp)
 8001b5c:	df000804 	addi	fp,sp,32
 8001b60:	e13ffc15 	stw	r4,-16(fp)
 8001b64:	e17ffd15 	stw	r5,-12(fp)
 8001b68:	e1bffe15 	stw	r6,-8(fp)
 8001b6c:	e1ffff15 	stw	r7,-4(fp)
    int x = radius;
 8001b70:	e0bffe17 	ldw	r2,-8(fp)
 8001b74:	e0bff915 	stw	r2,-28(fp)
    int y = 0;
 8001b78:	e03ffa15 	stw	zero,-24(fp)
    int err = 0;
 8001b7c:	e03ffb15 	stw	zero,-20(fp)

    while (x >= y)
 8001b80:	00005606 	br	8001cdc <drawSolidcircle+0x18c>
    {
    	Drawline(x0 + x, y0 + y, x0 - x, y0 + y, colour);
 8001b84:	e0fffc17 	ldw	r3,-16(fp)
 8001b88:	e0bff917 	ldw	r2,-28(fp)
 8001b8c:	1889883a 	add	r4,r3,r2
 8001b90:	e0fffd17 	ldw	r3,-12(fp)
 8001b94:	e0bffa17 	ldw	r2,-24(fp)
 8001b98:	188b883a 	add	r5,r3,r2
 8001b9c:	e0fffc17 	ldw	r3,-16(fp)
 8001ba0:	e0bff917 	ldw	r2,-28(fp)
 8001ba4:	188dc83a 	sub	r6,r3,r2
 8001ba8:	e0fffd17 	ldw	r3,-12(fp)
 8001bac:	e0bffa17 	ldw	r2,-24(fp)
 8001bb0:	1887883a 	add	r3,r3,r2
 8001bb4:	e0bfff17 	ldw	r2,-4(fp)
 8001bb8:	d8800015 	stw	r2,0(sp)
 8001bbc:	180f883a 	mov	r7,r3
 8001bc0:	8000e340 	call	8000e34 <Drawline>
    	Drawline(x0 - y, y0 + x, x0 + y, y0 + x, colour);
 8001bc4:	e0fffc17 	ldw	r3,-16(fp)
 8001bc8:	e0bffa17 	ldw	r2,-24(fp)
 8001bcc:	1889c83a 	sub	r4,r3,r2
 8001bd0:	e0fffd17 	ldw	r3,-12(fp)
 8001bd4:	e0bff917 	ldw	r2,-28(fp)
 8001bd8:	188b883a 	add	r5,r3,r2
 8001bdc:	e0fffc17 	ldw	r3,-16(fp)
 8001be0:	e0bffa17 	ldw	r2,-24(fp)
 8001be4:	188d883a 	add	r6,r3,r2
 8001be8:	e0fffd17 	ldw	r3,-12(fp)
 8001bec:	e0bff917 	ldw	r2,-28(fp)
 8001bf0:	1887883a 	add	r3,r3,r2
 8001bf4:	e0bfff17 	ldw	r2,-4(fp)
 8001bf8:	d8800015 	stw	r2,0(sp)
 8001bfc:	180f883a 	mov	r7,r3
 8001c00:	8000e340 	call	8000e34 <Drawline>
    	Drawline(x0 + x, y0 - y, x0 - x, y0 - y, colour);
 8001c04:	e0fffc17 	ldw	r3,-16(fp)
 8001c08:	e0bff917 	ldw	r2,-28(fp)
 8001c0c:	1889883a 	add	r4,r3,r2
 8001c10:	e0fffd17 	ldw	r3,-12(fp)
 8001c14:	e0bffa17 	ldw	r2,-24(fp)
 8001c18:	188bc83a 	sub	r5,r3,r2
 8001c1c:	e0fffc17 	ldw	r3,-16(fp)
 8001c20:	e0bff917 	ldw	r2,-28(fp)
 8001c24:	188dc83a 	sub	r6,r3,r2
 8001c28:	e0fffd17 	ldw	r3,-12(fp)
 8001c2c:	e0bffa17 	ldw	r2,-24(fp)
 8001c30:	1887c83a 	sub	r3,r3,r2
 8001c34:	e0bfff17 	ldw	r2,-4(fp)
 8001c38:	d8800015 	stw	r2,0(sp)
 8001c3c:	180f883a 	mov	r7,r3
 8001c40:	8000e340 	call	8000e34 <Drawline>
    	Drawline(x0 + y, y0 - x, x0 - y, y0 - x, colour);
 8001c44:	e0fffc17 	ldw	r3,-16(fp)
 8001c48:	e0bffa17 	ldw	r2,-24(fp)
 8001c4c:	1889883a 	add	r4,r3,r2
 8001c50:	e0fffd17 	ldw	r3,-12(fp)
 8001c54:	e0bff917 	ldw	r2,-28(fp)
 8001c58:	188bc83a 	sub	r5,r3,r2
 8001c5c:	e0fffc17 	ldw	r3,-16(fp)
 8001c60:	e0bffa17 	ldw	r2,-24(fp)
 8001c64:	188dc83a 	sub	r6,r3,r2
 8001c68:	e0fffd17 	ldw	r3,-12(fp)
 8001c6c:	e0bff917 	ldw	r2,-28(fp)
 8001c70:	1887c83a 	sub	r3,r3,r2
 8001c74:	e0bfff17 	ldw	r2,-4(fp)
 8001c78:	d8800015 	stw	r2,0(sp)
 8001c7c:	180f883a 	mov	r7,r3
 8001c80:	8000e340 	call	8000e34 <Drawline>


        if (err <= 0)
 8001c84:	e0bffb17 	ldw	r2,-20(fp)
 8001c88:	00800916 	blt	zero,r2,8001cb0 <drawSolidcircle+0x160>
        {
            y += 1;
 8001c8c:	e0bffa17 	ldw	r2,-24(fp)
 8001c90:	10800044 	addi	r2,r2,1
 8001c94:	e0bffa15 	stw	r2,-24(fp)
            err += 2*y + 1;
 8001c98:	e0bffa17 	ldw	r2,-24(fp)
 8001c9c:	1085883a 	add	r2,r2,r2
 8001ca0:	10800044 	addi	r2,r2,1
 8001ca4:	e0fffb17 	ldw	r3,-20(fp)
 8001ca8:	1885883a 	add	r2,r3,r2
 8001cac:	e0bffb15 	stw	r2,-20(fp)
        }
        if (err > 0)
 8001cb0:	e0bffb17 	ldw	r2,-20(fp)
 8001cb4:	0080090e 	bge	zero,r2,8001cdc <drawSolidcircle+0x18c>
        {
            x -= 1;
 8001cb8:	e0bff917 	ldw	r2,-28(fp)
 8001cbc:	10bfffc4 	addi	r2,r2,-1
 8001cc0:	e0bff915 	stw	r2,-28(fp)
            err -= 2*x + 1;
 8001cc4:	e0bff917 	ldw	r2,-28(fp)
 8001cc8:	1085883a 	add	r2,r2,r2
 8001ccc:	0084303a 	nor	r2,zero,r2
 8001cd0:	e0fffb17 	ldw	r3,-20(fp)
 8001cd4:	1885883a 	add	r2,r3,r2
 8001cd8:	e0bffb15 	stw	r2,-20(fp)
{
    int x = radius;
    int y = 0;
    int err = 0;

    while (x >= y)
 8001cdc:	e0fff917 	ldw	r3,-28(fp)
 8001ce0:	e0bffa17 	ldw	r2,-24(fp)
 8001ce4:	18bfa70e 	bge	r3,r2,8001b84 <__alt_data_end+0xfc001b84>
        {
            x -= 1;
            err -= 2*x + 1;
        }
    }
}
 8001ce8:	e037883a 	mov	sp,fp
 8001cec:	dfc00117 	ldw	ra,4(sp)
 8001cf0:	df000017 	ldw	fp,0(sp)
 8001cf4:	dec00204 	addi	sp,sp,8
 8001cf8:	f800283a 	ret

08001cfc <prompt>:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void prompt(){
 8001cfc:	defff404 	addi	sp,sp,-48
 8001d00:	dfc00b15 	stw	ra,44(sp)
 8001d04:	df000a15 	stw	fp,40(sp)
 8001d08:	df000a04 	addi	fp,sp,40

	clearScreen(LIGHT_CYAN);
 8001d0c:	01000f84 	movi	r4,62
 8001d10:	800105c0 	call	800105c <clearScreen>
	int i;
	for (i = 1; i < 5; i++){
 8001d14:	00800044 	movi	r2,1
 8001d18:	e0bffb15 	stw	r2,-20(fp)
 8001d1c:	00001506 	br	8001d74 <prompt+0x78>
		keyPad(400,100*i-50);
 8001d20:	e0bffb17 	ldw	r2,-20(fp)
 8001d24:	10801924 	muli	r2,r2,100
 8001d28:	10bff384 	addi	r2,r2,-50
 8001d2c:	01006404 	movi	r4,400
 8001d30:	100b883a 	mov	r5,r2
 8001d34:	80020400 	call	8002040 <keyPad>
		keyPad(500,100*i-50);
 8001d38:	e0bffb17 	ldw	r2,-20(fp)
 8001d3c:	10801924 	muli	r2,r2,100
 8001d40:	10bff384 	addi	r2,r2,-50
 8001d44:	01007d04 	movi	r4,500
 8001d48:	100b883a 	mov	r5,r2
 8001d4c:	80020400 	call	8002040 <keyPad>
		keyPad(600,100*i-50);
 8001d50:	e0bffb17 	ldw	r2,-20(fp)
 8001d54:	10801924 	muli	r2,r2,100
 8001d58:	10bff384 	addi	r2,r2,-50
 8001d5c:	01009604 	movi	r4,600
 8001d60:	100b883a 	mov	r5,r2
 8001d64:	80020400 	call	8002040 <keyPad>

void prompt(){

	clearScreen(LIGHT_CYAN);
	int i;
	for (i = 1; i < 5; i++){
 8001d68:	e0bffb17 	ldw	r2,-20(fp)
 8001d6c:	10800044 	addi	r2,r2,1
 8001d70:	e0bffb15 	stw	r2,-20(fp)
 8001d74:	e0bffb17 	ldw	r2,-20(fp)
 8001d78:	10800150 	cmplti	r2,r2,5
 8001d7c:	103fe81e 	bne	r2,zero,8001d20 <__alt_data_end+0xfc001d20>
		keyPad(500,100*i-50);
		keyPad(600,100*i-50);

	}

	write(450, 100, "1", 16, WHITE, GRAY);
 8001d80:	00800044 	movi	r2,1
 8001d84:	d8800015 	stw	r2,0(sp)
 8001d88:	00800244 	movi	r2,9
 8001d8c:	d8800115 	stw	r2,4(sp)
 8001d90:	01007084 	movi	r4,450
 8001d94:	01401904 	movi	r5,100
 8001d98:	018200f4 	movhi	r6,2051
 8001d9c:	31a98b04 	addi	r6,r6,-22996
 8001da0:	01c00404 	movi	r7,16
 8001da4:	80010a00 	call	80010a0 <write>
	write(550, 100, "2", 16, WHITE, GRAY);
 8001da8:	00800044 	movi	r2,1
 8001dac:	d8800015 	stw	r2,0(sp)
 8001db0:	00800244 	movi	r2,9
 8001db4:	d8800115 	stw	r2,4(sp)
 8001db8:	01008984 	movi	r4,550
 8001dbc:	01401904 	movi	r5,100
 8001dc0:	018200f4 	movhi	r6,2051
 8001dc4:	31a98c04 	addi	r6,r6,-22992
 8001dc8:	01c00404 	movi	r7,16
 8001dcc:	80010a00 	call	80010a0 <write>
	write(650, 100, "3", 16, WHITE, GRAY);
 8001dd0:	00800044 	movi	r2,1
 8001dd4:	d8800015 	stw	r2,0(sp)
 8001dd8:	00800244 	movi	r2,9
 8001ddc:	d8800115 	stw	r2,4(sp)
 8001de0:	0100a284 	movi	r4,650
 8001de4:	01401904 	movi	r5,100
 8001de8:	018200f4 	movhi	r6,2051
 8001dec:	31a98d04 	addi	r6,r6,-22988
 8001df0:	01c00404 	movi	r7,16
 8001df4:	80010a00 	call	80010a0 <write>

	write(450, 200, "4", 16, WHITE, GRAY);
 8001df8:	00800044 	movi	r2,1
 8001dfc:	d8800015 	stw	r2,0(sp)
 8001e00:	00800244 	movi	r2,9
 8001e04:	d8800115 	stw	r2,4(sp)
 8001e08:	01007084 	movi	r4,450
 8001e0c:	01403204 	movi	r5,200
 8001e10:	018200f4 	movhi	r6,2051
 8001e14:	31a98e04 	addi	r6,r6,-22984
 8001e18:	01c00404 	movi	r7,16
 8001e1c:	80010a00 	call	80010a0 <write>
	write(550, 200, "5", 16, WHITE, GRAY);
 8001e20:	00800044 	movi	r2,1
 8001e24:	d8800015 	stw	r2,0(sp)
 8001e28:	00800244 	movi	r2,9
 8001e2c:	d8800115 	stw	r2,4(sp)
 8001e30:	01008984 	movi	r4,550
 8001e34:	01403204 	movi	r5,200
 8001e38:	018200f4 	movhi	r6,2051
 8001e3c:	31a98f04 	addi	r6,r6,-22980
 8001e40:	01c00404 	movi	r7,16
 8001e44:	80010a00 	call	80010a0 <write>
	write(650, 200, "6", 16, WHITE, GRAY);
 8001e48:	00800044 	movi	r2,1
 8001e4c:	d8800015 	stw	r2,0(sp)
 8001e50:	00800244 	movi	r2,9
 8001e54:	d8800115 	stw	r2,4(sp)
 8001e58:	0100a284 	movi	r4,650
 8001e5c:	01403204 	movi	r5,200
 8001e60:	018200f4 	movhi	r6,2051
 8001e64:	31a99004 	addi	r6,r6,-22976
 8001e68:	01c00404 	movi	r7,16
 8001e6c:	80010a00 	call	80010a0 <write>

	write(450, 300, "7", 16, WHITE, GRAY);
 8001e70:	00800044 	movi	r2,1
 8001e74:	d8800015 	stw	r2,0(sp)
 8001e78:	00800244 	movi	r2,9
 8001e7c:	d8800115 	stw	r2,4(sp)
 8001e80:	01007084 	movi	r4,450
 8001e84:	01404b04 	movi	r5,300
 8001e88:	018200f4 	movhi	r6,2051
 8001e8c:	31a99104 	addi	r6,r6,-22972
 8001e90:	01c00404 	movi	r7,16
 8001e94:	80010a00 	call	80010a0 <write>
	write(550, 300, "8", 16, WHITE, GRAY);
 8001e98:	00800044 	movi	r2,1
 8001e9c:	d8800015 	stw	r2,0(sp)
 8001ea0:	00800244 	movi	r2,9
 8001ea4:	d8800115 	stw	r2,4(sp)
 8001ea8:	01008984 	movi	r4,550
 8001eac:	01404b04 	movi	r5,300
 8001eb0:	018200f4 	movhi	r6,2051
 8001eb4:	31a99204 	addi	r6,r6,-22968
 8001eb8:	01c00404 	movi	r7,16
 8001ebc:	80010a00 	call	80010a0 <write>
	write(650, 300, "9", 16, WHITE, GRAY);
 8001ec0:	00800044 	movi	r2,1
 8001ec4:	d8800015 	stw	r2,0(sp)
 8001ec8:	00800244 	movi	r2,9
 8001ecc:	d8800115 	stw	r2,4(sp)
 8001ed0:	0100a284 	movi	r4,650
 8001ed4:	01404b04 	movi	r5,300
 8001ed8:	018200f4 	movhi	r6,2051
 8001edc:	31a99304 	addi	r6,r6,-22964
 8001ee0:	01c00404 	movi	r7,16
 8001ee4:	80010a00 	call	80010a0 <write>

	write(450, 400, "OK", 16, GREEN, GRAY);
 8001ee8:	00800304 	movi	r2,12
 8001eec:	d8800015 	stw	r2,0(sp)
 8001ef0:	00800244 	movi	r2,9
 8001ef4:	d8800115 	stw	r2,4(sp)
 8001ef8:	01007084 	movi	r4,450
 8001efc:	01406404 	movi	r5,400
 8001f00:	018200f4 	movhi	r6,2051
 8001f04:	31a99404 	addi	r6,r6,-22960
 8001f08:	01c00404 	movi	r7,16
 8001f0c:	80010a00 	call	80010a0 <write>
	write(550, 400, "0", 16, WHITE, GRAY);
 8001f10:	00800044 	movi	r2,1
 8001f14:	d8800015 	stw	r2,0(sp)
 8001f18:	00800244 	movi	r2,9
 8001f1c:	d8800115 	stw	r2,4(sp)
 8001f20:	01008984 	movi	r4,550
 8001f24:	01406404 	movi	r5,400
 8001f28:	018200f4 	movhi	r6,2051
 8001f2c:	31a99504 	addi	r6,r6,-22956
 8001f30:	01c00404 	movi	r7,16
 8001f34:	80010a00 	call	80010a0 <write>
	write(650, 400, "<-", 16, RED, GRAY);
 8001f38:	00800084 	movi	r2,2
 8001f3c:	d8800015 	stw	r2,0(sp)
 8001f40:	00800244 	movi	r2,9
 8001f44:	d8800115 	stw	r2,4(sp)
 8001f48:	0100a284 	movi	r4,650
 8001f4c:	01406404 	movi	r5,400
 8001f50:	018200f4 	movhi	r6,2051
 8001f54:	31a99604 	addi	r6,r6,-22952
 8001f58:	01c00404 	movi	r7,16
 8001f5c:	80010a00 	call	80010a0 <write>

	int x1 = 50;
 8001f60:	00800c84 	movi	r2,50
 8001f64:	e0bffc15 	stw	r2,-16(fp)
	int y1 = 150;
 8001f68:	00802584 	movi	r2,150
 8001f6c:	e0bffd15 	stw	r2,-12(fp)
	int boxW = 300;
 8001f70:	00804b04 	movi	r2,300
 8001f74:	e0bffe15 	stw	r2,-8(fp)
	int boxH = 50;
 8001f78:	00800c84 	movi	r2,50
 8001f7c:	e0bfff15 	stw	r2,-4(fp)

	DrawSolidRectangle(x1, y1, x1+boxW, y1, x1, y1+boxH, x1+boxW, y1+boxH, WHITE);
 8001f80:	e0fffc17 	ldw	r3,-16(fp)
 8001f84:	e0bffe17 	ldw	r2,-8(fp)
 8001f88:	188d883a 	add	r6,r3,r2
 8001f8c:	e0fffd17 	ldw	r3,-12(fp)
 8001f90:	e0bfff17 	ldw	r2,-4(fp)
 8001f94:	1889883a 	add	r4,r3,r2
 8001f98:	e0fffc17 	ldw	r3,-16(fp)
 8001f9c:	e0bffe17 	ldw	r2,-8(fp)
 8001fa0:	1887883a 	add	r3,r3,r2
 8001fa4:	e17ffd17 	ldw	r5,-12(fp)
 8001fa8:	e0bfff17 	ldw	r2,-4(fp)
 8001fac:	2885883a 	add	r2,r5,r2
 8001fb0:	e17ffc17 	ldw	r5,-16(fp)
 8001fb4:	d9400015 	stw	r5,0(sp)
 8001fb8:	d9000115 	stw	r4,4(sp)
 8001fbc:	d8c00215 	stw	r3,8(sp)
 8001fc0:	d8800315 	stw	r2,12(sp)
 8001fc4:	00800044 	movi	r2,1
 8001fc8:	d8800415 	stw	r2,16(sp)
 8001fcc:	e13ffc17 	ldw	r4,-16(fp)
 8001fd0:	e17ffd17 	ldw	r5,-12(fp)
 8001fd4:	e1fffd17 	ldw	r7,-12(fp)
 8001fd8:	8000ed40 	call	8000ed4 <DrawSolidRectangle>

	write(50, 10, "Are you Safe?", 16, GRAY, LIGHT_CYAN);
 8001fdc:	00800244 	movi	r2,9
 8001fe0:	d8800015 	stw	r2,0(sp)
 8001fe4:	00800f84 	movi	r2,62
 8001fe8:	d8800115 	stw	r2,4(sp)
 8001fec:	01000c84 	movi	r4,50
 8001ff0:	01400284 	movi	r5,10
 8001ff4:	018200f4 	movhi	r6,2051
 8001ff8:	31a99704 	addi	r6,r6,-22948
 8001ffc:	01c00404 	movi	r7,16
 8002000:	80010a00 	call	80010a0 <write>
	write(50, 30, "Please enter your pin if you are!", 16, GRAY, LIGHT_CYAN);
 8002004:	00800244 	movi	r2,9
 8002008:	d8800015 	stw	r2,0(sp)
 800200c:	00800f84 	movi	r2,62
 8002010:	d8800115 	stw	r2,4(sp)
 8002014:	01000c84 	movi	r4,50
 8002018:	01400784 	movi	r5,30
 800201c:	018200f4 	movhi	r6,2051
 8002020:	31a99b04 	addi	r6,r6,-22932
 8002024:	01c00404 	movi	r7,16
 8002028:	80010a00 	call	80010a0 <write>
}
 800202c:	e037883a 	mov	sp,fp
 8002030:	dfc00117 	ldw	ra,4(sp)
 8002034:	df000017 	ldw	fp,0(sp)
 8002038:	dec00204 	addi	sp,sp,8
 800203c:	f800283a 	ret

08002040 <keyPad>:

void keyPad(int x1, int y1){
 8002040:	defff504 	addi	sp,sp,-44
 8002044:	dfc00a15 	stw	ra,40(sp)
 8002048:	df000915 	stw	fp,36(sp)
 800204c:	df000904 	addi	fp,sp,36
 8002050:	e13ffe15 	stw	r4,-8(fp)
 8002054:	e17fff15 	stw	r5,-4(fp)

	int boxW = 100;
 8002058:	00801904 	movi	r2,100
 800205c:	e0bffc15 	stw	r2,-16(fp)
	int boxH = 100;
 8002060:	00801904 	movi	r2,100
 8002064:	e0bffd15 	stw	r2,-12(fp)

	DrawSolidRectangle(x1, y1, x1+boxW, y1, x1, y1+boxH, x1+boxW, y1+boxH, GRAY);
 8002068:	e0fffe17 	ldw	r3,-8(fp)
 800206c:	e0bffc17 	ldw	r2,-16(fp)
 8002070:	188d883a 	add	r6,r3,r2
 8002074:	e0ffff17 	ldw	r3,-4(fp)
 8002078:	e0bffd17 	ldw	r2,-12(fp)
 800207c:	1889883a 	add	r4,r3,r2
 8002080:	e0fffe17 	ldw	r3,-8(fp)
 8002084:	e0bffc17 	ldw	r2,-16(fp)
 8002088:	1887883a 	add	r3,r3,r2
 800208c:	e17fff17 	ldw	r5,-4(fp)
 8002090:	e0bffd17 	ldw	r2,-12(fp)
 8002094:	2885883a 	add	r2,r5,r2
 8002098:	e17ffe17 	ldw	r5,-8(fp)
 800209c:	d9400015 	stw	r5,0(sp)
 80020a0:	d9000115 	stw	r4,4(sp)
 80020a4:	d8c00215 	stw	r3,8(sp)
 80020a8:	d8800315 	stw	r2,12(sp)
 80020ac:	00800244 	movi	r2,9
 80020b0:	d8800415 	stw	r2,16(sp)
 80020b4:	e13ffe17 	ldw	r4,-8(fp)
 80020b8:	e17fff17 	ldw	r5,-4(fp)
 80020bc:	e1ffff17 	ldw	r7,-4(fp)
 80020c0:	8000ed40 	call	8000ed4 <DrawSolidRectangle>
	DrawRectangle(x1, y1, x1+boxW, y1, x1, y1+boxH, x1+boxW, y1+boxH, LIGHT_SLATE_GRAY);
 80020c4:	e0fffe17 	ldw	r3,-8(fp)
 80020c8:	e0bffc17 	ldw	r2,-16(fp)
 80020cc:	188d883a 	add	r6,r3,r2
 80020d0:	e0ffff17 	ldw	r3,-4(fp)
 80020d4:	e0bffd17 	ldw	r2,-12(fp)
 80020d8:	1889883a 	add	r4,r3,r2
 80020dc:	e0fffe17 	ldw	r3,-8(fp)
 80020e0:	e0bffc17 	ldw	r2,-16(fp)
 80020e4:	1887883a 	add	r3,r3,r2
 80020e8:	e17fff17 	ldw	r5,-4(fp)
 80020ec:	e0bffd17 	ldw	r2,-12(fp)
 80020f0:	2885883a 	add	r2,r5,r2
 80020f4:	e17ffe17 	ldw	r5,-8(fp)
 80020f8:	d9400015 	stw	r5,0(sp)
 80020fc:	d9000115 	stw	r4,4(sp)
 8002100:	d8c00215 	stw	r3,8(sp)
 8002104:	d8800315 	stw	r2,12(sp)
 8002108:	00802144 	movi	r2,133
 800210c:	d8800415 	stw	r2,16(sp)
 8002110:	e13ffe17 	ldw	r4,-8(fp)
 8002114:	e17fff17 	ldw	r5,-4(fp)
 8002118:	e1ffff17 	ldw	r7,-4(fp)
 800211c:	8000f600 	call	8000f60 <DrawRectangle>

}
 8002120:	e037883a 	mov	sp,fp
 8002124:	dfc00117 	ldw	ra,4(sp)
 8002128:	df000017 	ldw	fp,0(sp)
 800212c:	dec00204 	addi	sp,sp,8
 8002130:	f800283a 	ret

08002134 <space>:

void space(int x1, int y1) {
 8002134:	defff504 	addi	sp,sp,-44
 8002138:	dfc00a15 	stw	ra,40(sp)
 800213c:	df000915 	stw	fp,36(sp)
 8002140:	df000904 	addi	fp,sp,36
 8002144:	e13ffe15 	stw	r4,-8(fp)
 8002148:	e17fff15 	stw	r5,-4(fp)

	int boxW = 10;
 800214c:	00800284 	movi	r2,10
 8002150:	e0bffc15 	stw	r2,-16(fp)
	int boxH = 20;
 8002154:	00800504 	movi	r2,20
 8002158:	e0bffd15 	stw	r2,-12(fp)

	DrawSolidRectangle(x1, y1, x1+boxW, y1, x1, y1+boxH, x1+boxW, y1+boxH, WHITE);
 800215c:	e0fffe17 	ldw	r3,-8(fp)
 8002160:	e0bffc17 	ldw	r2,-16(fp)
 8002164:	188d883a 	add	r6,r3,r2
 8002168:	e0ffff17 	ldw	r3,-4(fp)
 800216c:	e0bffd17 	ldw	r2,-12(fp)
 8002170:	1889883a 	add	r4,r3,r2
 8002174:	e0fffe17 	ldw	r3,-8(fp)
 8002178:	e0bffc17 	ldw	r2,-16(fp)
 800217c:	1887883a 	add	r3,r3,r2
 8002180:	e17fff17 	ldw	r5,-4(fp)
 8002184:	e0bffd17 	ldw	r2,-12(fp)
 8002188:	2885883a 	add	r2,r5,r2
 800218c:	e17ffe17 	ldw	r5,-8(fp)
 8002190:	d9400015 	stw	r5,0(sp)
 8002194:	d9000115 	stw	r4,4(sp)
 8002198:	d8c00215 	stw	r3,8(sp)
 800219c:	d8800315 	stw	r2,12(sp)
 80021a0:	00800044 	movi	r2,1
 80021a4:	d8800415 	stw	r2,16(sp)
 80021a8:	e13ffe17 	ldw	r4,-8(fp)
 80021ac:	e17fff17 	ldw	r5,-4(fp)
 80021b0:	e1ffff17 	ldw	r7,-4(fp)
 80021b4:	8000ed40 	call	8000ed4 <DrawSolidRectangle>

}
 80021b8:	e037883a 	mov	sp,fp
 80021bc:	dfc00117 	ldw	ra,4(sp)
 80021c0:	df000017 	ldw	fp,0(sp)
 80021c4:	dec00204 	addi	sp,sp,8
 80021c8:	f800283a 	ret

080021cc <space2>:

void space2(int x1, int y1) {
 80021cc:	defff504 	addi	sp,sp,-44
 80021d0:	dfc00a15 	stw	ra,40(sp)
 80021d4:	df000915 	stw	fp,36(sp)
 80021d8:	df000904 	addi	fp,sp,36
 80021dc:	e13ffe15 	stw	r4,-8(fp)
 80021e0:	e17fff15 	stw	r5,-4(fp)

	int boxW = 70;
 80021e4:	00801184 	movi	r2,70
 80021e8:	e0bffc15 	stw	r2,-16(fp)
	int boxH = 30;
 80021ec:	00800784 	movi	r2,30
 80021f0:	e0bffd15 	stw	r2,-12(fp)

	DrawSolidRectangle(x1, y1, x1+boxW, y1, x1, y1+boxH, x1+boxW, y1+boxH, LIGHT_CYAN);
 80021f4:	e0fffe17 	ldw	r3,-8(fp)
 80021f8:	e0bffc17 	ldw	r2,-16(fp)
 80021fc:	188d883a 	add	r6,r3,r2
 8002200:	e0ffff17 	ldw	r3,-4(fp)
 8002204:	e0bffd17 	ldw	r2,-12(fp)
 8002208:	1889883a 	add	r4,r3,r2
 800220c:	e0fffe17 	ldw	r3,-8(fp)
 8002210:	e0bffc17 	ldw	r2,-16(fp)
 8002214:	1887883a 	add	r3,r3,r2
 8002218:	e17fff17 	ldw	r5,-4(fp)
 800221c:	e0bffd17 	ldw	r2,-12(fp)
 8002220:	2885883a 	add	r2,r5,r2
 8002224:	e17ffe17 	ldw	r5,-8(fp)
 8002228:	d9400015 	stw	r5,0(sp)
 800222c:	d9000115 	stw	r4,4(sp)
 8002230:	d8c00215 	stw	r3,8(sp)
 8002234:	d8800315 	stw	r2,12(sp)
 8002238:	00800f84 	movi	r2,62
 800223c:	d8800415 	stw	r2,16(sp)
 8002240:	e13ffe17 	ldw	r4,-8(fp)
 8002244:	e17fff17 	ldw	r5,-4(fp)
 8002248:	e1ffff17 	ldw	r7,-4(fp)
 800224c:	8000ed40 	call	8000ed4 <DrawSolidRectangle>

}
 8002250:	e037883a 	mov	sp,fp
 8002254:	dfc00117 	ldw	ra,4(sp)
 8002258:	df000017 	ldw	fp,0(sp)
 800225c:	dec00204 	addi	sp,sp,8
 8002260:	f800283a 	ret

08002264 <append>:

void append(char*s, char c) {
 8002264:	defffb04 	addi	sp,sp,-20
 8002268:	dfc00415 	stw	ra,16(sp)
 800226c:	df000315 	stw	fp,12(sp)
 8002270:	df000304 	addi	fp,sp,12
 8002274:	e13ffe15 	stw	r4,-8(fp)
 8002278:	2805883a 	mov	r2,r5
 800227c:	e0bfff05 	stb	r2,-4(fp)
     int len = strlen(s);
 8002280:	e13ffe17 	ldw	r4,-8(fp)
 8002284:	800e3c40 	call	800e3c4 <strlen>
 8002288:	e0bffd15 	stw	r2,-12(fp)
     s[len] = c;
 800228c:	e0bffd17 	ldw	r2,-12(fp)
 8002290:	e0fffe17 	ldw	r3,-8(fp)
 8002294:	1885883a 	add	r2,r3,r2
 8002298:	e0ffff03 	ldbu	r3,-4(fp)
 800229c:	10c00005 	stb	r3,0(r2)
     s[len+1] = '\0';
 80022a0:	e0bffd17 	ldw	r2,-12(fp)
 80022a4:	10800044 	addi	r2,r2,1
 80022a8:	e0fffe17 	ldw	r3,-8(fp)
 80022ac:	1885883a 	add	r2,r3,r2
 80022b0:	10000005 	stb	zero,0(r2)
}
 80022b4:	e037883a 	mov	sp,fp
 80022b8:	dfc00117 	ldw	ra,4(sp)
 80022bc:	df000017 	ldw	fp,0(sp)
 80022c0:	dec00204 	addi	sp,sp,8
 80022c4:	f800283a 	ret

080022c8 <concat>:

char* concat(const char *s1, const char *s2)
{
 80022c8:	defffa04 	addi	sp,sp,-24
 80022cc:	dfc00515 	stw	ra,20(sp)
 80022d0:	df000415 	stw	fp,16(sp)
 80022d4:	dc000315 	stw	r16,12(sp)
 80022d8:	df000404 	addi	fp,sp,16
 80022dc:	e13ffd15 	stw	r4,-12(fp)
 80022e0:	e17ffe15 	stw	r5,-8(fp)
    char *result = malloc(strlen(s1)+strlen(s2)+1);//+1 for the zero-terminator
 80022e4:	e13ffd17 	ldw	r4,-12(fp)
 80022e8:	800e3c40 	call	800e3c4 <strlen>
 80022ec:	1021883a 	mov	r16,r2
 80022f0:	e13ffe17 	ldw	r4,-8(fp)
 80022f4:	800e3c40 	call	800e3c4 <strlen>
 80022f8:	8085883a 	add	r2,r16,r2
 80022fc:	10800044 	addi	r2,r2,1
 8002300:	1009883a 	mov	r4,r2
 8002304:	800d6dc0 	call	800d6dc <malloc>
 8002308:	e0bffc15 	stw	r2,-16(fp)
    //in real code you would check for errors in malloc here
    strcpy(result, s1);
 800230c:	e13ffc17 	ldw	r4,-16(fp)
 8002310:	e17ffd17 	ldw	r5,-12(fp)
 8002314:	800e3340 	call	800e334 <strcpy>
    strcat(result, s2);
 8002318:	e13ffc17 	ldw	r4,-16(fp)
 800231c:	e17ffe17 	ldw	r5,-8(fp)
 8002320:	800e2080 	call	800e208 <strcat>
    return result;
 8002324:	e0bffc17 	ldw	r2,-16(fp)
}
 8002328:	e6ffff04 	addi	sp,fp,-4
 800232c:	dfc00217 	ldw	ra,8(sp)
 8002330:	df000117 	ldw	fp,4(sp)
 8002334:	dc000017 	ldw	r16,0(sp)
 8002338:	dec00304 	addi	sp,sp,12
 800233c:	f800283a 	ret

08002340 <initRS232GPS>:

typedef struct { char* lat; char* lng; } Coord ;
//typedef struct {double lat; double lng;} Coord;

//initialize
void initRS232GPS(void) {
 8002340:	deffff04 	addi	sp,sp,-4
 8002344:	df000015 	stw	fp,0(sp)
 8002348:	d839883a 	mov	fp,sp
    //8 data bits, 1 stop bit
    RS232_Control_gps = 0x15;
 800234c:	00a10034 	movhi	r2,33792
 8002350:	10808404 	addi	r2,r2,528
 8002354:	00c00544 	movi	r3,21
 8002358:	10c00005 	stb	r3,0(r2)

    //9600 baud
    RS232_Baud_gps = 0x05;
 800235c:	00a10034 	movhi	r2,33792
 8002360:	10808504 	addi	r2,r2,532
 8002364:	00c00144 	movi	r3,5
 8002368:	10c00005 	stb	r3,0(r2)
}
 800236c:	e037883a 	mov	sp,fp
 8002370:	df000017 	ldw	fp,0(sp)
 8002374:	dec00104 	addi	sp,sp,4
 8002378:	f800283a 	ret

0800237c <getCharRS232GPS>:

//write to tx
char getCharRS232GPS(void) {
 800237c:	deffff04 	addi	sp,sp,-4
 8002380:	df000015 	stw	fp,0(sp)
 8002384:	d839883a 	mov	fp,sp
    while (!(RS232_Status_gps & 0x01)) {
 8002388:	0001883a 	nop
 800238c:	00a10034 	movhi	r2,33792
 8002390:	10808404 	addi	r2,r2,528
 8002394:	10800003 	ldbu	r2,0(r2)
 8002398:	10803fcc 	andi	r2,r2,255
 800239c:	1080004c 	andi	r2,r2,1
 80023a0:	103ffa26 	beq	r2,zero,800238c <__alt_data_end+0xfc00238c>
    };
    return RS232_RxData_gps;
 80023a4:	00a10034 	movhi	r2,33792
 80023a8:	10808484 	addi	r2,r2,530
 80023ac:	10800003 	ldbu	r2,0(r2)
}
 80023b0:	e037883a 	mov	sp,fp
 80023b4:	df000017 	ldw	fp,0(sp)
 80023b8:	dec00104 	addi	sp,sp,4
 80023bc:	f800283a 	ret

080023c0 <putCharRS232GPS>:

//read from rx
void putCharRS232GPS(int c) {
 80023c0:	defffe04 	addi	sp,sp,-8
 80023c4:	df000115 	stw	fp,4(sp)
 80023c8:	df000104 	addi	fp,sp,4
 80023cc:	e13fff15 	stw	r4,-4(fp)
    while (!(0x02 & RS232_Status_gps)) {
 80023d0:	0001883a 	nop
 80023d4:	00a10034 	movhi	r2,33792
 80023d8:	10808404 	addi	r2,r2,528
 80023dc:	10800003 	ldbu	r2,0(r2)
 80023e0:	1080008c 	andi	r2,r2,2
 80023e4:	10803fcc 	andi	r2,r2,255
 80023e8:	103ffa26 	beq	r2,zero,80023d4 <__alt_data_end+0xfc0023d4>
    };
    RS232_TxData_gps = c;
 80023ec:	00a10034 	movhi	r2,33792
 80023f0:	10808484 	addi	r2,r2,530
 80023f4:	e0ffff17 	ldw	r3,-4(fp)
 80023f8:	10c00005 	stb	r3,0(r2)
}
 80023fc:	e037883a 	mov	sp,fp
 8002400:	df000017 	ldw	fp,0(sp)
 8002404:	dec00104 	addi	sp,sp,4
 8002408:	f800283a 	ret

0800240c <getGPSdata>:

Coord getGPSdata() {
 800240c:	deffd304 	addi	sp,sp,-180
 8002410:	dfc02c15 	stw	ra,176(sp)
 8002414:	df002b15 	stw	fp,172(sp)
 8002418:	ddc02a15 	stw	r23,168(sp)
 800241c:	dd802915 	stw	r22,164(sp)
 8002420:	dd402815 	stw	r21,160(sp)
 8002424:	dd002715 	stw	r20,156(sp)
 8002428:	dcc02615 	stw	r19,152(sp)
 800242c:	dc802515 	stw	r18,148(sp)
 8002430:	dc402415 	stw	r17,144(sp)
 8002434:	dc002315 	stw	r16,140(sp)
 8002438:	df002b04 	addi	fp,sp,172
    int size = 500;
 800243c:	00807d04 	movi	r2,500
 8002440:	e0bfdb15 	stw	r2,-148(fp)
 8002444:	d805883a 	mov	r2,sp
 8002448:	e0bff515 	stw	r2,-44(fp)
    Coord c;
    while (1) {
        char data[size];
 800244c:	e0bfdb17 	ldw	r2,-148(fp)
 8002450:	10ffffc4 	addi	r3,r2,-1
 8002454:	e0ffdc15 	stw	r3,-144(fp)
 8002458:	1007883a 	mov	r3,r2
 800245c:	1829883a 	mov	r20,r3
 8002460:	002b883a 	mov	r21,zero
 8002464:	a006d77a 	srli	r3,r20,29
 8002468:	a82290fa 	slli	r17,r21,3
 800246c:	1c62b03a 	or	r17,r3,r17
 8002470:	a02090fa 	slli	r16,r20,3
 8002474:	1007883a 	mov	r3,r2
 8002478:	182d883a 	mov	r22,r3
 800247c:	002f883a 	mov	r23,zero
 8002480:	b006d77a 	srli	r3,r22,29
 8002484:	b82690fa 	slli	r19,r23,3
 8002488:	1ce6b03a 	or	r19,r3,r19
 800248c:	b02490fa 	slli	r18,r22,3
 8002490:	108000c4 	addi	r2,r2,3
 8002494:	1004d0ba 	srli	r2,r2,2
 8002498:	1085883a 	add	r2,r2,r2
 800249c:	1085883a 	add	r2,r2,r2
 80024a0:	d8b7c83a 	sub	sp,sp,r2
 80024a4:	d8800104 	addi	r2,sp,4
 80024a8:	1005883a 	mov	r2,r2
 80024ac:	e0bfdd15 	stw	r2,-140(fp)
        char character;
        int index = 0;
 80024b0:	e03fd615 	stw	zero,-168(fp)
        const char s[2] = ",";
 80024b4:	00800b04 	movi	r2,44
 80024b8:	e0bff40d 	sth	r2,-48(fp)
        //get data string
        do {
            character = getCharRS232GPS();
 80024bc:	800237c0 	call	800237c <getCharRS232GPS>
 80024c0:	e0bfde05 	stb	r2,-136(fp)
            printf("%c", character);
 80024c4:	e0bfde07 	ldb	r2,-136(fp)
 80024c8:	1009883a 	mov	r4,r2
 80024cc:	800df1c0 	call	800df1c <putchar>
            data[index] = character;
 80024d0:	e0ffdd17 	ldw	r3,-140(fp)
 80024d4:	e0bfd617 	ldw	r2,-168(fp)
 80024d8:	1885883a 	add	r2,r3,r2
 80024dc:	e0ffde03 	ldbu	r3,-136(fp)
 80024e0:	10c00005 	stb	r3,0(r2)
            index++;
 80024e4:	e0bfd617 	ldw	r2,-168(fp)
 80024e8:	10800044 	addi	r2,r2,1
 80024ec:	e0bfd615 	stw	r2,-168(fp)
        } while (character != '\n');
 80024f0:	e0bfde07 	ldb	r2,-136(fp)
 80024f4:	10800298 	cmpnei	r2,r2,10
 80024f8:	103ff01e 	bne	r2,zero,80024bc <__alt_data_end+0xfc0024bc>

        char *token = strtok(data, s);
 80024fc:	e0ffdd17 	ldw	r3,-140(fp)
 8002500:	e0bff404 	addi	r2,fp,-48
 8002504:	1809883a 	mov	r4,r3
 8002508:	100b883a 	mov	r5,r2
 800250c:	800fabc0 	call	800fabc <strtok>
 8002510:	e0bfdf15 	stw	r2,-132(fp)

        if (!strcmp(token, "$GPGGA")) {
 8002514:	e13fdf17 	ldw	r4,-132(fp)
 8002518:	014200f4 	movhi	r5,2051
 800251c:	2969a404 	addi	r5,r5,-22896
 8002520:	800e2900 	call	800e290 <strcmp>
 8002524:	1000d61e 	bne	r2,zero,8002880 <getGPSdata+0x474>
            printf("message_id: %s \n", token);
 8002528:	010200f4 	movhi	r4,2051
 800252c:	2129a604 	addi	r4,r4,-22888
 8002530:	e17fdf17 	ldw	r5,-132(fp)
 8002534:	800ded80 	call	800ded8 <printf>

            token = strtok(NULL, s);
 8002538:	e0bff404 	addi	r2,fp,-48
 800253c:	0009883a 	mov	r4,zero
 8002540:	100b883a 	mov	r5,r2
 8002544:	800fabc0 	call	800fabc <strtok>
 8002548:	e0bfdf15 	stw	r2,-132(fp)
            double UTC_time = atof(token);
 800254c:	e13fdf17 	ldw	r4,-132(fp)
 8002550:	800d6ac0 	call	800d6ac <atof>
 8002554:	e0bfe015 	stw	r2,-128(fp)
 8002558:	e0ffe115 	stw	r3,-124(fp)
            printf("UTC_time: %f \n", UTC_time);
 800255c:	010200f4 	movhi	r4,2051
 8002560:	2129ab04 	addi	r4,r4,-22868
 8002564:	e17fe017 	ldw	r5,-128(fp)
 8002568:	e1bfe117 	ldw	r6,-124(fp)
 800256c:	800ded80 	call	800ded8 <printf>

            token = strtok(NULL, s);
 8002570:	e0bff404 	addi	r2,fp,-48
 8002574:	0009883a 	mov	r4,zero
 8002578:	100b883a 	mov	r5,r2
 800257c:	800fabc0 	call	800fabc <strtok>
 8002580:	e0bfdf15 	stw	r2,-132(fp)
            char* latitude = token;
 8002584:	e0bfdf17 	ldw	r2,-132(fp)
 8002588:	e0bfe215 	stw	r2,-120(fp)
            printf("latitude: %s \n", latitude);
 800258c:	010200f4 	movhi	r4,2051
 8002590:	2129af04 	addi	r4,r4,-22852
 8002594:	e17fe217 	ldw	r5,-120(fp)
 8002598:	800ded80 	call	800ded8 <printf>

            token = strtok(NULL, s);
 800259c:	e0bff404 	addi	r2,fp,-48
 80025a0:	0009883a 	mov	r4,zero
 80025a4:	100b883a 	mov	r5,r2
 80025a8:	800fabc0 	call	800fabc <strtok>
 80025ac:	e0bfdf15 	stw	r2,-132(fp)
            char* NS_indicator = token;
 80025b0:	e0bfdf17 	ldw	r2,-132(fp)
 80025b4:	e0bfe315 	stw	r2,-116(fp)

            token = strtok(NULL, s);
 80025b8:	e0bff404 	addi	r2,fp,-48
 80025bc:	0009883a 	mov	r4,zero
 80025c0:	100b883a 	mov	r5,r2
 80025c4:	800fabc0 	call	800fabc <strtok>
 80025c8:	e0bfdf15 	stw	r2,-132(fp)
            char* longitude = token;
 80025cc:	e0bfdf17 	ldw	r2,-132(fp)
 80025d0:	e0bfe415 	stw	r2,-112(fp)
            printf("longitude: %s \n", longitude);
 80025d4:	010200f4 	movhi	r4,2051
 80025d8:	2129b304 	addi	r4,r4,-22836
 80025dc:	e17fe417 	ldw	r5,-112(fp)
 80025e0:	800ded80 	call	800ded8 <printf>

            token = strtok(NULL, s);
 80025e4:	e0bff404 	addi	r2,fp,-48
 80025e8:	0009883a 	mov	r4,zero
 80025ec:	100b883a 	mov	r5,r2
 80025f0:	800fabc0 	call	800fabc <strtok>
 80025f4:	e0bfdf15 	stw	r2,-132(fp)
            char* EW_indicator = token;
 80025f8:	e0bfdf17 	ldw	r2,-132(fp)
 80025fc:	e0bfe515 	stw	r2,-108(fp)

            double lat_double = atof(latitude);
 8002600:	e13fe217 	ldw	r4,-120(fp)
 8002604:	800d6ac0 	call	800d6ac <atof>
 8002608:	e0bfd715 	stw	r2,-164(fp)
 800260c:	e0ffd815 	stw	r3,-160(fp)
            double long_double = atof(longitude);
 8002610:	e13fe417 	ldw	r4,-112(fp)
 8002614:	800d6ac0 	call	800d6ac <atof>
 8002618:	e0bfd915 	stw	r2,-156(fp)
 800261c:	e0ffda15 	stw	r3,-152(fp)

            if (strcmp(NS_indicator, "S") == 0){
 8002620:	e13fe317 	ldw	r4,-116(fp)
 8002624:	014200f4 	movhi	r5,2051
 8002628:	2969b704 	addi	r5,r5,-22820
 800262c:	800e2900 	call	800e290 <strcmp>
 8002630:	1000051e 	bne	r2,zero,8002648 <getGPSdata+0x23c>
            	lat_double = lat_double*-1;
 8002634:	e0bfd717 	ldw	r2,-164(fp)
 8002638:	e0bfd715 	stw	r2,-164(fp)
 800263c:	e0bfd817 	ldw	r2,-160(fp)
 8002640:	10a0003c 	xorhi	r2,r2,32768
 8002644:	e0bfd815 	stw	r2,-160(fp)
            }

            if (strcmp(EW_indicator, "W") == 0){
 8002648:	e13fe517 	ldw	r4,-108(fp)
 800264c:	014200f4 	movhi	r5,2051
 8002650:	2969b804 	addi	r5,r5,-22816
 8002654:	800e2900 	call	800e290 <strcmp>
 8002658:	1000051e 	bne	r2,zero,8002670 <getGPSdata+0x264>
            	long_double = long_double*-1;
 800265c:	e0bfd917 	ldw	r2,-156(fp)
 8002660:	e0bfd915 	stw	r2,-156(fp)
 8002664:	e0bfda17 	ldw	r2,-152(fp)
 8002668:	10a0003c 	xorhi	r2,r2,32768
 800266c:	e0bfda15 	stw	r2,-152(fp)
            }

            int lat_degree = (int) (lat_double/100);
 8002670:	e13fd717 	ldw	r4,-164(fp)
 8002674:	e17fd817 	ldw	r5,-160(fp)
 8002678:	000d883a 	mov	r6,zero
 800267c:	01d01674 	movhi	r7,16473
 8002680:	800b7440 	call	800b744 <__divdf3>
 8002684:	1009883a 	mov	r4,r2
 8002688:	180b883a 	mov	r5,r3
 800268c:	2005883a 	mov	r2,r4
 8002690:	2807883a 	mov	r3,r5
 8002694:	1009883a 	mov	r4,r2
 8002698:	180b883a 	mov	r5,r3
 800269c:	800d2480 	call	800d248 <__fixdfsi>
 80026a0:	e0bfe615 	stw	r2,-104(fp)
            double lat_min = (lat_double-(lat_degree*100))/60;
 80026a4:	e0bfe617 	ldw	r2,-104(fp)
 80026a8:	10801924 	muli	r2,r2,100
 80026ac:	1009883a 	mov	r4,r2
 80026b0:	800d2d00 	call	800d2d0 <__floatsidf>
 80026b4:	100f883a 	mov	r7,r2
 80026b8:	1811883a 	mov	r8,r3
 80026bc:	e13fd717 	ldw	r4,-164(fp)
 80026c0:	e17fd817 	ldw	r5,-160(fp)
 80026c4:	380d883a 	mov	r6,r7
 80026c8:	400f883a 	mov	r7,r8
 80026cc:	800c9780 	call	800c978 <__subdf3>
 80026d0:	1009883a 	mov	r4,r2
 80026d4:	180b883a 	mov	r5,r3
 80026d8:	2005883a 	mov	r2,r4
 80026dc:	2807883a 	mov	r3,r5
 80026e0:	1009883a 	mov	r4,r2
 80026e4:	180b883a 	mov	r5,r3
 80026e8:	000d883a 	mov	r6,zero
 80026ec:	01d013b4 	movhi	r7,16462
 80026f0:	800b7440 	call	800b744 <__divdf3>
 80026f4:	1009883a 	mov	r4,r2
 80026f8:	180b883a 	mov	r5,r3
 80026fc:	e13fe715 	stw	r4,-100(fp)
 8002700:	e17fe815 	stw	r5,-96(fp)
            double lat_converted = lat_degree+lat_min;
 8002704:	e13fe617 	ldw	r4,-104(fp)
 8002708:	800d2d00 	call	800d2d0 <__floatsidf>
 800270c:	100b883a 	mov	r5,r2
 8002710:	180d883a 	mov	r6,r3
 8002714:	2809883a 	mov	r4,r5
 8002718:	300b883a 	mov	r5,r6
 800271c:	e1bfe717 	ldw	r6,-100(fp)
 8002720:	e1ffe817 	ldw	r7,-96(fp)
 8002724:	800aea80 	call	800aea8 <__adddf3>
 8002728:	1009883a 	mov	r4,r2
 800272c:	180b883a 	mov	r5,r3
 8002730:	e13fe915 	stw	r4,-92(fp)
 8002734:	e17fea15 	stw	r5,-88(fp)
            int long_degree = (int) (long_double/100);
 8002738:	e13fd917 	ldw	r4,-156(fp)
 800273c:	e17fda17 	ldw	r5,-152(fp)
 8002740:	000d883a 	mov	r6,zero
 8002744:	01d01674 	movhi	r7,16473
 8002748:	800b7440 	call	800b744 <__divdf3>
 800274c:	1009883a 	mov	r4,r2
 8002750:	180b883a 	mov	r5,r3
 8002754:	2005883a 	mov	r2,r4
 8002758:	2807883a 	mov	r3,r5
 800275c:	1009883a 	mov	r4,r2
 8002760:	180b883a 	mov	r5,r3
 8002764:	800d2480 	call	800d248 <__fixdfsi>
 8002768:	e0bfeb15 	stw	r2,-84(fp)
            double long_min = (long_double-(long_degree*100))/60;
 800276c:	e0bfeb17 	ldw	r2,-84(fp)
 8002770:	10801924 	muli	r2,r2,100
 8002774:	1009883a 	mov	r4,r2
 8002778:	800d2d00 	call	800d2d0 <__floatsidf>
 800277c:	100f883a 	mov	r7,r2
 8002780:	1811883a 	mov	r8,r3
 8002784:	e13fd917 	ldw	r4,-156(fp)
 8002788:	e17fda17 	ldw	r5,-152(fp)
 800278c:	380d883a 	mov	r6,r7
 8002790:	400f883a 	mov	r7,r8
 8002794:	800c9780 	call	800c978 <__subdf3>
 8002798:	1009883a 	mov	r4,r2
 800279c:	180b883a 	mov	r5,r3
 80027a0:	2005883a 	mov	r2,r4
 80027a4:	2807883a 	mov	r3,r5
 80027a8:	1009883a 	mov	r4,r2
 80027ac:	180b883a 	mov	r5,r3
 80027b0:	000d883a 	mov	r6,zero
 80027b4:	01d013b4 	movhi	r7,16462
 80027b8:	800b7440 	call	800b744 <__divdf3>
 80027bc:	1009883a 	mov	r4,r2
 80027c0:	180b883a 	mov	r5,r3
 80027c4:	e13fec15 	stw	r4,-80(fp)
 80027c8:	e17fed15 	stw	r5,-76(fp)
            double long_converted = long_degree+long_min;
 80027cc:	e13feb17 	ldw	r4,-84(fp)
 80027d0:	800d2d00 	call	800d2d0 <__floatsidf>
 80027d4:	100b883a 	mov	r5,r2
 80027d8:	180d883a 	mov	r6,r3
 80027dc:	2809883a 	mov	r4,r5
 80027e0:	300b883a 	mov	r5,r6
 80027e4:	e1bfec17 	ldw	r6,-80(fp)
 80027e8:	e1ffed17 	ldw	r7,-76(fp)
 80027ec:	800aea80 	call	800aea8 <__adddf3>
 80027f0:	1009883a 	mov	r4,r2
 80027f4:	180b883a 	mov	r5,r3
 80027f8:	e13fee15 	stw	r4,-72(fp)
 80027fc:	e17fef15 	stw	r5,-68(fp)

            char *lat_char = malloc(100*sizeof(char));
 8002800:	01001904 	movi	r4,100
 8002804:	800d6dc0 	call	800d6dc <malloc>
 8002808:	e0bff015 	stw	r2,-64(fp)
            char *long_char = malloc(100*sizeof(char));
 800280c:	01001904 	movi	r4,100
 8002810:	800d6dc0 	call	800d6dc <malloc>
 8002814:	e0bff115 	stw	r2,-60(fp)
            snprintf(lat_char, 100, "%f", lat_converted);
 8002818:	e0bfea17 	ldw	r2,-88(fp)
 800281c:	d8800015 	stw	r2,0(sp)
 8002820:	e1ffe917 	ldw	r7,-92(fp)
 8002824:	e13ff017 	ldw	r4,-64(fp)
 8002828:	01401904 	movi	r5,100
 800282c:	018200f4 	movhi	r6,2051
 8002830:	31a9b904 	addi	r6,r6,-22812
 8002834:	800e0600 	call	800e060 <snprintf>
            snprintf(long_char, 100, "%f", long_converted);
 8002838:	e0bfef17 	ldw	r2,-68(fp)
 800283c:	d8800015 	stw	r2,0(sp)
 8002840:	e1ffee17 	ldw	r7,-72(fp)
 8002844:	e13ff117 	ldw	r4,-60(fp)
 8002848:	01401904 	movi	r5,100
 800284c:	018200f4 	movhi	r6,2051
 8002850:	31a9b904 	addi	r6,r6,-22812
 8002854:	800e0600 	call	800e060 <snprintf>

            c.lat = lat_char;
 8002858:	e0bff017 	ldw	r2,-64(fp)
 800285c:	e0bff215 	stw	r2,-56(fp)
            c.lng = long_char;
 8002860:	e0bff117 	ldw	r2,-60(fp)
 8002864:	e0bff315 	stw	r2,-52(fp)

            return c;
 8002868:	e0bff217 	ldw	r2,-56(fp)
 800286c:	e0bff615 	stw	r2,-40(fp)
 8002870:	e0bff317 	ldw	r2,-52(fp)
 8002874:	e0bff715 	stw	r2,-36(fp)
 8002878:	0005883a 	mov	r2,zero
 800287c:	00000106 	br	8002884 <getGPSdata+0x478>
 8002880:	00800044 	movi	r2,1
 8002884:	e6fff517 	ldw	sp,-44(fp)
 8002888:	10800060 	cmpeqi	r2,r2,1
 800288c:	10000126 	beq	r2,zero,8002894 <getGPSdata+0x488>
        }
    }
 8002890:	003eec06 	br	8002444 <__alt_data_end+0xfc002444>
 8002894:	e0fff617 	ldw	r3,-40(fp)
 8002898:	e13ff717 	ldw	r4,-36(fp)
    return c;
}
 800289c:	1805883a 	mov	r2,r3
 80028a0:	2007883a 	mov	r3,r4
 80028a4:	e6fff804 	addi	sp,fp,-32
 80028a8:	dfc00917 	ldw	ra,36(sp)
 80028ac:	df000817 	ldw	fp,32(sp)
 80028b0:	ddc00717 	ldw	r23,28(sp)
 80028b4:	dd800617 	ldw	r22,24(sp)
 80028b8:	dd400517 	ldw	r21,20(sp)
 80028bc:	dd000417 	ldw	r20,16(sp)
 80028c0:	dcc00317 	ldw	r19,12(sp)
 80028c4:	dc800217 	ldw	r18,8(sp)
 80028c8:	dc400117 	ldw	r17,4(sp)
 80028cc:	dc000017 	ldw	r16,0(sp)
 80028d0:	dec00a04 	addi	sp,sp,40
 80028d4:	f800283a 	ret

080028d8 <concat2>:

char* concat2(const char *s1, const char *s2, const char *s3, const char *s4){
 80028d8:	defff804 	addi	sp,sp,-32
 80028dc:	dfc00715 	stw	ra,28(sp)
 80028e0:	df000615 	stw	fp,24(sp)
 80028e4:	dc000515 	stw	r16,20(sp)
 80028e8:	df000604 	addi	fp,sp,24
 80028ec:	e13ffb15 	stw	r4,-20(fp)
 80028f0:	e17ffc15 	stw	r5,-16(fp)
 80028f4:	e1bffd15 	stw	r6,-12(fp)
 80028f8:	e1fffe15 	stw	r7,-8(fp)
    char *result = malloc(strlen(s1)+strlen(s2)+strlen(s3)+strlen(s4)+1);
 80028fc:	e13ffb17 	ldw	r4,-20(fp)
 8002900:	800e3c40 	call	800e3c4 <strlen>
 8002904:	1021883a 	mov	r16,r2
 8002908:	e13ffc17 	ldw	r4,-16(fp)
 800290c:	800e3c40 	call	800e3c4 <strlen>
 8002910:	80a1883a 	add	r16,r16,r2
 8002914:	e13ffd17 	ldw	r4,-12(fp)
 8002918:	800e3c40 	call	800e3c4 <strlen>
 800291c:	80a1883a 	add	r16,r16,r2
 8002920:	e13ffe17 	ldw	r4,-8(fp)
 8002924:	800e3c40 	call	800e3c4 <strlen>
 8002928:	8085883a 	add	r2,r16,r2
 800292c:	10800044 	addi	r2,r2,1
 8002930:	1009883a 	mov	r4,r2
 8002934:	800d6dc0 	call	800d6dc <malloc>
 8002938:	e0bffa15 	stw	r2,-24(fp)
    strcpy(result, s1);
 800293c:	e13ffa17 	ldw	r4,-24(fp)
 8002940:	e17ffb17 	ldw	r5,-20(fp)
 8002944:	800e3340 	call	800e334 <strcpy>
    strcat(result, s2);
 8002948:	e13ffa17 	ldw	r4,-24(fp)
 800294c:	e17ffc17 	ldw	r5,-16(fp)
 8002950:	800e2080 	call	800e208 <strcat>
    strcat(result, s3);
 8002954:	e13ffa17 	ldw	r4,-24(fp)
 8002958:	e17ffd17 	ldw	r5,-12(fp)
 800295c:	800e2080 	call	800e208 <strcat>
    strcat(result, s4);
 8002960:	e13ffa17 	ldw	r4,-24(fp)
 8002964:	e17ffe17 	ldw	r5,-8(fp)
 8002968:	800e2080 	call	800e208 <strcat>
    return result;
 800296c:	e0bffa17 	ldw	r2,-24(fp)
}
 8002970:	e6ffff04 	addi	sp,fp,-4
 8002974:	dfc00217 	ldw	ra,8(sp)
 8002978:	df000117 	ldw	fp,4(sp)
 800297c:	dc000017 	ldw	r16,0(sp)
 8002980:	dec00304 	addi	sp,sp,12
 8002984:	f800283a 	ret

08002988 <itoa>:
int GPS_index;

float scan_angle;
const float speed = PI/8;

char* itoa(int i, char b[]){
 8002988:	defff804 	addi	sp,sp,-32
 800298c:	df000715 	stw	fp,28(sp)
 8002990:	df000704 	addi	fp,sp,28
 8002994:	e13ffe15 	stw	r4,-8(fp)
 8002998:	e17fff15 	stw	r5,-4(fp)
    char const digit[] = "0123456789";
 800299c:	008cccb4 	movhi	r2,13106
 80029a0:	108c4c04 	addi	r2,r2,12592
 80029a4:	e0bffb15 	stw	r2,-20(fp)
 80029a8:	008dcdb4 	movhi	r2,14134
 80029ac:	108d4d04 	addi	r2,r2,13620
 80029b0:	e0bffc15 	stw	r2,-16(fp)
 80029b4:	008e4e04 	movi	r2,14648
 80029b8:	e0bffd0d 	sth	r2,-12(fp)
 80029bc:	e03ffd85 	stb	zero,-10(fp)
    char* p = b;
 80029c0:	e0bfff17 	ldw	r2,-4(fp)
 80029c4:	e0bff915 	stw	r2,-28(fp)
    if(i<0){
 80029c8:	e0bffe17 	ldw	r2,-8(fp)
 80029cc:	1000080e 	bge	r2,zero,80029f0 <itoa+0x68>
        *p++ = '-';
 80029d0:	e0bff917 	ldw	r2,-28(fp)
 80029d4:	10c00044 	addi	r3,r2,1
 80029d8:	e0fff915 	stw	r3,-28(fp)
 80029dc:	00c00b44 	movi	r3,45
 80029e0:	10c00005 	stb	r3,0(r2)
        i *= -1;
 80029e4:	e0bffe17 	ldw	r2,-8(fp)
 80029e8:	0085c83a 	sub	r2,zero,r2
 80029ec:	e0bffe15 	stw	r2,-8(fp)
    }
    int shifter = i;
 80029f0:	e0bffe17 	ldw	r2,-8(fp)
 80029f4:	e0bffa15 	stw	r2,-24(fp)
    do{ //Move to where representation ends
        ++p;
 80029f8:	e0bff917 	ldw	r2,-28(fp)
 80029fc:	10800044 	addi	r2,r2,1
 8002a00:	e0bff915 	stw	r2,-28(fp)
        shifter = shifter/10;
 8002a04:	e0fffa17 	ldw	r3,-24(fp)
 8002a08:	00800284 	movi	r2,10
 8002a0c:	1885283a 	div	r2,r3,r2
 8002a10:	e0bffa15 	stw	r2,-24(fp)
    }while(shifter);
 8002a14:	e0bffa17 	ldw	r2,-24(fp)
 8002a18:	103ff71e 	bne	r2,zero,80029f8 <__alt_data_end+0xfc0029f8>
    *p = '\0';
 8002a1c:	e0bff917 	ldw	r2,-28(fp)
 8002a20:	10000005 	stb	zero,0(r2)
    do{ //Move back, inserting digits as u go
        *--p = digit[i%10];
 8002a24:	e0bff917 	ldw	r2,-28(fp)
 8002a28:	10bfffc4 	addi	r2,r2,-1
 8002a2c:	e0bff915 	stw	r2,-28(fp)
 8002a30:	e0bffe17 	ldw	r2,-8(fp)
 8002a34:	00c00284 	movi	r3,10
 8002a38:	10c7283a 	div	r3,r2,r3
 8002a3c:	18c002a4 	muli	r3,r3,10
 8002a40:	10c5c83a 	sub	r2,r2,r3
 8002a44:	e0fffb04 	addi	r3,fp,-20
 8002a48:	1885883a 	add	r2,r3,r2
 8002a4c:	10c00003 	ldbu	r3,0(r2)
 8002a50:	e0bff917 	ldw	r2,-28(fp)
 8002a54:	10c00005 	stb	r3,0(r2)
        i = i/10;
 8002a58:	e0fffe17 	ldw	r3,-8(fp)
 8002a5c:	00800284 	movi	r2,10
 8002a60:	1885283a 	div	r2,r3,r2
 8002a64:	e0bffe15 	stw	r2,-8(fp)
    }while(i);
 8002a68:	e0bffe17 	ldw	r2,-8(fp)
 8002a6c:	103fed1e 	bne	r2,zero,8002a24 <__alt_data_end+0xfc002a24>
    return b;
 8002a70:	e0bfff17 	ldw	r2,-4(fp)
}
 8002a74:	e037883a 	mov	sp,fp
 8002a78:	df000017 	ldw	fp,0(sp)
 8002a7c:	dec00104 	addi	sp,sp,4
 8002a80:	f800283a 	ret

08002a84 <gps>:

void gps(){
 8002a84:	defffc04 	addi	sp,sp,-16
 8002a88:	dfc00315 	stw	ra,12(sp)
 8002a8c:	df000215 	stw	fp,8(sp)
 8002a90:	df000204 	addi	fp,sp,8
	clearScreen(BLACK);
 8002a94:	0009883a 	mov	r4,zero
 8002a98:	800105c0 	call	800105c <clearScreen>
	write(50,50, "GPS LOCATION", 16, WHITE, BLACK);
 8002a9c:	00800044 	movi	r2,1
 8002aa0:	d8800015 	stw	r2,0(sp)
 8002aa4:	d8000115 	stw	zero,4(sp)
 8002aa8:	01000c84 	movi	r4,50
 8002aac:	01400c84 	movi	r5,50
 8002ab0:	018200f4 	movhi	r6,2051
 8002ab4:	31a9ba04 	addi	r6,r6,-22808
 8002ab8:	01c00404 	movi	r7,16
 8002abc:	80010a00 	call	80010a0 <write>
	write(50,100, "Direction: ", 16, WHITE, BLACK);
 8002ac0:	00800044 	movi	r2,1
 8002ac4:	d8800015 	stw	r2,0(sp)
 8002ac8:	d8000115 	stw	zero,4(sp)
 8002acc:	01000c84 	movi	r4,50
 8002ad0:	01401904 	movi	r5,100
 8002ad4:	018200f4 	movhi	r6,2051
 8002ad8:	31a9be04 	addi	r6,r6,-22792
 8002adc:	01c00404 	movi	r7,16
 8002ae0:	80010a00 	call	80010a0 <write>
	write(50,200, "Distance: ", 16, WHITE, BLACK);
 8002ae4:	00800044 	movi	r2,1
 8002ae8:	d8800015 	stw	r2,0(sp)
 8002aec:	d8000115 	stw	zero,4(sp)
 8002af0:	01000c84 	movi	r4,50
 8002af4:	01403204 	movi	r5,200
 8002af8:	018200f4 	movhi	r6,2051
 8002afc:	31a9c104 	addi	r6,r6,-22780
 8002b00:	01c00404 	movi	r7,16
 8002b04:	80010a00 	call	80010a0 <write>
	draw_radar(525, 270, 200);
 8002b08:	01008344 	movi	r4,525
 8002b0c:	01404384 	movi	r5,270
 8002b10:	01803204 	movi	r6,200
 8002b14:	80031780 	call	8003178 <draw_radar>

	default_loc.lat = 49.166590;
 8002b18:	008200f4 	movhi	r2,2051
 8002b1c:	10ba2604 	addi	r2,r2,-5992
 8002b20:	00f48d74 	movhi	r3,53813
 8002b24:	18fae684 	addi	r3,r3,-5222
 8002b28:	10c00015 	stw	r3,0(r2)
 8002b2c:	00d01274 	movhi	r3,16457
 8002b30:	18e55484 	addi	r3,r3,-27310
 8002b34:	10c00115 	stw	r3,4(r2)
	default_loc.lng = -123.133569;
 8002b38:	008200f4 	movhi	r2,2051
 8002b3c:	10ba2604 	addi	r2,r2,-5992
 8002b40:	00d93fb4 	movhi	r3,25854
 8002b44:	18ec2684 	addi	r3,r3,-20326
 8002b48:	10c00215 	stw	r3,8(r2)
 8002b4c:	00f017f4 	movhi	r3,49247
 8002b50:	18f22304 	addi	r3,r3,-14196
 8002b54:	10c00315 	stw	r3,12(r2)

	drawLocation(525, 270);
 8002b58:	01008344 	movi	r4,525
 8002b5c:	01404384 	movi	r5,270
 8002b60:	80037340 	call	8003734 <drawLocation>
	waitFor(1);
 8002b64:	01000044 	movi	r4,1
 8002b68:	80010040 	call	8001004 <waitFor>
}
 8002b6c:	e037883a 	mov	sp,fp
 8002b70:	dfc00117 	ldw	ra,4(sp)
 8002b74:	df000017 	ldw	fp,0(sp)
 8002b78:	dec00204 	addi	sp,sp,8
 8002b7c:	f800283a 	ret

08002b80 <toRadians>:

/**
 * Converts unit of degree to unit of radians
 */
double toRadians(double degree){
 8002b80:	defffc04 	addi	sp,sp,-16
 8002b84:	dfc00315 	stw	ra,12(sp)
 8002b88:	df000215 	stw	fp,8(sp)
 8002b8c:	df000204 	addi	fp,sp,8
 8002b90:	e13ffe15 	stw	r4,-8(fp)
 8002b94:	e17fff15 	stw	r5,-4(fp)
    return degree * M_PI / 180.0;
 8002b98:	e13ffe17 	ldw	r4,-8(fp)
 8002b9c:	e17fff17 	ldw	r5,-4(fp)
 8002ba0:	01951134 	movhi	r6,21572
 8002ba4:	318b4604 	addi	r6,r6,11544
 8002ba8:	01d00274 	movhi	r7,16393
 8002bac:	39c87ec4 	addi	r7,r7,8699
 8002bb0:	800c2540 	call	800c254 <__muldf3>
 8002bb4:	1009883a 	mov	r4,r2
 8002bb8:	180b883a 	mov	r5,r3
 8002bbc:	2005883a 	mov	r2,r4
 8002bc0:	2807883a 	mov	r3,r5
 8002bc4:	1009883a 	mov	r4,r2
 8002bc8:	180b883a 	mov	r5,r3
 8002bcc:	000d883a 	mov	r6,zero
 8002bd0:	01d019f4 	movhi	r7,16487
 8002bd4:	39e00004 	addi	r7,r7,-32768
 8002bd8:	800b7440 	call	800b744 <__divdf3>
 8002bdc:	100f883a 	mov	r7,r2
 8002be0:	1811883a 	mov	r8,r3
 8002be4:	380b883a 	mov	r5,r7
 8002be8:	400d883a 	mov	r6,r8
 8002bec:	2807883a 	mov	r3,r5
 8002bf0:	3009883a 	mov	r4,r6
}
 8002bf4:	1805883a 	mov	r2,r3
 8002bf8:	2007883a 	mov	r3,r4
 8002bfc:	e037883a 	mov	sp,fp
 8002c00:	dfc00117 	ldw	ra,4(sp)
 8002c04:	df000017 	ldw	fp,0(sp)
 8002c08:	dec00204 	addi	sp,sp,8
 8002c0c:	f800283a 	ret

08002c10 <latlng_heading>:
/**
 * Get the heading value between 2 latlng positions
 *
 * return: The angle in radians relative to North of East
 */
double latlng_heading(double lat1, double lon1, double lat2, double lon2){
 8002c10:	defff404 	addi	sp,sp,-48
 8002c14:	dfc00b15 	stw	ra,44(sp)
 8002c18:	df000a15 	stw	fp,40(sp)
 8002c1c:	dd400915 	stw	r21,36(sp)
 8002c20:	dd000815 	stw	r20,32(sp)
 8002c24:	dcc00715 	stw	r19,28(sp)
 8002c28:	dc800615 	stw	r18,24(sp)
 8002c2c:	dc400515 	stw	r17,20(sp)
 8002c30:	dc000415 	stw	r16,16(sp)
 8002c34:	df000a04 	addi	fp,sp,40
 8002c38:	e13ff615 	stw	r4,-40(fp)
 8002c3c:	e17ff715 	stw	r5,-36(fp)
 8002c40:	e1bff815 	stw	r6,-32(fp)
 8002c44:	e1fff915 	stw	r7,-28(fp)
    // Credits to: http://mathforum.org/library/drmath/view/55417.html

    return fmod(atan2(sin(lon2-lon1)*cos(lat2),
 8002c48:	e1000417 	ldw	r4,16(fp)
 8002c4c:	e1400517 	ldw	r5,20(fp)
 8002c50:	e1bff817 	ldw	r6,-32(fp)
 8002c54:	e1fff917 	ldw	r7,-28(fp)
 8002c58:	800c9780 	call	800c978 <__subdf3>
 8002c5c:	1009883a 	mov	r4,r2
 8002c60:	180b883a 	mov	r5,r3
 8002c64:	2005883a 	mov	r2,r4
 8002c68:	2807883a 	mov	r3,r5
 8002c6c:	1009883a 	mov	r4,r2
 8002c70:	180b883a 	mov	r5,r3
 8002c74:	80058240 	call	8005824 <sin>
 8002c78:	1021883a 	mov	r16,r2
 8002c7c:	1823883a 	mov	r17,r3
 8002c80:	e1000217 	ldw	r4,8(fp)
 8002c84:	e1400317 	ldw	r5,12(fp)
 8002c88:	80055440 	call	8005544 <cos>
 8002c8c:	100f883a 	mov	r7,r2
 8002c90:	1811883a 	mov	r8,r3
 8002c94:	8009883a 	mov	r4,r16
 8002c98:	880b883a 	mov	r5,r17
 8002c9c:	380d883a 	mov	r6,r7
 8002ca0:	400f883a 	mov	r7,r8
 8002ca4:	800c2540 	call	800c254 <__muldf3>
 8002ca8:	1009883a 	mov	r4,r2
 8002cac:	180b883a 	mov	r5,r3
 8002cb0:	2021883a 	mov	r16,r4
 8002cb4:	2823883a 	mov	r17,r5
               cos(lat1)*sin(lat2)-sin(lat1)*cos(lat2)*cos(lon2-lon1)),
 8002cb8:	e13ff617 	ldw	r4,-40(fp)
 8002cbc:	e17ff717 	ldw	r5,-36(fp)
 8002cc0:	80055440 	call	8005544 <cos>
 8002cc4:	1025883a 	mov	r18,r2
 8002cc8:	1827883a 	mov	r19,r3
 8002ccc:	e1000217 	ldw	r4,8(fp)
 8002cd0:	e1400317 	ldw	r5,12(fp)
 8002cd4:	80058240 	call	8005824 <sin>
 8002cd8:	100f883a 	mov	r7,r2
 8002cdc:	1811883a 	mov	r8,r3
 8002ce0:	9009883a 	mov	r4,r18
 8002ce4:	980b883a 	mov	r5,r19
 8002ce8:	380d883a 	mov	r6,r7
 8002cec:	400f883a 	mov	r7,r8
 8002cf0:	800c2540 	call	800c254 <__muldf3>
 8002cf4:	1009883a 	mov	r4,r2
 8002cf8:	180b883a 	mov	r5,r3
 8002cfc:	2025883a 	mov	r18,r4
 8002d00:	2827883a 	mov	r19,r5
 8002d04:	e13ff617 	ldw	r4,-40(fp)
 8002d08:	e17ff717 	ldw	r5,-36(fp)
 8002d0c:	80058240 	call	8005824 <sin>
 8002d10:	1029883a 	mov	r20,r2
 8002d14:	182b883a 	mov	r21,r3
 8002d18:	e1000217 	ldw	r4,8(fp)
 8002d1c:	e1400317 	ldw	r5,12(fp)
 8002d20:	80055440 	call	8005544 <cos>
 8002d24:	100f883a 	mov	r7,r2
 8002d28:	1811883a 	mov	r8,r3
 8002d2c:	a009883a 	mov	r4,r20
 8002d30:	a80b883a 	mov	r5,r21
 8002d34:	380d883a 	mov	r6,r7
 8002d38:	400f883a 	mov	r7,r8
 8002d3c:	800c2540 	call	800c254 <__muldf3>
 8002d40:	1009883a 	mov	r4,r2
 8002d44:	180b883a 	mov	r5,r3
 8002d48:	2029883a 	mov	r20,r4
 8002d4c:	282b883a 	mov	r21,r5
 8002d50:	e1000417 	ldw	r4,16(fp)
 8002d54:	e1400517 	ldw	r5,20(fp)
 8002d58:	e1bff817 	ldw	r6,-32(fp)
 8002d5c:	e1fff917 	ldw	r7,-28(fp)
 8002d60:	800c9780 	call	800c978 <__subdf3>
 8002d64:	1009883a 	mov	r4,r2
 8002d68:	180b883a 	mov	r5,r3
 8002d6c:	2005883a 	mov	r2,r4
 8002d70:	2807883a 	mov	r3,r5
 8002d74:	1009883a 	mov	r4,r2
 8002d78:	180b883a 	mov	r5,r3
 8002d7c:	80055440 	call	8005544 <cos>
 8002d80:	100f883a 	mov	r7,r2
 8002d84:	1811883a 	mov	r8,r3
 8002d88:	a009883a 	mov	r4,r20
 8002d8c:	a80b883a 	mov	r5,r21
 8002d90:	380d883a 	mov	r6,r7
 8002d94:	400f883a 	mov	r7,r8
 8002d98:	800c2540 	call	800c254 <__muldf3>
 8002d9c:	1009883a 	mov	r4,r2
 8002da0:	180b883a 	mov	r5,r3
 8002da4:	2005883a 	mov	r2,r4
 8002da8:	2807883a 	mov	r3,r5
 * return: The angle in radians relative to North of East
 */
double latlng_heading(double lat1, double lon1, double lat2, double lon2){
    // Credits to: http://mathforum.org/library/drmath/view/55417.html

    return fmod(atan2(sin(lon2-lon1)*cos(lat2),
 8002dac:	9009883a 	mov	r4,r18
 8002db0:	980b883a 	mov	r5,r19
 8002db4:	100d883a 	mov	r6,r2
 8002db8:	180f883a 	mov	r7,r3
 8002dbc:	800c9780 	call	800c978 <__subdf3>
 8002dc0:	1009883a 	mov	r4,r2
 8002dc4:	180b883a 	mov	r5,r3
 8002dc8:	2005883a 	mov	r2,r4
 8002dcc:	2807883a 	mov	r3,r5
 8002dd0:	8009883a 	mov	r4,r16
 8002dd4:	880b883a 	mov	r5,r17
 8002dd8:	100d883a 	mov	r6,r2
 8002ddc:	180f883a 	mov	r7,r3
 8002de0:	8005a3c0 	call	8005a3c <atan2>
 8002de4:	100b883a 	mov	r5,r2
 8002de8:	180d883a 	mov	r6,r3
 8002dec:	2809883a 	mov	r4,r5
 8002df0:	300b883a 	mov	r5,r6
 8002df4:	01951134 	movhi	r6,21572
 8002df8:	318b4604 	addi	r6,r6,11544
 8002dfc:	01d00674 	movhi	r7,16409
 8002e00:	39c87ec4 	addi	r7,r7,8699
 8002e04:	8005a400 	call	8005a40 <fmod>
 8002e08:	100b883a 	mov	r5,r2
 8002e0c:	180d883a 	mov	r6,r3
 8002e10:	2807883a 	mov	r3,r5
 8002e14:	3009883a 	mov	r4,r6
               cos(lat1)*sin(lat2)-sin(lat1)*cos(lat2)*cos(lon2-lon1)),
               2*M_PI);
}
 8002e18:	1805883a 	mov	r2,r3
 8002e1c:	2007883a 	mov	r3,r4
 8002e20:	e6fffa04 	addi	sp,fp,-24
 8002e24:	dfc00717 	ldw	ra,28(sp)
 8002e28:	df000617 	ldw	fp,24(sp)
 8002e2c:	dd400517 	ldw	r21,20(sp)
 8002e30:	dd000417 	ldw	r20,16(sp)
 8002e34:	dcc00317 	ldw	r19,12(sp)
 8002e38:	dc800217 	ldw	r18,8(sp)
 8002e3c:	dc400117 	ldw	r17,4(sp)
 8002e40:	dc000017 	ldw	r16,0(sp)
 8002e44:	dec00804 	addi	sp,sp,32
 8002e48:	f800283a 	ret

08002e4c <latlng_distance>:
/**
 * Get the distance between 2 latlng positions
 *
 * return: The distance in km
 */
double latlng_distance(double lat1, double lon1, double lat2, double lon2){
 8002e4c:	deffee04 	addi	sp,sp,-72
 8002e50:	dfc01115 	stw	ra,68(sp)
 8002e54:	df001015 	stw	fp,64(sp)
 8002e58:	dcc00f15 	stw	r19,60(sp)
 8002e5c:	dc800e15 	stw	r18,56(sp)
 8002e60:	dc400d15 	stw	r17,52(sp)
 8002e64:	dc000c15 	stw	r16,48(sp)
 8002e68:	df001004 	addi	fp,sp,64
 8002e6c:	e13ff815 	stw	r4,-32(fp)
 8002e70:	e17ff915 	stw	r5,-28(fp)
 8002e74:	e1bffa15 	stw	r6,-24(fp)
 8002e78:	e1fffb15 	stw	r7,-20(fp)
    double dLat = toRadians(lat2 - lat1);
 8002e7c:	e1000217 	ldw	r4,8(fp)
 8002e80:	e1400317 	ldw	r5,12(fp)
 8002e84:	e1bff817 	ldw	r6,-32(fp)
 8002e88:	e1fff917 	ldw	r7,-28(fp)
 8002e8c:	800c9780 	call	800c978 <__subdf3>
 8002e90:	1009883a 	mov	r4,r2
 8002e94:	180b883a 	mov	r5,r3
 8002e98:	2005883a 	mov	r2,r4
 8002e9c:	2807883a 	mov	r3,r5
 8002ea0:	1009883a 	mov	r4,r2
 8002ea4:	180b883a 	mov	r5,r3
 8002ea8:	8002b800 	call	8002b80 <toRadians>
 8002eac:	e0bff015 	stw	r2,-64(fp)
 8002eb0:	e0fff115 	stw	r3,-60(fp)
    double dLon = toRadians(lon2 - lon1);
 8002eb4:	e1000417 	ldw	r4,16(fp)
 8002eb8:	e1400517 	ldw	r5,20(fp)
 8002ebc:	e1bffa17 	ldw	r6,-24(fp)
 8002ec0:	e1fffb17 	ldw	r7,-20(fp)
 8002ec4:	800c9780 	call	800c978 <__subdf3>
 8002ec8:	1009883a 	mov	r4,r2
 8002ecc:	180b883a 	mov	r5,r3
 8002ed0:	2005883a 	mov	r2,r4
 8002ed4:	2807883a 	mov	r3,r5
 8002ed8:	1009883a 	mov	r4,r2
 8002edc:	180b883a 	mov	r5,r3
 8002ee0:	8002b800 	call	8002b80 <toRadians>
 8002ee4:	e0bff215 	stw	r2,-56(fp)
 8002ee8:	e0fff315 	stw	r3,-52(fp)

    double a = sin(dLat / 2) * sin(dLat / 2)
 8002eec:	e13ff017 	ldw	r4,-64(fp)
 8002ef0:	e17ff117 	ldw	r5,-60(fp)
 8002ef4:	000d883a 	mov	r6,zero
 8002ef8:	01d00034 	movhi	r7,16384
 8002efc:	800b7440 	call	800b744 <__divdf3>
 8002f00:	1009883a 	mov	r4,r2
 8002f04:	180b883a 	mov	r5,r3
 8002f08:	2005883a 	mov	r2,r4
 8002f0c:	2807883a 	mov	r3,r5
 8002f10:	1009883a 	mov	r4,r2
 8002f14:	180b883a 	mov	r5,r3
 8002f18:	80058240 	call	8005824 <sin>
 8002f1c:	1021883a 	mov	r16,r2
 8002f20:	1823883a 	mov	r17,r3
 8002f24:	e13ff017 	ldw	r4,-64(fp)
 8002f28:	e17ff117 	ldw	r5,-60(fp)
 8002f2c:	000d883a 	mov	r6,zero
 8002f30:	01d00034 	movhi	r7,16384
 8002f34:	800b7440 	call	800b744 <__divdf3>
 8002f38:	1009883a 	mov	r4,r2
 8002f3c:	180b883a 	mov	r5,r3
 8002f40:	2005883a 	mov	r2,r4
 8002f44:	2807883a 	mov	r3,r5
 8002f48:	1009883a 	mov	r4,r2
 8002f4c:	180b883a 	mov	r5,r3
 8002f50:	80058240 	call	8005824 <sin>
 8002f54:	100f883a 	mov	r7,r2
 8002f58:	1811883a 	mov	r8,r3
 8002f5c:	8009883a 	mov	r4,r16
 8002f60:	880b883a 	mov	r5,r17
 8002f64:	380d883a 	mov	r6,r7
 8002f68:	400f883a 	mov	r7,r8
 8002f6c:	800c2540 	call	800c254 <__muldf3>
 8002f70:	1009883a 	mov	r4,r2
 8002f74:	180b883a 	mov	r5,r3
 8002f78:	2021883a 	mov	r16,r4
 8002f7c:	2823883a 	mov	r17,r5
           + cos(toRadians(lat1))
 8002f80:	e13ff817 	ldw	r4,-32(fp)
 8002f84:	e17ff917 	ldw	r5,-28(fp)
 8002f88:	8002b800 	call	8002b80 <toRadians>
 8002f8c:	100b883a 	mov	r5,r2
 8002f90:	180d883a 	mov	r6,r3
 8002f94:	2809883a 	mov	r4,r5
 8002f98:	300b883a 	mov	r5,r6
 8002f9c:	80055440 	call	8005544 <cos>
 8002fa0:	1025883a 	mov	r18,r2
 8002fa4:	1827883a 	mov	r19,r3
           * cos(toRadians(lat2)) * sin(dLon / 2)
 8002fa8:	e1000217 	ldw	r4,8(fp)
 8002fac:	e1400317 	ldw	r5,12(fp)
 8002fb0:	8002b800 	call	8002b80 <toRadians>
 8002fb4:	100b883a 	mov	r5,r2
 8002fb8:	180d883a 	mov	r6,r3
 8002fbc:	2809883a 	mov	r4,r5
 8002fc0:	300b883a 	mov	r5,r6
 8002fc4:	80055440 	call	8005544 <cos>
 8002fc8:	100f883a 	mov	r7,r2
 8002fcc:	1811883a 	mov	r8,r3
 8002fd0:	9009883a 	mov	r4,r18
 8002fd4:	980b883a 	mov	r5,r19
 8002fd8:	380d883a 	mov	r6,r7
 8002fdc:	400f883a 	mov	r7,r8
 8002fe0:	800c2540 	call	800c254 <__muldf3>
 8002fe4:	1009883a 	mov	r4,r2
 8002fe8:	180b883a 	mov	r5,r3
 8002fec:	2025883a 	mov	r18,r4
 8002ff0:	2827883a 	mov	r19,r5
 8002ff4:	e13ff217 	ldw	r4,-56(fp)
 8002ff8:	e17ff317 	ldw	r5,-52(fp)
 8002ffc:	000d883a 	mov	r6,zero
 8003000:	01d00034 	movhi	r7,16384
 8003004:	800b7440 	call	800b744 <__divdf3>
 8003008:	1009883a 	mov	r4,r2
 800300c:	180b883a 	mov	r5,r3
 8003010:	2005883a 	mov	r2,r4
 8003014:	2807883a 	mov	r3,r5
 8003018:	1009883a 	mov	r4,r2
 800301c:	180b883a 	mov	r5,r3
 8003020:	80058240 	call	8005824 <sin>
 8003024:	100f883a 	mov	r7,r2
 8003028:	1811883a 	mov	r8,r3
 800302c:	9009883a 	mov	r4,r18
 8003030:	980b883a 	mov	r5,r19
 8003034:	380d883a 	mov	r6,r7
 8003038:	400f883a 	mov	r7,r8
 800303c:	800c2540 	call	800c254 <__muldf3>
 8003040:	1009883a 	mov	r4,r2
 8003044:	180b883a 	mov	r5,r3
 8003048:	2025883a 	mov	r18,r4
 800304c:	2827883a 	mov	r19,r5
           * sin(dLon / 2);
 8003050:	e13ff217 	ldw	r4,-56(fp)
 8003054:	e17ff317 	ldw	r5,-52(fp)
 8003058:	000d883a 	mov	r6,zero
 800305c:	01d00034 	movhi	r7,16384
 8003060:	800b7440 	call	800b744 <__divdf3>
 8003064:	1009883a 	mov	r4,r2
 8003068:	180b883a 	mov	r5,r3
 800306c:	2005883a 	mov	r2,r4
 8003070:	2807883a 	mov	r3,r5
 8003074:	1009883a 	mov	r4,r2
 8003078:	180b883a 	mov	r5,r3
 800307c:	80058240 	call	8005824 <sin>
 8003080:	100f883a 	mov	r7,r2
 8003084:	1811883a 	mov	r8,r3
 8003088:	9009883a 	mov	r4,r18
 800308c:	980b883a 	mov	r5,r19
 8003090:	380d883a 	mov	r6,r7
 8003094:	400f883a 	mov	r7,r8
 8003098:	800c2540 	call	800c254 <__muldf3>
 800309c:	1009883a 	mov	r4,r2
 80030a0:	180b883a 	mov	r5,r3
 80030a4:	2005883a 	mov	r2,r4
 80030a8:	2807883a 	mov	r3,r5
 */
double latlng_distance(double lat1, double lon1, double lat2, double lon2){
    double dLat = toRadians(lat2 - lat1);
    double dLon = toRadians(lon2 - lon1);

    double a = sin(dLat / 2) * sin(dLat / 2)
 80030ac:	8009883a 	mov	r4,r16
 80030b0:	880b883a 	mov	r5,r17
 80030b4:	100d883a 	mov	r6,r2
 80030b8:	180f883a 	mov	r7,r3
 80030bc:	800aea80 	call	800aea8 <__adddf3>
 80030c0:	1009883a 	mov	r4,r2
 80030c4:	180b883a 	mov	r5,r3
 80030c8:	e13ff415 	stw	r4,-48(fp)
 80030cc:	e17ff515 	stw	r5,-44(fp)
           + cos(toRadians(lat1))
           * cos(toRadians(lat2)) * sin(dLon / 2)
           * sin(dLon / 2);

    double c = 2 * asin(sqrt(a));
 80030d0:	e13ff417 	ldw	r4,-48(fp)
 80030d4:	e17ff517 	ldw	r5,-44(fp)
 80030d8:	800603c0 	call	800603c <sqrt>
 80030dc:	100b883a 	mov	r5,r2
 80030e0:	180d883a 	mov	r6,r3
 80030e4:	2809883a 	mov	r4,r5
 80030e8:	300b883a 	mov	r5,r6
 80030ec:	80059140 	call	8005914 <asin>
 80030f0:	100f883a 	mov	r7,r2
 80030f4:	1811883a 	mov	r8,r3
 80030f8:	3809883a 	mov	r4,r7
 80030fc:	400b883a 	mov	r5,r8
 8003100:	380d883a 	mov	r6,r7
 8003104:	400f883a 	mov	r7,r8
 8003108:	800aea80 	call	800aea8 <__adddf3>
 800310c:	1009883a 	mov	r4,r2
 8003110:	180b883a 	mov	r5,r3
 8003114:	e13ff615 	stw	r4,-40(fp)
 8003118:	e17ff715 	stw	r5,-36(fp)
    return 6371 * c;
 800311c:	e13ff617 	ldw	r4,-40(fp)
 8003120:	e17ff717 	ldw	r5,-36(fp)
 8003124:	000d883a 	mov	r6,zero
 8003128:	01d02e74 	movhi	r7,16569
 800312c:	39f8c004 	addi	r7,r7,-7424
 8003130:	800c2540 	call	800c254 <__muldf3>
 8003134:	100f883a 	mov	r7,r2
 8003138:	1811883a 	mov	r8,r3
 800313c:	380b883a 	mov	r5,r7
 8003140:	400d883a 	mov	r6,r8
 8003144:	2807883a 	mov	r3,r5
 8003148:	3009883a 	mov	r4,r6
}
 800314c:	1805883a 	mov	r2,r3
 8003150:	2007883a 	mov	r3,r4
 8003154:	e6fffc04 	addi	sp,fp,-16
 8003158:	dfc00517 	ldw	ra,20(sp)
 800315c:	df000417 	ldw	fp,16(sp)
 8003160:	dcc00317 	ldw	r19,12(sp)
 8003164:	dc800217 	ldw	r18,8(sp)
 8003168:	dc400117 	ldw	r17,4(sp)
 800316c:	dc000017 	ldw	r16,0(sp)
 8003170:	dec00604 	addi	sp,sp,24
 8003174:	f800283a 	ret

08003178 <draw_radar>:

void draw_radar(int cx, int cy, int radius){
 8003178:	defff504 	addi	sp,sp,-44
 800317c:	dfc00a15 	stw	ra,40(sp)
 8003180:	df000915 	stw	fp,36(sp)
 8003184:	df000904 	addi	fp,sp,36
 8003188:	e13ffd15 	stw	r4,-12(fp)
 800318c:	e17ffe15 	stw	r5,-8(fp)
 8003190:	e1bfff15 	stw	r6,-4(fp)

	//draw the circle
	int i=0;
 8003194:	e03ff815 	stw	zero,-32(fp)
	int circle_radius = radius;
 8003198:	e0bfff17 	ldw	r2,-4(fp)
 800319c:	e0bff915 	stw	r2,-28(fp)
	int increment = floor(circle_radius/3);
 80031a0:	e0fff917 	ldw	r3,-28(fp)
 80031a4:	008000c4 	movi	r2,3
 80031a8:	1885283a 	div	r2,r3,r2
 80031ac:	1009883a 	mov	r4,r2
 80031b0:	800d2d00 	call	800d2d0 <__floatsidf>
 80031b4:	100b883a 	mov	r5,r2
 80031b8:	180d883a 	mov	r6,r3
 80031bc:	2809883a 	mov	r4,r5
 80031c0:	300b883a 	mov	r5,r6
 80031c4:	80056300 	call	8005630 <floor>
 80031c8:	100b883a 	mov	r5,r2
 80031cc:	180d883a 	mov	r6,r3
 80031d0:	2809883a 	mov	r4,r5
 80031d4:	300b883a 	mov	r5,r6
 80031d8:	800d2480 	call	800d248 <__fixdfsi>
 80031dc:	e0bffa15 	stw	r2,-24(fp)

	for(;i<3; i++){
 80031e0:	00000c06 	br	8003214 <draw_radar+0x9c>
		drawcircle(cx,cy,circle_radius,GREEN);
 80031e4:	e13ffd17 	ldw	r4,-12(fp)
 80031e8:	e17ffe17 	ldw	r5,-8(fp)
 80031ec:	e1bff917 	ldw	r6,-28(fp)
 80031f0:	01c00304 	movi	r7,12
 80031f4:	80019840 	call	8001984 <drawcircle>
		circle_radius=circle_radius - increment;
 80031f8:	e0fff917 	ldw	r3,-28(fp)
 80031fc:	e0bffa17 	ldw	r2,-24(fp)
 8003200:	1885c83a 	sub	r2,r3,r2
 8003204:	e0bff915 	stw	r2,-28(fp)
	//draw the circle
	int i=0;
	int circle_radius = radius;
	int increment = floor(circle_radius/3);

	for(;i<3; i++){
 8003208:	e0bff817 	ldw	r2,-32(fp)
 800320c:	10800044 	addi	r2,r2,1
 8003210:	e0bff815 	stw	r2,-32(fp)
 8003214:	e0bff817 	ldw	r2,-32(fp)
 8003218:	108000d0 	cmplti	r2,r2,3
 800321c:	103ff11e 	bne	r2,zero,80031e4 <__alt_data_end+0xfc0031e4>
		drawcircle(cx,cy,circle_radius,GREEN);
		circle_radius=circle_radius - increment;
	}

	//draw radial line
	i=0;
 8003220:	e03ff815 	stw	zero,-32(fp)
	int x_diff = radius * cos(PI/4);
 8003224:	e13fff17 	ldw	r4,-4(fp)
 8003228:	800d2d00 	call	800d2d0 <__floatsidf>
 800322c:	100b883a 	mov	r5,r2
 8003230:	180d883a 	mov	r6,r3
 8003234:	2809883a 	mov	r4,r5
 8003238:	300b883a 	mov	r5,r6
 800323c:	0199b5b4 	movhi	r6,26326
 8003240:	319ce0c4 	addi	r6,r6,29571
 8003244:	01cff9f4 	movhi	r7,16359
 8003248:	39e82784 	addi	r7,r7,-24418
 800324c:	800c2540 	call	800c254 <__muldf3>
 8003250:	1009883a 	mov	r4,r2
 8003254:	180b883a 	mov	r5,r3
 8003258:	2005883a 	mov	r2,r4
 800325c:	2807883a 	mov	r3,r5
 8003260:	1009883a 	mov	r4,r2
 8003264:	180b883a 	mov	r5,r3
 8003268:	800d2480 	call	800d248 <__fixdfsi>
 800326c:	e0bffb15 	stw	r2,-20(fp)
	int y_diff = radius * sin(PI/4);
 8003270:	e13fff17 	ldw	r4,-4(fp)
 8003274:	800d2d00 	call	800d2d0 <__floatsidf>
 8003278:	100b883a 	mov	r5,r2
 800327c:	180d883a 	mov	r6,r3
 8003280:	2809883a 	mov	r4,r5
 8003284:	300b883a 	mov	r5,r6
 8003288:	01998a34 	movhi	r6,26152
 800328c:	31810584 	addi	r6,r6,1046
 8003290:	01cff9f4 	movhi	r7,16359
 8003294:	39e82784 	addi	r7,r7,-24418
 8003298:	800c2540 	call	800c254 <__muldf3>
 800329c:	1009883a 	mov	r4,r2
 80032a0:	180b883a 	mov	r5,r3
 80032a4:	2005883a 	mov	r2,r4
 80032a8:	2807883a 	mov	r3,r5
 80032ac:	1009883a 	mov	r4,r2
 80032b0:	180b883a 	mov	r5,r3
 80032b4:	800d2480 	call	800d248 <__fixdfsi>
 80032b8:	e0bffc15 	stw	r2,-16(fp)
	DrawHline(cx-radius,cy, cx+radius, cy, GREEN);
 80032bc:	e0fffd17 	ldw	r3,-12(fp)
 80032c0:	e0bfff17 	ldw	r2,-4(fp)
 80032c4:	1889c83a 	sub	r4,r3,r2
 80032c8:	e0fffd17 	ldw	r3,-12(fp)
 80032cc:	e0bfff17 	ldw	r2,-4(fp)
 80032d0:	1887883a 	add	r3,r3,r2
 80032d4:	00800304 	movi	r2,12
 80032d8:	d8800015 	stw	r2,0(sp)
 80032dc:	e17ffe17 	ldw	r5,-8(fp)
 80032e0:	180d883a 	mov	r6,r3
 80032e4:	e1fffe17 	ldw	r7,-8(fp)
 80032e8:	8000c0c0 	call	8000c0c <DrawHline>
	DrawVline(cx,cy-radius, cx, cy+radius, GREEN);
 80032ec:	e0fffe17 	ldw	r3,-8(fp)
 80032f0:	e0bfff17 	ldw	r2,-4(fp)
 80032f4:	188bc83a 	sub	r5,r3,r2
 80032f8:	e0fffe17 	ldw	r3,-8(fp)
 80032fc:	e0bfff17 	ldw	r2,-4(fp)
 8003300:	1887883a 	add	r3,r3,r2
 8003304:	00800304 	movi	r2,12
 8003308:	d8800015 	stw	r2,0(sp)
 800330c:	e13ffd17 	ldw	r4,-12(fp)
 8003310:	e1bffd17 	ldw	r6,-12(fp)
 8003314:	180f883a 	mov	r7,r3
 8003318:	8000d940 	call	8000d94 <DrawVline>
	Drawline(cx+x_diff,cy+y_diff,cx-x_diff,cy-y_diff, GREEN);
 800331c:	e0fffd17 	ldw	r3,-12(fp)
 8003320:	e0bffb17 	ldw	r2,-20(fp)
 8003324:	1889883a 	add	r4,r3,r2
 8003328:	e0fffe17 	ldw	r3,-8(fp)
 800332c:	e0bffc17 	ldw	r2,-16(fp)
 8003330:	188b883a 	add	r5,r3,r2
 8003334:	e0fffd17 	ldw	r3,-12(fp)
 8003338:	e0bffb17 	ldw	r2,-20(fp)
 800333c:	188dc83a 	sub	r6,r3,r2
 8003340:	e0fffe17 	ldw	r3,-8(fp)
 8003344:	e0bffc17 	ldw	r2,-16(fp)
 8003348:	1887c83a 	sub	r3,r3,r2
 800334c:	00800304 	movi	r2,12
 8003350:	d8800015 	stw	r2,0(sp)
 8003354:	180f883a 	mov	r7,r3
 8003358:	8000e340 	call	8000e34 <Drawline>
	Drawline(cx-x_diff,cy+y_diff,cx+x_diff,cy-y_diff, GREEN);
 800335c:	e0fffd17 	ldw	r3,-12(fp)
 8003360:	e0bffb17 	ldw	r2,-20(fp)
 8003364:	1889c83a 	sub	r4,r3,r2
 8003368:	e0fffe17 	ldw	r3,-8(fp)
 800336c:	e0bffc17 	ldw	r2,-16(fp)
 8003370:	188b883a 	add	r5,r3,r2
 8003374:	e0fffd17 	ldw	r3,-12(fp)
 8003378:	e0bffb17 	ldw	r2,-20(fp)
 800337c:	188d883a 	add	r6,r3,r2
 8003380:	e0fffe17 	ldw	r3,-8(fp)
 8003384:	e0bffc17 	ldw	r2,-16(fp)
 8003388:	1887c83a 	sub	r3,r3,r2
 800338c:	00800304 	movi	r2,12
 8003390:	d8800015 	stw	r2,0(sp)
 8003394:	180f883a 	mov	r7,r3
 8003398:	8000e340 	call	8000e34 <Drawline>

	//draw red dot center
	drawSolidcircle(cx,cy,10,RED);
 800339c:	e13ffd17 	ldw	r4,-12(fp)
 80033a0:	e17ffe17 	ldw	r5,-8(fp)
 80033a4:	01800284 	movi	r6,10
 80033a8:	01c00084 	movi	r7,2
 80033ac:	8001b500 	call	8001b50 <drawSolidcircle>

	scan_line(cx,cy,radius);
 80033b0:	e13ffd17 	ldw	r4,-12(fp)
 80033b4:	e17ffe17 	ldw	r5,-8(fp)
 80033b8:	e1bfff17 	ldw	r6,-4(fp)
 80033bc:	80033d40 	call	80033d4 <scan_line>

}
 80033c0:	e037883a 	mov	sp,fp
 80033c4:	dfc00117 	ldw	ra,4(sp)
 80033c8:	df000017 	ldw	fp,0(sp)
 80033cc:	dec00204 	addi	sp,sp,8
 80033d0:	f800283a 	ret

080033d4 <scan_line>:

void scan_line(int cx, int cy,int radius){
 80033d4:	defff404 	addi	sp,sp,-48
 80033d8:	dfc00b15 	stw	ra,44(sp)
 80033dc:	df000a15 	stw	fp,40(sp)
 80033e0:	dc400915 	stw	r17,36(sp)
 80033e4:	dc000815 	stw	r16,32(sp)
 80033e8:	df000a04 	addi	fp,sp,40
 80033ec:	e13ffb15 	stw	r4,-20(fp)
 80033f0:	e17ffc15 	stw	r5,-16(fp)
 80033f4:	e1bffd15 	stw	r6,-12(fp)
	double period = 2* 3.142;
 80033f8:	00b95834 	movhi	r2,58720
 80033fc:	10906244 	addi	r2,r2,16777
 8003400:	e0bff715 	stw	r2,-36(fp)
 8003404:	00900674 	movhi	r2,16409
 8003408:	1088b404 	addi	r2,r2,8912
 800340c:	e0bff815 	stw	r2,-32(fp)
	if(scan_angle>= 2*PI){
 8003410:	d0a6fa17 	ldw	r2,-25624(gp)
 8003414:	1009883a 	mov	r4,r2
 8003418:	800d3a00 	call	800d3a0 <__extendsfdf2>
 800341c:	100b883a 	mov	r5,r2
 8003420:	180d883a 	mov	r6,r3
 8003424:	2809883a 	mov	r4,r5
 8003428:	300b883a 	mov	r5,r6
 800342c:	0194f274 	movhi	r6,21449
 8003430:	31b53c44 	addi	r6,r6,-11023
 8003434:	01d00674 	movhi	r7,16409
 8003438:	39c87ec4 	addi	r7,r7,8699
 800343c:	800c0940 	call	800c094 <__gedf2>
 8003440:	10000216 	blt	r2,zero,800344c <scan_line+0x78>
		scan_angle=0;
 8003444:	d026fa15 	stw	zero,-25624(gp)
 8003448:	00000906 	br	8003470 <scan_line+0x9c>
	}else{
		scan_angle+=speed;
 800344c:	d0e6fa17 	ldw	r3,-25624(gp)
 8003450:	008fb274 	movhi	r2,16073
 8003454:	1083f6c4 	addi	r2,r2,4059
 8003458:	1809883a 	mov	r4,r3
 800345c:	100b883a 	mov	r5,r2
 8003460:	800a9c80 	call	800a9c8 <__addsf3>
 8003464:	1007883a 	mov	r3,r2
 8003468:	1805883a 	mov	r2,r3
 800346c:	d0a6fa15 	stw	r2,-25624(gp)
	}

	int x_diff = radius * cos(scan_angle);
 8003470:	e13ffd17 	ldw	r4,-12(fp)
 8003474:	800d2d00 	call	800d2d0 <__floatsidf>
 8003478:	1021883a 	mov	r16,r2
 800347c:	1823883a 	mov	r17,r3
 8003480:	d0a6fa17 	ldw	r2,-25624(gp)
 8003484:	1009883a 	mov	r4,r2
 8003488:	800d3a00 	call	800d3a0 <__extendsfdf2>
 800348c:	100b883a 	mov	r5,r2
 8003490:	180d883a 	mov	r6,r3
 8003494:	2809883a 	mov	r4,r5
 8003498:	300b883a 	mov	r5,r6
 800349c:	80055440 	call	8005544 <cos>
 80034a0:	100f883a 	mov	r7,r2
 80034a4:	1811883a 	mov	r8,r3
 80034a8:	8009883a 	mov	r4,r16
 80034ac:	880b883a 	mov	r5,r17
 80034b0:	380d883a 	mov	r6,r7
 80034b4:	400f883a 	mov	r7,r8
 80034b8:	800c2540 	call	800c254 <__muldf3>
 80034bc:	1009883a 	mov	r4,r2
 80034c0:	180b883a 	mov	r5,r3
 80034c4:	2005883a 	mov	r2,r4
 80034c8:	2807883a 	mov	r3,r5
 80034cc:	1009883a 	mov	r4,r2
 80034d0:	180b883a 	mov	r5,r3
 80034d4:	800d2480 	call	800d248 <__fixdfsi>
 80034d8:	e0bff915 	stw	r2,-28(fp)
	int y_diff = radius * sin(scan_angle);
 80034dc:	e13ffd17 	ldw	r4,-12(fp)
 80034e0:	800d2d00 	call	800d2d0 <__floatsidf>
 80034e4:	1021883a 	mov	r16,r2
 80034e8:	1823883a 	mov	r17,r3
 80034ec:	d0a6fa17 	ldw	r2,-25624(gp)
 80034f0:	1009883a 	mov	r4,r2
 80034f4:	800d3a00 	call	800d3a0 <__extendsfdf2>
 80034f8:	100b883a 	mov	r5,r2
 80034fc:	180d883a 	mov	r6,r3
 8003500:	2809883a 	mov	r4,r5
 8003504:	300b883a 	mov	r5,r6
 8003508:	80058240 	call	8005824 <sin>
 800350c:	100f883a 	mov	r7,r2
 8003510:	1811883a 	mov	r8,r3
 8003514:	8009883a 	mov	r4,r16
 8003518:	880b883a 	mov	r5,r17
 800351c:	380d883a 	mov	r6,r7
 8003520:	400f883a 	mov	r7,r8
 8003524:	800c2540 	call	800c254 <__muldf3>
 8003528:	1009883a 	mov	r4,r2
 800352c:	180b883a 	mov	r5,r3
 8003530:	2005883a 	mov	r2,r4
 8003534:	2807883a 	mov	r3,r5
 8003538:	1009883a 	mov	r4,r2
 800353c:	180b883a 	mov	r5,r3
 8003540:	800d2480 	call	800d248 <__fixdfsi>
 8003544:	e0bffa15 	stw	r2,-24(fp)
	Drawline(cx,cy,cx+x_diff,cy+y_diff, RED);
 8003548:	e0fffb17 	ldw	r3,-20(fp)
 800354c:	e0bff917 	ldw	r2,-28(fp)
 8003550:	188d883a 	add	r6,r3,r2
 8003554:	e0fffc17 	ldw	r3,-16(fp)
 8003558:	e0bffa17 	ldw	r2,-24(fp)
 800355c:	1887883a 	add	r3,r3,r2
 8003560:	00800084 	movi	r2,2
 8003564:	d8800015 	stw	r2,0(sp)
 8003568:	e13ffb17 	ldw	r4,-20(fp)
 800356c:	e17ffc17 	ldw	r5,-16(fp)
 8003570:	180f883a 	mov	r7,r3
 8003574:	8000e340 	call	8000e34 <Drawline>
}
 8003578:	e6fffe04 	addi	sp,fp,-8
 800357c:	dfc00317 	ldw	ra,12(sp)
 8003580:	df000217 	ldw	fp,8(sp)
 8003584:	dc400117 	ldw	r17,4(sp)
 8003588:	dc000017 	ldw	r16,0(sp)
 800358c:	dec00404 	addi	sp,sp,16
 8003590:	f800283a 	ret

08003594 <init_gps>:

void init_gps(){
 8003594:	defffe04 	addi	sp,sp,-8
 8003598:	df000115 	stw	fp,4(sp)
 800359c:	df000104 	addi	fp,sp,4

	GPS_index = 0;
 80035a0:	d026f815 	stw	zero,-25632(gp)
	scan_angle = 0;
 80035a4:	d026fa15 	stw	zero,-25624(gp)

	int i;
	for(i=0; i<DATANUMBER; i++){
 80035a8:	e03fff15 	stw	zero,-4(fp)
 80035ac:	00001906 	br	8003614 <init_gps+0x80>
		GPS_data[i].lat=0;
 80035b0:	008200f4 	movhi	r2,2051
 80035b4:	10ba3f04 	addi	r2,r2,-5892
 80035b8:	e0ffff17 	ldw	r3,-4(fp)
 80035bc:	18c00524 	muli	r3,r3,20
 80035c0:	10c5883a 	add	r2,r2,r3
 80035c4:	10000015 	stw	zero,0(r2)
 80035c8:	10000115 	stw	zero,4(r2)
		GPS_data[i].lng=0;
 80035cc:	008200f4 	movhi	r2,2051
 80035d0:	10ba3f04 	addi	r2,r2,-5892
 80035d4:	e0ffff17 	ldw	r3,-4(fp)
 80035d8:	18c00524 	muli	r3,r3,20
 80035dc:	10c5883a 	add	r2,r2,r3
 80035e0:	10800204 	addi	r2,r2,8
 80035e4:	10000015 	stw	zero,0(r2)
 80035e8:	10000115 	stw	zero,4(r2)
		GPS_data[i].flag=0;
 80035ec:	008200f4 	movhi	r2,2051
 80035f0:	10ba3f04 	addi	r2,r2,-5892
 80035f4:	e0ffff17 	ldw	r3,-4(fp)
 80035f8:	18c00524 	muli	r3,r3,20
 80035fc:	10c5883a 	add	r2,r2,r3
 8003600:	10800404 	addi	r2,r2,16
 8003604:	10000015 	stw	zero,0(r2)

	GPS_index = 0;
	scan_angle = 0;

	int i;
	for(i=0; i<DATANUMBER; i++){
 8003608:	e0bfff17 	ldw	r2,-4(fp)
 800360c:	10800044 	addi	r2,r2,1
 8003610:	e0bfff15 	stw	r2,-4(fp)
 8003614:	e0bfff17 	ldw	r2,-4(fp)
 8003618:	10800210 	cmplti	r2,r2,8
 800361c:	103fe41e 	bne	r2,zero,80035b0 <__alt_data_end+0xfc0035b0>
		GPS_data[i].lat=0;
		GPS_data[i].lng=0;
		GPS_data[i].flag=0;
	}
}
 8003620:	e037883a 	mov	sp,fp
 8003624:	df000017 	ldw	fp,0(sp)
 8003628:	dec00104 	addi	sp,sp,4
 800362c:	f800283a 	ret

08003630 <computeLoc>:

struct polor *computeLoc(struct latlng loc1, struct latlng loc2){
 8003630:	defff104 	addi	sp,sp,-60
 8003634:	dfc00a15 	stw	ra,40(sp)
 8003638:	df000915 	stw	fp,36(sp)
 800363c:	df000904 	addi	fp,sp,36
 8003640:	e1000215 	stw	r4,8(fp)
 8003644:	e1400315 	stw	r5,12(fp)
 8003648:	e1800415 	stw	r6,16(fp)
 800364c:	e1c00515 	stw	r7,20(fp)
	double distance = latlng_distance(loc1.lat, loc1.lng, loc2.lat, loc2.lng);
 8003650:	e2400217 	ldw	r9,8(fp)
 8003654:	e2800317 	ldw	r10,12(fp)
 8003658:	e1c00417 	ldw	r7,16(fp)
 800365c:	e2000517 	ldw	r8,20(fp)
 8003660:	e1000717 	ldw	r4,28(fp)
 8003664:	e1400817 	ldw	r5,32(fp)
 8003668:	e0800917 	ldw	r2,36(fp)
 800366c:	e0c00a17 	ldw	r3,40(fp)
 8003670:	d9000015 	stw	r4,0(sp)
 8003674:	d9400115 	stw	r5,4(sp)
 8003678:	d8800215 	stw	r2,8(sp)
 800367c:	d8c00315 	stw	r3,12(sp)
 8003680:	4809883a 	mov	r4,r9
 8003684:	500b883a 	mov	r5,r10
 8003688:	380d883a 	mov	r6,r7
 800368c:	400f883a 	mov	r7,r8
 8003690:	8002e4c0 	call	8002e4c <latlng_distance>
 8003694:	e0bffb15 	stw	r2,-20(fp)
 8003698:	e0fffc15 	stw	r3,-16(fp)
	double heading = latlng_heading(loc1.lat, loc1.lng, loc2.lat, loc2.lng);
 800369c:	e2400217 	ldw	r9,8(fp)
 80036a0:	e2800317 	ldw	r10,12(fp)
 80036a4:	e1c00417 	ldw	r7,16(fp)
 80036a8:	e2000517 	ldw	r8,20(fp)
 80036ac:	e1000717 	ldw	r4,28(fp)
 80036b0:	e1400817 	ldw	r5,32(fp)
 80036b4:	e0800917 	ldw	r2,36(fp)
 80036b8:	e0c00a17 	ldw	r3,40(fp)
 80036bc:	d9000015 	stw	r4,0(sp)
 80036c0:	d9400115 	stw	r5,4(sp)
 80036c4:	d8800215 	stw	r2,8(sp)
 80036c8:	d8c00315 	stw	r3,12(sp)
 80036cc:	4809883a 	mov	r4,r9
 80036d0:	500b883a 	mov	r5,r10
 80036d4:	380d883a 	mov	r6,r7
 80036d8:	400f883a 	mov	r7,r8
 80036dc:	8002c100 	call	8002c10 <latlng_heading>
 80036e0:	e0bffd15 	stw	r2,-12(fp)
 80036e4:	e0fffe15 	stw	r3,-8(fp)

	struct polor *result;
	result = malloc(sizeof(struct polor));
 80036e8:	01000404 	movi	r4,16
 80036ec:	800d6dc0 	call	800d6dc <malloc>
 80036f0:	e0bfff15 	stw	r2,-4(fp)

	result->distance = distance;
 80036f4:	e0bfff17 	ldw	r2,-4(fp)
 80036f8:	e0fffb17 	ldw	r3,-20(fp)
 80036fc:	10c00215 	stw	r3,8(r2)
 8003700:	e0fffc17 	ldw	r3,-16(fp)
 8003704:	10c00315 	stw	r3,12(r2)
	result->angle = heading;
 8003708:	e0bfff17 	ldw	r2,-4(fp)
 800370c:	e0fffd17 	ldw	r3,-12(fp)
 8003710:	10c00015 	stw	r3,0(r2)
 8003714:	e0fffe17 	ldw	r3,-8(fp)
 8003718:	10c00115 	stw	r3,4(r2)

	return result;
 800371c:	e0bfff17 	ldw	r2,-4(fp)
}
 8003720:	e037883a 	mov	sp,fp
 8003724:	dfc00117 	ldw	ra,4(sp)
 8003728:	df000017 	ldw	fp,0(sp)
 800372c:	dec00604 	addi	sp,sp,24
 8003730:	f800283a 	ret

08003734 <drawLocation>:


void drawLocation(int cx, int cy){
 8003734:	deffe004 	addi	sp,sp,-128
 8003738:	dfc01f15 	stw	ra,124(sp)
 800373c:	df001e15 	stw	fp,120(sp)
 8003740:	dc401d15 	stw	r17,116(sp)
 8003744:	dc001c15 	stw	r16,112(sp)
 8003748:	df001e04 	addi	fp,sp,120
 800374c:	e13ffc15 	stw	r4,-16(fp)
 8003750:	e17ffd15 	stw	r5,-12(fp)


	Coord current = getGPSdata();
 8003754:	800240c0 	call	800240c <getGPSdata>
 8003758:	1009883a 	mov	r4,r2
 800375c:	180b883a 	mov	r5,r3
 8003760:	e13fed15 	stw	r4,-76(fp)
 8003764:	e17fee15 	stw	r5,-72(fp)
	char *s = current.lat;
 8003768:	e0bfed17 	ldw	r2,-76(fp)
 800376c:	e0bfe815 	stw	r2,-96(fp)
	char *r = current.lng;
 8003770:	e0bfee17 	ldw	r2,-72(fp)
 8003774:	e0bfe915 	stw	r2,-92(fp)
   	struct latlng dependant_gps;
   	dependant_gps.lat = atof(s);
 8003778:	e13fe817 	ldw	r4,-96(fp)
 800377c:	800d6ac0 	call	800d6ac <atof>
 8003780:	1009883a 	mov	r4,r2
 8003784:	180b883a 	mov	r5,r3
 8003788:	e13fef15 	stw	r4,-68(fp)
 800378c:	e17ff015 	stw	r5,-64(fp)
   	dependant_gps.lng = atof(r);
 8003790:	e13fe917 	ldw	r4,-92(fp)
 8003794:	800d6ac0 	call	800d6ac <atof>
 8003798:	1009883a 	mov	r4,r2
 800379c:	180b883a 	mov	r5,r3
 80037a0:	e13ff115 	stw	r4,-60(fp)
 80037a4:	e17ff215 	stw	r5,-56(fp)

	struct polor *info = computeLoc(default_loc,dependant_gps);
 80037a8:	008200f4 	movhi	r2,2051
 80037ac:	10ba2604 	addi	r2,r2,-5992
 80037b0:	e0ffef17 	ldw	r3,-68(fp)
 80037b4:	d8c00115 	stw	r3,4(sp)
 80037b8:	e0fff017 	ldw	r3,-64(fp)
 80037bc:	d8c00215 	stw	r3,8(sp)
 80037c0:	e0fff117 	ldw	r3,-60(fp)
 80037c4:	d8c00315 	stw	r3,12(sp)
 80037c8:	e0fff217 	ldw	r3,-56(fp)
 80037cc:	d8c00415 	stw	r3,16(sp)
 80037d0:	e0fff317 	ldw	r3,-52(fp)
 80037d4:	d8c00515 	stw	r3,20(sp)
 80037d8:	10c00417 	ldw	r3,16(r2)
 80037dc:	d8c00015 	stw	r3,0(sp)
 80037e0:	11000017 	ldw	r4,0(r2)
 80037e4:	11400117 	ldw	r5,4(r2)
 80037e8:	11800217 	ldw	r6,8(r2)
 80037ec:	11c00317 	ldw	r7,12(r2)
 80037f0:	80036300 	call	8003630 <computeLoc>
 80037f4:	e0bfea15 	stw	r2,-88(fp)
	int x_diff = info->distance * cos(info->angle) * SCALE_FACTOR;
 80037f8:	e0bfea17 	ldw	r2,-88(fp)
 80037fc:	14000217 	ldw	r16,8(r2)
 8003800:	14400317 	ldw	r17,12(r2)
 8003804:	e13fea17 	ldw	r4,-88(fp)
 8003808:	20800017 	ldw	r2,0(r4)
 800380c:	20c00117 	ldw	r3,4(r4)
 8003810:	1009883a 	mov	r4,r2
 8003814:	180b883a 	mov	r5,r3
 8003818:	80055440 	call	8005544 <cos>
 800381c:	100f883a 	mov	r7,r2
 8003820:	1811883a 	mov	r8,r3
 8003824:	8009883a 	mov	r4,r16
 8003828:	880b883a 	mov	r5,r17
 800382c:	380d883a 	mov	r6,r7
 8003830:	400f883a 	mov	r7,r8
 8003834:	800c2540 	call	800c254 <__muldf3>
 8003838:	1009883a 	mov	r4,r2
 800383c:	180b883a 	mov	r5,r3
 8003840:	2005883a 	mov	r2,r4
 8003844:	2807883a 	mov	r3,r5
 8003848:	1009883a 	mov	r4,r2
 800384c:	180b883a 	mov	r5,r3
 8003850:	000d883a 	mov	r6,zero
 8003854:	01d00534 	movhi	r7,16404
 8003858:	800c2540 	call	800c254 <__muldf3>
 800385c:	1009883a 	mov	r4,r2
 8003860:	180b883a 	mov	r5,r3
 8003864:	2005883a 	mov	r2,r4
 8003868:	2807883a 	mov	r3,r5
 800386c:	1009883a 	mov	r4,r2
 8003870:	180b883a 	mov	r5,r3
 8003874:	800d2480 	call	800d248 <__fixdfsi>
 8003878:	e0bfeb15 	stw	r2,-84(fp)
	int y_diff = info->distance * sin(info->angle) * SCALE_FACTOR;
 800387c:	e0bfea17 	ldw	r2,-88(fp)
 8003880:	14000217 	ldw	r16,8(r2)
 8003884:	14400317 	ldw	r17,12(r2)
 8003888:	e13fea17 	ldw	r4,-88(fp)
 800388c:	20800017 	ldw	r2,0(r4)
 8003890:	20c00117 	ldw	r3,4(r4)
 8003894:	1009883a 	mov	r4,r2
 8003898:	180b883a 	mov	r5,r3
 800389c:	80058240 	call	8005824 <sin>
 80038a0:	100f883a 	mov	r7,r2
 80038a4:	1811883a 	mov	r8,r3
 80038a8:	8009883a 	mov	r4,r16
 80038ac:	880b883a 	mov	r5,r17
 80038b0:	380d883a 	mov	r6,r7
 80038b4:	400f883a 	mov	r7,r8
 80038b8:	800c2540 	call	800c254 <__muldf3>
 80038bc:	1009883a 	mov	r4,r2
 80038c0:	180b883a 	mov	r5,r3
 80038c4:	2005883a 	mov	r2,r4
 80038c8:	2807883a 	mov	r3,r5
 80038cc:	1009883a 	mov	r4,r2
 80038d0:	180b883a 	mov	r5,r3
 80038d4:	000d883a 	mov	r6,zero
 80038d8:	01d00534 	movhi	r7,16404
 80038dc:	800c2540 	call	800c254 <__muldf3>
 80038e0:	1009883a 	mov	r4,r2
 80038e4:	180b883a 	mov	r5,r3
 80038e8:	2005883a 	mov	r2,r4
 80038ec:	2807883a 	mov	r3,r5
 80038f0:	1009883a 	mov	r4,r2
 80038f4:	180b883a 	mov	r5,r3
 80038f8:	800d2480 	call	800d248 <__fixdfsi>
 80038fc:	e0bfec15 	stw	r2,-80(fp)

	// Print the angle and distance on the touch screen
	char value[30];

	snprintf(value, 20, "%lf", info->angle);
 8003900:	e13fea17 	ldw	r4,-88(fp)
 8003904:	20800017 	ldw	r2,0(r4)
 8003908:	20c00117 	ldw	r3,4(r4)
 800390c:	e13ff404 	addi	r4,fp,-48
 8003910:	d8c00015 	stw	r3,0(sp)
 8003914:	100f883a 	mov	r7,r2
 8003918:	01400504 	movi	r5,20
 800391c:	018200f4 	movhi	r6,2051
 8003920:	31a9c404 	addi	r6,r6,-22768
 8003924:	800e0600 	call	800e060 <snprintf>
	write(100,140, value, 16, WHITE, BLACK);
 8003928:	e0fff404 	addi	r3,fp,-48
 800392c:	00800044 	movi	r2,1
 8003930:	d8800015 	stw	r2,0(sp)
 8003934:	d8000115 	stw	zero,4(sp)
 8003938:	01001904 	movi	r4,100
 800393c:	01402304 	movi	r5,140
 8003940:	180d883a 	mov	r6,r3
 8003944:	01c00404 	movi	r7,16
 8003948:	80010a00 	call	80010a0 <write>

	snprintf(value, 20, "%lf", info->distance);
 800394c:	e13fea17 	ldw	r4,-88(fp)
 8003950:	20800217 	ldw	r2,8(r4)
 8003954:	20c00317 	ldw	r3,12(r4)
 8003958:	e13ff404 	addi	r4,fp,-48
 800395c:	d8c00015 	stw	r3,0(sp)
 8003960:	100f883a 	mov	r7,r2
 8003964:	01400504 	movi	r5,20
 8003968:	018200f4 	movhi	r6,2051
 800396c:	31a9c404 	addi	r6,r6,-22768
 8003970:	800e0600 	call	800e060 <snprintf>
	write(100,240, value, 16, WHITE, BLACK);
 8003974:	e0fff404 	addi	r3,fp,-48
 8003978:	00800044 	movi	r2,1
 800397c:	d8800015 	stw	r2,0(sp)
 8003980:	d8000115 	stw	zero,4(sp)
 8003984:	01001904 	movi	r4,100
 8003988:	01403c04 	movi	r5,240
 800398c:	180d883a 	mov	r6,r3
 8003990:	01c00404 	movi	r7,16
 8003994:	80010a00 	call	80010a0 <write>


	drawSolidcircle(cx+x_diff,cy+y_diff,10,BLUE);
 8003998:	e0fffc17 	ldw	r3,-16(fp)
 800399c:	e0bfeb17 	ldw	r2,-84(fp)
 80039a0:	1889883a 	add	r4,r3,r2
 80039a4:	e0fffd17 	ldw	r3,-12(fp)
 80039a8:	e0bfec17 	ldw	r2,-80(fp)
 80039ac:	1885883a 	add	r2,r3,r2
 80039b0:	100b883a 	mov	r5,r2
 80039b4:	01800284 	movi	r6,10
 80039b8:	01c00104 	movi	r7,4
 80039bc:	8001b500 	call	8001b50 <drawSolidcircle>

}
 80039c0:	e6fffe04 	addi	sp,fp,-8
 80039c4:	dfc00317 	ldw	ra,12(sp)
 80039c8:	df000217 	ldw	fp,8(sp)
 80039cc:	dc400117 	ldw	r17,4(sp)
 80039d0:	dc000017 	ldw	r16,0(sp)
 80039d4:	dec00404 	addi	sp,sp,16
 80039d8:	f800283a 	ret

080039dc <gpsB>:

void gpsB(){
 80039dc:	defffc04 	addi	sp,sp,-16
 80039e0:	dfc00315 	stw	ra,12(sp)
 80039e4:	df000215 	stw	fp,8(sp)
 80039e8:	df000204 	addi	fp,sp,8

	drawSolidcircle(120, 350, 80, BLUE);
 80039ec:	01001e04 	movi	r4,120
 80039f0:	01405784 	movi	r5,350
 80039f4:	01801404 	movi	r6,80
 80039f8:	01c00104 	movi	r7,4
 80039fc:	8001b500 	call	8001b50 <drawSolidcircle>
	write(95, 330, "GET", 16, WHITE, BLUE);
 8003a00:	00800044 	movi	r2,1
 8003a04:	d8800015 	stw	r2,0(sp)
 8003a08:	00800104 	movi	r2,4
 8003a0c:	d8800115 	stw	r2,4(sp)
 8003a10:	010017c4 	movi	r4,95
 8003a14:	01405284 	movi	r5,330
 8003a18:	018200f4 	movhi	r6,2051
 8003a1c:	31a9c504 	addi	r6,r6,-22764
 8003a20:	01c00404 	movi	r7,16
 8003a24:	80010a00 	call	80010a0 <write>
	write(95, 360, "GPS", 16, WHITE, BLUE);
 8003a28:	00800044 	movi	r2,1
 8003a2c:	d8800015 	stw	r2,0(sp)
 8003a30:	00800104 	movi	r2,4
 8003a34:	d8800115 	stw	r2,4(sp)
 8003a38:	010017c4 	movi	r4,95
 8003a3c:	01405a04 	movi	r5,360
 8003a40:	018200f4 	movhi	r6,2051
 8003a44:	31a98a04 	addi	r6,r6,-23000
 8003a48:	01c00404 	movi	r7,16
 8003a4c:	80010a00 	call	80010a0 <write>


}
 8003a50:	e037883a 	mov	sp,fp
 8003a54:	dfc00117 	ldw	ra,4(sp)
 8003a58:	df000017 	ldw	fp,0(sp)
 8003a5c:	dec00204 	addi	sp,sp,8
 8003a60:	f800283a 	ret

08003a64 <initRS232HR>:
#define RS232_TxData_HR (*(volatile unsigned char *)(0x84000252))
#define RS232_RxData_HR (*(volatile unsigned char *)(0x84000252))
#define RS232_Baud_HR (*(volatile unsigned char *)(0x84000254))

//initialize
void initRS232HR(void) {
 8003a64:	deffff04 	addi	sp,sp,-4
 8003a68:	df000015 	stw	fp,0(sp)
 8003a6c:	d839883a 	mov	fp,sp
    //8 data bits, 1 stop bit
    RS232_Control_HR = 0x15;
 8003a70:	00a10034 	movhi	r2,33792
 8003a74:	10809404 	addi	r2,r2,592
 8003a78:	00c00544 	movi	r3,21
 8003a7c:	10c00005 	stb	r3,0(r2)

    //9600 baud
    RS232_Baud_HR = 0x05;
 8003a80:	00a10034 	movhi	r2,33792
 8003a84:	10809504 	addi	r2,r2,596
 8003a88:	00c00144 	movi	r3,5
 8003a8c:	10c00005 	stb	r3,0(r2)
}
 8003a90:	e037883a 	mov	sp,fp
 8003a94:	df000017 	ldw	fp,0(sp)
 8003a98:	dec00104 	addi	sp,sp,4
 8003a9c:	f800283a 	ret

08003aa0 <getCharRS232HR>:

//read from rx
char getCharRS232HR(void) {
 8003aa0:	deffff04 	addi	sp,sp,-4
 8003aa4:	df000015 	stw	fp,0(sp)
 8003aa8:	d839883a 	mov	fp,sp
    while (!(RS232_Status_HR & 0x01)) {
 8003aac:	0001883a 	nop
 8003ab0:	00a10034 	movhi	r2,33792
 8003ab4:	10809404 	addi	r2,r2,592
 8003ab8:	10800003 	ldbu	r2,0(r2)
 8003abc:	10803fcc 	andi	r2,r2,255
 8003ac0:	1080004c 	andi	r2,r2,1
 8003ac4:	103ffa26 	beq	r2,zero,8003ab0 <__alt_data_end+0xfc003ab0>
    };
    return RS232_RxData_HR;
 8003ac8:	00a10034 	movhi	r2,33792
 8003acc:	10809484 	addi	r2,r2,594
 8003ad0:	10800003 	ldbu	r2,0(r2)
}
 8003ad4:	e037883a 	mov	sp,fp
 8003ad8:	df000017 	ldw	fp,0(sp)
 8003adc:	dec00104 	addi	sp,sp,4
 8003ae0:	f800283a 	ret

08003ae4 <putCharRS232HR>:

//write to tx
void putCharRS232HR(int c) {
 8003ae4:	defffe04 	addi	sp,sp,-8
 8003ae8:	df000115 	stw	fp,4(sp)
 8003aec:	df000104 	addi	fp,sp,4
 8003af0:	e13fff15 	stw	r4,-4(fp)
    while (!(0x02 & RS232_Status_HR)) {
 8003af4:	0001883a 	nop
 8003af8:	00a10034 	movhi	r2,33792
 8003afc:	10809404 	addi	r2,r2,592
 8003b00:	10800003 	ldbu	r2,0(r2)
 8003b04:	1080008c 	andi	r2,r2,2
 8003b08:	10803fcc 	andi	r2,r2,255
 8003b0c:	103ffa26 	beq	r2,zero,8003af8 <__alt_data_end+0xfc003af8>
    };
    RS232_TxData_HR = c;
 8003b10:	00a10034 	movhi	r2,33792
 8003b14:	10809484 	addi	r2,r2,594
 8003b18:	e0ffff17 	ldw	r3,-4(fp)
 8003b1c:	10c00005 	stb	r3,0(r2)
}
 8003b20:	e037883a 	mov	sp,fp
 8003b24:	df000017 	ldw	fp,0(sp)
 8003b28:	dec00104 	addi	sp,sp,4
 8003b2c:	f800283a 	ret

08003b30 <waitChar>:

void waitChar(int i){
 8003b30:	defffc04 	addi	sp,sp,-16
 8003b34:	dfc00315 	stw	ra,12(sp)
 8003b38:	df000215 	stw	fp,8(sp)
 8003b3c:	df000204 	addi	fp,sp,8
 8003b40:	e13fff15 	stw	r4,-4(fp)
    int j;
    for (j = 0; j < i; j++)
 8003b44:	e03ffe15 	stw	zero,-8(fp)
 8003b48:	00000406 	br	8003b5c <waitChar+0x2c>
        getCharRS232HR();
 8003b4c:	8003aa00 	call	8003aa0 <getCharRS232HR>
    RS232_TxData_HR = c;
}

void waitChar(int i){
    int j;
    for (j = 0; j < i; j++)
 8003b50:	e0bffe17 	ldw	r2,-8(fp)
 8003b54:	10800044 	addi	r2,r2,1
 8003b58:	e0bffe15 	stw	r2,-8(fp)
 8003b5c:	e0fffe17 	ldw	r3,-8(fp)
 8003b60:	e0bfff17 	ldw	r2,-4(fp)
 8003b64:	18bff916 	blt	r3,r2,8003b4c <__alt_data_end+0xfc003b4c>
        getCharRS232HR();
}
 8003b68:	e037883a 	mov	sp,fp
 8003b6c:	dfc00117 	ldw	ra,4(sp)
 8003b70:	df000017 	ldw	fp,0(sp)
 8003b74:	dec00204 	addi	sp,sp,8
 8003b78:	f800283a 	ret

08003b7c <getHRData>:

int getHRData(){
 8003b7c:	defffc04 	addi	sp,sp,-16
 8003b80:	dfc00315 	stw	ra,12(sp)
 8003b84:	df000215 	stw	fp,8(sp)
 8003b88:	df000204 	addi	fp,sp,8
    int i;
    int j;
    do{
        i = getHR();
 8003b8c:	8003bbc0 	call	8003bbc <getHR>
 8003b90:	e0bffe15 	stw	r2,-8(fp)
        j = getHR();
 8003b94:	8003bbc0 	call	8003bbc <getHR>
 8003b98:	e0bfff15 	stw	r2,-4(fp)
    }
    while(i != j);
 8003b9c:	e0fffe17 	ldw	r3,-8(fp)
 8003ba0:	e0bfff17 	ldw	r2,-4(fp)
 8003ba4:	18bff91e 	bne	r3,r2,8003b8c <__alt_data_end+0xfc003b8c>
}
 8003ba8:	e037883a 	mov	sp,fp
 8003bac:	dfc00117 	ldw	ra,4(sp)
 8003bb0:	df000017 	ldw	fp,0(sp)
 8003bb4:	dec00204 	addi	sp,sp,8
 8003bb8:	f800283a 	ret

08003bbc <getHR>:

int getHR(){
 8003bbc:	defffc04 	addi	sp,sp,-16
 8003bc0:	dfc00315 	stw	ra,12(sp)
 8003bc4:	df000215 	stw	fp,8(sp)
 8003bc8:	df000204 	addi	fp,sp,8
    char HR_MSB;
    char HR_LSB;
    while (1){
        char s = getCharRS232HR();
 8003bcc:	8003aa00 	call	8003aa0 <getCharRS232HR>
 8003bd0:	e0bffe05 	stb	r2,-8(fp)
        if ((!(s&0xFE))&(s&0x01)){
 8003bd4:	e0bffe07 	ldb	r2,-8(fp)
 8003bd8:	10803f8c 	andi	r2,r2,254
 8003bdc:	1005003a 	cmpeq	r2,r2,zero
 8003be0:	1007883a 	mov	r3,r2
 8003be4:	e0bffe03 	ldbu	r2,-8(fp)
 8003be8:	10803fcc 	andi	r2,r2,255
 8003bec:	1080004c 	andi	r2,r2,1
 8003bf0:	1080004c 	andi	r2,r2,1
 8003bf4:	1884703a 	and	r2,r3,r2
 8003bf8:	10803fcc 	andi	r2,r2,255
 8003bfc:	10001726 	beq	r2,zero,8003c5c <getHR+0xa0>
            if (getCharRS232HR()&0x01){
 8003c00:	8003aa00 	call	8003aa0 <getCharRS232HR>
 8003c04:	10803fcc 	andi	r2,r2,255
 8003c08:	1080004c 	andi	r2,r2,1
 8003c0c:	10001326 	beq	r2,zero,8003c5c <getHR+0xa0>
                waitChar(1);
 8003c10:	01000044 	movi	r4,1
 8003c14:	8003b300 	call	8003b30 <waitChar>
                HR_MSB = getCharRS232HR();
 8003c18:	8003aa00 	call	8003aa0 <getCharRS232HR>
 8003c1c:	e0bffe45 	stb	r2,-7(fp)
                waitChar(4);
 8003c20:	01000104 	movi	r4,4
 8003c24:	8003b300 	call	8003b30 <waitChar>
                HR_LSB = getCharRS232HR();
 8003c28:	8003aa00 	call	8003aa0 <getCharRS232HR>
 8003c2c:	e0bffe85 	stb	r2,-6(fp)

                int HR = (0x7F&HR_LSB)+((0x03&HR_MSB)<<7);
 8003c30:	e0bffe83 	ldbu	r2,-6(fp)
 8003c34:	10803fcc 	andi	r2,r2,255
 8003c38:	10c01fcc 	andi	r3,r2,127
 8003c3c:	e0bffe43 	ldbu	r2,-7(fp)
 8003c40:	10803fcc 	andi	r2,r2,255
 8003c44:	108000cc 	andi	r2,r2,3
 8003c48:	100491fa 	slli	r2,r2,7
 8003c4c:	1885883a 	add	r2,r3,r2
 8003c50:	e0bfff15 	stw	r2,-4(fp)

                return HR;
 8003c54:	e0bfff17 	ldw	r2,-4(fp)
 8003c58:	00000106 	br	8003c60 <getHR+0xa4>
            }
        }
    }
 8003c5c:	003fdb06 	br	8003bcc <__alt_data_end+0xfc003bcc>
}
 8003c60:	e037883a 	mov	sp,fp
 8003c64:	dfc00117 	ldw	ra,4(sp)
 8003c68:	df000017 	ldw	fp,0(sp)
 8003c6c:	dec00204 	addi	sp,sp,8
 8003c70:	f800283a 	ret

08003c74 <drawXaxis>:
int SD;
int historical_average=70;
int historical_SD = 10;


void drawXaxis(){
 8003c74:	defffd04 	addi	sp,sp,-12
 8003c78:	dfc00215 	stw	ra,8(sp)
 8003c7c:	df000115 	stw	fp,4(sp)
 8003c80:	df000104 	addi	fp,sp,4
	DrawHlineWeighted(280,240,750, 245,BLUE);
 8003c84:	00800104 	movi	r2,4
 8003c88:	d8800015 	stw	r2,0(sp)
 8003c8c:	01004604 	movi	r4,280
 8003c90:	01403c04 	movi	r5,240
 8003c94:	0180bb84 	movi	r6,750
 8003c98:	01c03d44 	movi	r7,245
 8003c9c:	8000cac0 	call	8000cac <DrawHlineWeighted>
}
 8003ca0:	e037883a 	mov	sp,fp
 8003ca4:	dfc00117 	ldw	ra,4(sp)
 8003ca8:	df000017 	ldw	fp,0(sp)
 8003cac:	dec00204 	addi	sp,sp,8
 8003cb0:	f800283a 	ret

08003cb4 <drawYaxis>:

void drawYaxis(){
 8003cb4:	defffd04 	addi	sp,sp,-12
 8003cb8:	dfc00215 	stw	ra,8(sp)
 8003cbc:	df000115 	stw	fp,4(sp)
 8003cc0:	df000104 	addi	fp,sp,4
	DrawVlineWeighted(280,60,285, 400,GREEN);
 8003cc4:	00800304 	movi	r2,12
 8003cc8:	d8800015 	stw	r2,0(sp)
 8003ccc:	01004604 	movi	r4,280
 8003cd0:	01400f04 	movi	r5,60
 8003cd4:	01804744 	movi	r6,285
 8003cd8:	01c06404 	movi	r7,400
 8003cdc:	8000d200 	call	8000d20 <DrawVlineWeighted>
}
 8003ce0:	e037883a 	mov	sp,fp
 8003ce4:	dfc00117 	ldw	ra,4(sp)
 8003ce8:	df000017 	ldw	fp,0(sp)
 8003cec:	dec00204 	addi	sp,sp,8
 8003cf0:	f800283a 	ret

08003cf4 <graph_hr>:


void graph_hr(){
 8003cf4:	defffa04 	addi	sp,sp,-24
 8003cf8:	dfc00515 	stw	ra,20(sp)
 8003cfc:	df000415 	stw	fp,16(sp)
 8003d00:	dc400315 	stw	r17,12(sp)
 8003d04:	dc000215 	stw	r16,8(sp)
 8003d08:	df000404 	addi	fp,sp,16
	drawLabel();
 8003d0c:	80040400 	call	8004040 <drawLabel>
	drawXaxis();
 8003d10:	8003c740 	call	8003c74 <drawXaxis>
	drawYaxis();
 8003d14:	8003cb40 	call	8003cb4 <drawYaxis>
	int i;
	for(i=0; i<HR_MAX-1; i++){
 8003d18:	e03ffd15 	stw	zero,-12(fp)
 8003d1c:	00001506 	br	8003d74 <graph_hr+0x80>
		HR_plotdata[i] = 240 + (HR_data[i] - Average)*25;
 8003d20:	008200f4 	movhi	r2,2051
 8003d24:	10ba2b04 	addi	r2,r2,-5972
 8003d28:	e0fffd17 	ldw	r3,-12(fp)
 8003d2c:	18c7883a 	add	r3,r3,r3
 8003d30:	18c7883a 	add	r3,r3,r3
 8003d34:	10c5883a 	add	r2,r2,r3
 8003d38:	10c00017 	ldw	r3,0(r2)
 8003d3c:	d0a6f717 	ldw	r2,-25636(gp)
 8003d40:	1885c83a 	sub	r2,r3,r2
 8003d44:	10800664 	muli	r2,r2,25
 8003d48:	11003c04 	addi	r4,r2,240
 8003d4c:	008200f4 	movhi	r2,2051
 8003d50:	10ba6704 	addi	r2,r2,-5732
 8003d54:	e0fffd17 	ldw	r3,-12(fp)
 8003d58:	18c7883a 	add	r3,r3,r3
 8003d5c:	18c7883a 	add	r3,r3,r3
 8003d60:	10c5883a 	add	r2,r2,r3
 8003d64:	11000015 	stw	r4,0(r2)
void graph_hr(){
	drawLabel();
	drawXaxis();
	drawYaxis();
	int i;
	for(i=0; i<HR_MAX-1; i++){
 8003d68:	e0bffd17 	ldw	r2,-12(fp)
 8003d6c:	10800044 	addi	r2,r2,1
 8003d70:	e0bffd15 	stw	r2,-12(fp)
 8003d74:	d0a00117 	ldw	r2,-32764(gp)
 8003d78:	10bfffc4 	addi	r2,r2,-1
 8003d7c:	e0fffd17 	ldw	r3,-12(fp)
 8003d80:	18bfe716 	blt	r3,r2,8003d20 <__alt_data_end+0xfc003d20>
		HR_plotdata[i] = 240 + (HR_data[i] - Average)*25;
	}

	for(i=0; i<HR_MAX-1; i++){
 8003d84:	e03ffd15 	stw	zero,-12(fp)
 8003d88:	00002006 	br	8003e0c <graph_hr+0x118>
		Drawline(hr_calx(i+1),HR_plotdata[i+1],hr_calx(i),HR_plotdata[i], RED);
 8003d8c:	e0bffd17 	ldw	r2,-12(fp)
 8003d90:	10800044 	addi	r2,r2,1
 8003d94:	1009883a 	mov	r4,r2
 8003d98:	8003f180 	call	8003f18 <hr_calx>
 8003d9c:	1023883a 	mov	r17,r2
 8003da0:	e0bffd17 	ldw	r2,-12(fp)
 8003da4:	10c00044 	addi	r3,r2,1
 8003da8:	008200f4 	movhi	r2,2051
 8003dac:	10ba6704 	addi	r2,r2,-5732
 8003db0:	18c7883a 	add	r3,r3,r3
 8003db4:	18c7883a 	add	r3,r3,r3
 8003db8:	10c5883a 	add	r2,r2,r3
 8003dbc:	14000017 	ldw	r16,0(r2)
 8003dc0:	e13ffd17 	ldw	r4,-12(fp)
 8003dc4:	8003f180 	call	8003f18 <hr_calx>
 8003dc8:	100d883a 	mov	r6,r2
 8003dcc:	008200f4 	movhi	r2,2051
 8003dd0:	10ba6704 	addi	r2,r2,-5732
 8003dd4:	e0fffd17 	ldw	r3,-12(fp)
 8003dd8:	18c7883a 	add	r3,r3,r3
 8003ddc:	18c7883a 	add	r3,r3,r3
 8003de0:	10c5883a 	add	r2,r2,r3
 8003de4:	10c00017 	ldw	r3,0(r2)
 8003de8:	00800084 	movi	r2,2
 8003dec:	d8800015 	stw	r2,0(sp)
 8003df0:	8809883a 	mov	r4,r17
 8003df4:	800b883a 	mov	r5,r16
 8003df8:	180f883a 	mov	r7,r3
 8003dfc:	8000e340 	call	8000e34 <Drawline>
	int i;
	for(i=0; i<HR_MAX-1; i++){
		HR_plotdata[i] = 240 + (HR_data[i] - Average)*25;
	}

	for(i=0; i<HR_MAX-1; i++){
 8003e00:	e0bffd17 	ldw	r2,-12(fp)
 8003e04:	10800044 	addi	r2,r2,1
 8003e08:	e0bffd15 	stw	r2,-12(fp)
 8003e0c:	d0a00117 	ldw	r2,-32764(gp)
 8003e10:	10bfffc4 	addi	r2,r2,-1
 8003e14:	e0fffd17 	ldw	r3,-12(fp)
 8003e18:	18bfdc16 	blt	r3,r2,8003d8c <__alt_data_end+0xfc003d8c>
		Drawline(hr_calx(i+1),HR_plotdata[i+1],hr_calx(i),HR_plotdata[i], RED);
	}
}
 8003e1c:	e6fffe04 	addi	sp,fp,-8
 8003e20:	dfc00317 	ldw	ra,12(sp)
 8003e24:	df000217 	ldw	fp,8(sp)
 8003e28:	dc400117 	ldw	r17,4(sp)
 8003e2c:	dc000017 	ldw	r16,0(sp)
 8003e30:	dec00404 	addi	sp,sp,16
 8003e34:	f800283a 	ret

08003e38 <graph_hr_wait>:

void graph_hr_wait(){
 8003e38:	defffc04 	addi	sp,sp,-16
 8003e3c:	dfc00315 	stw	ra,12(sp)
 8003e40:	df000215 	stw	fp,8(sp)
 8003e44:	df000204 	addi	fp,sp,8
	drawXaxis();
 8003e48:	8003c740 	call	8003c74 <drawXaxis>
	drawYaxis();
 8003e4c:	8003cb40 	call	8003cb4 <drawYaxis>
	write(250,35, "PLEASE WAIT WE ARE MEASURING", 16, WHITE, BLACK);
 8003e50:	00800044 	movi	r2,1
 8003e54:	d8800015 	stw	r2,0(sp)
 8003e58:	d8000115 	stw	zero,4(sp)
 8003e5c:	01003e84 	movi	r4,250
 8003e60:	014008c4 	movi	r5,35
 8003e64:	018200f4 	movhi	r6,2051
 8003e68:	31a9c604 	addi	r6,r6,-22760
 8003e6c:	01c00404 	movi	r7,16
 8003e70:	80010a00 	call	80010a0 <write>
	write(250,65, "YOUR HEART RATE", 16, WHITE, BLACK);
 8003e74:	00800044 	movi	r2,1
 8003e78:	d8800015 	stw	r2,0(sp)
 8003e7c:	d8000115 	stw	zero,4(sp)
 8003e80:	01003e84 	movi	r4,250
 8003e84:	01401044 	movi	r5,65
 8003e88:	018200f4 	movhi	r6,2051
 8003e8c:	31a9ce04 	addi	r6,r6,-22728
 8003e90:	01c00404 	movi	r7,16
 8003e94:	80010a00 	call	80010a0 <write>
	write(50,50, "Average: ", 16, WHITE, BLACK);
 8003e98:	00800044 	movi	r2,1
 8003e9c:	d8800015 	stw	r2,0(sp)
 8003ea0:	d8000115 	stw	zero,4(sp)
 8003ea4:	01000c84 	movi	r4,50
 8003ea8:	01400c84 	movi	r5,50
 8003eac:	018200f4 	movhi	r6,2051
 8003eb0:	31a9d204 	addi	r6,r6,-22712
 8003eb4:	01c00404 	movi	r7,16
 8003eb8:	80010a00 	call	80010a0 <write>
	write(50,150, "Fluctuation: ", 16, WHITE, BLACK);
 8003ebc:	00800044 	movi	r2,1
 8003ec0:	d8800015 	stw	r2,0(sp)
 8003ec4:	d8000115 	stw	zero,4(sp)
 8003ec8:	01000c84 	movi	r4,50
 8003ecc:	01402584 	movi	r5,150
 8003ed0:	018200f4 	movhi	r6,2051
 8003ed4:	31a9d504 	addi	r6,r6,-22700
 8003ed8:	01c00404 	movi	r7,16
 8003edc:	80010a00 	call	80010a0 <write>
	write(675,265, "Mean", 16, WHITE, BLACK);
 8003ee0:	00800044 	movi	r2,1
 8003ee4:	d8800015 	stw	r2,0(sp)
 8003ee8:	d8000115 	stw	zero,4(sp)
 8003eec:	0100a8c4 	movi	r4,675
 8003ef0:	01404244 	movi	r5,265
 8003ef4:	018200f4 	movhi	r6,2051
 8003ef8:	31a9d904 	addi	r6,r6,-22684
 8003efc:	01c00404 	movi	r7,16
 8003f00:	80010a00 	call	80010a0 <write>
}
 8003f04:	e037883a 	mov	sp,fp
 8003f08:	dfc00117 	ldw	ra,4(sp)
 8003f0c:	df000017 	ldw	fp,0(sp)
 8003f10:	dec00204 	addi	sp,sp,8
 8003f14:	f800283a 	ret

08003f18 <hr_calx>:

int hr_calx(int i){
 8003f18:	defffe04 	addi	sp,sp,-8
 8003f1c:	df000115 	stw	fp,4(sp)
 8003f20:	df000104 	addi	fp,sp,4
 8003f24:	e13fff15 	stw	r4,-4(fp)
	return i*30+280;
 8003f28:	e0bfff17 	ldw	r2,-4(fp)
 8003f2c:	108007a4 	muli	r2,r2,30
 8003f30:	10804604 	addi	r2,r2,280
}
 8003f34:	e037883a 	mov	sp,fp
 8003f38:	df000017 	ldw	fp,0(sp)
 8003f3c:	dec00104 	addi	sp,sp,4
 8003f40:	f800283a 	ret

08003f44 <fresh_hr>:

void fresh_hr(){
 8003f44:	defffe04 	addi	sp,sp,-8
 8003f48:	df000115 	stw	fp,4(sp)
 8003f4c:	df000104 	addi	fp,sp,4

	hr_index=0;
 8003f50:	d026f615 	stw	zero,-25640(gp)
	int i;
	for(i=0; i<HR_MAX; i++){
 8003f54:	e03fff15 	stw	zero,-4(fp)
 8003f58:	00000a06 	br	8003f84 <fresh_hr+0x40>
		HR_data[i] = 0;
 8003f5c:	008200f4 	movhi	r2,2051
 8003f60:	10ba2b04 	addi	r2,r2,-5972
 8003f64:	e0ffff17 	ldw	r3,-4(fp)
 8003f68:	18c7883a 	add	r3,r3,r3
 8003f6c:	18c7883a 	add	r3,r3,r3
 8003f70:	10c5883a 	add	r2,r2,r3
 8003f74:	10000015 	stw	zero,0(r2)

void fresh_hr(){

	hr_index=0;
	int i;
	for(i=0; i<HR_MAX; i++){
 8003f78:	e0bfff17 	ldw	r2,-4(fp)
 8003f7c:	10800044 	addi	r2,r2,1
 8003f80:	e0bfff15 	stw	r2,-4(fp)
 8003f84:	d0a00117 	ldw	r2,-32764(gp)
 8003f88:	e0ffff17 	ldw	r3,-4(fp)
 8003f8c:	18bff316 	blt	r3,r2,8003f5c <__alt_data_end+0xfc003f5c>
		HR_data[i] = 0;
	}

}
 8003f90:	e037883a 	mov	sp,fp
 8003f94:	df000017 	ldw	fp,0(sp)
 8003f98:	dec00104 	addi	sp,sp,4
 8003f9c:	f800283a 	ret

08003fa0 <init_hr>:


void init_hr(){
 8003fa0:	defffd04 	addi	sp,sp,-12
 8003fa4:	dfc00215 	stw	ra,8(sp)
 8003fa8:	df000115 	stw	fp,4(sp)
 8003fac:	df000104 	addi	fp,sp,4

	hr_index=0;
 8003fb0:	d026f615 	stw	zero,-25640(gp)
	int i;
	for(i=0; i<HR_MAX; i++){
 8003fb4:	e03fff15 	stw	zero,-4(fp)
 8003fb8:	00000c06 	br	8003fec <init_hr+0x4c>
		HR_data[i] = getHRData();
 8003fbc:	8003b7c0 	call	8003b7c <getHRData>
 8003fc0:	1009883a 	mov	r4,r2
 8003fc4:	008200f4 	movhi	r2,2051
 8003fc8:	10ba2b04 	addi	r2,r2,-5972
 8003fcc:	e0ffff17 	ldw	r3,-4(fp)
 8003fd0:	18c7883a 	add	r3,r3,r3
 8003fd4:	18c7883a 	add	r3,r3,r3
 8003fd8:	10c5883a 	add	r2,r2,r3
 8003fdc:	11000015 	stw	r4,0(r2)

void init_hr(){

	hr_index=0;
	int i;
	for(i=0; i<HR_MAX; i++){
 8003fe0:	e0bfff17 	ldw	r2,-4(fp)
 8003fe4:	10800044 	addi	r2,r2,1
 8003fe8:	e0bfff15 	stw	r2,-4(fp)
 8003fec:	d0a00117 	ldw	r2,-32764(gp)
 8003ff0:	e0ffff17 	ldw	r3,-4(fp)
 8003ff4:	18bff116 	blt	r3,r2,8003fbc <__alt_data_end+0xfc003fbc>
		HR_data[i] = getHRData();
	}

	computeAve();
 8003ff8:	800415c0 	call	800415c <computeAve>
	computeSD();
 8003ffc:	80041d40 	call	80041d4 <computeSD>
	update_HistAVE();
 8004000:	80043440 	call	8004344 <update_HistAVE>

	if(abs(Average-historical_average)>= 2*historical_SD) {
 8004004:	d0e6f717 	ldw	r3,-25636(gp)
 8004008:	d0a00217 	ldw	r2,-32760(gp)
 800400c:	1885c83a 	sub	r2,r3,r2
 8004010:	1000010e 	bge	r2,zero,8004018 <init_hr+0x78>
 8004014:	0085c83a 	sub	r2,zero,r2
 8004018:	1007883a 	mov	r3,r2
 800401c:	d0a00317 	ldw	r2,-32756(gp)
 8004020:	1085883a 	add	r2,r2,r2
 8004024:	18800116 	blt	r3,r2,800402c <init_hr+0x8c>
		alert();
 8004028:	80043140 	call	8004314 <alert>
	}
}
 800402c:	e037883a 	mov	sp,fp
 8004030:	dfc00117 	ldw	ra,4(sp)
 8004034:	df000017 	ldw	fp,0(sp)
 8004038:	dec00204 	addi	sp,sp,8
 800403c:	f800283a 	ret

08004040 <drawLabel>:


void drawLabel(){
 8004040:	defff204 	addi	sp,sp,-56
 8004044:	dfc00d15 	stw	ra,52(sp)
 8004048:	df000c15 	stw	fp,48(sp)
 800404c:	df000c04 	addi	fp,sp,48

	char aver[20];
	char fluct[20];
	itoa(Average, aver);
 8004050:	d0a6f717 	ldw	r2,-25636(gp)
 8004054:	1009883a 	mov	r4,r2
 8004058:	e17ff604 	addi	r5,fp,-40
 800405c:	80029880 	call	8002988 <itoa>
	itoa(SD, fluct);
 8004060:	d0e6f917 	ldw	r3,-25628(gp)
 8004064:	e0bffb04 	addi	r2,fp,-20
 8004068:	1809883a 	mov	r4,r3
 800406c:	100b883a 	mov	r5,r2
 8004070:	80029880 	call	8002988 <itoa>
	write(450,25, "Heart Rate", 16, WHITE, BLACK);
 8004074:	00800044 	movi	r2,1
 8004078:	d8800015 	stw	r2,0(sp)
 800407c:	d8000115 	stw	zero,4(sp)
 8004080:	01007084 	movi	r4,450
 8004084:	01400644 	movi	r5,25
 8004088:	018200f4 	movhi	r6,2051
 800408c:	31a9db04 	addi	r6,r6,-22676
 8004090:	01c00404 	movi	r7,16
 8004094:	80010a00 	call	80010a0 <write>
	write(50,50, "Average: ", 16, WHITE, BLACK);
 8004098:	00800044 	movi	r2,1
 800409c:	d8800015 	stw	r2,0(sp)
 80040a0:	d8000115 	stw	zero,4(sp)
 80040a4:	01000c84 	movi	r4,50
 80040a8:	01400c84 	movi	r5,50
 80040ac:	018200f4 	movhi	r6,2051
 80040b0:	31a9d204 	addi	r6,r6,-22712
 80040b4:	01c00404 	movi	r7,16
 80040b8:	80010a00 	call	80010a0 <write>
	write(80,90, aver, 16, WHITE, BLACK);
 80040bc:	00800044 	movi	r2,1
 80040c0:	d8800015 	stw	r2,0(sp)
 80040c4:	d8000115 	stw	zero,4(sp)
 80040c8:	01001404 	movi	r4,80
 80040cc:	01401684 	movi	r5,90
 80040d0:	e1bff604 	addi	r6,fp,-40
 80040d4:	01c00404 	movi	r7,16
 80040d8:	80010a00 	call	80010a0 <write>
	write(50,150, "Fluctuation: ", 16, WHITE, BLACK);
 80040dc:	00800044 	movi	r2,1
 80040e0:	d8800015 	stw	r2,0(sp)
 80040e4:	d8000115 	stw	zero,4(sp)
 80040e8:	01000c84 	movi	r4,50
 80040ec:	01402584 	movi	r5,150
 80040f0:	018200f4 	movhi	r6,2051
 80040f4:	31a9d504 	addi	r6,r6,-22700
 80040f8:	01c00404 	movi	r7,16
 80040fc:	80010a00 	call	80010a0 <write>
	write(80,190, fluct, 16, WHITE, BLACK);
 8004100:	e0fffb04 	addi	r3,fp,-20
 8004104:	00800044 	movi	r2,1
 8004108:	d8800015 	stw	r2,0(sp)
 800410c:	d8000115 	stw	zero,4(sp)
 8004110:	01001404 	movi	r4,80
 8004114:	01402f84 	movi	r5,190
 8004118:	180d883a 	mov	r6,r3
 800411c:	01c00404 	movi	r7,16
 8004120:	80010a00 	call	80010a0 <write>
	write(675,265, "Mean", 16, WHITE, BLACK);
 8004124:	00800044 	movi	r2,1
 8004128:	d8800015 	stw	r2,0(sp)
 800412c:	d8000115 	stw	zero,4(sp)
 8004130:	0100a8c4 	movi	r4,675
 8004134:	01404244 	movi	r5,265
 8004138:	018200f4 	movhi	r6,2051
 800413c:	31a9d904 	addi	r6,r6,-22684
 8004140:	01c00404 	movi	r7,16
 8004144:	80010a00 	call	80010a0 <write>
}
 8004148:	e037883a 	mov	sp,fp
 800414c:	dfc00117 	ldw	ra,4(sp)
 8004150:	df000017 	ldw	fp,0(sp)
 8004154:	dec00204 	addi	sp,sp,8
 8004158:	f800283a 	ret

0800415c <computeAve>:

void computeAve(){
 800415c:	defffd04 	addi	sp,sp,-12
 8004160:	df000215 	stw	fp,8(sp)
 8004164:	df000204 	addi	fp,sp,8
	int sum=0;
 8004168:	e03ffe15 	stw	zero,-8(fp)
	int i;
	for(i=0; i<HR_MAX; i++){
 800416c:	e03fff15 	stw	zero,-4(fp)
 8004170:	00000d06 	br	80041a8 <computeAve+0x4c>
		sum += HR_data[i];
 8004174:	008200f4 	movhi	r2,2051
 8004178:	10ba2b04 	addi	r2,r2,-5972
 800417c:	e0ffff17 	ldw	r3,-4(fp)
 8004180:	18c7883a 	add	r3,r3,r3
 8004184:	18c7883a 	add	r3,r3,r3
 8004188:	10c5883a 	add	r2,r2,r3
 800418c:	10800017 	ldw	r2,0(r2)
 8004190:	e0fffe17 	ldw	r3,-8(fp)
 8004194:	1885883a 	add	r2,r3,r2
 8004198:	e0bffe15 	stw	r2,-8(fp)
}

void computeAve(){
	int sum=0;
	int i;
	for(i=0; i<HR_MAX; i++){
 800419c:	e0bfff17 	ldw	r2,-4(fp)
 80041a0:	10800044 	addi	r2,r2,1
 80041a4:	e0bfff15 	stw	r2,-4(fp)
 80041a8:	d0a00117 	ldw	r2,-32764(gp)
 80041ac:	e0ffff17 	ldw	r3,-4(fp)
 80041b0:	18bff016 	blt	r3,r2,8004174 <__alt_data_end+0xfc004174>
		sum += HR_data[i];
	}

	Average = sum/HR_MAX;
 80041b4:	d0a00117 	ldw	r2,-32764(gp)
 80041b8:	e0fffe17 	ldw	r3,-8(fp)
 80041bc:	1885283a 	div	r2,r3,r2
 80041c0:	d0a6f715 	stw	r2,-25636(gp)
}
 80041c4:	e037883a 	mov	sp,fp
 80041c8:	df000017 	ldw	fp,0(sp)
 80041cc:	dec00104 	addi	sp,sp,4
 80041d0:	f800283a 	ret

080041d4 <computeSD>:

void computeSD(){
 80041d4:	defffa04 	addi	sp,sp,-24
 80041d8:	dfc00515 	stw	ra,20(sp)
 80041dc:	df000415 	stw	fp,16(sp)
 80041e0:	dc400315 	stw	r17,12(sp)
 80041e4:	dc000215 	stw	r16,8(sp)
 80041e8:	df000404 	addi	fp,sp,16
	float sum=0;;
 80041ec:	e03ffc15 	stw	zero,-16(fp)
	int i;
	for(i=0; i<HR_MAX; i++){
 80041f0:	e03ffd15 	stw	zero,-12(fp)
 80041f4:	00002906 	br	800429c <computeSD+0xc8>
		sum += pow((HR_data[i]-Average),2);
 80041f8:	008200f4 	movhi	r2,2051
 80041fc:	10ba2b04 	addi	r2,r2,-5972
 8004200:	e0fffd17 	ldw	r3,-12(fp)
 8004204:	18c7883a 	add	r3,r3,r3
 8004208:	18c7883a 	add	r3,r3,r3
 800420c:	10c5883a 	add	r2,r2,r3
 8004210:	10c00017 	ldw	r3,0(r2)
 8004214:	d0a6f717 	ldw	r2,-25636(gp)
 8004218:	1885c83a 	sub	r2,r3,r2
 800421c:	1009883a 	mov	r4,r2
 8004220:	800d2d00 	call	800d2d0 <__floatsidf>
 8004224:	100b883a 	mov	r5,r2
 8004228:	180d883a 	mov	r6,r3
 800422c:	2809883a 	mov	r4,r5
 8004230:	300b883a 	mov	r5,r6
 8004234:	000d883a 	mov	r6,zero
 8004238:	01d00034 	movhi	r7,16384
 800423c:	8005b980 	call	8005b98 <pow>
 8004240:	1021883a 	mov	r16,r2
 8004244:	1823883a 	mov	r17,r3
 8004248:	e13ffc17 	ldw	r4,-16(fp)
 800424c:	800d3a00 	call	800d3a0 <__extendsfdf2>
 8004250:	100b883a 	mov	r5,r2
 8004254:	180d883a 	mov	r6,r3
 8004258:	2809883a 	mov	r4,r5
 800425c:	300b883a 	mov	r5,r6
 8004260:	800d883a 	mov	r6,r16
 8004264:	880f883a 	mov	r7,r17
 8004268:	800aea80 	call	800aea8 <__adddf3>
 800426c:	1009883a 	mov	r4,r2
 8004270:	180b883a 	mov	r5,r3
 8004274:	2005883a 	mov	r2,r4
 8004278:	2807883a 	mov	r3,r5
 800427c:	1009883a 	mov	r4,r2
 8004280:	180b883a 	mov	r5,r3
 8004284:	800d4b00 	call	800d4b0 <__truncdfsf2>
 8004288:	1007883a 	mov	r3,r2
 800428c:	e0fffc15 	stw	r3,-16(fp)
}

void computeSD(){
	float sum=0;;
	int i;
	for(i=0; i<HR_MAX; i++){
 8004290:	e0bffd17 	ldw	r2,-12(fp)
 8004294:	10800044 	addi	r2,r2,1
 8004298:	e0bffd15 	stw	r2,-12(fp)
 800429c:	d0a00117 	ldw	r2,-32764(gp)
 80042a0:	e0fffd17 	ldw	r3,-12(fp)
 80042a4:	18bfd416 	blt	r3,r2,80041f8 <__alt_data_end+0xfc0041f8>
		sum += pow((HR_data[i]-Average),2);
	}

	SD = floor(pow(sum,0.5));
 80042a8:	e13ffc17 	ldw	r4,-16(fp)
 80042ac:	800d3a00 	call	800d3a0 <__extendsfdf2>
 80042b0:	100b883a 	mov	r5,r2
 80042b4:	180d883a 	mov	r6,r3
 80042b8:	2809883a 	mov	r4,r5
 80042bc:	300b883a 	mov	r5,r6
 80042c0:	000d883a 	mov	r6,zero
 80042c4:	01cff834 	movhi	r7,16352
 80042c8:	8005b980 	call	8005b98 <pow>
 80042cc:	100b883a 	mov	r5,r2
 80042d0:	180d883a 	mov	r6,r3
 80042d4:	2809883a 	mov	r4,r5
 80042d8:	300b883a 	mov	r5,r6
 80042dc:	80056300 	call	8005630 <floor>
 80042e0:	100b883a 	mov	r5,r2
 80042e4:	180d883a 	mov	r6,r3
 80042e8:	2809883a 	mov	r4,r5
 80042ec:	300b883a 	mov	r5,r6
 80042f0:	800d2480 	call	800d248 <__fixdfsi>
 80042f4:	d0a6f915 	stw	r2,-25628(gp)
}
 80042f8:	e6fffe04 	addi	sp,fp,-8
 80042fc:	dfc00317 	ldw	ra,12(sp)
 8004300:	df000217 	ldw	fp,8(sp)
 8004304:	dc400117 	ldw	r17,4(sp)
 8004308:	dc000017 	ldw	r16,0(sp)
 800430c:	dec00404 	addi	sp,sp,16
 8004310:	f800283a 	ret

08004314 <alert>:

void alert(){
 8004314:	defffe04 	addi	sp,sp,-8
 8004318:	dfc00115 	stw	ra,4(sp)
 800431c:	df000015 	stw	fp,0(sp)
 8004320:	d839883a 	mov	fp,sp
	wifi_send_sms("Your dependent is showing abnormal health conditions!");
 8004324:	010200f4 	movhi	r4,2051
 8004328:	2129de04 	addi	r4,r4,-22664
 800432c:	80054fc0 	call	80054fc <wifi_send_sms>
}
 8004330:	e037883a 	mov	sp,fp
 8004334:	dfc00117 	ldw	ra,4(sp)
 8004338:	df000017 	ldw	fp,0(sp)
 800433c:	dec00204 	addi	sp,sp,8
 8004340:	f800283a 	ret

08004344 <update_HistAVE>:

void update_HistAVE(){
 8004344:	deffff04 	addi	sp,sp,-4
 8004348:	df000015 	stw	fp,0(sp)
 800434c:	d839883a 	mov	fp,sp
	historical_average = (Average + historical_average)/2;
 8004350:	d0e6f717 	ldw	r3,-25636(gp)
 8004354:	d0a00217 	ldw	r2,-32760(gp)
 8004358:	1885883a 	add	r2,r3,r2
 800435c:	1006d7fa 	srli	r3,r2,31
 8004360:	1885883a 	add	r2,r3,r2
 8004364:	1005d07a 	srai	r2,r2,1
 8004368:	d0a00215 	stw	r2,-32760(gp)
}
 800436c:	e037883a 	mov	sp,fp
 8004370:	df000017 	ldw	fp,0(sp)
 8004374:	dec00104 	addi	sp,sp,4
 8004378:	f800283a 	ret

0800437c <update_HistSD>:

void update_HistSD(){
 800437c:	deffff04 	addi	sp,sp,-4
 8004380:	df000015 	stw	fp,0(sp)
 8004384:	d839883a 	mov	fp,sp
	historical_SD = (historical_SD + SD)/2;
 8004388:	d0e00317 	ldw	r3,-32756(gp)
 800438c:	d0a6f917 	ldw	r2,-25628(gp)
 8004390:	1885883a 	add	r2,r3,r2
 8004394:	1006d7fa 	srli	r3,r2,31
 8004398:	1885883a 	add	r2,r3,r2
 800439c:	1005d07a 	srai	r2,r2,1
 80043a0:	d0a00315 	stw	r2,-32756(gp)
}
 80043a4:	e037883a 	mov	sp,fp
 80043a8:	df000017 	ldw	fp,0(sp)
 80043ac:	dec00104 	addi	sp,sp,4
 80043b0:	f800283a 	ret

080043b4 <healthB>:

void healthB(){
 80043b4:	defffc04 	addi	sp,sp,-16
 80043b8:	dfc00315 	stw	ra,12(sp)
 80043bc:	df000215 	stw	fp,8(sp)
 80043c0:	df000204 	addi	fp,sp,8

	drawSolidcircle(120, 350, 80, GREEN);
 80043c4:	01001e04 	movi	r4,120
 80043c8:	01405784 	movi	r5,350
 80043cc:	01801404 	movi	r6,80
 80043d0:	01c00304 	movi	r7,12
 80043d4:	8001b500 	call	8001b50 <drawSolidcircle>
	write(95, 330, "GET", 16, WHITE, GREEN);
 80043d8:	00800044 	movi	r2,1
 80043dc:	d8800015 	stw	r2,0(sp)
 80043e0:	00800304 	movi	r2,12
 80043e4:	d8800115 	stw	r2,4(sp)
 80043e8:	010017c4 	movi	r4,95
 80043ec:	01405284 	movi	r5,330
 80043f0:	018200f4 	movhi	r6,2051
 80043f4:	31a9c504 	addi	r6,r6,-22764
 80043f8:	01c00404 	movi	r7,16
 80043fc:	80010a00 	call	80010a0 <write>
	write(65, 360, "READING", 16, WHITE, GREEN);
 8004400:	00800044 	movi	r2,1
 8004404:	d8800015 	stw	r2,0(sp)
 8004408:	00800304 	movi	r2,12
 800440c:	d8800115 	stw	r2,4(sp)
 8004410:	01001044 	movi	r4,65
 8004414:	01405a04 	movi	r5,360
 8004418:	018200f4 	movhi	r6,2051
 800441c:	31a9ec04 	addi	r6,r6,-22608
 8004420:	01c00404 	movi	r7,16
 8004424:	80010a00 	call	80010a0 <write>


}
 8004428:	e037883a 	mov	sp,fp
 800442c:	dfc00117 	ldw	ra,4(sp)
 8004430:	df000017 	ldw	fp,0(sp)
 8004434:	dec00204 	addi	sp,sp,8
 8004438:	f800283a 	ret

0800443c <menuBox>:

//menu constants
#define BOXW 150;
#define BOXH 150;

void menuBox(int x1, int y1) {
 800443c:	defff504 	addi	sp,sp,-44
 8004440:	dfc00a15 	stw	ra,40(sp)
 8004444:	df000915 	stw	fp,36(sp)
 8004448:	df000904 	addi	fp,sp,36
 800444c:	e13ffe15 	stw	r4,-8(fp)
 8004450:	e17fff15 	stw	r5,-4(fp)

	int boxW = BOXW;
 8004454:	00802584 	movi	r2,150
 8004458:	e0bffc15 	stw	r2,-16(fp)
	int boxH = BOXH;
 800445c:	00802584 	movi	r2,150
 8004460:	e0bffd15 	stw	r2,-12(fp)

	DrawSolidRectangle(x1, y1, x1+boxW, y1, x1, y1+boxH, x1+boxW, y1+boxH, GRAY);
 8004464:	e0fffe17 	ldw	r3,-8(fp)
 8004468:	e0bffc17 	ldw	r2,-16(fp)
 800446c:	188d883a 	add	r6,r3,r2
 8004470:	e0ffff17 	ldw	r3,-4(fp)
 8004474:	e0bffd17 	ldw	r2,-12(fp)
 8004478:	1889883a 	add	r4,r3,r2
 800447c:	e0fffe17 	ldw	r3,-8(fp)
 8004480:	e0bffc17 	ldw	r2,-16(fp)
 8004484:	1887883a 	add	r3,r3,r2
 8004488:	e17fff17 	ldw	r5,-4(fp)
 800448c:	e0bffd17 	ldw	r2,-12(fp)
 8004490:	2885883a 	add	r2,r5,r2
 8004494:	e17ffe17 	ldw	r5,-8(fp)
 8004498:	d9400015 	stw	r5,0(sp)
 800449c:	d9000115 	stw	r4,4(sp)
 80044a0:	d8c00215 	stw	r3,8(sp)
 80044a4:	d8800315 	stw	r2,12(sp)
 80044a8:	00800244 	movi	r2,9
 80044ac:	d8800415 	stw	r2,16(sp)
 80044b0:	e13ffe17 	ldw	r4,-8(fp)
 80044b4:	e17fff17 	ldw	r5,-4(fp)
 80044b8:	e1ffff17 	ldw	r7,-4(fp)
 80044bc:	8000ed40 	call	8000ed4 <DrawSolidRectangle>
	DrawRectangle(x1, y1, x1+boxW, y1, x1, y1+boxH, x1+boxW, y1+boxH, LIGHT_SLATE_GRAY);
 80044c0:	e0fffe17 	ldw	r3,-8(fp)
 80044c4:	e0bffc17 	ldw	r2,-16(fp)
 80044c8:	188d883a 	add	r6,r3,r2
 80044cc:	e0ffff17 	ldw	r3,-4(fp)
 80044d0:	e0bffd17 	ldw	r2,-12(fp)
 80044d4:	1889883a 	add	r4,r3,r2
 80044d8:	e0fffe17 	ldw	r3,-8(fp)
 80044dc:	e0bffc17 	ldw	r2,-16(fp)
 80044e0:	1887883a 	add	r3,r3,r2
 80044e4:	e17fff17 	ldw	r5,-4(fp)
 80044e8:	e0bffd17 	ldw	r2,-12(fp)
 80044ec:	2885883a 	add	r2,r5,r2
 80044f0:	e17ffe17 	ldw	r5,-8(fp)
 80044f4:	d9400015 	stw	r5,0(sp)
 80044f8:	d9000115 	stw	r4,4(sp)
 80044fc:	d8c00215 	stw	r3,8(sp)
 8004500:	d8800315 	stw	r2,12(sp)
 8004504:	00802144 	movi	r2,133
 8004508:	d8800415 	stw	r2,16(sp)
 800450c:	e13ffe17 	ldw	r4,-8(fp)
 8004510:	e17fff17 	ldw	r5,-4(fp)
 8004514:	e1ffff17 	ldw	r7,-4(fp)
 8004518:	8000f600 	call	8000f60 <DrawRectangle>

}
 800451c:	e037883a 	mov	sp,fp
 8004520:	dfc00117 	ldw	ra,4(sp)
 8004524:	df000017 	ldw	fp,0(sp)
 8004528:	dec00204 	addi	sp,sp,8
 800452c:	f800283a 	ret

08004530 <symbolGPS>:


void symbolGPS(int xCentre, int yCentre, int rad){
 8004530:	defff904 	addi	sp,sp,-28
 8004534:	dfc00615 	stw	ra,24(sp)
 8004538:	df000515 	stw	fp,20(sp)
 800453c:	df000504 	addi	fp,sp,20
 8004540:	e13ffd15 	stw	r4,-12(fp)
 8004544:	e17ffe15 	stw	r5,-8(fp)
 8004548:	e1bfff15 	stw	r6,-4(fp)

	int colour = STEEL_BLUE;
 800454c:	00801184 	movi	r2,70
 8004550:	e0bffc15 	stw	r2,-16(fp)

	drawcircle(xCentre, yCentre, rad, colour);
 8004554:	e13ffd17 	ldw	r4,-12(fp)
 8004558:	e17ffe17 	ldw	r5,-8(fp)
 800455c:	e1bfff17 	ldw	r6,-4(fp)
 8004560:	e1fffc17 	ldw	r7,-16(fp)
 8004564:	80019840 	call	8001984 <drawcircle>
	drawSolidcircle(xCentre, yCentre, rad/2, colour);
 8004568:	e0bfff17 	ldw	r2,-4(fp)
 800456c:	1006d7fa 	srli	r3,r2,31
 8004570:	1885883a 	add	r2,r3,r2
 8004574:	1005d07a 	srai	r2,r2,1
 8004578:	e13ffd17 	ldw	r4,-12(fp)
 800457c:	e17ffe17 	ldw	r5,-8(fp)
 8004580:	100d883a 	mov	r6,r2
 8004584:	e1fffc17 	ldw	r7,-16(fp)
 8004588:	8001b500 	call	8001b50 <drawSolidcircle>

	DrawVline(xCentre, yCentre + rad - 10, xCentre, yCentre + rad + 10, colour);
 800458c:	e0fffe17 	ldw	r3,-8(fp)
 8004590:	e0bfff17 	ldw	r2,-4(fp)
 8004594:	1885883a 	add	r2,r3,r2
 8004598:	117ffd84 	addi	r5,r2,-10
 800459c:	e0fffe17 	ldw	r3,-8(fp)
 80045a0:	e0bfff17 	ldw	r2,-4(fp)
 80045a4:	1885883a 	add	r2,r3,r2
 80045a8:	10c00284 	addi	r3,r2,10
 80045ac:	e0bffc17 	ldw	r2,-16(fp)
 80045b0:	d8800015 	stw	r2,0(sp)
 80045b4:	e13ffd17 	ldw	r4,-12(fp)
 80045b8:	e1bffd17 	ldw	r6,-12(fp)
 80045bc:	180f883a 	mov	r7,r3
 80045c0:	8000d940 	call	8000d94 <DrawVline>
	DrawVline(xCentre, yCentre - rad - 10, xCentre, yCentre - rad + 10, colour);
 80045c4:	e0fffe17 	ldw	r3,-8(fp)
 80045c8:	e0bfff17 	ldw	r2,-4(fp)
 80045cc:	1885c83a 	sub	r2,r3,r2
 80045d0:	117ffd84 	addi	r5,r2,-10
 80045d4:	e0fffe17 	ldw	r3,-8(fp)
 80045d8:	e0bfff17 	ldw	r2,-4(fp)
 80045dc:	1885c83a 	sub	r2,r3,r2
 80045e0:	10c00284 	addi	r3,r2,10
 80045e4:	e0bffc17 	ldw	r2,-16(fp)
 80045e8:	d8800015 	stw	r2,0(sp)
 80045ec:	e13ffd17 	ldw	r4,-12(fp)
 80045f0:	e1bffd17 	ldw	r6,-12(fp)
 80045f4:	180f883a 	mov	r7,r3
 80045f8:	8000d940 	call	8000d94 <DrawVline>
	DrawHline(xCentre + rad - 10, yCentre, xCentre + rad + 10, yCentre, colour);
 80045fc:	e0fffd17 	ldw	r3,-12(fp)
 8004600:	e0bfff17 	ldw	r2,-4(fp)
 8004604:	1885883a 	add	r2,r3,r2
 8004608:	113ffd84 	addi	r4,r2,-10
 800460c:	e0fffd17 	ldw	r3,-12(fp)
 8004610:	e0bfff17 	ldw	r2,-4(fp)
 8004614:	1885883a 	add	r2,r3,r2
 8004618:	10c00284 	addi	r3,r2,10
 800461c:	e0bffc17 	ldw	r2,-16(fp)
 8004620:	d8800015 	stw	r2,0(sp)
 8004624:	e17ffe17 	ldw	r5,-8(fp)
 8004628:	180d883a 	mov	r6,r3
 800462c:	e1fffe17 	ldw	r7,-8(fp)
 8004630:	8000c0c0 	call	8000c0c <DrawHline>
	DrawHline(xCentre - rad - 10, yCentre, xCentre - rad + 10, yCentre, colour);
 8004634:	e0fffd17 	ldw	r3,-12(fp)
 8004638:	e0bfff17 	ldw	r2,-4(fp)
 800463c:	1885c83a 	sub	r2,r3,r2
 8004640:	113ffd84 	addi	r4,r2,-10
 8004644:	e0fffd17 	ldw	r3,-12(fp)
 8004648:	e0bfff17 	ldw	r2,-4(fp)
 800464c:	1885c83a 	sub	r2,r3,r2
 8004650:	10c00284 	addi	r3,r2,10
 8004654:	e0bffc17 	ldw	r2,-16(fp)
 8004658:	d8800015 	stw	r2,0(sp)
 800465c:	e17ffe17 	ldw	r5,-8(fp)
 8004660:	180d883a 	mov	r6,r3
 8004664:	e1fffe17 	ldw	r7,-8(fp)
 8004668:	8000c0c0 	call	8000c0c <DrawHline>


}
 800466c:	e037883a 	mov	sp,fp
 8004670:	dfc00117 	ldw	ra,4(sp)
 8004674:	df000017 	ldw	fp,0(sp)
 8004678:	dec00204 	addi	sp,sp,8
 800467c:	f800283a 	ret

08004680 <symbolHELP>:

void symbolHELP(int x1, int y1) {
 8004680:	defff904 	addi	sp,sp,-28
 8004684:	dfc00615 	stw	ra,24(sp)
 8004688:	df000515 	stw	fp,20(sp)
 800468c:	df000504 	addi	fp,sp,20
 8004690:	e13ffe15 	stw	r4,-8(fp)
 8004694:	e17fff15 	stw	r5,-4(fp)

	int size = 75;
 8004698:	008012c4 	movi	r2,75
 800469c:	e0bffd15 	stw	r2,-12(fp)

	int i;
	for(i = 0; i<7; i++){
 80046a0:	e03ffc15 	stw	zero,-16(fp)
 80046a4:	00001b06 	br	8004714 <symbolHELP+0x94>
	DrawVline(x1+i, y1, x1, y1+size, RED);
 80046a8:	e0fffe17 	ldw	r3,-8(fp)
 80046ac:	e0bffc17 	ldw	r2,-16(fp)
 80046b0:	1889883a 	add	r4,r3,r2
 80046b4:	e0ffff17 	ldw	r3,-4(fp)
 80046b8:	e0bffd17 	ldw	r2,-12(fp)
 80046bc:	1887883a 	add	r3,r3,r2
 80046c0:	00800084 	movi	r2,2
 80046c4:	d8800015 	stw	r2,0(sp)
 80046c8:	e17fff17 	ldw	r5,-4(fp)
 80046cc:	e1bffe17 	ldw	r6,-8(fp)
 80046d0:	180f883a 	mov	r7,r3
 80046d4:	8000d940 	call	8000d94 <DrawVline>
	DrawVline(x1-i, y1, x1, y1+size, RED);
 80046d8:	e0fffe17 	ldw	r3,-8(fp)
 80046dc:	e0bffc17 	ldw	r2,-16(fp)
 80046e0:	1889c83a 	sub	r4,r3,r2
 80046e4:	e0ffff17 	ldw	r3,-4(fp)
 80046e8:	e0bffd17 	ldw	r2,-12(fp)
 80046ec:	1887883a 	add	r3,r3,r2
 80046f0:	00800084 	movi	r2,2
 80046f4:	d8800015 	stw	r2,0(sp)
 80046f8:	e17fff17 	ldw	r5,-4(fp)
 80046fc:	e1bffe17 	ldw	r6,-8(fp)
 8004700:	180f883a 	mov	r7,r3
 8004704:	8000d940 	call	8000d94 <DrawVline>
void symbolHELP(int x1, int y1) {

	int size = 75;

	int i;
	for(i = 0; i<7; i++){
 8004708:	e0bffc17 	ldw	r2,-16(fp)
 800470c:	10800044 	addi	r2,r2,1
 8004710:	e0bffc15 	stw	r2,-16(fp)
 8004714:	e0bffc17 	ldw	r2,-16(fp)
 8004718:	108001d0 	cmplti	r2,r2,7
 800471c:	103fe21e 	bne	r2,zero,80046a8 <__alt_data_end+0xfc0046a8>
	DrawVline(x1+i, y1, x1, y1+size, RED);
	DrawVline(x1-i, y1, x1, y1+size, RED);
	}

	drawSolidcircle(x1, y1+size+20, 7, RED);
 8004720:	e0ffff17 	ldw	r3,-4(fp)
 8004724:	e0bffd17 	ldw	r2,-12(fp)
 8004728:	1885883a 	add	r2,r3,r2
 800472c:	10800504 	addi	r2,r2,20
 8004730:	e13ffe17 	ldw	r4,-8(fp)
 8004734:	100b883a 	mov	r5,r2
 8004738:	018001c4 	movi	r6,7
 800473c:	01c00084 	movi	r7,2
 8004740:	8001b500 	call	8001b50 <drawSolidcircle>

}
 8004744:	e037883a 	mov	sp,fp
 8004748:	dfc00117 	ldw	ra,4(sp)
 800474c:	df000017 	ldw	fp,0(sp)
 8004750:	dec00204 	addi	sp,sp,8
 8004754:	f800283a 	ret

08004758 <cross>:

void cross(int xc, int yc) {
 8004758:	defff704 	addi	sp,sp,-36
 800475c:	dfc00815 	stw	ra,32(sp)
 8004760:	df000715 	stw	fp,28(sp)
 8004764:	df000704 	addi	fp,sp,28
 8004768:	e13ffe15 	stw	r4,-8(fp)
 800476c:	e17fff15 	stw	r5,-4(fp)

	int size = 100;
 8004770:	00801904 	movi	r2,100
 8004774:	e0bffb15 	stw	r2,-20(fp)


	int xLeft = xc - 50;
 8004778:	e0bffe17 	ldw	r2,-8(fp)
 800477c:	10bff384 	addi	r2,r2,-50
 8004780:	e0bffc15 	stw	r2,-16(fp)
	int yTop = yc - 50;
 8004784:	e0bfff17 	ldw	r2,-4(fp)
 8004788:	10bff384 	addi	r2,r2,-50
 800478c:	e0bffd15 	stw	r2,-12(fp)

	int i;
	for(i = 0; i<15; i++){
 8004790:	e03ffa15 	stw	zero,-24(fp)
 8004794:	00001f06 	br	8004814 <cross+0xbc>
		DrawVline(xc+i, yTop, xc+i, yTop+size, LIME);
 8004798:	e0fffe17 	ldw	r3,-8(fp)
 800479c:	e0bffa17 	ldw	r2,-24(fp)
 80047a0:	1889883a 	add	r4,r3,r2
 80047a4:	e0fffe17 	ldw	r3,-8(fp)
 80047a8:	e0bffa17 	ldw	r2,-24(fp)
 80047ac:	188d883a 	add	r6,r3,r2
 80047b0:	e0fffd17 	ldw	r3,-12(fp)
 80047b4:	e0bffb17 	ldw	r2,-20(fp)
 80047b8:	1887883a 	add	r3,r3,r2
 80047bc:	008000c4 	movi	r2,3
 80047c0:	d8800015 	stw	r2,0(sp)
 80047c4:	e17ffd17 	ldw	r5,-12(fp)
 80047c8:	180f883a 	mov	r7,r3
 80047cc:	8000d940 	call	8000d94 <DrawVline>
		DrawVline(xc-i, yTop, xc-i, yTop+size, LIME);
 80047d0:	e0fffe17 	ldw	r3,-8(fp)
 80047d4:	e0bffa17 	ldw	r2,-24(fp)
 80047d8:	1889c83a 	sub	r4,r3,r2
 80047dc:	e0fffe17 	ldw	r3,-8(fp)
 80047e0:	e0bffa17 	ldw	r2,-24(fp)
 80047e4:	188dc83a 	sub	r6,r3,r2
 80047e8:	e0fffd17 	ldw	r3,-12(fp)
 80047ec:	e0bffb17 	ldw	r2,-20(fp)
 80047f0:	1887883a 	add	r3,r3,r2
 80047f4:	008000c4 	movi	r2,3
 80047f8:	d8800015 	stw	r2,0(sp)
 80047fc:	e17ffd17 	ldw	r5,-12(fp)
 8004800:	180f883a 	mov	r7,r3
 8004804:	8000d940 	call	8000d94 <DrawVline>

	int xLeft = xc - 50;
	int yTop = yc - 50;

	int i;
	for(i = 0; i<15; i++){
 8004808:	e0bffa17 	ldw	r2,-24(fp)
 800480c:	10800044 	addi	r2,r2,1
 8004810:	e0bffa15 	stw	r2,-24(fp)
 8004814:	e0bffa17 	ldw	r2,-24(fp)
 8004818:	108003d0 	cmplti	r2,r2,15
 800481c:	103fde1e 	bne	r2,zero,8004798 <__alt_data_end+0xfc004798>
		DrawVline(xc+i, yTop, xc+i, yTop+size, LIME);
		DrawVline(xc-i, yTop, xc-i, yTop+size, LIME);
	}

	yc -= 17;
 8004820:	e0bfff17 	ldw	r2,-4(fp)
 8004824:	10bffbc4 	addi	r2,r2,-17
 8004828:	e0bfff15 	stw	r2,-4(fp)

	for(i = 0; i<30; i++){
 800482c:	e03ffa15 	stw	zero,-24(fp)
 8004830:	00001e06 	br	80048ac <cross+0x154>
		DrawHline(xLeft, yc+i, xLeft+size, yc+i, LIME);
 8004834:	e0ffff17 	ldw	r3,-4(fp)
 8004838:	e0bffa17 	ldw	r2,-24(fp)
 800483c:	188b883a 	add	r5,r3,r2
 8004840:	e0fffc17 	ldw	r3,-16(fp)
 8004844:	e0bffb17 	ldw	r2,-20(fp)
 8004848:	188d883a 	add	r6,r3,r2
 800484c:	e0ffff17 	ldw	r3,-4(fp)
 8004850:	e0bffa17 	ldw	r2,-24(fp)
 8004854:	1887883a 	add	r3,r3,r2
 8004858:	008000c4 	movi	r2,3
 800485c:	d8800015 	stw	r2,0(sp)
 8004860:	e13ffc17 	ldw	r4,-16(fp)
 8004864:	180f883a 	mov	r7,r3
 8004868:	8000c0c0 	call	8000c0c <DrawHline>
		DrawHline(xLeft, yc-1, xLeft+size, yc-i, LIME);
 800486c:	e0bfff17 	ldw	r2,-4(fp)
 8004870:	117fffc4 	addi	r5,r2,-1
 8004874:	e0fffc17 	ldw	r3,-16(fp)
 8004878:	e0bffb17 	ldw	r2,-20(fp)
 800487c:	188d883a 	add	r6,r3,r2
 8004880:	e0ffff17 	ldw	r3,-4(fp)
 8004884:	e0bffa17 	ldw	r2,-24(fp)
 8004888:	1887c83a 	sub	r3,r3,r2
 800488c:	008000c4 	movi	r2,3
 8004890:	d8800015 	stw	r2,0(sp)
 8004894:	e13ffc17 	ldw	r4,-16(fp)
 8004898:	180f883a 	mov	r7,r3
 800489c:	8000c0c0 	call	8000c0c <DrawHline>
		DrawVline(xc-i, yTop, xc-i, yTop+size, LIME);
	}

	yc -= 17;

	for(i = 0; i<30; i++){
 80048a0:	e0bffa17 	ldw	r2,-24(fp)
 80048a4:	10800044 	addi	r2,r2,1
 80048a8:	e0bffa15 	stw	r2,-24(fp)
 80048ac:	e0bffa17 	ldw	r2,-24(fp)
 80048b0:	10800790 	cmplti	r2,r2,30
 80048b4:	103fdf1e 	bne	r2,zero,8004834 <__alt_data_end+0xfc004834>
		DrawHline(xLeft, yc+i, xLeft+size, yc+i, LIME);
		DrawHline(xLeft, yc-1, xLeft+size, yc-i, LIME);
	}
}
 80048b8:	e037883a 	mov	sp,fp
 80048bc:	dfc00117 	ldw	ra,4(sp)
 80048c0:	df000017 	ldw	fp,0(sp)
 80048c4:	dec00204 	addi	sp,sp,8
 80048c8:	f800283a 	ret

080048cc <menu>:


void menu(){
 80048cc:	defff904 	addi	sp,sp,-28
 80048d0:	dfc00615 	stw	ra,24(sp)
 80048d4:	df000515 	stw	fp,20(sp)
 80048d8:	df000504 	addi	fp,sp,20

	clearScreen(LIGHT_CYAN);
 80048dc:	01000f84 	movi	r4,62
 80048e0:	800105c0 	call	800105c <clearScreen>

	write(325, 50, "NeverLost", 16, SLATE_GRAY, LIGHT_CYAN);
 80048e4:	00802104 	movi	r2,132
 80048e8:	d8800015 	stw	r2,0(sp)
 80048ec:	00800f84 	movi	r2,62
 80048f0:	d8800115 	stw	r2,4(sp)
 80048f4:	01005144 	movi	r4,325
 80048f8:	01400c84 	movi	r5,50
 80048fc:	018200f4 	movhi	r6,2051
 8004900:	31a9ee04 	addi	r6,r6,-22600
 8004904:	01c00404 	movi	r7,16
 8004908:	80010a00 	call	80010a0 <write>

	DrawSolidRectangle(0, 120, 800, 120, 0, 440, 800, 440, MEDIUM_SPRING_GREEN);
 800490c:	d8000015 	stw	zero,0(sp)
 8004910:	00806e04 	movi	r2,440
 8004914:	d8800115 	stw	r2,4(sp)
 8004918:	0080c804 	movi	r2,800
 800491c:	d8800215 	stw	r2,8(sp)
 8004920:	00806e04 	movi	r2,440
 8004924:	d8800315 	stw	r2,12(sp)
 8004928:	00800d04 	movi	r2,52
 800492c:	d8800415 	stw	r2,16(sp)
 8004930:	0009883a 	mov	r4,zero
 8004934:	01401e04 	movi	r5,120
 8004938:	0180c804 	movi	r6,800
 800493c:	01c01e04 	movi	r7,120
 8004940:	8000ed40 	call	8000ed4 <DrawSolidRectangle>
	DrawRectangle(0, 120, 800, 120, 0, 440, 800, 440, BLUE);
 8004944:	d8000015 	stw	zero,0(sp)
 8004948:	00806e04 	movi	r2,440
 800494c:	d8800115 	stw	r2,4(sp)
 8004950:	0080c804 	movi	r2,800
 8004954:	d8800215 	stw	r2,8(sp)
 8004958:	00806e04 	movi	r2,440
 800495c:	d8800315 	stw	r2,12(sp)
 8004960:	00800104 	movi	r2,4
 8004964:	d8800415 	stw	r2,16(sp)
 8004968:	0009883a 	mov	r4,zero
 800496c:	01401e04 	movi	r5,120
 8004970:	0180c804 	movi	r6,800
 8004974:	01c01e04 	movi	r7,120
 8004978:	8000f600 	call	8000f60 <DrawRectangle>


	menuBox(100,205);
 800497c:	01001904 	movi	r4,100
 8004980:	01403344 	movi	r5,205
 8004984:	800443c0 	call	800443c <menuBox>
	writeSmall(135,375,"DANGER",16, SLATE_GRAY, MEDIUM_SPRING_GREEN);
 8004988:	00802104 	movi	r2,132
 800498c:	d8800015 	stw	r2,0(sp)
 8004990:	00800d04 	movi	r2,52
 8004994:	d8800115 	stw	r2,4(sp)
 8004998:	010021c4 	movi	r4,135
 800499c:	01405dc4 	movi	r5,375
 80049a0:	018200f4 	movhi	r6,2051
 80049a4:	31a9f104 	addi	r6,r6,-22588
 80049a8:	01c00404 	movi	r7,16
 80049ac:	800114c0 	call	800114c <writeSmall>
	symbolHELP(175, 230);
 80049b0:	01002bc4 	movi	r4,175
 80049b4:	01403984 	movi	r5,230
 80049b8:	80046800 	call	8004680 <symbolHELP>
	menuBox(325,205);
 80049bc:	01005144 	movi	r4,325
 80049c0:	01403344 	movi	r5,205
 80049c4:	800443c0 	call	800443c <menuBox>
	writeSmall(385,375,"GPS",16, SLATE_GRAY, MEDIUM_SPRING_GREEN);
 80049c8:	00802104 	movi	r2,132
 80049cc:	d8800015 	stw	r2,0(sp)
 80049d0:	00800d04 	movi	r2,52
 80049d4:	d8800115 	stw	r2,4(sp)
 80049d8:	01006044 	movi	r4,385
 80049dc:	01405dc4 	movi	r5,375
 80049e0:	018200f4 	movhi	r6,2051
 80049e4:	31a98a04 	addi	r6,r6,-23000
 80049e8:	01c00404 	movi	r7,16
 80049ec:	800114c0 	call	800114c <writeSmall>
	symbolGPS(400,280,50);
 80049f0:	01006404 	movi	r4,400
 80049f4:	01404604 	movi	r5,280
 80049f8:	01800c84 	movi	r6,50
 80049fc:	80045300 	call	8004530 <symbolGPS>
	menuBox(550,205);
 8004a00:	01008984 	movi	r4,550
 8004a04:	01403344 	movi	r5,205
 8004a08:	800443c0 	call	800443c <menuBox>
	writeSmall(585,375,"HEALTH",16, SLATE_GRAY, MEDIUM_SPRING_GREEN);
 8004a0c:	00802104 	movi	r2,132
 8004a10:	d8800015 	stw	r2,0(sp)
 8004a14:	00800d04 	movi	r2,52
 8004a18:	d8800115 	stw	r2,4(sp)
 8004a1c:	01009244 	movi	r4,585
 8004a20:	01405dc4 	movi	r5,375
 8004a24:	018200f4 	movhi	r6,2051
 8004a28:	31a9f304 	addi	r6,r6,-22580
 8004a2c:	01c00404 	movi	r7,16
 8004a30:	800114c0 	call	800114c <writeSmall>
	cross(625, 280);
 8004a34:	01009c44 	movi	r4,625
 8004a38:	01404604 	movi	r5,280
 8004a3c:	80047580 	call	8004758 <cross>
}
 8004a40:	e037883a 	mov	sp,fp
 8004a44:	dfc00117 	ldw	ra,4(sp)
 8004a48:	df000017 	ldw	fp,0(sp)
 8004a4c:	dec00204 	addi	sp,sp,8
 8004a50:	f800283a 	ret

08004a54 <exitB>:


void exitB(){
 8004a54:	defffc04 	addi	sp,sp,-16
 8004a58:	dfc00315 	stw	ra,12(sp)
 8004a5c:	df000215 	stw	fp,8(sp)
 8004a60:	df000204 	addi	fp,sp,8

	drawSolidcircle(760, 20, 20, RED);
 8004a64:	0100be04 	movi	r4,760
 8004a68:	01400504 	movi	r5,20
 8004a6c:	01800504 	movi	r6,20
 8004a70:	01c00084 	movi	r7,2
 8004a74:	8001b500 	call	8001b50 <drawSolidcircle>
	write(755, 13, "X", 16, BLACK, RED);
 8004a78:	d8000015 	stw	zero,0(sp)
 8004a7c:	00800084 	movi	r2,2
 8004a80:	d8800115 	stw	r2,4(sp)
 8004a84:	0100bcc4 	movi	r4,755
 8004a88:	01400344 	movi	r5,13
 8004a8c:	018200f4 	movhi	r6,2051
 8004a90:	31a9f504 	addi	r6,r6,-22572
 8004a94:	01c00404 	movi	r7,16
 8004a98:	80010a00 	call	80010a0 <write>
}
 8004a9c:	e037883a 	mov	sp,fp
 8004aa0:	dfc00117 	ldw	ra,4(sp)
 8004aa4:	df000017 	ldw	fp,0(sp)
 8004aa8:	dec00204 	addi	sp,sp,8
 8004aac:	f800283a 	ret

08004ab0 <main>:
#include "Bio_plot.h"
#include "menu.h"


int main()
{
 8004ab0:	deffee04 	addi	sp,sp,-72
 8004ab4:	dfc01115 	stw	ra,68(sp)
 8004ab8:	df001015 	stw	fp,64(sp)
 8004abc:	df001004 	addi	fp,sp,64
	initRS232Touch();
 8004ac0:	80005340 	call	8000534 <initRS232Touch>
	initTouchScreen();
 8004ac4:	80006000 	call	8000600 <initTouchScreen>
	initRS232HR();
 8004ac8:	8003a640 	call	8003a64 <initRS232HR>
	initRS232GPS();
 8004acc:	80023400 	call	8002340 <initRS232GPS>
	rs232_init();
 8004ad0:	80052f00 	call	80052f0 <rs232_init>
	wifi_init();
 8004ad4:	80054cc0 	call	80054cc <wifi_init>
	//wifi_send_sms("test");

	clearScreen(LIGHT_CYAN);
 8004ad8:	01000f84 	movi	r4,62
 8004adc:	800105c0 	call	800105c <clearScreen>


	menu:

	menu();
 8004ae0:	80048cc0 	call	80048cc <menu>
	while(1){

		Point p = getPressTime(100);
 8004ae4:	01001904 	movi	r4,100
 8004ae8:	80009480 	call	8000948 <getPressTime>
 8004aec:	1009883a 	mov	r4,r2
 8004af0:	180b883a 	mov	r5,r3
 8004af4:	e13ff815 	stw	r4,-32(fp)
 8004af8:	e17ff915 	stw	r5,-28(fp)
		if (touchBox(p, 150, 100, 205)){
 8004afc:	00803344 	movi	r2,205
 8004b00:	d8800015 	stw	r2,0(sp)
 8004b04:	e13ff817 	ldw	r4,-32(fp)
 8004b08:	e17ff917 	ldw	r5,-28(fp)
 8004b0c:	01802584 	movi	r6,150
 8004b10:	01c01904 	movi	r7,100
 8004b14:	800190c0 	call	800190c <touchBox>
 8004b18:	10000c26 	beq	r2,zero,8004b4c <main+0x9c>
		}
	}

	prompt:

	prompt();
 8004b1c:	8001cfc0 	call	8001cfc <prompt>
	int Spass = 8523;
 8004b20:	008852c4 	movi	r2,8523
 8004b24:	e0bff415 	stw	r2,-48(fp)
	int Dpass = 0000;
 8004b28:	e03ff515 	stw	zero,-44(fp)
	char *pin = "";
 8004b2c:	008200f4 	movhi	r2,2051
 8004b30:	10a9f604 	addi	r2,r2,-22568
 8004b34:	e0bff215 	stw	r2,-56(fp)
	int spacer=1;
 8004b38:	00800044 	movi	r2,1
 8004b3c:	e0bff315 	stw	r2,-52(fp)
	int numLine = 170;
 8004b40:	00802a84 	movi	r2,170
 8004b44:	e0bff615 	stw	r2,-40(fp)
 8004b48:	00001306 	br	8004b98 <main+0xe8>

		Point p = getPressTime(100);
		if (touchBox(p, 150, 100, 205)){
			goto prompt;
		}
		if (touchBox(p, 150, 325, 205)){
 8004b4c:	00803344 	movi	r2,205
 8004b50:	d8800015 	stw	r2,0(sp)
 8004b54:	e13ff817 	ldw	r4,-32(fp)
 8004b58:	e17ff917 	ldw	r5,-28(fp)
 8004b5c:	01802584 	movi	r6,150
 8004b60:	01c05144 	movi	r7,325
 8004b64:	800190c0 	call	800190c <touchBox>
 8004b68:	10000126 	beq	r2,zero,8004b70 <main+0xc0>
 8004b6c:	0001a306 	br	80051fc <main+0x74c>
			goto gps;
		}
		if (touchBox(p, 150, 550, 205)){
 8004b70:	00803344 	movi	r2,205
 8004b74:	d8800015 	stw	r2,0(sp)
 8004b78:	e13ff817 	ldw	r4,-32(fp)
 8004b7c:	e17ff917 	ldw	r5,-28(fp)
 8004b80:	01802584 	movi	r6,150
 8004b84:	01c08984 	movi	r7,550
 8004b88:	800190c0 	call	800190c <touchBox>
 8004b8c:	10000126 	beq	r2,zero,8004b94 <main+0xe4>
 8004b90:	0001b506 	br	8005268 <main+0x7b8>
			goto health;
		}
	}
 8004b94:	003fd306 	br	8004ae4 <__alt_data_end+0xfc004ae4>
	char *pin = "";
	int spacer=1;
	int numLine = 170;

	while(1){
		Point p = getPressTime(100);
 8004b98:	01001904 	movi	r4,100
 8004b9c:	80009480 	call	8000948 <getPressTime>
 8004ba0:	1009883a 	mov	r4,r2
 8004ba4:	180b883a 	mov	r5,r3
 8004ba8:	e13ffa15 	stw	r4,-24(fp)
 8004bac:	e17ffb15 	stw	r5,-20(fp)
		if(spacer < 10){
 8004bb0:	e0bff317 	ldw	r2,-52(fp)
 8004bb4:	10800288 	cmpgei	r2,r2,10
 8004bb8:	1001361e 	bne	r2,zero,8005094 <main+0x5e4>
			if (touchBox(p, 100, 400, 50)){
 8004bbc:	00800c84 	movi	r2,50
 8004bc0:	d8800015 	stw	r2,0(sp)
 8004bc4:	e13ffa17 	ldw	r4,-24(fp)
 8004bc8:	e17ffb17 	ldw	r5,-20(fp)
 8004bcc:	01801904 	movi	r6,100
 8004bd0:	01c06404 	movi	r7,400
 8004bd4:	800190c0 	call	800190c <touchBox>
 8004bd8:	10001726 	beq	r2,zero,8004c38 <main+0x188>
				write(50+10*spacer, numLine, "1", 16, GRAY, WHITE);
 8004bdc:	e0bff317 	ldw	r2,-52(fp)
 8004be0:	108002a4 	muli	r2,r2,10
 8004be4:	10c00c84 	addi	r3,r2,50
 8004be8:	00800244 	movi	r2,9
 8004bec:	d8800015 	stw	r2,0(sp)
 8004bf0:	00800044 	movi	r2,1
 8004bf4:	d8800115 	stw	r2,4(sp)
 8004bf8:	1809883a 	mov	r4,r3
 8004bfc:	e17ff617 	ldw	r5,-40(fp)
 8004c00:	018200f4 	movhi	r6,2051
 8004c04:	31a98b04 	addi	r6,r6,-22996
 8004c08:	01c00404 	movi	r7,16
 8004c0c:	80010a00 	call	80010a0 <write>
				spacer++;
 8004c10:	e0bff317 	ldw	r2,-52(fp)
 8004c14:	10800044 	addi	r2,r2,1
 8004c18:	e0bff315 	stw	r2,-52(fp)
				pin = concat(pin,"1");
 8004c1c:	e13ff217 	ldw	r4,-56(fp)
 8004c20:	014200f4 	movhi	r5,2051
 8004c24:	29698b04 	addi	r5,r5,-22996
 8004c28:	80022c80 	call	80022c8 <concat>
 8004c2c:	e0bff215 	stw	r2,-56(fp)
				waitFor(1);
 8004c30:	01000044 	movi	r4,1
 8004c34:	80010040 	call	8001004 <waitFor>

			}
			if (touchBox(p, 100, 500, 50)){
 8004c38:	00800c84 	movi	r2,50
 8004c3c:	d8800015 	stw	r2,0(sp)
 8004c40:	e13ffa17 	ldw	r4,-24(fp)
 8004c44:	e17ffb17 	ldw	r5,-20(fp)
 8004c48:	01801904 	movi	r6,100
 8004c4c:	01c07d04 	movi	r7,500
 8004c50:	800190c0 	call	800190c <touchBox>
 8004c54:	10001726 	beq	r2,zero,8004cb4 <main+0x204>
				write(50+10*spacer, numLine, "2", 16, GRAY, WHITE);
 8004c58:	e0bff317 	ldw	r2,-52(fp)
 8004c5c:	108002a4 	muli	r2,r2,10
 8004c60:	10c00c84 	addi	r3,r2,50
 8004c64:	00800244 	movi	r2,9
 8004c68:	d8800015 	stw	r2,0(sp)
 8004c6c:	00800044 	movi	r2,1
 8004c70:	d8800115 	stw	r2,4(sp)
 8004c74:	1809883a 	mov	r4,r3
 8004c78:	e17ff617 	ldw	r5,-40(fp)
 8004c7c:	018200f4 	movhi	r6,2051
 8004c80:	31a98c04 	addi	r6,r6,-22992
 8004c84:	01c00404 	movi	r7,16
 8004c88:	80010a00 	call	80010a0 <write>
				spacer++;
 8004c8c:	e0bff317 	ldw	r2,-52(fp)
 8004c90:	10800044 	addi	r2,r2,1
 8004c94:	e0bff315 	stw	r2,-52(fp)
				pin = concat(pin,"2");
 8004c98:	e13ff217 	ldw	r4,-56(fp)
 8004c9c:	014200f4 	movhi	r5,2051
 8004ca0:	29698c04 	addi	r5,r5,-22992
 8004ca4:	80022c80 	call	80022c8 <concat>
 8004ca8:	e0bff215 	stw	r2,-56(fp)
				waitFor(1);
 8004cac:	01000044 	movi	r4,1
 8004cb0:	80010040 	call	8001004 <waitFor>
			}
			if (touchBox(p, 100, 600, 50)){
 8004cb4:	00800c84 	movi	r2,50
 8004cb8:	d8800015 	stw	r2,0(sp)
 8004cbc:	e13ffa17 	ldw	r4,-24(fp)
 8004cc0:	e17ffb17 	ldw	r5,-20(fp)
 8004cc4:	01801904 	movi	r6,100
 8004cc8:	01c09604 	movi	r7,600
 8004ccc:	800190c0 	call	800190c <touchBox>
 8004cd0:	10001726 	beq	r2,zero,8004d30 <main+0x280>
				write(50+10*spacer, numLine, "3", 16, GRAY, WHITE);
 8004cd4:	e0bff317 	ldw	r2,-52(fp)
 8004cd8:	108002a4 	muli	r2,r2,10
 8004cdc:	10c00c84 	addi	r3,r2,50
 8004ce0:	00800244 	movi	r2,9
 8004ce4:	d8800015 	stw	r2,0(sp)
 8004ce8:	00800044 	movi	r2,1
 8004cec:	d8800115 	stw	r2,4(sp)
 8004cf0:	1809883a 	mov	r4,r3
 8004cf4:	e17ff617 	ldw	r5,-40(fp)
 8004cf8:	018200f4 	movhi	r6,2051
 8004cfc:	31a98d04 	addi	r6,r6,-22988
 8004d00:	01c00404 	movi	r7,16
 8004d04:	80010a00 	call	80010a0 <write>
				spacer++;
 8004d08:	e0bff317 	ldw	r2,-52(fp)
 8004d0c:	10800044 	addi	r2,r2,1
 8004d10:	e0bff315 	stw	r2,-52(fp)
				pin = concat(pin,"3");
 8004d14:	e13ff217 	ldw	r4,-56(fp)
 8004d18:	014200f4 	movhi	r5,2051
 8004d1c:	29698d04 	addi	r5,r5,-22988
 8004d20:	80022c80 	call	80022c8 <concat>
 8004d24:	e0bff215 	stw	r2,-56(fp)
				waitFor(1);
 8004d28:	01000044 	movi	r4,1
 8004d2c:	80010040 	call	8001004 <waitFor>
			}
			if (touchBox(p, 100, 400, 150)){
 8004d30:	00802584 	movi	r2,150
 8004d34:	d8800015 	stw	r2,0(sp)
 8004d38:	e13ffa17 	ldw	r4,-24(fp)
 8004d3c:	e17ffb17 	ldw	r5,-20(fp)
 8004d40:	01801904 	movi	r6,100
 8004d44:	01c06404 	movi	r7,400
 8004d48:	800190c0 	call	800190c <touchBox>
 8004d4c:	10001726 	beq	r2,zero,8004dac <main+0x2fc>
				write(50+10*spacer, numLine, "4", 16, GRAY, WHITE);
 8004d50:	e0bff317 	ldw	r2,-52(fp)
 8004d54:	108002a4 	muli	r2,r2,10
 8004d58:	10c00c84 	addi	r3,r2,50
 8004d5c:	00800244 	movi	r2,9
 8004d60:	d8800015 	stw	r2,0(sp)
 8004d64:	00800044 	movi	r2,1
 8004d68:	d8800115 	stw	r2,4(sp)
 8004d6c:	1809883a 	mov	r4,r3
 8004d70:	e17ff617 	ldw	r5,-40(fp)
 8004d74:	018200f4 	movhi	r6,2051
 8004d78:	31a98e04 	addi	r6,r6,-22984
 8004d7c:	01c00404 	movi	r7,16
 8004d80:	80010a00 	call	80010a0 <write>
				spacer++;
 8004d84:	e0bff317 	ldw	r2,-52(fp)
 8004d88:	10800044 	addi	r2,r2,1
 8004d8c:	e0bff315 	stw	r2,-52(fp)
				pin = concat(pin,"4");
 8004d90:	e13ff217 	ldw	r4,-56(fp)
 8004d94:	014200f4 	movhi	r5,2051
 8004d98:	29698e04 	addi	r5,r5,-22984
 8004d9c:	80022c80 	call	80022c8 <concat>
 8004da0:	e0bff215 	stw	r2,-56(fp)
				waitFor(1);
 8004da4:	01000044 	movi	r4,1
 8004da8:	80010040 	call	8001004 <waitFor>
			}
			if (touchBox(p, 100, 500, 150)){
 8004dac:	00802584 	movi	r2,150
 8004db0:	d8800015 	stw	r2,0(sp)
 8004db4:	e13ffa17 	ldw	r4,-24(fp)
 8004db8:	e17ffb17 	ldw	r5,-20(fp)
 8004dbc:	01801904 	movi	r6,100
 8004dc0:	01c07d04 	movi	r7,500
 8004dc4:	800190c0 	call	800190c <touchBox>
 8004dc8:	10001726 	beq	r2,zero,8004e28 <main+0x378>
				write(50+10*spacer, numLine, "5", 16, GRAY, WHITE);
 8004dcc:	e0bff317 	ldw	r2,-52(fp)
 8004dd0:	108002a4 	muli	r2,r2,10
 8004dd4:	10c00c84 	addi	r3,r2,50
 8004dd8:	00800244 	movi	r2,9
 8004ddc:	d8800015 	stw	r2,0(sp)
 8004de0:	00800044 	movi	r2,1
 8004de4:	d8800115 	stw	r2,4(sp)
 8004de8:	1809883a 	mov	r4,r3
 8004dec:	e17ff617 	ldw	r5,-40(fp)
 8004df0:	018200f4 	movhi	r6,2051
 8004df4:	31a98f04 	addi	r6,r6,-22980
 8004df8:	01c00404 	movi	r7,16
 8004dfc:	80010a00 	call	80010a0 <write>
				spacer++;
 8004e00:	e0bff317 	ldw	r2,-52(fp)
 8004e04:	10800044 	addi	r2,r2,1
 8004e08:	e0bff315 	stw	r2,-52(fp)
				pin = concat(pin,"5");
 8004e0c:	e13ff217 	ldw	r4,-56(fp)
 8004e10:	014200f4 	movhi	r5,2051
 8004e14:	29698f04 	addi	r5,r5,-22980
 8004e18:	80022c80 	call	80022c8 <concat>
 8004e1c:	e0bff215 	stw	r2,-56(fp)
				waitFor(1);
 8004e20:	01000044 	movi	r4,1
 8004e24:	80010040 	call	8001004 <waitFor>
			}
			if (touchBox(p, 100, 600, 150)){
 8004e28:	00802584 	movi	r2,150
 8004e2c:	d8800015 	stw	r2,0(sp)
 8004e30:	e13ffa17 	ldw	r4,-24(fp)
 8004e34:	e17ffb17 	ldw	r5,-20(fp)
 8004e38:	01801904 	movi	r6,100
 8004e3c:	01c09604 	movi	r7,600
 8004e40:	800190c0 	call	800190c <touchBox>
 8004e44:	10001726 	beq	r2,zero,8004ea4 <main+0x3f4>
				write(50+10*spacer, numLine, "6", 16, GRAY, WHITE);
 8004e48:	e0bff317 	ldw	r2,-52(fp)
 8004e4c:	108002a4 	muli	r2,r2,10
 8004e50:	10c00c84 	addi	r3,r2,50
 8004e54:	00800244 	movi	r2,9
 8004e58:	d8800015 	stw	r2,0(sp)
 8004e5c:	00800044 	movi	r2,1
 8004e60:	d8800115 	stw	r2,4(sp)
 8004e64:	1809883a 	mov	r4,r3
 8004e68:	e17ff617 	ldw	r5,-40(fp)
 8004e6c:	018200f4 	movhi	r6,2051
 8004e70:	31a99004 	addi	r6,r6,-22976
 8004e74:	01c00404 	movi	r7,16
 8004e78:	80010a00 	call	80010a0 <write>
				spacer++;
 8004e7c:	e0bff317 	ldw	r2,-52(fp)
 8004e80:	10800044 	addi	r2,r2,1
 8004e84:	e0bff315 	stw	r2,-52(fp)
				pin = concat(pin,"6");
 8004e88:	e13ff217 	ldw	r4,-56(fp)
 8004e8c:	014200f4 	movhi	r5,2051
 8004e90:	29699004 	addi	r5,r5,-22976
 8004e94:	80022c80 	call	80022c8 <concat>
 8004e98:	e0bff215 	stw	r2,-56(fp)
				waitFor(1);
 8004e9c:	01000044 	movi	r4,1
 8004ea0:	80010040 	call	8001004 <waitFor>
			}
			if (touchBox(p, 100, 400, 250)){
 8004ea4:	00803e84 	movi	r2,250
 8004ea8:	d8800015 	stw	r2,0(sp)
 8004eac:	e13ffa17 	ldw	r4,-24(fp)
 8004eb0:	e17ffb17 	ldw	r5,-20(fp)
 8004eb4:	01801904 	movi	r6,100
 8004eb8:	01c06404 	movi	r7,400
 8004ebc:	800190c0 	call	800190c <touchBox>
 8004ec0:	10001726 	beq	r2,zero,8004f20 <main+0x470>
				write(50+10*spacer, numLine, "7", 16, GRAY, WHITE);
 8004ec4:	e0bff317 	ldw	r2,-52(fp)
 8004ec8:	108002a4 	muli	r2,r2,10
 8004ecc:	10c00c84 	addi	r3,r2,50
 8004ed0:	00800244 	movi	r2,9
 8004ed4:	d8800015 	stw	r2,0(sp)
 8004ed8:	00800044 	movi	r2,1
 8004edc:	d8800115 	stw	r2,4(sp)
 8004ee0:	1809883a 	mov	r4,r3
 8004ee4:	e17ff617 	ldw	r5,-40(fp)
 8004ee8:	018200f4 	movhi	r6,2051
 8004eec:	31a99104 	addi	r6,r6,-22972
 8004ef0:	01c00404 	movi	r7,16
 8004ef4:	80010a00 	call	80010a0 <write>
				spacer++;
 8004ef8:	e0bff317 	ldw	r2,-52(fp)
 8004efc:	10800044 	addi	r2,r2,1
 8004f00:	e0bff315 	stw	r2,-52(fp)
				pin = concat(pin,"7");
 8004f04:	e13ff217 	ldw	r4,-56(fp)
 8004f08:	014200f4 	movhi	r5,2051
 8004f0c:	29699104 	addi	r5,r5,-22972
 8004f10:	80022c80 	call	80022c8 <concat>
 8004f14:	e0bff215 	stw	r2,-56(fp)
				waitFor(1);
 8004f18:	01000044 	movi	r4,1
 8004f1c:	80010040 	call	8001004 <waitFor>
			}
			if (touchBox(p, 100, 500, 250)){
 8004f20:	00803e84 	movi	r2,250
 8004f24:	d8800015 	stw	r2,0(sp)
 8004f28:	e13ffa17 	ldw	r4,-24(fp)
 8004f2c:	e17ffb17 	ldw	r5,-20(fp)
 8004f30:	01801904 	movi	r6,100
 8004f34:	01c07d04 	movi	r7,500
 8004f38:	800190c0 	call	800190c <touchBox>
 8004f3c:	10001726 	beq	r2,zero,8004f9c <main+0x4ec>
				write(50+10*spacer, numLine, "8", 16, GRAY, WHITE);
 8004f40:	e0bff317 	ldw	r2,-52(fp)
 8004f44:	108002a4 	muli	r2,r2,10
 8004f48:	10c00c84 	addi	r3,r2,50
 8004f4c:	00800244 	movi	r2,9
 8004f50:	d8800015 	stw	r2,0(sp)
 8004f54:	00800044 	movi	r2,1
 8004f58:	d8800115 	stw	r2,4(sp)
 8004f5c:	1809883a 	mov	r4,r3
 8004f60:	e17ff617 	ldw	r5,-40(fp)
 8004f64:	018200f4 	movhi	r6,2051
 8004f68:	31a99204 	addi	r6,r6,-22968
 8004f6c:	01c00404 	movi	r7,16
 8004f70:	80010a00 	call	80010a0 <write>
				spacer++;
 8004f74:	e0bff317 	ldw	r2,-52(fp)
 8004f78:	10800044 	addi	r2,r2,1
 8004f7c:	e0bff315 	stw	r2,-52(fp)
				pin = concat(pin,"8");
 8004f80:	e13ff217 	ldw	r4,-56(fp)
 8004f84:	014200f4 	movhi	r5,2051
 8004f88:	29699204 	addi	r5,r5,-22968
 8004f8c:	80022c80 	call	80022c8 <concat>
 8004f90:	e0bff215 	stw	r2,-56(fp)
				waitFor(1);
 8004f94:	01000044 	movi	r4,1
 8004f98:	80010040 	call	8001004 <waitFor>
			}
			if (touchBox(p, 100, 600, 250)){
 8004f9c:	00803e84 	movi	r2,250
 8004fa0:	d8800015 	stw	r2,0(sp)
 8004fa4:	e13ffa17 	ldw	r4,-24(fp)
 8004fa8:	e17ffb17 	ldw	r5,-20(fp)
 8004fac:	01801904 	movi	r6,100
 8004fb0:	01c09604 	movi	r7,600
 8004fb4:	800190c0 	call	800190c <touchBox>
 8004fb8:	10001726 	beq	r2,zero,8005018 <main+0x568>
				write(50+10*spacer, numLine, "9", 16, GRAY, WHITE);
 8004fbc:	e0bff317 	ldw	r2,-52(fp)
 8004fc0:	108002a4 	muli	r2,r2,10
 8004fc4:	10c00c84 	addi	r3,r2,50
 8004fc8:	00800244 	movi	r2,9
 8004fcc:	d8800015 	stw	r2,0(sp)
 8004fd0:	00800044 	movi	r2,1
 8004fd4:	d8800115 	stw	r2,4(sp)
 8004fd8:	1809883a 	mov	r4,r3
 8004fdc:	e17ff617 	ldw	r5,-40(fp)
 8004fe0:	018200f4 	movhi	r6,2051
 8004fe4:	31a99304 	addi	r6,r6,-22964
 8004fe8:	01c00404 	movi	r7,16
 8004fec:	80010a00 	call	80010a0 <write>
				spacer++;
 8004ff0:	e0bff317 	ldw	r2,-52(fp)
 8004ff4:	10800044 	addi	r2,r2,1
 8004ff8:	e0bff315 	stw	r2,-52(fp)
				pin = concat(pin,"9");
 8004ffc:	e13ff217 	ldw	r4,-56(fp)
 8005000:	014200f4 	movhi	r5,2051
 8005004:	29699304 	addi	r5,r5,-22964
 8005008:	80022c80 	call	80022c8 <concat>
 800500c:	e0bff215 	stw	r2,-56(fp)
				waitFor(1);
 8005010:	01000044 	movi	r4,1
 8005014:	80010040 	call	8001004 <waitFor>
			}
			if (touchBox(p, 100, 500, 350)){
 8005018:	00805784 	movi	r2,350
 800501c:	d8800015 	stw	r2,0(sp)
 8005020:	e13ffa17 	ldw	r4,-24(fp)
 8005024:	e17ffb17 	ldw	r5,-20(fp)
 8005028:	01801904 	movi	r6,100
 800502c:	01c07d04 	movi	r7,500
 8005030:	800190c0 	call	800190c <touchBox>
 8005034:	10001726 	beq	r2,zero,8005094 <main+0x5e4>
				write(50+10*spacer, numLine, "0", 16, GRAY, WHITE);
 8005038:	e0bff317 	ldw	r2,-52(fp)
 800503c:	108002a4 	muli	r2,r2,10
 8005040:	10c00c84 	addi	r3,r2,50
 8005044:	00800244 	movi	r2,9
 8005048:	d8800015 	stw	r2,0(sp)
 800504c:	00800044 	movi	r2,1
 8005050:	d8800115 	stw	r2,4(sp)
 8005054:	1809883a 	mov	r4,r3
 8005058:	e17ff617 	ldw	r5,-40(fp)
 800505c:	018200f4 	movhi	r6,2051
 8005060:	31a99504 	addi	r6,r6,-22956
 8005064:	01c00404 	movi	r7,16
 8005068:	80010a00 	call	80010a0 <write>
				spacer++;
 800506c:	e0bff317 	ldw	r2,-52(fp)
 8005070:	10800044 	addi	r2,r2,1
 8005074:	e0bff315 	stw	r2,-52(fp)
				pin = concat(pin,"0");
 8005078:	e13ff217 	ldw	r4,-56(fp)
 800507c:	014200f4 	movhi	r5,2051
 8005080:	29699504 	addi	r5,r5,-22956
 8005084:	80022c80 	call	80022c8 <concat>
 8005088:	e0bff215 	stw	r2,-56(fp)
				waitFor(1);
 800508c:	01000044 	movi	r4,1
 8005090:	80010040 	call	8001004 <waitFor>
			}
		}
		//backspace
		if (touchBox(p, 100, 600, 350)){
 8005094:	00805784 	movi	r2,350
 8005098:	d8800015 	stw	r2,0(sp)
 800509c:	e13ffa17 	ldw	r4,-24(fp)
 80050a0:	e17ffb17 	ldw	r5,-20(fp)
 80050a4:	01801904 	movi	r6,100
 80050a8:	01c09604 	movi	r7,600
 80050ac:	800190c0 	call	800190c <touchBox>
 80050b0:	10001426 	beq	r2,zero,8005104 <main+0x654>
			if(spacer > 1){
 80050b4:	e0bff317 	ldw	r2,-52(fp)
 80050b8:	10800090 	cmplti	r2,r2,2
 80050bc:	10000f1e 	bne	r2,zero,80050fc <main+0x64c>
				spacer--;
 80050c0:	e0bff317 	ldw	r2,-52(fp)
 80050c4:	10bfffc4 	addi	r2,r2,-1
 80050c8:	e0bff315 	stw	r2,-52(fp)
				space(50+10*spacer, numLine);
 80050cc:	e0bff317 	ldw	r2,-52(fp)
 80050d0:	108002a4 	muli	r2,r2,10
 80050d4:	10800c84 	addi	r2,r2,50
 80050d8:	1009883a 	mov	r4,r2
 80050dc:	e17ff617 	ldw	r5,-40(fp)
 80050e0:	80021340 	call	8002134 <space>
				pin[strlen(pin)-1] = 0;
 80050e4:	e13ff217 	ldw	r4,-56(fp)
 80050e8:	800e3c40 	call	800e3c4 <strlen>
 80050ec:	10bfffc4 	addi	r2,r2,-1
 80050f0:	e0fff217 	ldw	r3,-56(fp)
 80050f4:	1885883a 	add	r2,r3,r2
 80050f8:	10000005 	stb	zero,0(r2)
			}
			waitFor(1);
 80050fc:	01000044 	movi	r4,1
 8005100:	80010040 	call	8001004 <waitFor>
		}

		//ok
		if (touchBox(p, 100, 400, 350)){
 8005104:	00805784 	movi	r2,350
 8005108:	d8800015 	stw	r2,0(sp)
 800510c:	e13ffa17 	ldw	r4,-24(fp)
 8005110:	e17ffb17 	ldw	r5,-20(fp)
 8005114:	01801904 	movi	r6,100
 8005118:	01c06404 	movi	r7,400
 800511c:	800190c0 	call	800190c <touchBox>
 8005120:	10003526 	beq	r2,zero,80051f8 <main+0x748>
			int ipin = atoi(pin);
 8005124:	e13ff217 	ldw	r4,-56(fp)
 8005128:	800d6b40 	call	800d6b4 <atoi>
 800512c:	e0bff715 	stw	r2,-36(fp)
			if (ipin == Spass){
 8005130:	e0fff717 	ldw	r3,-36(fp)
 8005134:	e0bff417 	ldw	r2,-48(fp)
 8005138:	1880101e 	bne	r3,r2,800517c <main+0x6cc>
				space2(150, 250);
 800513c:	01002584 	movi	r4,150
 8005140:	01403e84 	movi	r5,250
 8005144:	80021cc0 	call	80021cc <space2>
				write(50, 250, "CORRECT", 16, GRAY, LIGHT_CYAN);
 8005148:	00800244 	movi	r2,9
 800514c:	d8800015 	stw	r2,0(sp)
 8005150:	00800f84 	movi	r2,62
 8005154:	d8800115 	stw	r2,4(sp)
 8005158:	01000c84 	movi	r4,50
 800515c:	01403e84 	movi	r5,250
 8005160:	018200f4 	movhi	r6,2051
 8005164:	31a9f704 	addi	r6,r6,-22564
 8005168:	01c00404 	movi	r7,16
 800516c:	80010a00 	call	80010a0 <write>
				waitFor(2);
 8005170:	01000084 	movi	r4,2
 8005174:	80010040 	call	8001004 <waitFor>
				goto menu;
 8005178:	003e5906 	br	8004ae0 <__alt_data_end+0xfc004ae0>
			}
			else if (ipin == Dpass){
 800517c:	e0fff717 	ldw	r3,-36(fp)
 8005180:	e0bff517 	ldw	r2,-44(fp)
 8005184:	1880101e 	bne	r3,r2,80051c8 <main+0x718>
				write(50, 250, "Help is on the way!", 16, GRAY, LIGHT_CYAN);
 8005188:	00800244 	movi	r2,9
 800518c:	d8800015 	stw	r2,0(sp)
 8005190:	00800f84 	movi	r2,62
 8005194:	d8800115 	stw	r2,4(sp)
 8005198:	01000c84 	movi	r4,50
 800519c:	01403e84 	movi	r5,250
 80051a0:	018200f4 	movhi	r6,2051
 80051a4:	31a9f904 	addi	r6,r6,-22556
 80051a8:	01c00404 	movi	r7,16
 80051ac:	80010a00 	call	80010a0 <write>
				wifi_send_sms("Your dependent needs your help!");
 80051b0:	010200f4 	movhi	r4,2051
 80051b4:	2129fe04 	addi	r4,r4,-22536
 80051b8:	80054fc0 	call	80054fc <wifi_send_sms>
				waitFor(2);
 80051bc:	01000084 	movi	r4,2
 80051c0:	80010040 	call	8001004 <waitFor>
				goto menu;
 80051c4:	003e4606 	br	8004ae0 <__alt_data_end+0xfc004ae0>
			}
			else{
				write(50, 250, "INCORRECT", 16, GRAY, LIGHT_CYAN);
 80051c8:	00800244 	movi	r2,9
 80051cc:	d8800015 	stw	r2,0(sp)
 80051d0:	00800f84 	movi	r2,62
 80051d4:	d8800115 	stw	r2,4(sp)
 80051d8:	01000c84 	movi	r4,50
 80051dc:	01403e84 	movi	r5,250
 80051e0:	018200f4 	movhi	r6,2051
 80051e4:	31aa0604 	addi	r6,r6,-22504
 80051e8:	01c00404 	movi	r7,16
 80051ec:	80010a00 	call	80010a0 <write>
			}
			waitFor(1);
 80051f0:	01000044 	movi	r4,1
 80051f4:	80010040 	call	8001004 <waitFor>
		}

	}
 80051f8:	003e6706 	br	8004b98 <__alt_data_end+0xfc004b98>

	gps:
	gps();
 80051fc:	8002a840 	call	8002a84 <gps>
	exitB();
 8005200:	8004a540 	call	8004a54 <exitB>
	while(1){
		Point p = getPressTime(100);
 8005204:	01001904 	movi	r4,100
 8005208:	80009480 	call	8000948 <getPressTime>
 800520c:	1009883a 	mov	r4,r2
 8005210:	180b883a 	mov	r5,r3
 8005214:	e13ffc15 	stw	r4,-16(fp)
 8005218:	e17ffd15 	stw	r5,-12(fp)
		if(touchBox(p,100,790,5)){
 800521c:	00800144 	movi	r2,5
 8005220:	d8800015 	stw	r2,0(sp)
 8005224:	e13ffc17 	ldw	r4,-16(fp)
 8005228:	e17ffd17 	ldw	r5,-12(fp)
 800522c:	01801904 	movi	r6,100
 8005230:	01c0c584 	movi	r7,790
 8005234:	800190c0 	call	800190c <touchBox>
 8005238:	10000126 	beq	r2,zero,8005240 <main+0x790>
 800523c:	003e2806 	br	8004ae0 <__alt_data_end+0xfc004ae0>
			goto menu;
		}
		if(touchBox(p,150,50,300)){
 8005240:	00804b04 	movi	r2,300
 8005244:	d8800015 	stw	r2,0(sp)
 8005248:	e13ffc17 	ldw	r4,-16(fp)
 800524c:	e17ffd17 	ldw	r5,-12(fp)
 8005250:	01802584 	movi	r6,150
 8005254:	01c00c84 	movi	r7,50
 8005258:	800190c0 	call	800190c <touchBox>
 800525c:	10000126 	beq	r2,zero,8005264 <main+0x7b4>
 8005260:	003fe606 	br	80051fc <__alt_data_end+0xfc0051fc>
			goto gps;
		}
	}
 8005264:	003fe706 	br	8005204 <__alt_data_end+0xfc005204>

	health:
	clearScreen(BLACK);
 8005268:	0009883a 	mov	r4,zero
 800526c:	800105c0 	call	800105c <clearScreen>
	graph_hr_wait();
 8005270:	8003e380 	call	8003e38 <graph_hr_wait>
	init_hr();
 8005274:	8003fa00 	call	8003fa0 <init_hr>
	clearScreen(BLACK);
 8005278:	0009883a 	mov	r4,zero
 800527c:	800105c0 	call	800105c <clearScreen>
	graph_hr();
 8005280:	8003cf40 	call	8003cf4 <graph_hr>
	exitB();
 8005284:	8004a540 	call	8004a54 <exitB>
	healthB();
 8005288:	80043b40 	call	80043b4 <healthB>
	while(1){
		Point p = getPressTime(100);
 800528c:	01001904 	movi	r4,100
 8005290:	80009480 	call	8000948 <getPressTime>
 8005294:	1009883a 	mov	r4,r2
 8005298:	180b883a 	mov	r5,r3
 800529c:	e13ffe15 	stw	r4,-8(fp)
 80052a0:	e17fff15 	stw	r5,-4(fp)
		if(touchBox(p,100,790,5)){
 80052a4:	00800144 	movi	r2,5
 80052a8:	d8800015 	stw	r2,0(sp)
 80052ac:	e13ffe17 	ldw	r4,-8(fp)
 80052b0:	e17fff17 	ldw	r5,-4(fp)
 80052b4:	01801904 	movi	r6,100
 80052b8:	01c0c584 	movi	r7,790
 80052bc:	800190c0 	call	800190c <touchBox>
 80052c0:	10000126 	beq	r2,zero,80052c8 <main+0x818>
 80052c4:	003e0606 	br	8004ae0 <__alt_data_end+0xfc004ae0>
			goto menu;
		}
		if(touchBox(p,150,50,300)){
 80052c8:	00804b04 	movi	r2,300
 80052cc:	d8800015 	stw	r2,0(sp)
 80052d0:	e13ffe17 	ldw	r4,-8(fp)
 80052d4:	e17fff17 	ldw	r5,-4(fp)
 80052d8:	01802584 	movi	r6,150
 80052dc:	01c00c84 	movi	r7,50
 80052e0:	800190c0 	call	800190c <touchBox>
 80052e4:	10000126 	beq	r2,zero,80052ec <main+0x83c>
 80052e8:	003fdf06 	br	8005268 <__alt_data_end+0xfc005268>
			goto health;
		}

	}
 80052ec:	003fe706 	br	800528c <__alt_data_end+0xfc00528c>

080052f0 <rs232_init>:
#define RS232_Status (*(volatile unsigned char *)(0x84000220))
#define RS232_TxData (*(volatile unsigned char *)(0x84000222))
#define RS232_RxData (*(volatile unsigned char *)(0x84000222))
#define RS232_Baud (*(volatile unsigned char *)(0x84000224))

void rs232_init(void) {
 80052f0:	deffff04 	addi	sp,sp,-4
 80052f4:	df000015 	stw	fp,0(sp)
 80052f8:	d839883a 	mov	fp,sp
	 * transmitter interrupt disabled
	 * => CR6=0, CR5=0;
	 *
	 */

	RS232_Control = 0x15;
 80052fc:	00a10034 	movhi	r2,33792
 8005300:	10808804 	addi	r2,r2,544
 8005304:	00c00544 	movi	r3,21
 8005308:	10c00005 	stb	r3,0(r2)

	// Program baud rate generator to use 115k baud.
	RS232_Baud = 0x01;
 800530c:	00a10034 	movhi	r2,33792
 8005310:	10808904 	addi	r2,r2,548
 8005314:	00c00044 	movi	r3,1
 8005318:	10c00005 	stb	r3,0(r2)

}
 800531c:	e037883a 	mov	sp,fp
 8005320:	df000017 	ldw	fp,0(sp)
 8005324:	dec00104 	addi	sp,sp,4
 8005328:	f800283a 	ret

0800532c <rs232_send_string>:

/**
 * Send a string of data to the RS232 chip.
 */
void rs232_send_string(char command[]) {
 800532c:	defffb04 	addi	sp,sp,-20
 8005330:	dfc00415 	stw	ra,16(sp)
 8005334:	df000315 	stw	fp,12(sp)
 8005338:	dc000215 	stw	r16,8(sp)
 800533c:	df000304 	addi	fp,sp,12
 8005340:	e13ffe15 	stw	r4,-8(fp)
	int i;

	for (i = 0; i < strlen(command); i++) {
 8005344:	e03ffd15 	stw	zero,-12(fp)
 8005348:	00000c06 	br	800537c <rs232_send_string+0x50>
		rs232_send_char(command[i]);
 800534c:	e0bffd17 	ldw	r2,-12(fp)
 8005350:	e0fffe17 	ldw	r3,-8(fp)
 8005354:	1885883a 	add	r2,r3,r2
 8005358:	10800003 	ldbu	r2,0(r2)
 800535c:	10803fcc 	andi	r2,r2,255
 8005360:	1080201c 	xori	r2,r2,128
 8005364:	10bfe004 	addi	r2,r2,-128
 8005368:	1009883a 	mov	r4,r2
 800536c:	80053b40 	call	80053b4 <rs232_send_char>
 * Send a string of data to the RS232 chip.
 */
void rs232_send_string(char command[]) {
	int i;

	for (i = 0; i < strlen(command); i++) {
 8005370:	e0bffd17 	ldw	r2,-12(fp)
 8005374:	10800044 	addi	r2,r2,1
 8005378:	e0bffd15 	stw	r2,-12(fp)
 800537c:	e43ffd17 	ldw	r16,-12(fp)
 8005380:	e13ffe17 	ldw	r4,-8(fp)
 8005384:	800e3c40 	call	800e3c4 <strlen>
 8005388:	80bff036 	bltu	r16,r2,800534c <__alt_data_end+0xfc00534c>
		rs232_send_char(command[i]);
	}

	// Send the termination flags, without them the RS232 chip won't know when
	// the command ends and when the next command starts.
	rs232_send_char('\r');
 800538c:	01000344 	movi	r4,13
 8005390:	80053b40 	call	80053b4 <rs232_send_char>
	rs232_send_char('\n');
 8005394:	01000284 	movi	r4,10
 8005398:	80053b40 	call	80053b4 <rs232_send_char>
}
 800539c:	e6ffff04 	addi	sp,fp,-4
 80053a0:	dfc00217 	ldw	ra,8(sp)
 80053a4:	df000117 	ldw	fp,4(sp)
 80053a8:	dc000017 	ldw	r16,0(sp)
 80053ac:	dec00304 	addi	sp,sp,12
 80053b0:	f800283a 	ret

080053b4 <rs232_send_char>:

/**
 * Send a single character to the RS232 chip.
 */
int rs232_send_char(int char_data) {
 80053b4:	defffe04 	addi	sp,sp,-8
 80053b8:	df000115 	stw	fp,4(sp)
 80053bc:	df000104 	addi	fp,sp,4
 80053c0:	e13fff15 	stw	r4,-4(fp)
	// Poll Tx bit in 6850 status register and await for it to become '1'
	while (!(0x02 & RS232_Status)) {
 80053c4:	0001883a 	nop
 80053c8:	00a10034 	movhi	r2,33792
 80053cc:	10808804 	addi	r2,r2,544
 80053d0:	10800003 	ldbu	r2,0(r2)
 80053d4:	1080008c 	andi	r2,r2,2
 80053d8:	10803fcc 	andi	r2,r2,255
 80053dc:	103ffa26 	beq	r2,zero,80053c8 <__alt_data_end+0xfc0053c8>
	};

	// Write the character to the 6850 TxData register.
	RS232_TxData = char_data;
 80053e0:	00a10034 	movhi	r2,33792
 80053e4:	10808884 	addi	r2,r2,546
 80053e8:	e0ffff17 	ldw	r3,-4(fp)
 80053ec:	10c00005 	stb	r3,0(r2)

	return char_data;
 80053f0:	e0bfff17 	ldw	r2,-4(fp)
}
 80053f4:	e037883a 	mov	sp,fp
 80053f8:	df000017 	ldw	fp,0(sp)
 80053fc:	dec00104 	addi	sp,sp,4
 8005400:	f800283a 	ret

08005404 <rs232_print_response>:

/*
 * Receive a string form the RS232 chip by polling until we reach a newline
 */
void rs232_print_response(){
 8005404:	defffd04 	addi	sp,sp,-12
 8005408:	dfc00215 	stw	ra,8(sp)
 800540c:	df000115 	stw	fp,4(sp)
 8005410:	df000104 	addi	fp,sp,4
	char response;
	while(response != '\n'){
 8005414:	00000506 	br	800542c <rs232_print_response+0x28>
		response = (char)rs232_get_char();
 8005418:	80054540 	call	8005454 <rs232_get_char>
 800541c:	e0bfff05 	stb	r2,-4(fp)
		printf("%c", response);
 8005420:	e0bfff07 	ldb	r2,-4(fp)
 8005424:	1009883a 	mov	r4,r2
 8005428:	800df1c0 	call	800df1c <putchar>
/*
 * Receive a string form the RS232 chip by polling until we reach a newline
 */
void rs232_print_response(){
	char response;
	while(response != '\n'){
 800542c:	e0bfff07 	ldb	r2,-4(fp)
 8005430:	10800298 	cmpnei	r2,r2,10
 8005434:	103ff81e 	bne	r2,zero,8005418 <__alt_data_end+0xfc005418>
		response = (char)rs232_get_char();
		printf("%c", response);
	}
	printf("\n");
 8005438:	01000284 	movi	r4,10
 800543c:	800df1c0 	call	800df1c <putchar>
}
 8005440:	e037883a 	mov	sp,fp
 8005444:	dfc00117 	ldw	ra,4(sp)
 8005448:	df000017 	ldw	fp,0(sp)
 800544c:	dec00204 	addi	sp,sp,8
 8005450:	f800283a 	ret

08005454 <rs232_get_char>:

/**
 * Receive a single char from the RS232 chip.
 */
int rs232_get_char(void) {
 8005454:	deffff04 	addi	sp,sp,-4
 8005458:	df000015 	stw	fp,0(sp)
 800545c:	d839883a 	mov	fp,sp
	// Poll RX bit in 6850 status register and await for it to become '1'
	while (!(0x01 & RS232_Status)) {
 8005460:	0001883a 	nop
 8005464:	00a10034 	movhi	r2,33792
 8005468:	10808804 	addi	r2,r2,544
 800546c:	10800003 	ldbu	r2,0(r2)
 8005470:	1080004c 	andi	r2,r2,1
 8005474:	10803fcc 	andi	r2,r2,255
 8005478:	103ffa26 	beq	r2,zero,8005464 <__alt_data_end+0xfc005464>
	};

	// Read the received character from 6850 RxData register.
	return (int) RS232_RxData;
 800547c:	00a10034 	movhi	r2,33792
 8005480:	10808884 	addi	r2,r2,546
 8005484:	10800003 	ldbu	r2,0(r2)
 8005488:	10803fcc 	andi	r2,r2,255
}
 800548c:	e037883a 	mov	sp,fp
 8005490:	df000017 	ldw	fp,0(sp)
 8005494:	dec00104 	addi	sp,sp,4
 8005498:	f800283a 	ret

0800549c <rs232_check_if_received_data>:

/**
 * Polls the 6850 to determine if any character has been received.
 * It doesn't wait for one, or read it, it simply tests to see if one is available to read
 */
int rs232_check_if_received_data(void) {
 800549c:	deffff04 	addi	sp,sp,-4
 80054a0:	df000015 	stw	fp,0(sp)
 80054a4:	d839883a 	mov	fp,sp
	// Test Rx bit in the STATUS register
	// if RX bit is set, return TRUE, otherwise return FALSE
	return 0x01 & RS232_Status;
 80054a8:	00a10034 	movhi	r2,33792
 80054ac:	10808804 	addi	r2,r2,544
 80054b0:	10800003 	ldbu	r2,0(r2)
 80054b4:	10803fcc 	andi	r2,r2,255
 80054b8:	1080004c 	andi	r2,r2,1
}
 80054bc:	e037883a 	mov	sp,fp
 80054c0:	df000017 	ldw	fp,0(sp)
 80054c4:	dec00104 	addi	sp,sp,4
 80054c8:	f800283a 	ret

080054cc <wifi_init>:

/**
 * Initialize the Wifi module.
 * Requires initialization of the RS232 chip beforehand!
 */
void wifi_init() {
 80054cc:	defffe04 	addi	sp,sp,-8
 80054d0:	dfc00115 	stw	ra,4(sp)
 80054d4:	df000015 	stw	fp,0(sp)
 80054d8:	d839883a 	mov	fp,sp
	// Instruct RS232 chip to initializes the onboard .lua wifi script.
	rs232_send_string("dofile(\"wifi.lua\")");
 80054dc:	010200f4 	movhi	r4,2051
 80054e0:	212a0904 	addi	r4,r4,-22492
 80054e4:	800532c0 	call	800532c <rs232_send_string>
}
 80054e8:	e037883a 	mov	sp,fp
 80054ec:	dfc00117 	ldw	ra,4(sp)
 80054f0:	df000017 	ldw	fp,0(sp)
 80054f4:	dec00204 	addi	sp,sp,8
 80054f8:	f800283a 	ret

080054fc <wifi_send_sms>:
/**
 * Send a SMS message to the Guardian.
 *
 * @param message - The message to send via SMS; make sure this is no longer than ~180 chars
 */
void wifi_send_sms(char message[]) {
 80054fc:	deffbd04 	addi	sp,sp,-268
 8005500:	dfc04215 	stw	ra,264(sp)
 8005504:	df004115 	stw	fp,260(sp)
 8005508:	df004104 	addi	fp,sp,260
 800550c:	e13fff15 	stw	r4,-4(fp)
	char lua_sms_command[256];

	sprintf(lua_sms_command,
 8005510:	e13fbf04 	addi	r4,fp,-260
 8005514:	014200f4 	movhi	r5,2051
 8005518:	296a0e04 	addi	r5,r5,-22472
 800551c:	e1bfff17 	ldw	r6,-4(fp)
 8005520:	800e19c0 	call	800e19c <sprintf>
			"send_sms(\"(778) 653-7744\",\"(604) 783-0303\",\"%s\")", message);

	rs232_send_string(lua_sms_command);
 8005524:	e13fbf04 	addi	r4,fp,-260
 8005528:	800532c0 	call	800532c <rs232_send_string>
	rs232_print_response();
 800552c:	80054040 	call	8005404 <rs232_print_response>
}
 8005530:	e037883a 	mov	sp,fp
 8005534:	dfc00117 	ldw	ra,4(sp)
 8005538:	df000017 	ldw	fp,0(sp)
 800553c:	dec00204 	addi	sp,sp,8
 8005540:	f800283a 	ret

08005544 <cos>:
 8005544:	00a00034 	movhi	r2,32768
 8005548:	defffa04 	addi	sp,sp,-24
 800554c:	10bfffc4 	addi	r2,r2,-1
 8005550:	00cffa74 	movhi	r3,16361
 8005554:	dfc00515 	stw	ra,20(sp)
 8005558:	2884703a 	and	r2,r5,r2
 800555c:	18c87ec4 	addi	r3,r3,8699
 8005560:	280f883a 	mov	r7,r5
 8005564:	1880170e 	bge	r3,r2,80055c4 <cos+0x80>
 8005568:	00dffc34 	movhi	r3,32752
 800556c:	18ffffc4 	addi	r3,r3,-1
 8005570:	1880050e 	bge	r3,r2,8005588 <cos+0x44>
 8005574:	200d883a 	mov	r6,r4
 8005578:	800c9780 	call	800c978 <__subdf3>
 800557c:	dfc00517 	ldw	ra,20(sp)
 8005580:	dec00604 	addi	sp,sp,24
 8005584:	f800283a 	ret
 8005588:	d9800104 	addi	r6,sp,4
 800558c:	8007fd40 	call	8007fd4 <__ieee754_rem_pio2>
 8005590:	108000cc 	andi	r2,r2,3
 8005594:	00c00044 	movi	r3,1
 8005598:	10c01726 	beq	r2,r3,80055f8 <cos+0xb4>
 800559c:	01000084 	movi	r4,2
 80055a0:	11000e26 	beq	r2,r4,80055dc <cos+0x98>
 80055a4:	10001c26 	beq	r2,zero,8005618 <cos+0xd4>
 80055a8:	d9000117 	ldw	r4,4(sp)
 80055ac:	d9400217 	ldw	r5,8(sp)
 80055b0:	d9800317 	ldw	r6,12(sp)
 80055b4:	d9c00417 	ldw	r7,16(sp)
 80055b8:	d8c00015 	stw	r3,0(sp)
 80055bc:	8009bd00 	call	8009bd0 <__kernel_sin>
 80055c0:	003fee06 	br	800557c <__alt_data_end+0xfc00557c>
 80055c4:	000d883a 	mov	r6,zero
 80055c8:	000f883a 	mov	r7,zero
 80055cc:	8008a040 	call	8008a04 <__kernel_cos>
 80055d0:	dfc00517 	ldw	ra,20(sp)
 80055d4:	dec00604 	addi	sp,sp,24
 80055d8:	f800283a 	ret
 80055dc:	d9000117 	ldw	r4,4(sp)
 80055e0:	d9400217 	ldw	r5,8(sp)
 80055e4:	d9800317 	ldw	r6,12(sp)
 80055e8:	d9c00417 	ldw	r7,16(sp)
 80055ec:	8008a040 	call	8008a04 <__kernel_cos>
 80055f0:	18e0003c 	xorhi	r3,r3,32768
 80055f4:	003fe106 	br	800557c <__alt_data_end+0xfc00557c>
 80055f8:	d9000117 	ldw	r4,4(sp)
 80055fc:	d9400217 	ldw	r5,8(sp)
 8005600:	d9800317 	ldw	r6,12(sp)
 8005604:	d9c00417 	ldw	r7,16(sp)
 8005608:	d8800015 	stw	r2,0(sp)
 800560c:	8009bd00 	call	8009bd0 <__kernel_sin>
 8005610:	18e0003c 	xorhi	r3,r3,32768
 8005614:	003fd906 	br	800557c <__alt_data_end+0xfc00557c>
 8005618:	d9000117 	ldw	r4,4(sp)
 800561c:	d9400217 	ldw	r5,8(sp)
 8005620:	d9800317 	ldw	r6,12(sp)
 8005624:	d9c00417 	ldw	r7,16(sp)
 8005628:	8008a040 	call	8008a04 <__kernel_cos>
 800562c:	003fd306 	br	800557c <__alt_data_end+0xfc00557c>

08005630 <floor>:
 8005630:	defff904 	addi	sp,sp,-28
 8005634:	dc800215 	stw	r18,8(sp)
 8005638:	2825d53a 	srai	r18,r5,20
 800563c:	dd000415 	stw	r20,16(sp)
 8005640:	dcc00315 	stw	r19,12(sp)
 8005644:	9481ffcc 	andi	r18,r18,2047
 8005648:	dc400115 	stw	r17,4(sp)
 800564c:	dc000015 	stw	r16,0(sp)
 8005650:	dfc00615 	stw	ra,24(sp)
 8005654:	dd400515 	stw	r21,20(sp)
 8005658:	94ff0044 	addi	r19,r18,-1023
 800565c:	018004c4 	movi	r6,19
 8005660:	2821883a 	mov	r16,r5
 8005664:	2005883a 	mov	r2,r4
 8005668:	280f883a 	mov	r7,r5
 800566c:	2829883a 	mov	r20,r5
 8005670:	2023883a 	mov	r17,r4
 8005674:	34c01916 	blt	r6,r19,80056dc <floor+0xac>
 8005678:	98003d16 	blt	r19,zero,8005770 <floor+0x140>
 800567c:	04800434 	movhi	r18,16
 8005680:	94bfffc4 	addi	r18,r18,-1
 8005684:	94e5d83a 	sra	r18,r18,r19
 8005688:	914c703a 	and	r6,r18,r5
 800568c:	310cb03a 	or	r6,r6,r4
 8005690:	30001626 	beq	r6,zero,80056ec <floor+0xbc>
 8005694:	01a20034 	movhi	r6,34816
 8005698:	01df8e34 	movhi	r7,32312
 800569c:	319d6704 	addi	r6,r6,30108
 80056a0:	39f90f04 	addi	r7,r7,-7108
 80056a4:	800aea80 	call	800aea8 <__adddf3>
 80056a8:	1009883a 	mov	r4,r2
 80056ac:	180b883a 	mov	r5,r3
 80056b0:	000d883a 	mov	r6,zero
 80056b4:	000f883a 	mov	r7,zero
 80056b8:	800c0940 	call	800c094 <__gedf2>
 80056bc:	0080040e 	bge	zero,r2,80056d0 <floor+0xa0>
 80056c0:	80003d16 	blt	r16,zero,80057b8 <floor+0x188>
 80056c4:	04a0303a 	nor	r16,zero,r18
 80056c8:	a420703a 	and	r16,r20,r16
 80056cc:	0023883a 	mov	r17,zero
 80056d0:	8805883a 	mov	r2,r17
 80056d4:	8007883a 	mov	r3,r16
 80056d8:	00000506 	br	80056f0 <floor+0xc0>
 80056dc:	01800cc4 	movi	r6,51
 80056e0:	34c00c0e 	bge	r6,r19,8005714 <floor+0xe4>
 80056e4:	01810004 	movi	r6,1024
 80056e8:	99803026 	beq	r19,r6,80057ac <floor+0x17c>
 80056ec:	3807883a 	mov	r3,r7
 80056f0:	dfc00617 	ldw	ra,24(sp)
 80056f4:	dd400517 	ldw	r21,20(sp)
 80056f8:	dd000417 	ldw	r20,16(sp)
 80056fc:	dcc00317 	ldw	r19,12(sp)
 8005700:	dc800217 	ldw	r18,8(sp)
 8005704:	dc400117 	ldw	r17,4(sp)
 8005708:	dc000017 	ldw	r16,0(sp)
 800570c:	dec00704 	addi	sp,sp,28
 8005710:	f800283a 	ret
 8005714:	01bfffc4 	movi	r6,-1
 8005718:	957efb44 	addi	r21,r18,-1043
 800571c:	356ad83a 	srl	r21,r6,r21
 8005720:	a90c703a 	and	r6,r21,r4
 8005724:	303ff126 	beq	r6,zero,80056ec <__alt_data_end+0xfc0056ec>
 8005728:	01a20034 	movhi	r6,34816
 800572c:	01df8e34 	movhi	r7,32312
 8005730:	319d6704 	addi	r6,r6,30108
 8005734:	39f90f04 	addi	r7,r7,-7108
 8005738:	800aea80 	call	800aea8 <__adddf3>
 800573c:	1009883a 	mov	r4,r2
 8005740:	180b883a 	mov	r5,r3
 8005744:	000d883a 	mov	r6,zero
 8005748:	000f883a 	mov	r7,zero
 800574c:	800c0940 	call	800c094 <__gedf2>
 8005750:	00bfdf0e 	bge	zero,r2,80056d0 <__alt_data_end+0xfc0056d0>
 8005754:	80001c16 	blt	r16,zero,80057c8 <floor+0x198>
 8005758:	056a303a 	nor	r21,zero,r21
 800575c:	a021883a 	mov	r16,r20
 8005760:	8d62703a 	and	r17,r17,r21
 8005764:	8805883a 	mov	r2,r17
 8005768:	8007883a 	mov	r3,r16
 800576c:	003fe006 	br	80056f0 <__alt_data_end+0xfc0056f0>
 8005770:	01a20034 	movhi	r6,34816
 8005774:	01df8e34 	movhi	r7,32312
 8005778:	319d6704 	addi	r6,r6,30108
 800577c:	39f90f04 	addi	r7,r7,-7108
 8005780:	800aea80 	call	800aea8 <__adddf3>
 8005784:	1009883a 	mov	r4,r2
 8005788:	180b883a 	mov	r5,r3
 800578c:	000d883a 	mov	r6,zero
 8005790:	000f883a 	mov	r7,zero
 8005794:	800c0940 	call	800c094 <__gedf2>
 8005798:	00bfcd0e 	bge	zero,r2,80056d0 <__alt_data_end+0xfc0056d0>
 800579c:	80001516 	blt	r16,zero,80057f4 <floor+0x1c4>
 80057a0:	0023883a 	mov	r17,zero
 80057a4:	0021883a 	mov	r16,zero
 80057a8:	003fc906 	br	80056d0 <__alt_data_end+0xfc0056d0>
 80057ac:	200d883a 	mov	r6,r4
 80057b0:	800aea80 	call	800aea8 <__adddf3>
 80057b4:	003fce06 	br	80056f0 <__alt_data_end+0xfc0056f0>
 80057b8:	00800434 	movhi	r2,16
 80057bc:	14e7d83a 	sra	r19,r2,r19
 80057c0:	84e9883a 	add	r20,r16,r19
 80057c4:	003fbf06 	br	80056c4 <__alt_data_end+0xfc0056c4>
 80057c8:	00800504 	movi	r2,20
 80057cc:	98801326 	beq	r19,r2,800581c <floor+0x1ec>
 80057d0:	00810cc4 	movi	r2,1075
 80057d4:	14a5c83a 	sub	r18,r2,r18
 80057d8:	00800044 	movi	r2,1
 80057dc:	1484983a 	sll	r2,r2,r18
 80057e0:	1445883a 	add	r2,r2,r17
 80057e4:	14400b2e 	bgeu	r2,r17,8005814 <floor+0x1e4>
 80057e8:	85000044 	addi	r20,r16,1
 80057ec:	1023883a 	mov	r17,r2
 80057f0:	003fd906 	br	8005758 <__alt_data_end+0xfc005758>
 80057f4:	00a00034 	movhi	r2,32768
 80057f8:	10bfffc4 	addi	r2,r2,-1
 80057fc:	8084703a 	and	r2,r16,r2
 8005800:	1462b03a 	or	r17,r2,r17
 8005804:	883fb226 	beq	r17,zero,80056d0 <__alt_data_end+0xfc0056d0>
 8005808:	0023883a 	mov	r17,zero
 800580c:	042ffc34 	movhi	r16,49136
 8005810:	003faf06 	br	80056d0 <__alt_data_end+0xfc0056d0>
 8005814:	1023883a 	mov	r17,r2
 8005818:	003fcf06 	br	8005758 <__alt_data_end+0xfc005758>
 800581c:	85000044 	addi	r20,r16,1
 8005820:	003fcd06 	br	8005758 <__alt_data_end+0xfc005758>

08005824 <sin>:
 8005824:	00a00034 	movhi	r2,32768
 8005828:	defffa04 	addi	sp,sp,-24
 800582c:	10bfffc4 	addi	r2,r2,-1
 8005830:	00cffa74 	movhi	r3,16361
 8005834:	dfc00515 	stw	ra,20(sp)
 8005838:	2884703a 	and	r2,r5,r2
 800583c:	18c87ec4 	addi	r3,r3,8699
 8005840:	280f883a 	mov	r7,r5
 8005844:	1880170e 	bge	r3,r2,80058a4 <sin+0x80>
 8005848:	00dffc34 	movhi	r3,32752
 800584c:	18ffffc4 	addi	r3,r3,-1
 8005850:	1880050e 	bge	r3,r2,8005868 <sin+0x44>
 8005854:	200d883a 	mov	r6,r4
 8005858:	800c9780 	call	800c978 <__subdf3>
 800585c:	dfc00517 	ldw	ra,20(sp)
 8005860:	dec00604 	addi	sp,sp,24
 8005864:	f800283a 	ret
 8005868:	d9800104 	addi	r6,sp,4
 800586c:	8007fd40 	call	8007fd4 <__ieee754_rem_pio2>
 8005870:	108000cc 	andi	r2,r2,3
 8005874:	00c00044 	movi	r3,1
 8005878:	10c01926 	beq	r2,r3,80058e0 <sin+0xbc>
 800587c:	01000084 	movi	r4,2
 8005880:	11000f26 	beq	r2,r4,80058c0 <sin+0x9c>
 8005884:	10001c26 	beq	r2,zero,80058f8 <sin+0xd4>
 8005888:	d9000117 	ldw	r4,4(sp)
 800588c:	d9400217 	ldw	r5,8(sp)
 8005890:	d9800317 	ldw	r6,12(sp)
 8005894:	d9c00417 	ldw	r7,16(sp)
 8005898:	8008a040 	call	8008a04 <__kernel_cos>
 800589c:	18e0003c 	xorhi	r3,r3,32768
 80058a0:	003fee06 	br	800585c <__alt_data_end+0xfc00585c>
 80058a4:	d8000015 	stw	zero,0(sp)
 80058a8:	000d883a 	mov	r6,zero
 80058ac:	000f883a 	mov	r7,zero
 80058b0:	8009bd00 	call	8009bd0 <__kernel_sin>
 80058b4:	dfc00517 	ldw	ra,20(sp)
 80058b8:	dec00604 	addi	sp,sp,24
 80058bc:	f800283a 	ret
 80058c0:	d9000117 	ldw	r4,4(sp)
 80058c4:	d9400217 	ldw	r5,8(sp)
 80058c8:	d9800317 	ldw	r6,12(sp)
 80058cc:	d9c00417 	ldw	r7,16(sp)
 80058d0:	d8c00015 	stw	r3,0(sp)
 80058d4:	8009bd00 	call	8009bd0 <__kernel_sin>
 80058d8:	18e0003c 	xorhi	r3,r3,32768
 80058dc:	003fdf06 	br	800585c <__alt_data_end+0xfc00585c>
 80058e0:	d9000117 	ldw	r4,4(sp)
 80058e4:	d9400217 	ldw	r5,8(sp)
 80058e8:	d9800317 	ldw	r6,12(sp)
 80058ec:	d9c00417 	ldw	r7,16(sp)
 80058f0:	8008a040 	call	8008a04 <__kernel_cos>
 80058f4:	003fd906 	br	800585c <__alt_data_end+0xfc00585c>
 80058f8:	d9000117 	ldw	r4,4(sp)
 80058fc:	d9400217 	ldw	r5,8(sp)
 8005900:	d9800317 	ldw	r6,12(sp)
 8005904:	d9c00417 	ldw	r7,16(sp)
 8005908:	d8c00015 	stw	r3,0(sp)
 800590c:	8009bd00 	call	8009bd0 <__kernel_sin>
 8005910:	003fd206 	br	800585c <__alt_data_end+0xfc00585c>

08005914 <asin>:
 8005914:	defff104 	addi	sp,sp,-60
 8005918:	dd000d15 	stw	r20,52(sp)
 800591c:	050200f4 	movhi	r20,2051
 8005920:	dcc00c15 	stw	r19,48(sp)
 8005924:	dc800b15 	stw	r18,44(sp)
 8005928:	dc400a15 	stw	r17,40(sp)
 800592c:	dc000915 	stw	r16,36(sp)
 8005930:	dfc00e15 	stw	ra,56(sp)
 8005934:	a5331404 	addi	r20,r20,-13232
 8005938:	2027883a 	mov	r19,r4
 800593c:	2825883a 	mov	r18,r5
 8005940:	800616c0 	call	800616c <__ieee754_asin>
 8005944:	1821883a 	mov	r16,r3
 8005948:	a0c00017 	ldw	r3,0(r20)
 800594c:	1023883a 	mov	r17,r2
 8005950:	00bfffc4 	movi	r2,-1
 8005954:	18800426 	beq	r3,r2,8005968 <asin+0x54>
 8005958:	9809883a 	mov	r4,r19
 800595c:	900b883a 	mov	r5,r18
 8005960:	800a4480 	call	800a448 <__fpclassifyd>
 8005964:	10000a1e 	bne	r2,zero,8005990 <asin+0x7c>
 8005968:	8805883a 	mov	r2,r17
 800596c:	8007883a 	mov	r3,r16
 8005970:	dfc00e17 	ldw	ra,56(sp)
 8005974:	dd000d17 	ldw	r20,52(sp)
 8005978:	dcc00c17 	ldw	r19,48(sp)
 800597c:	dc800b17 	ldw	r18,44(sp)
 8005980:	dc400a17 	ldw	r17,40(sp)
 8005984:	dc000917 	ldw	r16,36(sp)
 8005988:	dec00f04 	addi	sp,sp,60
 800598c:	f800283a 	ret
 8005990:	9809883a 	mov	r4,r19
 8005994:	900b883a 	mov	r5,r18
 8005998:	800a4180 	call	800a418 <fabs>
 800599c:	1009883a 	mov	r4,r2
 80059a0:	180b883a 	mov	r5,r3
 80059a4:	000d883a 	mov	r6,zero
 80059a8:	01cffc34 	movhi	r7,16368
 80059ac:	800c0940 	call	800c094 <__gedf2>
 80059b0:	00bfed0e 	bge	zero,r2,8005968 <__alt_data_end+0xfc005968>
 80059b4:	00800044 	movi	r2,1
 80059b8:	d8800015 	stw	r2,0(sp)
 80059bc:	010200f4 	movhi	r4,2051
 80059c0:	008200f4 	movhi	r2,2051
 80059c4:	212b1304 	addi	r4,r4,-21428
 80059c8:	10aa1b04 	addi	r2,r2,-22420
 80059cc:	d8800115 	stw	r2,4(sp)
 80059d0:	d8000815 	stw	zero,32(sp)
 80059d4:	dcc00415 	stw	r19,16(sp)
 80059d8:	dc800515 	stw	r18,20(sp)
 80059dc:	dcc00215 	stw	r19,8(sp)
 80059e0:	dc800315 	stw	r18,12(sp)
 80059e4:	800a4c40 	call	800a4c4 <nan>
 80059e8:	a1000017 	ldw	r4,0(r20)
 80059ec:	d8800615 	stw	r2,24(sp)
 80059f0:	d8c00715 	stw	r3,28(sp)
 80059f4:	00800084 	movi	r2,2
 80059f8:	20800826 	beq	r4,r2,8005a1c <asin+0x108>
 80059fc:	d809883a 	mov	r4,sp
 8005a00:	800a4bc0 	call	800a4bc <matherr>
 8005a04:	10000526 	beq	r2,zero,8005a1c <asin+0x108>
 8005a08:	d8800817 	ldw	r2,32(sp)
 8005a0c:	1000071e 	bne	r2,zero,8005a2c <asin+0x118>
 8005a10:	d8800617 	ldw	r2,24(sp)
 8005a14:	d8c00717 	ldw	r3,28(sp)
 8005a18:	003fd506 	br	8005970 <__alt_data_end+0xfc005970>
 8005a1c:	800d6cc0 	call	800d6cc <__errno>
 8005a20:	00c00844 	movi	r3,33
 8005a24:	10c00015 	stw	r3,0(r2)
 8005a28:	003ff706 	br	8005a08 <__alt_data_end+0xfc005a08>
 8005a2c:	800d6cc0 	call	800d6cc <__errno>
 8005a30:	d8c00817 	ldw	r3,32(sp)
 8005a34:	10c00015 	stw	r3,0(r2)
 8005a38:	003ff506 	br	8005a10 <__alt_data_end+0xfc005a10>

08005a3c <atan2>:
 8005a3c:	80069041 	jmpi	8006904 <__ieee754_atan2>

08005a40 <fmod>:
 8005a40:	deffef04 	addi	sp,sp,-68
 8005a44:	dc400a15 	stw	r17,40(sp)
 8005a48:	044200f4 	movhi	r17,2051
 8005a4c:	dd800f15 	stw	r22,60(sp)
 8005a50:	dd400e15 	stw	r21,56(sp)
 8005a54:	dd000d15 	stw	r20,52(sp)
 8005a58:	dcc00c15 	stw	r19,48(sp)
 8005a5c:	dc800b15 	stw	r18,44(sp)
 8005a60:	dc000915 	stw	r16,36(sp)
 8005a64:	dfc01015 	stw	ra,64(sp)
 8005a68:	8c731404 	addi	r17,r17,-13232
 8005a6c:	202b883a 	mov	r21,r4
 8005a70:	2829883a 	mov	r20,r5
 8005a74:	3027883a 	mov	r19,r6
 8005a78:	3825883a 	mov	r18,r7
 8005a7c:	8006bd80 	call	8006bd8 <__ieee754_fmod>
 8005a80:	8a000017 	ldw	r8,0(r17)
 8005a84:	1021883a 	mov	r16,r2
 8005a88:	00bfffc4 	movi	r2,-1
 8005a8c:	182d883a 	mov	r22,r3
 8005a90:	40800426 	beq	r8,r2,8005aa4 <fmod+0x64>
 8005a94:	9809883a 	mov	r4,r19
 8005a98:	900b883a 	mov	r5,r18
 8005a9c:	800a4480 	call	800a448 <__fpclassifyd>
 8005aa0:	10000c1e 	bne	r2,zero,8005ad4 <fmod+0x94>
 8005aa4:	8005883a 	mov	r2,r16
 8005aa8:	b007883a 	mov	r3,r22
 8005aac:	dfc01017 	ldw	ra,64(sp)
 8005ab0:	dd800f17 	ldw	r22,60(sp)
 8005ab4:	dd400e17 	ldw	r21,56(sp)
 8005ab8:	dd000d17 	ldw	r20,52(sp)
 8005abc:	dcc00c17 	ldw	r19,48(sp)
 8005ac0:	dc800b17 	ldw	r18,44(sp)
 8005ac4:	dc400a17 	ldw	r17,40(sp)
 8005ac8:	dc000917 	ldw	r16,36(sp)
 8005acc:	dec01104 	addi	sp,sp,68
 8005ad0:	f800283a 	ret
 8005ad4:	a809883a 	mov	r4,r21
 8005ad8:	a00b883a 	mov	r5,r20
 8005adc:	800a4480 	call	800a448 <__fpclassifyd>
 8005ae0:	103ff026 	beq	r2,zero,8005aa4 <__alt_data_end+0xfc005aa4>
 8005ae4:	9809883a 	mov	r4,r19
 8005ae8:	900b883a 	mov	r5,r18
 8005aec:	000d883a 	mov	r6,zero
 8005af0:	000f883a 	mov	r7,zero
 8005af4:	800c0100 	call	800c010 <__eqdf2>
 8005af8:	103fea1e 	bne	r2,zero,8005aa4 <__alt_data_end+0xfc005aa4>
 8005afc:	00800044 	movi	r2,1
 8005b00:	d8800015 	stw	r2,0(sp)
 8005b04:	8c000017 	ldw	r16,0(r17)
 8005b08:	008200f4 	movhi	r2,2051
 8005b0c:	10aa1d04 	addi	r2,r2,-22412
 8005b10:	d8800115 	stw	r2,4(sp)
 8005b14:	dd400215 	stw	r21,8(sp)
 8005b18:	dd000315 	stw	r20,12(sp)
 8005b1c:	dcc00415 	stw	r19,16(sp)
 8005b20:	dc800515 	stw	r18,20(sp)
 8005b24:	d8000815 	stw	zero,32(sp)
 8005b28:	80001126 	beq	r16,zero,8005b70 <fmod+0x130>
 8005b2c:	0009883a 	mov	r4,zero
 8005b30:	000b883a 	mov	r5,zero
 8005b34:	000d883a 	mov	r6,zero
 8005b38:	000f883a 	mov	r7,zero
 8005b3c:	800b7440 	call	800b744 <__divdf3>
 8005b40:	d8800615 	stw	r2,24(sp)
 8005b44:	d8c00715 	stw	r3,28(sp)
 8005b48:	00800084 	movi	r2,2
 8005b4c:	80800a1e 	bne	r16,r2,8005b78 <fmod+0x138>
 8005b50:	800d6cc0 	call	800d6cc <__errno>
 8005b54:	00c00844 	movi	r3,33
 8005b58:	10c00015 	stw	r3,0(r2)
 8005b5c:	d8800817 	ldw	r2,32(sp)
 8005b60:	1000091e 	bne	r2,zero,8005b88 <fmod+0x148>
 8005b64:	d8800617 	ldw	r2,24(sp)
 8005b68:	d8c00717 	ldw	r3,28(sp)
 8005b6c:	003fcf06 	br	8005aac <__alt_data_end+0xfc005aac>
 8005b70:	dd400615 	stw	r21,24(sp)
 8005b74:	dd000715 	stw	r20,28(sp)
 8005b78:	d809883a 	mov	r4,sp
 8005b7c:	800a4bc0 	call	800a4bc <matherr>
 8005b80:	103ff61e 	bne	r2,zero,8005b5c <__alt_data_end+0xfc005b5c>
 8005b84:	003ff206 	br	8005b50 <__alt_data_end+0xfc005b50>
 8005b88:	800d6cc0 	call	800d6cc <__errno>
 8005b8c:	d8c00817 	ldw	r3,32(sp)
 8005b90:	10c00015 	stw	r3,0(r2)
 8005b94:	003ff306 	br	8005b64 <__alt_data_end+0xfc005b64>

08005b98 <pow>:
 8005b98:	deffee04 	addi	sp,sp,-72
 8005b9c:	dc800b15 	stw	r18,44(sp)
 8005ba0:	048200f4 	movhi	r18,2051
 8005ba4:	ddc01015 	stw	r23,64(sp)
 8005ba8:	dd800f15 	stw	r22,60(sp)
 8005bac:	dd400e15 	stw	r21,56(sp)
 8005bb0:	dd000d15 	stw	r20,52(sp)
 8005bb4:	dcc00c15 	stw	r19,48(sp)
 8005bb8:	dc400a15 	stw	r17,40(sp)
 8005bbc:	dc000915 	stw	r16,36(sp)
 8005bc0:	dfc01115 	stw	ra,68(sp)
 8005bc4:	94b31404 	addi	r18,r18,-13232
 8005bc8:	202f883a 	mov	r23,r4
 8005bcc:	282d883a 	mov	r22,r5
 8005bd0:	302b883a 	mov	r21,r6
 8005bd4:	3829883a 	mov	r20,r7
 8005bd8:	8006f080 	call	8006f08 <__ieee754_pow>
 8005bdc:	1023883a 	mov	r17,r2
 8005be0:	90800017 	ldw	r2,0(r18)
 8005be4:	04ffffc4 	movi	r19,-1
 8005be8:	1821883a 	mov	r16,r3
 8005bec:	14c00426 	beq	r2,r19,8005c00 <pow+0x68>
 8005bf0:	a809883a 	mov	r4,r21
 8005bf4:	a00b883a 	mov	r5,r20
 8005bf8:	800a4480 	call	800a448 <__fpclassifyd>
 8005bfc:	10000d1e 	bne	r2,zero,8005c34 <pow+0x9c>
 8005c00:	8805883a 	mov	r2,r17
 8005c04:	8007883a 	mov	r3,r16
 8005c08:	dfc01117 	ldw	ra,68(sp)
 8005c0c:	ddc01017 	ldw	r23,64(sp)
 8005c10:	dd800f17 	ldw	r22,60(sp)
 8005c14:	dd400e17 	ldw	r21,56(sp)
 8005c18:	dd000d17 	ldw	r20,52(sp)
 8005c1c:	dcc00c17 	ldw	r19,48(sp)
 8005c20:	dc800b17 	ldw	r18,44(sp)
 8005c24:	dc400a17 	ldw	r17,40(sp)
 8005c28:	dc000917 	ldw	r16,36(sp)
 8005c2c:	dec01204 	addi	sp,sp,72
 8005c30:	f800283a 	ret
 8005c34:	b809883a 	mov	r4,r23
 8005c38:	b00b883a 	mov	r5,r22
 8005c3c:	800a4480 	call	800a448 <__fpclassifyd>
 8005c40:	1000221e 	bne	r2,zero,8005ccc <pow+0x134>
 8005c44:	a809883a 	mov	r4,r21
 8005c48:	a00b883a 	mov	r5,r20
 8005c4c:	000d883a 	mov	r6,zero
 8005c50:	000f883a 	mov	r7,zero
 8005c54:	800c0100 	call	800c010 <__eqdf2>
 8005c58:	103fe91e 	bne	r2,zero,8005c00 <__alt_data_end+0xfc005c00>
 8005c5c:	00c00044 	movi	r3,1
 8005c60:	d8c00015 	stw	r3,0(sp)
 8005c64:	00c200f4 	movhi	r3,2051
 8005c68:	18ea1f04 	addi	r3,r3,-22404
 8005c6c:	90800017 	ldw	r2,0(r18)
 8005c70:	d8c00115 	stw	r3,4(sp)
 8005c74:	00cffc34 	movhi	r3,16368
 8005c78:	d8000815 	stw	zero,32(sp)
 8005c7c:	ddc00215 	stw	r23,8(sp)
 8005c80:	dd800315 	stw	r22,12(sp)
 8005c84:	dd400415 	stw	r21,16(sp)
 8005c88:	dd000515 	stw	r20,20(sp)
 8005c8c:	d8000615 	stw	zero,24(sp)
 8005c90:	d8c00715 	stw	r3,28(sp)
 8005c94:	14c00a26 	beq	r2,r19,8005cc0 <pow+0x128>
 8005c98:	00c00084 	movi	r3,2
 8005c9c:	10c00826 	beq	r2,r3,8005cc0 <pow+0x128>
 8005ca0:	d809883a 	mov	r4,sp
 8005ca4:	800a4bc0 	call	800a4bc <matherr>
 8005ca8:	10006b26 	beq	r2,zero,8005e58 <pow+0x2c0>
 8005cac:	d8800817 	ldw	r2,32(sp)
 8005cb0:	10000326 	beq	r2,zero,8005cc0 <pow+0x128>
 8005cb4:	800d6cc0 	call	800d6cc <__errno>
 8005cb8:	d8c00817 	ldw	r3,32(sp)
 8005cbc:	10c00015 	stw	r3,0(r2)
 8005cc0:	d8800617 	ldw	r2,24(sp)
 8005cc4:	d8c00717 	ldw	r3,28(sp)
 8005cc8:	003fcf06 	br	8005c08 <__alt_data_end+0xfc005c08>
 8005ccc:	b809883a 	mov	r4,r23
 8005cd0:	b00b883a 	mov	r5,r22
 8005cd4:	000d883a 	mov	r6,zero
 8005cd8:	000f883a 	mov	r7,zero
 8005cdc:	800c0100 	call	800c010 <__eqdf2>
 8005ce0:	1000171e 	bne	r2,zero,8005d40 <pow+0x1a8>
 8005ce4:	a809883a 	mov	r4,r21
 8005ce8:	a00b883a 	mov	r5,r20
 8005cec:	000d883a 	mov	r6,zero
 8005cf0:	000f883a 	mov	r7,zero
 8005cf4:	800c0100 	call	800c010 <__eqdf2>
 8005cf8:	1000381e 	bne	r2,zero,8005ddc <pow+0x244>
 8005cfc:	00c00044 	movi	r3,1
 8005d00:	d8c00015 	stw	r3,0(sp)
 8005d04:	90800017 	ldw	r2,0(r18)
 8005d08:	00c200f4 	movhi	r3,2051
 8005d0c:	18ea1f04 	addi	r3,r3,-22404
 8005d10:	d8c00115 	stw	r3,4(sp)
 8005d14:	d8000815 	stw	zero,32(sp)
 8005d18:	ddc00215 	stw	r23,8(sp)
 8005d1c:	dd800315 	stw	r22,12(sp)
 8005d20:	dd400415 	stw	r21,16(sp)
 8005d24:	dd000515 	stw	r20,20(sp)
 8005d28:	d8000615 	stw	zero,24(sp)
 8005d2c:	d8000715 	stw	zero,28(sp)
 8005d30:	103fdb26 	beq	r2,zero,8005ca0 <__alt_data_end+0xfc005ca0>
 8005d34:	008ffc34 	movhi	r2,16368
 8005d38:	d8800715 	stw	r2,28(sp)
 8005d3c:	003fe006 	br	8005cc0 <__alt_data_end+0xfc005cc0>
 8005d40:	8809883a 	mov	r4,r17
 8005d44:	800b883a 	mov	r5,r16
 8005d48:	800a42c0 	call	800a42c <finite>
 8005d4c:	10004626 	beq	r2,zero,8005e68 <pow+0x2d0>
 8005d50:	8809883a 	mov	r4,r17
 8005d54:	800b883a 	mov	r5,r16
 8005d58:	000d883a 	mov	r6,zero
 8005d5c:	000f883a 	mov	r7,zero
 8005d60:	800c0100 	call	800c010 <__eqdf2>
 8005d64:	103fa61e 	bne	r2,zero,8005c00 <__alt_data_end+0xfc005c00>
 8005d68:	b809883a 	mov	r4,r23
 8005d6c:	b00b883a 	mov	r5,r22
 8005d70:	800a42c0 	call	800a42c <finite>
 8005d74:	103fa226 	beq	r2,zero,8005c00 <__alt_data_end+0xfc005c00>
 8005d78:	a809883a 	mov	r4,r21
 8005d7c:	a00b883a 	mov	r5,r20
 8005d80:	800a42c0 	call	800a42c <finite>
 8005d84:	103f9e26 	beq	r2,zero,8005c00 <__alt_data_end+0xfc005c00>
 8005d88:	00800104 	movi	r2,4
 8005d8c:	d8800015 	stw	r2,0(sp)
 8005d90:	90c00017 	ldw	r3,0(r18)
 8005d94:	008200f4 	movhi	r2,2051
 8005d98:	10aa1f04 	addi	r2,r2,-22404
 8005d9c:	d8800115 	stw	r2,4(sp)
 8005da0:	d8000815 	stw	zero,32(sp)
 8005da4:	ddc00215 	stw	r23,8(sp)
 8005da8:	dd800315 	stw	r22,12(sp)
 8005dac:	dd400415 	stw	r21,16(sp)
 8005db0:	dd000515 	stw	r20,20(sp)
 8005db4:	d8000615 	stw	zero,24(sp)
 8005db8:	d8000715 	stw	zero,28(sp)
 8005dbc:	00800084 	movi	r2,2
 8005dc0:	18806126 	beq	r3,r2,8005f48 <pow+0x3b0>
 8005dc4:	d809883a 	mov	r4,sp
 8005dc8:	800a4bc0 	call	800a4bc <matherr>
 8005dcc:	10005e26 	beq	r2,zero,8005f48 <pow+0x3b0>
 8005dd0:	d8800817 	ldw	r2,32(sp)
 8005dd4:	103fba26 	beq	r2,zero,8005cc0 <__alt_data_end+0xfc005cc0>
 8005dd8:	003fb606 	br	8005cb4 <__alt_data_end+0xfc005cb4>
 8005ddc:	a809883a 	mov	r4,r21
 8005de0:	a00b883a 	mov	r5,r20
 8005de4:	800a42c0 	call	800a42c <finite>
 8005de8:	103f8526 	beq	r2,zero,8005c00 <__alt_data_end+0xfc005c00>
 8005dec:	a809883a 	mov	r4,r21
 8005df0:	a00b883a 	mov	r5,r20
 8005df4:	000d883a 	mov	r6,zero
 8005df8:	000f883a 	mov	r7,zero
 8005dfc:	800c1740 	call	800c174 <__ledf2>
 8005e00:	103f7f0e 	bge	r2,zero,8005c00 <__alt_data_end+0xfc005c00>
 8005e04:	00c00044 	movi	r3,1
 8005e08:	d8c00015 	stw	r3,0(sp)
 8005e0c:	90800017 	ldw	r2,0(r18)
 8005e10:	00c200f4 	movhi	r3,2051
 8005e14:	18ea1f04 	addi	r3,r3,-22404
 8005e18:	d8c00115 	stw	r3,4(sp)
 8005e1c:	d8000815 	stw	zero,32(sp)
 8005e20:	ddc00215 	stw	r23,8(sp)
 8005e24:	dd800315 	stw	r22,12(sp)
 8005e28:	dd400415 	stw	r21,16(sp)
 8005e2c:	dd000515 	stw	r20,20(sp)
 8005e30:	d8000615 	stw	zero,24(sp)
 8005e34:	10002526 	beq	r2,zero,8005ecc <pow+0x334>
 8005e38:	00fffc34 	movhi	r3,65520
 8005e3c:	d8c00715 	stw	r3,28(sp)
 8005e40:	00c00084 	movi	r3,2
 8005e44:	10c0221e 	bne	r2,r3,8005ed0 <pow+0x338>
 8005e48:	800d6cc0 	call	800d6cc <__errno>
 8005e4c:	00c00844 	movi	r3,33
 8005e50:	10c00015 	stw	r3,0(r2)
 8005e54:	003fde06 	br	8005dd0 <__alt_data_end+0xfc005dd0>
 8005e58:	800d6cc0 	call	800d6cc <__errno>
 8005e5c:	00c00844 	movi	r3,33
 8005e60:	10c00015 	stw	r3,0(r2)
 8005e64:	003f9106 	br	8005cac <__alt_data_end+0xfc005cac>
 8005e68:	b809883a 	mov	r4,r23
 8005e6c:	b00b883a 	mov	r5,r22
 8005e70:	800a42c0 	call	800a42c <finite>
 8005e74:	103fb626 	beq	r2,zero,8005d50 <__alt_data_end+0xfc005d50>
 8005e78:	a809883a 	mov	r4,r21
 8005e7c:	a00b883a 	mov	r5,r20
 8005e80:	800a42c0 	call	800a42c <finite>
 8005e84:	103fb226 	beq	r2,zero,8005d50 <__alt_data_end+0xfc005d50>
 8005e88:	8809883a 	mov	r4,r17
 8005e8c:	800b883a 	mov	r5,r16
 8005e90:	800a4480 	call	800a448 <__fpclassifyd>
 8005e94:	1000121e 	bne	r2,zero,8005ee0 <pow+0x348>
 8005e98:	00800044 	movi	r2,1
 8005e9c:	d8800015 	stw	r2,0(sp)
 8005ea0:	94000017 	ldw	r16,0(r18)
 8005ea4:	008200f4 	movhi	r2,2051
 8005ea8:	10aa1f04 	addi	r2,r2,-22404
 8005eac:	d8800115 	stw	r2,4(sp)
 8005eb0:	d8000815 	stw	zero,32(sp)
 8005eb4:	ddc00215 	stw	r23,8(sp)
 8005eb8:	dd800315 	stw	r22,12(sp)
 8005ebc:	dd400415 	stw	r21,16(sp)
 8005ec0:	dd000515 	stw	r20,20(sp)
 8005ec4:	8000241e 	bne	r16,zero,8005f58 <pow+0x3c0>
 8005ec8:	d8000615 	stw	zero,24(sp)
 8005ecc:	d8000715 	stw	zero,28(sp)
 8005ed0:	d809883a 	mov	r4,sp
 8005ed4:	800a4bc0 	call	800a4bc <matherr>
 8005ed8:	103fbd1e 	bne	r2,zero,8005dd0 <__alt_data_end+0xfc005dd0>
 8005edc:	003fda06 	br	8005e48 <__alt_data_end+0xfc005e48>
 8005ee0:	00c000c4 	movi	r3,3
 8005ee4:	d8c00015 	stw	r3,0(sp)
 8005ee8:	90800017 	ldw	r2,0(r18)
 8005eec:	00c200f4 	movhi	r3,2051
 8005ef0:	18ea1f04 	addi	r3,r3,-22404
 8005ef4:	d8c00115 	stw	r3,4(sp)
 8005ef8:	d8000815 	stw	zero,32(sp)
 8005efc:	ddc00215 	stw	r23,8(sp)
 8005f00:	dd800315 	stw	r22,12(sp)
 8005f04:	dd400415 	stw	r21,16(sp)
 8005f08:	dd000515 	stw	r20,20(sp)
 8005f0c:	b809883a 	mov	r4,r23
 8005f10:	b00b883a 	mov	r5,r22
 8005f14:	000d883a 	mov	r6,zero
 8005f18:	000f883a 	mov	r7,zero
 8005f1c:	1000181e 	bne	r2,zero,8005f80 <pow+0x3e8>
 8005f20:	00b80034 	movhi	r2,57344
 8005f24:	d8800615 	stw	r2,24(sp)
 8005f28:	0091fc34 	movhi	r2,18416
 8005f2c:	10bfffc4 	addi	r2,r2,-1
 8005f30:	d8800715 	stw	r2,28(sp)
 8005f34:	800c1740 	call	800c174 <__ledf2>
 8005f38:	10002a16 	blt	r2,zero,8005fe4 <pow+0x44c>
 8005f3c:	90c00017 	ldw	r3,0(r18)
 8005f40:	00800084 	movi	r2,2
 8005f44:	18bf9f1e 	bne	r3,r2,8005dc4 <__alt_data_end+0xfc005dc4>
 8005f48:	800d6cc0 	call	800d6cc <__errno>
 8005f4c:	00c00884 	movi	r3,34
 8005f50:	10c00015 	stw	r3,0(r2)
 8005f54:	003f9e06 	br	8005dd0 <__alt_data_end+0xfc005dd0>
 8005f58:	0009883a 	mov	r4,zero
 8005f5c:	000b883a 	mov	r5,zero
 8005f60:	000d883a 	mov	r6,zero
 8005f64:	000f883a 	mov	r7,zero
 8005f68:	800b7440 	call	800b744 <__divdf3>
 8005f6c:	d8800615 	stw	r2,24(sp)
 8005f70:	d8c00715 	stw	r3,28(sp)
 8005f74:	00800084 	movi	r2,2
 8005f78:	80bfb326 	beq	r16,r2,8005e48 <__alt_data_end+0xfc005e48>
 8005f7c:	003fd406 	br	8005ed0 <__alt_data_end+0xfc005ed0>
 8005f80:	009ffc34 	movhi	r2,32752
 8005f84:	d8000615 	stw	zero,24(sp)
 8005f88:	d8800715 	stw	r2,28(sp)
 8005f8c:	800c1740 	call	800c174 <__ledf2>
 8005f90:	103fea0e 	bge	r2,zero,8005f3c <__alt_data_end+0xfc005f3c>
 8005f94:	000d883a 	mov	r6,zero
 8005f98:	01cff834 	movhi	r7,16352
 8005f9c:	a809883a 	mov	r4,r21
 8005fa0:	a00b883a 	mov	r5,r20
 8005fa4:	800c2540 	call	800c254 <__muldf3>
 8005fa8:	1009883a 	mov	r4,r2
 8005fac:	180b883a 	mov	r5,r3
 8005fb0:	1023883a 	mov	r17,r2
 8005fb4:	1821883a 	mov	r16,r3
 8005fb8:	800a4d00 	call	800a4d0 <rint>
 8005fbc:	1009883a 	mov	r4,r2
 8005fc0:	180b883a 	mov	r5,r3
 8005fc4:	880d883a 	mov	r6,r17
 8005fc8:	800f883a 	mov	r7,r16
 8005fcc:	800c0100 	call	800c010 <__eqdf2>
 8005fd0:	103fda26 	beq	r2,zero,8005f3c <__alt_data_end+0xfc005f3c>
 8005fd4:	00bffc34 	movhi	r2,65520
 8005fd8:	d8000615 	stw	zero,24(sp)
 8005fdc:	d8800715 	stw	r2,28(sp)
 8005fe0:	003fd606 	br	8005f3c <__alt_data_end+0xfc005f3c>
 8005fe4:	000d883a 	mov	r6,zero
 8005fe8:	01cff834 	movhi	r7,16352
 8005fec:	a809883a 	mov	r4,r21
 8005ff0:	a00b883a 	mov	r5,r20
 8005ff4:	800c2540 	call	800c254 <__muldf3>
 8005ff8:	1009883a 	mov	r4,r2
 8005ffc:	180b883a 	mov	r5,r3
 8006000:	1023883a 	mov	r17,r2
 8006004:	1821883a 	mov	r16,r3
 8006008:	800a4d00 	call	800a4d0 <rint>
 800600c:	1009883a 	mov	r4,r2
 8006010:	180b883a 	mov	r5,r3
 8006014:	880d883a 	mov	r6,r17
 8006018:	800f883a 	mov	r7,r16
 800601c:	800c0100 	call	800c010 <__eqdf2>
 8006020:	103fc626 	beq	r2,zero,8005f3c <__alt_data_end+0xfc005f3c>
 8006024:	00b80034 	movhi	r2,57344
 8006028:	d8800615 	stw	r2,24(sp)
 800602c:	00b1fc34 	movhi	r2,51184
 8006030:	10bfffc4 	addi	r2,r2,-1
 8006034:	d8800715 	stw	r2,28(sp)
 8006038:	003fc006 	br	8005f3c <__alt_data_end+0xfc005f3c>

0800603c <sqrt>:
 800603c:	defff104 	addi	sp,sp,-60
 8006040:	dd000d15 	stw	r20,52(sp)
 8006044:	050200f4 	movhi	r20,2051
 8006048:	dcc00c15 	stw	r19,48(sp)
 800604c:	dc800b15 	stw	r18,44(sp)
 8006050:	dc400a15 	stw	r17,40(sp)
 8006054:	dc000915 	stw	r16,36(sp)
 8006058:	dfc00e15 	stw	ra,56(sp)
 800605c:	a5331404 	addi	r20,r20,-13232
 8006060:	2027883a 	mov	r19,r4
 8006064:	2825883a 	mov	r18,r5
 8006068:	80087700 	call	8008770 <__ieee754_sqrt>
 800606c:	1821883a 	mov	r16,r3
 8006070:	a0c00017 	ldw	r3,0(r20)
 8006074:	1023883a 	mov	r17,r2
 8006078:	00bfffc4 	movi	r2,-1
 800607c:	18800a26 	beq	r3,r2,80060a8 <sqrt+0x6c>
 8006080:	9809883a 	mov	r4,r19
 8006084:	900b883a 	mov	r5,r18
 8006088:	800a4480 	call	800a448 <__fpclassifyd>
 800608c:	10000626 	beq	r2,zero,80060a8 <sqrt+0x6c>
 8006090:	9809883a 	mov	r4,r19
 8006094:	900b883a 	mov	r5,r18
 8006098:	000d883a 	mov	r6,zero
 800609c:	000f883a 	mov	r7,zero
 80060a0:	800c1740 	call	800c174 <__ledf2>
 80060a4:	10000a16 	blt	r2,zero,80060d0 <sqrt+0x94>
 80060a8:	8805883a 	mov	r2,r17
 80060ac:	8007883a 	mov	r3,r16
 80060b0:	dfc00e17 	ldw	ra,56(sp)
 80060b4:	dd000d17 	ldw	r20,52(sp)
 80060b8:	dcc00c17 	ldw	r19,48(sp)
 80060bc:	dc800b17 	ldw	r18,44(sp)
 80060c0:	dc400a17 	ldw	r17,40(sp)
 80060c4:	dc000917 	ldw	r16,36(sp)
 80060c8:	dec00f04 	addi	sp,sp,60
 80060cc:	f800283a 	ret
 80060d0:	00800044 	movi	r2,1
 80060d4:	d8800015 	stw	r2,0(sp)
 80060d8:	a4000017 	ldw	r16,0(r20)
 80060dc:	008200f4 	movhi	r2,2051
 80060e0:	10aa2004 	addi	r2,r2,-22400
 80060e4:	d8800115 	stw	r2,4(sp)
 80060e8:	d8000815 	stw	zero,32(sp)
 80060ec:	dcc00415 	stw	r19,16(sp)
 80060f0:	dc800515 	stw	r18,20(sp)
 80060f4:	dcc00215 	stw	r19,8(sp)
 80060f8:	dc800315 	stw	r18,12(sp)
 80060fc:	80000a1e 	bne	r16,zero,8006128 <sqrt+0xec>
 8006100:	d8000615 	stw	zero,24(sp)
 8006104:	d8000715 	stw	zero,28(sp)
 8006108:	d809883a 	mov	r4,sp
 800610c:	800a4bc0 	call	800a4bc <matherr>
 8006110:	10000e26 	beq	r2,zero,800614c <sqrt+0x110>
 8006114:	d8800817 	ldw	r2,32(sp)
 8006118:	1000101e 	bne	r2,zero,800615c <sqrt+0x120>
 800611c:	d8800617 	ldw	r2,24(sp)
 8006120:	d8c00717 	ldw	r3,28(sp)
 8006124:	003fe206 	br	80060b0 <__alt_data_end+0xfc0060b0>
 8006128:	0009883a 	mov	r4,zero
 800612c:	000b883a 	mov	r5,zero
 8006130:	000d883a 	mov	r6,zero
 8006134:	000f883a 	mov	r7,zero
 8006138:	800b7440 	call	800b744 <__divdf3>
 800613c:	d8800615 	stw	r2,24(sp)
 8006140:	d8c00715 	stw	r3,28(sp)
 8006144:	00800084 	movi	r2,2
 8006148:	80bfef1e 	bne	r16,r2,8006108 <__alt_data_end+0xfc006108>
 800614c:	800d6cc0 	call	800d6cc <__errno>
 8006150:	00c00844 	movi	r3,33
 8006154:	10c00015 	stw	r3,0(r2)
 8006158:	003fee06 	br	8006114 <__alt_data_end+0xfc006114>
 800615c:	800d6cc0 	call	800d6cc <__errno>
 8006160:	d8c00817 	ldw	r3,32(sp)
 8006164:	10c00015 	stw	r3,0(r2)
 8006168:	003fec06 	br	800611c <__alt_data_end+0xfc00611c>

0800616c <__ieee754_asin>:
 800616c:	defff404 	addi	sp,sp,-48
 8006170:	dc000215 	stw	r16,8(sp)
 8006174:	04200034 	movhi	r16,32768
 8006178:	843fffc4 	addi	r16,r16,-1
 800617c:	008ffc34 	movhi	r2,16368
 8006180:	dc800415 	stw	r18,16(sp)
 8006184:	dc400315 	stw	r17,12(sp)
 8006188:	dfc00b15 	stw	ra,44(sp)
 800618c:	df000a15 	stw	fp,40(sp)
 8006190:	ddc00915 	stw	r23,36(sp)
 8006194:	dd800815 	stw	r22,32(sp)
 8006198:	dd400715 	stw	r21,28(sp)
 800619c:	dd000615 	stw	r20,24(sp)
 80061a0:	dcc00515 	stw	r19,20(sp)
 80061a4:	2c20703a 	and	r16,r5,r16
 80061a8:	10bfffc4 	addi	r2,r2,-1
 80061ac:	2825883a 	mov	r18,r5
 80061b0:	2023883a 	mov	r17,r4
 80061b4:	1400180e 	bge	r2,r16,8006218 <__ieee754_asin+0xac>
 80061b8:	00b00434 	movhi	r2,49168
 80061bc:	80a1883a 	add	r16,r16,r2
 80061c0:	8120b03a 	or	r16,r16,r4
 80061c4:	80002826 	beq	r16,zero,8006268 <__ieee754_asin+0xfc>
 80061c8:	200d883a 	mov	r6,r4
 80061cc:	280f883a 	mov	r7,r5
 80061d0:	800c9780 	call	800c978 <__subdf3>
 80061d4:	1009883a 	mov	r4,r2
 80061d8:	180b883a 	mov	r5,r3
 80061dc:	100d883a 	mov	r6,r2
 80061e0:	180f883a 	mov	r7,r3
 80061e4:	800b7440 	call	800b744 <__divdf3>
 80061e8:	dfc00b17 	ldw	ra,44(sp)
 80061ec:	df000a17 	ldw	fp,40(sp)
 80061f0:	ddc00917 	ldw	r23,36(sp)
 80061f4:	dd800817 	ldw	r22,32(sp)
 80061f8:	dd400717 	ldw	r21,28(sp)
 80061fc:	dd000617 	ldw	r20,24(sp)
 8006200:	dcc00517 	ldw	r19,20(sp)
 8006204:	dc800417 	ldw	r18,16(sp)
 8006208:	dc400317 	ldw	r17,12(sp)
 800620c:	dc000217 	ldw	r16,8(sp)
 8006210:	dec00c04 	addi	sp,sp,48
 8006214:	f800283a 	ret
 8006218:	008ff834 	movhi	r2,16352
 800621c:	10bfffc4 	addi	r2,r2,-1
 8006220:	14002516 	blt	r2,r16,80062b8 <__ieee754_asin+0x14c>
 8006224:	008f9034 	movhi	r2,15936
 8006228:	10bfffc4 	addi	r2,r2,-1
 800622c:	14012b16 	blt	r2,r16,80066dc <__ieee754_asin+0x570>
 8006230:	01a20034 	movhi	r6,34816
 8006234:	01df8e34 	movhi	r7,32312
 8006238:	319d6704 	addi	r6,r6,30108
 800623c:	39f90f04 	addi	r7,r7,-7108
 8006240:	800aea80 	call	800aea8 <__adddf3>
 8006244:	1009883a 	mov	r4,r2
 8006248:	180b883a 	mov	r5,r3
 800624c:	000d883a 	mov	r6,zero
 8006250:	01cffc34 	movhi	r7,16368
 8006254:	800c0940 	call	800c094 <__gedf2>
 8006258:	0080170e 	bge	zero,r2,80062b8 <__ieee754_asin+0x14c>
 800625c:	8805883a 	mov	r2,r17
 8006260:	9007883a 	mov	r3,r18
 8006264:	003fe006 	br	80061e8 <__alt_data_end+0xfc0061e8>
 8006268:	01951134 	movhi	r6,21572
 800626c:	01cffe74 	movhi	r7,16377
 8006270:	318b4604 	addi	r6,r6,11544
 8006274:	39c87ec4 	addi	r7,r7,8699
 8006278:	800c2540 	call	800c254 <__muldf3>
 800627c:	018cc534 	movhi	r6,13076
 8006280:	01cf24b4 	movhi	r7,15506
 8006284:	8809883a 	mov	r4,r17
 8006288:	900b883a 	mov	r5,r18
 800628c:	319701c4 	addi	r6,r6,23559
 8006290:	39e98984 	addi	r7,r7,-23002
 8006294:	1027883a 	mov	r19,r2
 8006298:	1821883a 	mov	r16,r3
 800629c:	800c2540 	call	800c254 <__muldf3>
 80062a0:	9809883a 	mov	r4,r19
 80062a4:	800b883a 	mov	r5,r16
 80062a8:	100d883a 	mov	r6,r2
 80062ac:	180f883a 	mov	r7,r3
 80062b0:	800aea80 	call	800aea8 <__adddf3>
 80062b4:	003fcc06 	br	80061e8 <__alt_data_end+0xfc0061e8>
 80062b8:	8809883a 	mov	r4,r17
 80062bc:	900b883a 	mov	r5,r18
 80062c0:	800a4180 	call	800a418 <fabs>
 80062c4:	100d883a 	mov	r6,r2
 80062c8:	180f883a 	mov	r7,r3
 80062cc:	0009883a 	mov	r4,zero
 80062d0:	014ffc34 	movhi	r5,16368
 80062d4:	800c9780 	call	800c978 <__subdf3>
 80062d8:	1009883a 	mov	r4,r2
 80062dc:	180b883a 	mov	r5,r3
 80062e0:	000d883a 	mov	r6,zero
 80062e4:	01cff834 	movhi	r7,16352
 80062e8:	800c2540 	call	800c254 <__muldf3>
 80062ec:	01837fb4 	movhi	r6,3582
 80062f0:	01cfc0b4 	movhi	r7,16130
 80062f4:	1009883a 	mov	r4,r2
 80062f8:	180b883a 	mov	r5,r3
 80062fc:	31bdc244 	addi	r6,r6,-2295
 8006300:	39cf7844 	addi	r7,r7,15841
 8006304:	1027883a 	mov	r19,r2
 8006308:	1823883a 	mov	r17,r3
 800630c:	800c2540 	call	800c254 <__muldf3>
 8006310:	019d40b4 	movhi	r6,29954
 8006314:	01cfd2b4 	movhi	r7,16202
 8006318:	1009883a 	mov	r4,r2
 800631c:	180b883a 	mov	r5,r3
 8006320:	31aca204 	addi	r6,r6,-19832
 8006324:	39fbf804 	addi	r7,r7,-4128
 8006328:	800aea80 	call	800aea8 <__adddf3>
 800632c:	1009883a 	mov	r4,r2
 8006330:	180b883a 	mov	r5,r3
 8006334:	980d883a 	mov	r6,r19
 8006338:	880f883a 	mov	r7,r17
 800633c:	800c2540 	call	800c254 <__muldf3>
 8006340:	01ad5a74 	movhi	r6,46441
 8006344:	01cfe974 	movhi	r7,16293
 8006348:	1009883a 	mov	r4,r2
 800634c:	180b883a 	mov	r5,r3
 8006350:	31a3cec4 	addi	r6,r6,-28869
 8006354:	39e08a04 	addi	r7,r7,-32216
 8006358:	800c9780 	call	800c978 <__subdf3>
 800635c:	1009883a 	mov	r4,r2
 8006360:	180b883a 	mov	r5,r3
 8006364:	980d883a 	mov	r6,r19
 8006368:	880f883a 	mov	r7,r17
 800636c:	800c2540 	call	800c254 <__muldf3>
 8006370:	0183a234 	movhi	r6,3720
 8006374:	01cff2b4 	movhi	r7,16330
 8006378:	1009883a 	mov	r4,r2
 800637c:	180b883a 	mov	r5,r3
 8006380:	31911544 	addi	r6,r6,17493
 8006384:	39f05544 	addi	r7,r7,-16043
 8006388:	800aea80 	call	800aea8 <__adddf3>
 800638c:	1009883a 	mov	r4,r2
 8006390:	180b883a 	mov	r5,r3
 8006394:	980d883a 	mov	r6,r19
 8006398:	880f883a 	mov	r7,r17
 800639c:	800c2540 	call	800c254 <__muldf3>
 80063a0:	0180faf4 	movhi	r6,1003
 80063a4:	01cff574 	movhi	r7,16341
 80063a8:	1009883a 	mov	r4,r2
 80063ac:	180b883a 	mov	r5,r3
 80063b0:	319bdf44 	addi	r6,r6,28541
 80063b4:	39f58484 	addi	r7,r7,-10734
 80063b8:	800c9780 	call	800c978 <__subdf3>
 80063bc:	1009883a 	mov	r4,r2
 80063c0:	180b883a 	mov	r5,r3
 80063c4:	980d883a 	mov	r6,r19
 80063c8:	880f883a 	mov	r7,r17
 80063cc:	800c2540 	call	800c254 <__muldf3>
 80063d0:	01955574 	movhi	r6,21845
 80063d4:	01cff174 	movhi	r7,16325
 80063d8:	1009883a 	mov	r4,r2
 80063dc:	180b883a 	mov	r5,r3
 80063e0:	31955544 	addi	r6,r6,21845
 80063e4:	39d55544 	addi	r7,r7,21845
 80063e8:	800aea80 	call	800aea8 <__adddf3>
 80063ec:	1009883a 	mov	r4,r2
 80063f0:	180b883a 	mov	r5,r3
 80063f4:	980d883a 	mov	r6,r19
 80063f8:	880f883a 	mov	r7,r17
 80063fc:	800c2540 	call	800c254 <__muldf3>
 8006400:	01ac4bf4 	movhi	r6,45359
 8006404:	01cfed34 	movhi	r7,16308
 8006408:	9809883a 	mov	r4,r19
 800640c:	880b883a 	mov	r5,r17
 8006410:	31a4a084 	addi	r6,r6,-28030
 8006414:	39ee3144 	addi	r7,r7,-18235
 8006418:	1039883a 	mov	fp,r2
 800641c:	182f883a 	mov	r23,r3
 8006420:	800c2540 	call	800c254 <__muldf3>
 8006424:	0186e374 	movhi	r6,7053
 8006428:	01cff9b4 	movhi	r7,16358
 800642c:	1009883a 	mov	r4,r2
 8006430:	180b883a 	mov	r5,r3
 8006434:	31805644 	addi	r6,r6,345
 8006438:	39c19b04 	addi	r7,r7,1644
 800643c:	800c9780 	call	800c978 <__subdf3>
 8006440:	1009883a 	mov	r4,r2
 8006444:	180b883a 	mov	r5,r3
 8006448:	980d883a 	mov	r6,r19
 800644c:	880f883a 	mov	r7,r17
 8006450:	800c2540 	call	800c254 <__muldf3>
 8006454:	01a716b4 	movhi	r6,40026
 8006458:	01d00034 	movhi	r7,16384
 800645c:	1009883a 	mov	r4,r2
 8006460:	180b883a 	mov	r5,r3
 8006464:	31a2b204 	addi	r6,r6,-30008
 8006468:	39cab944 	addi	r7,r7,10981
 800646c:	800aea80 	call	800aea8 <__adddf3>
 8006470:	1009883a 	mov	r4,r2
 8006474:	180b883a 	mov	r5,r3
 8006478:	980d883a 	mov	r6,r19
 800647c:	880f883a 	mov	r7,r17
 8006480:	800c2540 	call	800c254 <__muldf3>
 8006484:	018722b4 	movhi	r6,7306
 8006488:	01d000f4 	movhi	r7,16387
 800648c:	1009883a 	mov	r4,r2
 8006490:	180b883a 	mov	r5,r3
 8006494:	318b52c4 	addi	r6,r6,11595
 8006498:	39ce89c4 	addi	r7,r7,14887
 800649c:	800c9780 	call	800c978 <__subdf3>
 80064a0:	1009883a 	mov	r4,r2
 80064a4:	180b883a 	mov	r5,r3
 80064a8:	980d883a 	mov	r6,r19
 80064ac:	880f883a 	mov	r7,r17
 80064b0:	800c2540 	call	800c254 <__muldf3>
 80064b4:	1009883a 	mov	r4,r2
 80064b8:	180b883a 	mov	r5,r3
 80064bc:	000d883a 	mov	r6,zero
 80064c0:	01cffc34 	movhi	r7,16368
 80064c4:	800aea80 	call	800aea8 <__adddf3>
 80064c8:	9809883a 	mov	r4,r19
 80064cc:	880b883a 	mov	r5,r17
 80064d0:	d8800015 	stw	r2,0(sp)
 80064d4:	182b883a 	mov	r21,r3
 80064d8:	80087700 	call	8008770 <__ieee754_sqrt>
 80064dc:	102d883a 	mov	r22,r2
 80064e0:	008ffbf4 	movhi	r2,16367
 80064e4:	108ccc84 	addi	r2,r2,13106
 80064e8:	1829883a 	mov	r20,r3
 80064ec:	1400250e 	bge	r2,r16,8006584 <__ieee754_asin+0x418>
 80064f0:	d9800017 	ldw	r6,0(sp)
 80064f4:	e009883a 	mov	r4,fp
 80064f8:	b80b883a 	mov	r5,r23
 80064fc:	a80f883a 	mov	r7,r21
 8006500:	800b7440 	call	800b744 <__divdf3>
 8006504:	b009883a 	mov	r4,r22
 8006508:	a00b883a 	mov	r5,r20
 800650c:	100d883a 	mov	r6,r2
 8006510:	180f883a 	mov	r7,r3
 8006514:	800c2540 	call	800c254 <__muldf3>
 8006518:	1009883a 	mov	r4,r2
 800651c:	180b883a 	mov	r5,r3
 8006520:	b00d883a 	mov	r6,r22
 8006524:	a00f883a 	mov	r7,r20
 8006528:	800aea80 	call	800aea8 <__adddf3>
 800652c:	1009883a 	mov	r4,r2
 8006530:	180b883a 	mov	r5,r3
 8006534:	100d883a 	mov	r6,r2
 8006538:	180f883a 	mov	r7,r3
 800653c:	800aea80 	call	800aea8 <__adddf3>
 8006540:	018cc534 	movhi	r6,13076
 8006544:	01cf24b4 	movhi	r7,15506
 8006548:	1009883a 	mov	r4,r2
 800654c:	180b883a 	mov	r5,r3
 8006550:	319701c4 	addi	r6,r6,23559
 8006554:	39e98984 	addi	r7,r7,-23002
 8006558:	800c9780 	call	800c978 <__subdf3>
 800655c:	01151134 	movhi	r4,21572
 8006560:	014ffe74 	movhi	r5,16377
 8006564:	210b4604 	addi	r4,r4,11544
 8006568:	29487ec4 	addi	r5,r5,8699
 800656c:	100d883a 	mov	r6,r2
 8006570:	180f883a 	mov	r7,r3
 8006574:	800c9780 	call	800c978 <__subdf3>
 8006578:	04bf1b16 	blt	zero,r18,80061e8 <__alt_data_end+0xfc0061e8>
 800657c:	18e0003c 	xorhi	r3,r3,32768
 8006580:	003f1906 	br	80061e8 <__alt_data_end+0xfc0061e8>
 8006584:	b009883a 	mov	r4,r22
 8006588:	b00d883a 	mov	r6,r22
 800658c:	180b883a 	mov	r5,r3
 8006590:	180f883a 	mov	r7,r3
 8006594:	800aea80 	call	800aea8 <__adddf3>
 8006598:	d9800017 	ldw	r6,0(sp)
 800659c:	e009883a 	mov	r4,fp
 80065a0:	b80b883a 	mov	r5,r23
 80065a4:	a80f883a 	mov	r7,r21
 80065a8:	1821883a 	mov	r16,r3
 80065ac:	d8800115 	stw	r2,4(sp)
 80065b0:	800b7440 	call	800b744 <__divdf3>
 80065b4:	da400117 	ldw	r9,4(sp)
 80065b8:	800b883a 	mov	r5,r16
 80065bc:	100d883a 	mov	r6,r2
 80065c0:	4809883a 	mov	r4,r9
 80065c4:	180f883a 	mov	r7,r3
 80065c8:	800c2540 	call	800c254 <__muldf3>
 80065cc:	a00b883a 	mov	r5,r20
 80065d0:	a00f883a 	mov	r7,r20
 80065d4:	0009883a 	mov	r4,zero
 80065d8:	000d883a 	mov	r6,zero
 80065dc:	102b883a 	mov	r21,r2
 80065e0:	1821883a 	mov	r16,r3
 80065e4:	800c2540 	call	800c254 <__muldf3>
 80065e8:	9809883a 	mov	r4,r19
 80065ec:	880b883a 	mov	r5,r17
 80065f0:	100d883a 	mov	r6,r2
 80065f4:	180f883a 	mov	r7,r3
 80065f8:	800c9780 	call	800c978 <__subdf3>
 80065fc:	b009883a 	mov	r4,r22
 8006600:	a00b883a 	mov	r5,r20
 8006604:	a00f883a 	mov	r7,r20
 8006608:	000d883a 	mov	r6,zero
 800660c:	1027883a 	mov	r19,r2
 8006610:	1823883a 	mov	r17,r3
 8006614:	800aea80 	call	800aea8 <__adddf3>
 8006618:	9809883a 	mov	r4,r19
 800661c:	880b883a 	mov	r5,r17
 8006620:	100d883a 	mov	r6,r2
 8006624:	180f883a 	mov	r7,r3
 8006628:	800b7440 	call	800b744 <__divdf3>
 800662c:	1009883a 	mov	r4,r2
 8006630:	180b883a 	mov	r5,r3
 8006634:	100d883a 	mov	r6,r2
 8006638:	180f883a 	mov	r7,r3
 800663c:	800aea80 	call	800aea8 <__adddf3>
 8006640:	010cc534 	movhi	r4,13076
 8006644:	014f24b4 	movhi	r5,15506
 8006648:	211701c4 	addi	r4,r4,23559
 800664c:	29698984 	addi	r5,r5,-23002
 8006650:	100d883a 	mov	r6,r2
 8006654:	180f883a 	mov	r7,r3
 8006658:	800c9780 	call	800c978 <__subdf3>
 800665c:	a809883a 	mov	r4,r21
 8006660:	800b883a 	mov	r5,r16
 8006664:	100d883a 	mov	r6,r2
 8006668:	180f883a 	mov	r7,r3
 800666c:	800c9780 	call	800c978 <__subdf3>
 8006670:	a00b883a 	mov	r5,r20
 8006674:	a00f883a 	mov	r7,r20
 8006678:	0009883a 	mov	r4,zero
 800667c:	000d883a 	mov	r6,zero
 8006680:	1023883a 	mov	r17,r2
 8006684:	1821883a 	mov	r16,r3
 8006688:	800aea80 	call	800aea8 <__adddf3>
 800668c:	01151134 	movhi	r4,21572
 8006690:	014ffa74 	movhi	r5,16361
 8006694:	210b4604 	addi	r4,r4,11544
 8006698:	29487ec4 	addi	r5,r5,8699
 800669c:	100d883a 	mov	r6,r2
 80066a0:	180f883a 	mov	r7,r3
 80066a4:	800c9780 	call	800c978 <__subdf3>
 80066a8:	8809883a 	mov	r4,r17
 80066ac:	800b883a 	mov	r5,r16
 80066b0:	100d883a 	mov	r6,r2
 80066b4:	180f883a 	mov	r7,r3
 80066b8:	800c9780 	call	800c978 <__subdf3>
 80066bc:	01151134 	movhi	r4,21572
 80066c0:	014ffa74 	movhi	r5,16361
 80066c4:	210b4604 	addi	r4,r4,11544
 80066c8:	29487ec4 	addi	r5,r5,8699
 80066cc:	100d883a 	mov	r6,r2
 80066d0:	180f883a 	mov	r7,r3
 80066d4:	800c9780 	call	800c978 <__subdf3>
 80066d8:	003fa706 	br	8006578 <__alt_data_end+0xfc006578>
 80066dc:	200d883a 	mov	r6,r4
 80066e0:	280f883a 	mov	r7,r5
 80066e4:	800c2540 	call	800c254 <__muldf3>
 80066e8:	01837fb4 	movhi	r6,3582
 80066ec:	01cfc0b4 	movhi	r7,16130
 80066f0:	1009883a 	mov	r4,r2
 80066f4:	180b883a 	mov	r5,r3
 80066f8:	31bdc244 	addi	r6,r6,-2295
 80066fc:	39cf7844 	addi	r7,r7,15841
 8006700:	1027883a 	mov	r19,r2
 8006704:	1821883a 	mov	r16,r3
 8006708:	800c2540 	call	800c254 <__muldf3>
 800670c:	019d40b4 	movhi	r6,29954
 8006710:	01cfd2b4 	movhi	r7,16202
 8006714:	1009883a 	mov	r4,r2
 8006718:	180b883a 	mov	r5,r3
 800671c:	31aca204 	addi	r6,r6,-19832
 8006720:	39fbf804 	addi	r7,r7,-4128
 8006724:	800aea80 	call	800aea8 <__adddf3>
 8006728:	980d883a 	mov	r6,r19
 800672c:	800f883a 	mov	r7,r16
 8006730:	1009883a 	mov	r4,r2
 8006734:	180b883a 	mov	r5,r3
 8006738:	800c2540 	call	800c254 <__muldf3>
 800673c:	01ad5a74 	movhi	r6,46441
 8006740:	01cfe974 	movhi	r7,16293
 8006744:	1009883a 	mov	r4,r2
 8006748:	180b883a 	mov	r5,r3
 800674c:	31a3cec4 	addi	r6,r6,-28869
 8006750:	39e08a04 	addi	r7,r7,-32216
 8006754:	800c9780 	call	800c978 <__subdf3>
 8006758:	980d883a 	mov	r6,r19
 800675c:	800f883a 	mov	r7,r16
 8006760:	1009883a 	mov	r4,r2
 8006764:	180b883a 	mov	r5,r3
 8006768:	800c2540 	call	800c254 <__muldf3>
 800676c:	0183a234 	movhi	r6,3720
 8006770:	01cff2b4 	movhi	r7,16330
 8006774:	1009883a 	mov	r4,r2
 8006778:	180b883a 	mov	r5,r3
 800677c:	31911544 	addi	r6,r6,17493
 8006780:	39f05544 	addi	r7,r7,-16043
 8006784:	800aea80 	call	800aea8 <__adddf3>
 8006788:	980d883a 	mov	r6,r19
 800678c:	800f883a 	mov	r7,r16
 8006790:	1009883a 	mov	r4,r2
 8006794:	180b883a 	mov	r5,r3
 8006798:	800c2540 	call	800c254 <__muldf3>
 800679c:	0180faf4 	movhi	r6,1003
 80067a0:	01cff574 	movhi	r7,16341
 80067a4:	1009883a 	mov	r4,r2
 80067a8:	180b883a 	mov	r5,r3
 80067ac:	319bdf44 	addi	r6,r6,28541
 80067b0:	39f58484 	addi	r7,r7,-10734
 80067b4:	800c9780 	call	800c978 <__subdf3>
 80067b8:	980d883a 	mov	r6,r19
 80067bc:	800f883a 	mov	r7,r16
 80067c0:	1009883a 	mov	r4,r2
 80067c4:	180b883a 	mov	r5,r3
 80067c8:	800c2540 	call	800c254 <__muldf3>
 80067cc:	01955574 	movhi	r6,21845
 80067d0:	01cff174 	movhi	r7,16325
 80067d4:	1009883a 	mov	r4,r2
 80067d8:	180b883a 	mov	r5,r3
 80067dc:	31955544 	addi	r6,r6,21845
 80067e0:	39d55544 	addi	r7,r7,21845
 80067e4:	800aea80 	call	800aea8 <__adddf3>
 80067e8:	980d883a 	mov	r6,r19
 80067ec:	800f883a 	mov	r7,r16
 80067f0:	1009883a 	mov	r4,r2
 80067f4:	180b883a 	mov	r5,r3
 80067f8:	800c2540 	call	800c254 <__muldf3>
 80067fc:	01ac4bf4 	movhi	r6,45359
 8006800:	01cfed34 	movhi	r7,16308
 8006804:	9809883a 	mov	r4,r19
 8006808:	800b883a 	mov	r5,r16
 800680c:	31a4a084 	addi	r6,r6,-28030
 8006810:	39ee3144 	addi	r7,r7,-18235
 8006814:	102b883a 	mov	r21,r2
 8006818:	1829883a 	mov	r20,r3
 800681c:	800c2540 	call	800c254 <__muldf3>
 8006820:	0186e374 	movhi	r6,7053
 8006824:	01cff9b4 	movhi	r7,16358
 8006828:	1009883a 	mov	r4,r2
 800682c:	180b883a 	mov	r5,r3
 8006830:	31805644 	addi	r6,r6,345
 8006834:	39c19b04 	addi	r7,r7,1644
 8006838:	800c9780 	call	800c978 <__subdf3>
 800683c:	980d883a 	mov	r6,r19
 8006840:	800f883a 	mov	r7,r16
 8006844:	1009883a 	mov	r4,r2
 8006848:	180b883a 	mov	r5,r3
 800684c:	800c2540 	call	800c254 <__muldf3>
 8006850:	01a716b4 	movhi	r6,40026
 8006854:	01d00034 	movhi	r7,16384
 8006858:	1009883a 	mov	r4,r2
 800685c:	180b883a 	mov	r5,r3
 8006860:	31a2b204 	addi	r6,r6,-30008
 8006864:	39cab944 	addi	r7,r7,10981
 8006868:	800aea80 	call	800aea8 <__adddf3>
 800686c:	980d883a 	mov	r6,r19
 8006870:	800f883a 	mov	r7,r16
 8006874:	1009883a 	mov	r4,r2
 8006878:	180b883a 	mov	r5,r3
 800687c:	800c2540 	call	800c254 <__muldf3>
 8006880:	018722b4 	movhi	r6,7306
 8006884:	01d000f4 	movhi	r7,16387
 8006888:	1009883a 	mov	r4,r2
 800688c:	180b883a 	mov	r5,r3
 8006890:	318b52c4 	addi	r6,r6,11595
 8006894:	39ce89c4 	addi	r7,r7,14887
 8006898:	800c9780 	call	800c978 <__subdf3>
 800689c:	980d883a 	mov	r6,r19
 80068a0:	800f883a 	mov	r7,r16
 80068a4:	1009883a 	mov	r4,r2
 80068a8:	180b883a 	mov	r5,r3
 80068ac:	800c2540 	call	800c254 <__muldf3>
 80068b0:	1009883a 	mov	r4,r2
 80068b4:	180b883a 	mov	r5,r3
 80068b8:	000d883a 	mov	r6,zero
 80068bc:	01cffc34 	movhi	r7,16368
 80068c0:	800aea80 	call	800aea8 <__adddf3>
 80068c4:	a809883a 	mov	r4,r21
 80068c8:	a00b883a 	mov	r5,r20
 80068cc:	100d883a 	mov	r6,r2
 80068d0:	180f883a 	mov	r7,r3
 80068d4:	800b7440 	call	800b744 <__divdf3>
 80068d8:	8809883a 	mov	r4,r17
 80068dc:	900b883a 	mov	r5,r18
 80068e0:	100d883a 	mov	r6,r2
 80068e4:	180f883a 	mov	r7,r3
 80068e8:	800c2540 	call	800c254 <__muldf3>
 80068ec:	1009883a 	mov	r4,r2
 80068f0:	180b883a 	mov	r5,r3
 80068f4:	880d883a 	mov	r6,r17
 80068f8:	900f883a 	mov	r7,r18
 80068fc:	800aea80 	call	800aea8 <__adddf3>
 8006900:	003e3906 	br	80061e8 <__alt_data_end+0xfc0061e8>

08006904 <__ieee754_atan2>:
 8006904:	0185c83a 	sub	r2,zero,r6
 8006908:	1184b03a 	or	r2,r2,r6
 800690c:	02a00034 	movhi	r10,32768
 8006910:	1004d7fa 	srli	r2,r2,31
 8006914:	52bfffc4 	addi	r10,r10,-1
 8006918:	defffe04 	addi	sp,sp,-8
 800691c:	3a96703a 	and	r11,r7,r10
 8006920:	dfc00115 	stw	ra,4(sp)
 8006924:	dc000015 	stw	r16,0(sp)
 8006928:	5884b03a 	or	r2,r11,r2
 800692c:	025ffc34 	movhi	r9,32752
 8006930:	2011883a 	mov	r8,r4
 8006934:	2807883a 	mov	r3,r5
 8006938:	48803836 	bltu	r9,r2,8006a1c <__ieee754_atan2+0x118>
 800693c:	0105c83a 	sub	r2,zero,r4
 8006940:	1104b03a 	or	r2,r2,r4
 8006944:	1004d7fa 	srli	r2,r2,31
 8006948:	2a94703a 	and	r10,r5,r10
 800694c:	5084b03a 	or	r2,r10,r2
 8006950:	48803236 	bltu	r9,r2,8006a1c <__ieee754_atan2+0x118>
 8006954:	00b00434 	movhi	r2,49168
 8006958:	3885883a 	add	r2,r7,r2
 800695c:	1184b03a 	or	r2,r2,r6
 8006960:	10004326 	beq	r2,zero,8006a70 <__ieee754_atan2+0x16c>
 8006964:	3805d7ba 	srai	r2,r7,30
 8006968:	2820d7fa 	srli	r16,r5,31
 800696c:	5108b03a 	or	r4,r10,r4
 8006970:	1080008c 	andi	r2,r2,2
 8006974:	1420b03a 	or	r16,r2,r16
 8006978:	20003126 	beq	r4,zero,8006a40 <__ieee754_atan2+0x13c>
 800697c:	5984b03a 	or	r2,r11,r6
 8006980:	10003526 	beq	r2,zero,8006a58 <__ieee754_atan2+0x154>
 8006984:	009ffc34 	movhi	r2,32752
 8006988:	58804e26 	beq	r11,r2,8006ac4 <__ieee754_atan2+0x1c0>
 800698c:	009ffc34 	movhi	r2,32752
 8006990:	50803126 	beq	r10,r2,8006a58 <__ieee754_atan2+0x154>
 8006994:	52d5c83a 	sub	r10,r10,r11
 8006998:	5015d53a 	srai	r10,r10,20
 800699c:	00800f04 	movi	r2,60
 80069a0:	12803e16 	blt	r2,r10,8006a9c <__ieee754_atan2+0x198>
 80069a4:	38006516 	blt	r7,zero,8006b3c <__ieee754_atan2+0x238>
 80069a8:	4009883a 	mov	r4,r8
 80069ac:	180b883a 	mov	r5,r3
 80069b0:	800b7440 	call	800b744 <__divdf3>
 80069b4:	1009883a 	mov	r4,r2
 80069b8:	180b883a 	mov	r5,r3
 80069bc:	800a4180 	call	800a418 <fabs>
 80069c0:	180b883a 	mov	r5,r3
 80069c4:	1009883a 	mov	r4,r2
 80069c8:	8009e980 	call	8009e98 <atan>
 80069cc:	180b883a 	mov	r5,r3
 80069d0:	01000044 	movi	r4,1
 80069d4:	81005726 	beq	r16,r4,8006b34 <__ieee754_atan2+0x230>
 80069d8:	01000084 	movi	r4,2
 80069dc:	81004726 	beq	r16,r4,8006afc <__ieee754_atan2+0x1f8>
 80069e0:	80004426 	beq	r16,zero,8006af4 <__ieee754_atan2+0x1f0>
 80069e4:	018cc534 	movhi	r6,13076
 80069e8:	01cf28b4 	movhi	r7,15522
 80069ec:	319701c4 	addi	r6,r6,23559
 80069f0:	39e98984 	addi	r7,r7,-23002
 80069f4:	1009883a 	mov	r4,r2
 80069f8:	800c9780 	call	800c978 <__subdf3>
 80069fc:	01951134 	movhi	r6,21572
 8006a00:	01d00274 	movhi	r7,16393
 8006a04:	1009883a 	mov	r4,r2
 8006a08:	180b883a 	mov	r5,r3
 8006a0c:	318b4604 	addi	r6,r6,11544
 8006a10:	39c87ec4 	addi	r7,r7,8699
 8006a14:	800c9780 	call	800c978 <__subdf3>
 8006a18:	00000506 	br	8006a30 <__ieee754_atan2+0x12c>
 8006a1c:	3009883a 	mov	r4,r6
 8006a20:	380b883a 	mov	r5,r7
 8006a24:	400d883a 	mov	r6,r8
 8006a28:	180f883a 	mov	r7,r3
 8006a2c:	800aea80 	call	800aea8 <__adddf3>
 8006a30:	dfc00117 	ldw	ra,4(sp)
 8006a34:	dc000017 	ldw	r16,0(sp)
 8006a38:	dec00204 	addi	sp,sp,8
 8006a3c:	f800283a 	ret
 8006a40:	00800084 	movi	r2,2
 8006a44:	80801a26 	beq	r16,r2,8006ab0 <__ieee754_atan2+0x1ac>
 8006a48:	14000d16 	blt	r2,r16,8006a80 <__ieee754_atan2+0x17c>
 8006a4c:	803fcb16 	blt	r16,zero,800697c <__alt_data_end+0xfc00697c>
 8006a50:	4005883a 	mov	r2,r8
 8006a54:	003ff606 	br	8006a30 <__alt_data_end+0xfc006a30>
 8006a58:	00951134 	movhi	r2,21572
 8006a5c:	108b4604 	addi	r2,r2,11544
 8006a60:	18002116 	blt	r3,zero,8006ae8 <__ieee754_atan2+0x1e4>
 8006a64:	00cffe74 	movhi	r3,16377
 8006a68:	18c87ec4 	addi	r3,r3,8699
 8006a6c:	003ff006 	br	8006a30 <__alt_data_end+0xfc006a30>
 8006a70:	dfc00117 	ldw	ra,4(sp)
 8006a74:	dc000017 	ldw	r16,0(sp)
 8006a78:	dec00204 	addi	sp,sp,8
 8006a7c:	8009e981 	jmpi	8009e98 <atan>
 8006a80:	008000c4 	movi	r2,3
 8006a84:	80bfbd1e 	bne	r16,r2,800697c <__alt_data_end+0xfc00697c>
 8006a88:	00951134 	movhi	r2,21572
 8006a8c:	00f00274 	movhi	r3,49161
 8006a90:	108b4604 	addi	r2,r2,11544
 8006a94:	18c87ec4 	addi	r3,r3,8699
 8006a98:	003fe506 	br	8006a30 <__alt_data_end+0xfc006a30>
 8006a9c:	00951134 	movhi	r2,21572
 8006aa0:	014ffe74 	movhi	r5,16377
 8006aa4:	108b4604 	addi	r2,r2,11544
 8006aa8:	29487ec4 	addi	r5,r5,8699
 8006aac:	003fc806 	br	80069d0 <__alt_data_end+0xfc0069d0>
 8006ab0:	00951134 	movhi	r2,21572
 8006ab4:	00d00274 	movhi	r3,16393
 8006ab8:	108b4604 	addi	r2,r2,11544
 8006abc:	18c87ec4 	addi	r3,r3,8699
 8006ac0:	003fdb06 	br	8006a30 <__alt_data_end+0xfc006a30>
 8006ac4:	00800044 	movi	r2,1
 8006ac8:	52c02126 	beq	r10,r11,8006b50 <__ieee754_atan2+0x24c>
 8006acc:	80802f26 	beq	r16,r2,8006b8c <__ieee754_atan2+0x288>
 8006ad0:	14002a0e 	bge	r2,r16,8006b7c <__ieee754_atan2+0x278>
 8006ad4:	00800084 	movi	r2,2
 8006ad8:	80bff526 	beq	r16,r2,8006ab0 <__alt_data_end+0xfc006ab0>
 8006adc:	008000c4 	movi	r2,3
 8006ae0:	80bfe926 	beq	r16,r2,8006a88 <__alt_data_end+0xfc006a88>
 8006ae4:	003fa906 	br	800698c <__alt_data_end+0xfc00698c>
 8006ae8:	00effe74 	movhi	r3,49145
 8006aec:	18c87ec4 	addi	r3,r3,8699
 8006af0:	003fcf06 	br	8006a30 <__alt_data_end+0xfc006a30>
 8006af4:	2807883a 	mov	r3,r5
 8006af8:	003fcd06 	br	8006a30 <__alt_data_end+0xfc006a30>
 8006afc:	018cc534 	movhi	r6,13076
 8006b00:	01cf28b4 	movhi	r7,15522
 8006b04:	319701c4 	addi	r6,r6,23559
 8006b08:	39e98984 	addi	r7,r7,-23002
 8006b0c:	1009883a 	mov	r4,r2
 8006b10:	800c9780 	call	800c978 <__subdf3>
 8006b14:	01151134 	movhi	r4,21572
 8006b18:	01500274 	movhi	r5,16393
 8006b1c:	210b4604 	addi	r4,r4,11544
 8006b20:	29487ec4 	addi	r5,r5,8699
 8006b24:	100d883a 	mov	r6,r2
 8006b28:	180f883a 	mov	r7,r3
 8006b2c:	800c9780 	call	800c978 <__subdf3>
 8006b30:	003fbf06 	br	8006a30 <__alt_data_end+0xfc006a30>
 8006b34:	28e0003c 	xorhi	r3,r5,32768
 8006b38:	003fbd06 	br	8006a30 <__alt_data_end+0xfc006a30>
 8006b3c:	00bff104 	movi	r2,-60
 8006b40:	50bf990e 	bge	r10,r2,80069a8 <__alt_data_end+0xfc0069a8>
 8006b44:	0005883a 	mov	r2,zero
 8006b48:	000b883a 	mov	r5,zero
 8006b4c:	003fa006 	br	80069d0 <__alt_data_end+0xfc0069d0>
 8006b50:	80801c26 	beq	r16,r2,8006bc4 <__ieee754_atan2+0x2c0>
 8006b54:	1400100e 	bge	r2,r16,8006b98 <__ieee754_atan2+0x294>
 8006b58:	00800084 	movi	r2,2
 8006b5c:	80801426 	beq	r16,r2,8006bb0 <__ieee754_atan2+0x2ac>
 8006b60:	008000c4 	movi	r2,3
 8006b64:	80bfbc1e 	bne	r16,r2,8006a58 <__alt_data_end+0xfc006a58>
 8006b68:	009fccf4 	movhi	r2,32563
 8006b6c:	00f000f4 	movhi	r3,49155
 8006b70:	10887484 	addi	r2,r2,8658
 8006b74:	18f65f04 	addi	r3,r3,-9860
 8006b78:	003fad06 	br	8006a30 <__alt_data_end+0xfc006a30>
 8006b7c:	803f831e 	bne	r16,zero,800698c <__alt_data_end+0xfc00698c>
 8006b80:	0005883a 	mov	r2,zero
 8006b84:	0007883a 	mov	r3,zero
 8006b88:	003fa906 	br	8006a30 <__alt_data_end+0xfc006a30>
 8006b8c:	0005883a 	mov	r2,zero
 8006b90:	00e00034 	movhi	r3,32768
 8006b94:	003fa606 	br	8006a30 <__alt_data_end+0xfc006a30>
 8006b98:	803faf1e 	bne	r16,zero,8006a58 <__alt_data_end+0xfc006a58>
 8006b9c:	00951134 	movhi	r2,21572
 8006ba0:	00cffa74 	movhi	r3,16361
 8006ba4:	108b4604 	addi	r2,r2,11544
 8006ba8:	18c87ec4 	addi	r3,r3,8699
 8006bac:	003fa006 	br	8006a30 <__alt_data_end+0xfc006a30>
 8006bb0:	009fccf4 	movhi	r2,32563
 8006bb4:	00d000f4 	movhi	r3,16387
 8006bb8:	10887484 	addi	r2,r2,8658
 8006bbc:	18f65f04 	addi	r3,r3,-9860
 8006bc0:	003f9b06 	br	8006a30 <__alt_data_end+0xfc006a30>
 8006bc4:	00951134 	movhi	r2,21572
 8006bc8:	00effa74 	movhi	r3,49129
 8006bcc:	108b4604 	addi	r2,r2,11544
 8006bd0:	18c87ec4 	addi	r3,r3,8699
 8006bd4:	003f9606 	br	8006a30 <__alt_data_end+0xfc006a30>

08006bd8 <__ieee754_fmod>:
 8006bd8:	00e00034 	movhi	r3,32768
 8006bdc:	18ffffc4 	addi	r3,r3,-1
 8006be0:	deffff04 	addi	sp,sp,-4
 8006be4:	38c6703a 	and	r3,r7,r3
 8006be8:	dfc00015 	stw	ra,0(sp)
 8006bec:	1984b03a 	or	r2,r3,r6
 8006bf0:	10001926 	beq	r2,zero,8006c58 <__ieee754_fmod+0x80>
 8006bf4:	2a60002c 	andhi	r9,r5,32768
 8006bf8:	009ffc34 	movhi	r2,32752
 8006bfc:	4954f03a 	xor	r10,r9,r5
 8006c00:	10bfffc4 	addi	r2,r2,-1
 8006c04:	12801416 	blt	r2,r10,8006c58 <__ieee754_fmod+0x80>
 8006c08:	0185c83a 	sub	r2,zero,r6
 8006c0c:	1184b03a 	or	r2,r2,r6
 8006c10:	1004d7fa 	srli	r2,r2,31
 8006c14:	02dffc34 	movhi	r11,32752
 8006c18:	10c4b03a 	or	r2,r2,r3
 8006c1c:	58800e36 	bltu	r11,r2,8006c58 <__ieee754_fmod+0x80>
 8006c20:	2011883a 	mov	r8,r4
 8006c24:	3019883a 	mov	r12,r6
 8006c28:	1a801416 	blt	r3,r10,8006c7c <__ieee754_fmod+0xa4>
 8006c2c:	50c01e16 	blt	r10,r3,8006ca8 <__ieee754_fmod+0xd0>
 8006c30:	21801d36 	bltu	r4,r6,8006ca8 <__ieee754_fmod+0xd0>
 8006c34:	2180111e 	bne	r4,r6,8006c7c <__ieee754_fmod+0xa4>
 8006c38:	4806d7fa 	srli	r3,r9,31
 8006c3c:	180490fa 	slli	r2,r3,3
 8006c40:	00c200f4 	movhi	r3,2051
 8006c44:	18ea2204 	addi	r3,r3,-22392
 8006c48:	1887883a 	add	r3,r3,r2
 8006c4c:	18800017 	ldw	r2,0(r3)
 8006c50:	18c00117 	ldw	r3,4(r3)
 8006c54:	00000606 	br	8006c70 <__ieee754_fmod+0x98>
 8006c58:	800c2540 	call	800c254 <__muldf3>
 8006c5c:	1009883a 	mov	r4,r2
 8006c60:	180b883a 	mov	r5,r3
 8006c64:	100d883a 	mov	r6,r2
 8006c68:	180f883a 	mov	r7,r3
 8006c6c:	800b7440 	call	800b744 <__divdf3>
 8006c70:	dfc00017 	ldw	ra,0(sp)
 8006c74:	dec00104 	addi	sp,sp,4
 8006c78:	f800283a 	ret
 8006c7c:	00800434 	movhi	r2,16
 8006c80:	10bfffc4 	addi	r2,r2,-1
 8006c84:	12800b16 	blt	r2,r10,8006cb4 <__ieee754_fmod+0xdc>
 8006c88:	5000711e 	bne	r10,zero,8006e50 <__ieee754_fmod+0x278>
 8006c8c:	2005883a 	mov	r2,r4
 8006c90:	017efb44 	movi	r5,-1043
 8006c94:	0100090e 	bge	zero,r4,8006cbc <__ieee754_fmod+0xe4>
 8006c98:	1085883a 	add	r2,r2,r2
 8006c9c:	297fffc4 	addi	r5,r5,-1
 8006ca0:	00bffd16 	blt	zero,r2,8006c98 <__alt_data_end+0xfc006c98>
 8006ca4:	00000506 	br	8006cbc <__ieee754_fmod+0xe4>
 8006ca8:	2005883a 	mov	r2,r4
 8006cac:	2807883a 	mov	r3,r5
 8006cb0:	003fef06 	br	8006c70 <__alt_data_end+0xfc006c70>
 8006cb4:	500bd53a 	srai	r5,r10,20
 8006cb8:	297f0044 	addi	r5,r5,-1023
 8006cbc:	00800434 	movhi	r2,16
 8006cc0:	10bfffc4 	addi	r2,r2,-1
 8006cc4:	10c00816 	blt	r2,r3,8006ce8 <__ieee754_fmod+0x110>
 8006cc8:	1800681e 	bne	r3,zero,8006e6c <__ieee754_fmod+0x294>
 8006ccc:	3005883a 	mov	r2,r6
 8006cd0:	03befb44 	movi	r14,-1043
 8006cd4:	0180060e 	bge	zero,r6,8006cf0 <__ieee754_fmod+0x118>
 8006cd8:	1085883a 	add	r2,r2,r2
 8006cdc:	73bfffc4 	addi	r14,r14,-1
 8006ce0:	00bffd16 	blt	zero,r2,8006cd8 <__alt_data_end+0xfc006cd8>
 8006ce4:	00000206 	br	8006cf0 <__ieee754_fmod+0x118>
 8006ce8:	1805d53a 	srai	r2,r3,20
 8006cec:	13bf0044 	addi	r14,r2,-1023
 8006cf0:	00bf0084 	movi	r2,-1022
 8006cf4:	28804b16 	blt	r5,r2,8006e24 <__ieee754_fmod+0x24c>
 8006cf8:	00800434 	movhi	r2,16
 8006cfc:	10bfffc4 	addi	r2,r2,-1
 8006d00:	5088703a 	and	r4,r10,r2
 8006d04:	21000434 	orhi	r4,r4,16
 8006d08:	00bf0084 	movi	r2,-1022
 8006d0c:	70803c16 	blt	r14,r2,8006e00 <__ieee754_fmod+0x228>
 8006d10:	00c00434 	movhi	r3,16
 8006d14:	18ffffc4 	addi	r3,r3,-1
 8006d18:	38ce703a 	and	r7,r7,r3
 8006d1c:	39800434 	orhi	r6,r7,16
 8006d20:	2b8bc83a 	sub	r5,r5,r14
 8006d24:	00000406 	br	8006d38 <__ieee754_fmod+0x160>
 8006d28:	58001126 	beq	r11,zero,8006d70 <__ieee754_fmod+0x198>
 8006d2c:	1091883a 	add	r8,r2,r2
 8006d30:	6a89883a 	add	r4,r13,r10
 8006d34:	297fffc4 	addi	r5,r5,-1
 8006d38:	4305c83a 	sub	r2,r8,r12
 8006d3c:	1014d7fa 	srli	r10,r2,31
 8006d40:	28001326 	beq	r5,zero,8006d90 <__ieee754_fmod+0x1b8>
 8006d44:	2187c83a 	sub	r3,r4,r6
 8006d48:	4300012e 	bgeu	r8,r12,8006d50 <__ieee754_fmod+0x178>
 8006d4c:	18ffffc4 	addi	r3,r3,-1
 8006d50:	1896b03a 	or	r11,r3,r2
 8006d54:	18db883a 	add	r13,r3,r3
 8006d58:	183ff30e 	bge	r3,zero,8006d28 <__alt_data_end+0xfc006d28>
 8006d5c:	4004d7fa 	srli	r2,r8,31
 8006d60:	2109883a 	add	r4,r4,r4
 8006d64:	4211883a 	add	r8,r8,r8
 8006d68:	2089883a 	add	r4,r4,r2
 8006d6c:	003ff106 	br	8006d34 <__alt_data_end+0xfc006d34>
 8006d70:	4806d7fa 	srli	r3,r9,31
 8006d74:	008200f4 	movhi	r2,2051
 8006d78:	10aa2204 	addi	r2,r2,-22392
 8006d7c:	180690fa 	slli	r3,r3,3
 8006d80:	10c7883a 	add	r3,r2,r3
 8006d84:	18800017 	ldw	r2,0(r3)
 8006d88:	18c00117 	ldw	r3,4(r3)
 8006d8c:	003fb806 	br	8006c70 <__alt_data_end+0xfc006c70>
 8006d90:	218dc83a 	sub	r6,r4,r6
 8006d94:	43002c36 	bltu	r8,r12,8006e48 <__ieee754_fmod+0x270>
 8006d98:	30004c16 	blt	r6,zero,8006ecc <__ieee754_fmod+0x2f4>
 8006d9c:	4311c83a 	sub	r8,r8,r12
 8006da0:	3204b03a 	or	r2,r6,r8
 8006da4:	103ff226 	beq	r2,zero,8006d70 <__alt_data_end+0xfc006d70>
 8006da8:	00c00434 	movhi	r3,16
 8006dac:	18ffffc4 	addi	r3,r3,-1
 8006db0:	19800616 	blt	r3,r6,8006dcc <__ieee754_fmod+0x1f4>
 8006db4:	4004d7fa 	srli	r2,r8,31
 8006db8:	318d883a 	add	r6,r6,r6
 8006dbc:	4211883a 	add	r8,r8,r8
 8006dc0:	308d883a 	add	r6,r6,r2
 8006dc4:	73bfffc4 	addi	r14,r14,-1
 8006dc8:	19bffa0e 	bge	r3,r6,8006db4 <__alt_data_end+0xfc006db4>
 8006dcc:	00bf0084 	movi	r2,-1022
 8006dd0:	7080360e 	bge	r14,r2,8006eac <__ieee754_fmod+0x2d4>
 8006dd4:	1385c83a 	sub	r2,r2,r14
 8006dd8:	00c00504 	movi	r3,20
 8006ddc:	18803d16 	blt	r3,r2,8006ed4 <__ieee754_fmod+0x2fc>
 8006de0:	71010784 	addi	r4,r14,1054
 8006de4:	4090d83a 	srl	r8,r8,r2
 8006de8:	3108983a 	sll	r4,r6,r4
 8006dec:	3087d83a 	sra	r3,r6,r2
 8006df0:	2208b03a 	or	r4,r4,r8
 8006df4:	2005883a 	mov	r2,r4
 8006df8:	1a46b03a 	or	r3,r3,r9
 8006dfc:	003f9c06 	br	8006c70 <__alt_data_end+0xfc006c70>
 8006e00:	1385c83a 	sub	r2,r2,r14
 8006e04:	01c007c4 	movi	r7,31
 8006e08:	38802316 	blt	r7,r2,8006e98 <__ieee754_fmod+0x2c0>
 8006e0c:	71c10784 	addi	r7,r14,1054
 8006e10:	1886983a 	sll	r3,r3,r2
 8006e14:	31ced83a 	srl	r7,r6,r7
 8006e18:	3098983a 	sll	r12,r6,r2
 8006e1c:	19ccb03a 	or	r6,r3,r7
 8006e20:	003fbf06 	br	8006d20 <__alt_data_end+0xfc006d20>
 8006e24:	1145c83a 	sub	r2,r2,r5
 8006e28:	020007c4 	movi	r8,31
 8006e2c:	40801516 	blt	r8,r2,8006e84 <__ieee754_fmod+0x2ac>
 8006e30:	2ac10784 	addi	r11,r5,1054
 8006e34:	5094983a 	sll	r10,r10,r2
 8006e38:	22d6d83a 	srl	r11,r4,r11
 8006e3c:	2090983a 	sll	r8,r4,r2
 8006e40:	52c8b03a 	or	r4,r10,r11
 8006e44:	003fb006 	br	8006d08 <__alt_data_end+0xfc006d08>
 8006e48:	31bfffc4 	addi	r6,r6,-1
 8006e4c:	003fd206 	br	8006d98 <__alt_data_end+0xfc006d98>
 8006e50:	500492fa 	slli	r2,r10,11
 8006e54:	017f0084 	movi	r5,-1022
 8006e58:	00bf980e 	bge	zero,r2,8006cbc <__alt_data_end+0xfc006cbc>
 8006e5c:	1085883a 	add	r2,r2,r2
 8006e60:	297fffc4 	addi	r5,r5,-1
 8006e64:	00bffd16 	blt	zero,r2,8006e5c <__alt_data_end+0xfc006e5c>
 8006e68:	003f9406 	br	8006cbc <__alt_data_end+0xfc006cbc>
 8006e6c:	180492fa 	slli	r2,r3,11
 8006e70:	03bf0084 	movi	r14,-1022
 8006e74:	1085883a 	add	r2,r2,r2
 8006e78:	73bfffc4 	addi	r14,r14,-1
 8006e7c:	00bffd16 	blt	zero,r2,8006e74 <__alt_data_end+0xfc006e74>
 8006e80:	003f9b06 	br	8006cf0 <__alt_data_end+0xfc006cf0>
 8006e84:	00bef884 	movi	r2,-1054
 8006e88:	1145c83a 	sub	r2,r2,r5
 8006e8c:	2088983a 	sll	r4,r4,r2
 8006e90:	0011883a 	mov	r8,zero
 8006e94:	003f9c06 	br	8006d08 <__alt_data_end+0xfc006d08>
 8006e98:	00bef884 	movi	r2,-1054
 8006e9c:	1385c83a 	sub	r2,r2,r14
 8006ea0:	308c983a 	sll	r6,r6,r2
 8006ea4:	0019883a 	mov	r12,zero
 8006ea8:	003f9d06 	br	8006d20 <__alt_data_end+0xfc006d20>
 8006eac:	71c0ffc4 	addi	r7,r14,1023
 8006eb0:	380e953a 	slli	r7,r7,20
 8006eb4:	00fffc34 	movhi	r3,65520
 8006eb8:	30c7883a 	add	r3,r6,r3
 8006ebc:	1a46b03a 	or	r3,r3,r9
 8006ec0:	4005883a 	mov	r2,r8
 8006ec4:	19c6b03a 	or	r3,r3,r7
 8006ec8:	003f6906 	br	8006c70 <__alt_data_end+0xfc006c70>
 8006ecc:	200d883a 	mov	r6,r4
 8006ed0:	003fb306 	br	8006da0 <__alt_data_end+0xfc006da0>
 8006ed4:	00c007c4 	movi	r3,31
 8006ed8:	18800616 	blt	r3,r2,8006ef4 <__ieee754_fmod+0x31c>
 8006edc:	71c10784 	addi	r7,r14,1054
 8006ee0:	4090d83a 	srl	r8,r8,r2
 8006ee4:	31c4983a 	sll	r2,r6,r7
 8006ee8:	4807883a 	mov	r3,r9
 8006eec:	1208b03a 	or	r4,r2,r8
 8006ef0:	003fc006 	br	8006df4 <__alt_data_end+0xfc006df4>
 8006ef4:	00bef884 	movi	r2,-1054
 8006ef8:	1385c83a 	sub	r2,r2,r14
 8006efc:	3089d83a 	sra	r4,r6,r2
 8006f00:	4807883a 	mov	r3,r9
 8006f04:	003fbb06 	br	8006df4 <__alt_data_end+0xfc006df4>

08006f08 <__ieee754_pow>:
 8006f08:	00a00034 	movhi	r2,32768
 8006f0c:	deffec04 	addi	sp,sp,-80
 8006f10:	10bfffc4 	addi	r2,r2,-1
 8006f14:	dc400b15 	stw	r17,44(sp)
 8006f18:	38a2703a 	and	r17,r7,r2
 8006f1c:	dfc01315 	stw	ra,76(sp)
 8006f20:	df001215 	stw	fp,72(sp)
 8006f24:	ddc01115 	stw	r23,68(sp)
 8006f28:	dd801015 	stw	r22,64(sp)
 8006f2c:	dd400f15 	stw	r21,60(sp)
 8006f30:	dd000e15 	stw	r20,56(sp)
 8006f34:	dcc00d15 	stw	r19,52(sp)
 8006f38:	dc800c15 	stw	r18,48(sp)
 8006f3c:	dc000a15 	stw	r16,40(sp)
 8006f40:	8986b03a 	or	r3,r17,r6
 8006f44:	18002a26 	beq	r3,zero,8006ff0 <__ieee754_pow+0xe8>
 8006f48:	28a4703a 	and	r18,r5,r2
 8006f4c:	009ffc34 	movhi	r2,32752
 8006f50:	14802316 	blt	r2,r18,8006fe0 <__ieee754_pow+0xd8>
 8006f54:	90802126 	beq	r18,r2,8006fdc <__ieee754_pow+0xd4>
 8006f58:	14402116 	blt	r2,r17,8006fe0 <__ieee754_pow+0xd8>
 8006f5c:	009ffc34 	movhi	r2,32752
 8006f60:	88807326 	beq	r17,r2,8007130 <__ieee754_pow+0x228>
 8006f64:	2827883a 	mov	r19,r5
 8006f68:	2021883a 	mov	r16,r4
 8006f6c:	302b883a 	mov	r21,r6
 8006f70:	382f883a 	mov	r23,r7
 8006f74:	28007016 	blt	r5,zero,8007138 <__ieee754_pow+0x230>
 8006f78:	0039883a 	mov	fp,zero
 8006f7c:	a8003a1e 	bne	r21,zero,8007068 <__ieee754_pow+0x160>
 8006f80:	009ffc34 	movhi	r2,32752
 8006f84:	88807e26 	beq	r17,r2,8007180 <__ieee754_pow+0x278>
 8006f88:	008ffc34 	movhi	r2,16368
 8006f8c:	88805426 	beq	r17,r2,80070e0 <__ieee754_pow+0x1d8>
 8006f90:	00900034 	movhi	r2,16384
 8006f94:	b8834926 	beq	r23,r2,8007cbc <__ieee754_pow+0xdb4>
 8006f98:	008ff834 	movhi	r2,16352
 8006f9c:	b880321e 	bne	r23,r2,8007068 <__ieee754_pow+0x160>
 8006fa0:	98003116 	blt	r19,zero,8007068 <__ieee754_pow+0x160>
 8006fa4:	8009883a 	mov	r4,r16
 8006fa8:	980b883a 	mov	r5,r19
 8006fac:	dfc01317 	ldw	ra,76(sp)
 8006fb0:	df001217 	ldw	fp,72(sp)
 8006fb4:	ddc01117 	ldw	r23,68(sp)
 8006fb8:	dd801017 	ldw	r22,64(sp)
 8006fbc:	dd400f17 	ldw	r21,60(sp)
 8006fc0:	dd000e17 	ldw	r20,56(sp)
 8006fc4:	dcc00d17 	ldw	r19,52(sp)
 8006fc8:	dc800c17 	ldw	r18,48(sp)
 8006fcc:	dc400b17 	ldw	r17,44(sp)
 8006fd0:	dc000a17 	ldw	r16,40(sp)
 8006fd4:	dec01404 	addi	sp,sp,80
 8006fd8:	80087701 	jmpi	8008770 <__ieee754_sqrt>
 8006fdc:	20001226 	beq	r4,zero,8007028 <__ieee754_pow+0x120>
 8006fe0:	00b00434 	movhi	r2,49168
 8006fe4:	9085883a 	add	r2,r18,r2
 8006fe8:	1108b03a 	or	r4,r2,r4
 8006fec:	20000f1e 	bne	r4,zero,800702c <__ieee754_pow+0x124>
 8006ff0:	0005883a 	mov	r2,zero
 8006ff4:	00cffc34 	movhi	r3,16368
 8006ff8:	dfc01317 	ldw	ra,76(sp)
 8006ffc:	df001217 	ldw	fp,72(sp)
 8007000:	ddc01117 	ldw	r23,68(sp)
 8007004:	dd801017 	ldw	r22,64(sp)
 8007008:	dd400f17 	ldw	r21,60(sp)
 800700c:	dd000e17 	ldw	r20,56(sp)
 8007010:	dcc00d17 	ldw	r19,52(sp)
 8007014:	dc800c17 	ldw	r18,48(sp)
 8007018:	dc400b17 	ldw	r17,44(sp)
 800701c:	dc000a17 	ldw	r16,40(sp)
 8007020:	dec01404 	addi	sp,sp,80
 8007024:	f800283a 	ret
 8007028:	947fcc0e 	bge	r18,r17,8006f5c <__alt_data_end+0xfc006f5c>
 800702c:	010200f4 	movhi	r4,2051
 8007030:	212b1304 	addi	r4,r4,-21428
 8007034:	dfc01317 	ldw	ra,76(sp)
 8007038:	df001217 	ldw	fp,72(sp)
 800703c:	ddc01117 	ldw	r23,68(sp)
 8007040:	dd801017 	ldw	r22,64(sp)
 8007044:	dd400f17 	ldw	r21,60(sp)
 8007048:	dd000e17 	ldw	r20,56(sp)
 800704c:	dcc00d17 	ldw	r19,52(sp)
 8007050:	dc800c17 	ldw	r18,48(sp)
 8007054:	dc400b17 	ldw	r17,44(sp)
 8007058:	dc000a17 	ldw	r16,40(sp)
 800705c:	dec01404 	addi	sp,sp,80
 8007060:	800a4c41 	jmpi	800a4c4 <nan>
 8007064:	0039883a 	mov	fp,zero
 8007068:	8009883a 	mov	r4,r16
 800706c:	980b883a 	mov	r5,r19
 8007070:	800a4180 	call	800a418 <fabs>
 8007074:	102d883a 	mov	r22,r2
 8007078:	80000f26 	beq	r16,zero,80070b8 <__ieee754_pow+0x1b0>
 800707c:	9816d7fa 	srli	r11,r19,31
 8007080:	5affffc4 	addi	r11,r11,-1
 8007084:	e2c4b03a 	or	r2,fp,r11
 8007088:	10004a26 	beq	r2,zero,80071b4 <__ieee754_pow+0x2ac>
 800708c:	00907834 	movhi	r2,16864
 8007090:	1440530e 	bge	r2,r17,80071e0 <__ieee754_pow+0x2d8>
 8007094:	0090fc34 	movhi	r2,17392
 8007098:	14433e0e 	bge	r2,r17,8007d94 <__ieee754_pow+0xe8c>
 800709c:	008ffc34 	movhi	r2,16368
 80070a0:	10bfffc4 	addi	r2,r2,-1
 80070a4:	14801916 	blt	r2,r18,800710c <__ieee754_pow+0x204>
 80070a8:	b8001916 	blt	r23,zero,8007110 <__ieee754_pow+0x208>
 80070ac:	0005883a 	mov	r2,zero
 80070b0:	0007883a 	mov	r3,zero
 80070b4:	003fd006 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 80070b8:	90000526 	beq	r18,zero,80070d0 <__ieee754_pow+0x1c8>
 80070bc:	00900034 	movhi	r2,16384
 80070c0:	10bfffc4 	addi	r2,r2,-1
 80070c4:	9884703a 	and	r2,r19,r2
 80070c8:	010ffc34 	movhi	r4,16368
 80070cc:	113feb1e 	bne	r2,r4,800707c <__alt_data_end+0xfc00707c>
 80070d0:	b8000716 	blt	r23,zero,80070f0 <__ieee754_pow+0x1e8>
 80070d4:	9802f216 	blt	r19,zero,8007ca0 <__ieee754_pow+0xd98>
 80070d8:	b005883a 	mov	r2,r22
 80070dc:	003fc606 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 80070e0:	b8038816 	blt	r23,zero,8007f04 <__ieee754_pow+0xffc>
 80070e4:	8005883a 	mov	r2,r16
 80070e8:	9807883a 	mov	r3,r19
 80070ec:	003fc206 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 80070f0:	b00d883a 	mov	r6,r22
 80070f4:	0009883a 	mov	r4,zero
 80070f8:	014ffc34 	movhi	r5,16368
 80070fc:	180f883a 	mov	r7,r3
 8007100:	800b7440 	call	800b744 <__divdf3>
 8007104:	102d883a 	mov	r22,r2
 8007108:	003ff206 	br	80070d4 <__alt_data_end+0xfc0070d4>
 800710c:	05ffe70e 	bge	zero,r23,80070ac <__alt_data_end+0xfc0070ac>
 8007110:	01220034 	movhi	r4,34816
 8007114:	015f8e34 	movhi	r5,32312
 8007118:	211d6704 	addi	r4,r4,30108
 800711c:	29790f04 	addi	r5,r5,-7108
 8007120:	200d883a 	mov	r6,r4
 8007124:	280f883a 	mov	r7,r5
 8007128:	800c2540 	call	800c254 <__muldf3>
 800712c:	003fb206 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 8007130:	303f8c26 	beq	r6,zero,8006f64 <__alt_data_end+0xfc006f64>
 8007134:	003faa06 	br	8006fe0 <__alt_data_end+0xfc006fe0>
 8007138:	0090d034 	movhi	r2,17216
 800713c:	10bfffc4 	addi	r2,r2,-1
 8007140:	14401a16 	blt	r2,r17,80071ac <__ieee754_pow+0x2a4>
 8007144:	008ffc34 	movhi	r2,16368
 8007148:	10bfffc4 	addi	r2,r2,-1
 800714c:	147f8a0e 	bge	r2,r17,8006f78 <__alt_data_end+0xfc006f78>
 8007150:	8809d53a 	srai	r4,r17,20
 8007154:	00c104c4 	movi	r3,1043
 8007158:	1903840e 	bge	r3,r4,8007f6c <__ieee754_pow+0x1064>
 800715c:	00810cc4 	movi	r2,1075
 8007160:	1105c83a 	sub	r2,r2,r4
 8007164:	3086d83a 	srl	r3,r6,r2
 8007168:	1884983a 	sll	r2,r3,r2
 800716c:	11bf821e 	bne	r2,r6,8006f78 <__alt_data_end+0xfc006f78>
 8007170:	18c0004c 	andi	r3,r3,1
 8007174:	02800084 	movi	r10,2
 8007178:	50f9c83a 	sub	fp,r10,r3
 800717c:	003f7f06 	br	8006f7c <__alt_data_end+0xfc006f7c>
 8007180:	01300434 	movhi	r4,49168
 8007184:	9109883a 	add	r4,r18,r4
 8007188:	2408b03a 	or	r4,r4,r16
 800718c:	203f9826 	beq	r4,zero,8006ff0 <__alt_data_end+0xfc006ff0>
 8007190:	008ffc34 	movhi	r2,16368
 8007194:	10bfffc4 	addi	r2,r2,-1
 8007198:	1482f50e 	bge	r2,r18,8007d70 <__ieee754_pow+0xe68>
 800719c:	b83fc316 	blt	r23,zero,80070ac <__alt_data_end+0xfc0070ac>
 80071a0:	0005883a 	mov	r2,zero
 80071a4:	b807883a 	mov	r3,r23
 80071a8:	003f9306 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 80071ac:	07000084 	movi	fp,2
 80071b0:	003f7206 	br	8006f7c <__alt_data_end+0xfc006f7c>
 80071b4:	8009883a 	mov	r4,r16
 80071b8:	980b883a 	mov	r5,r19
 80071bc:	200d883a 	mov	r6,r4
 80071c0:	280f883a 	mov	r7,r5
 80071c4:	800c9780 	call	800c978 <__subdf3>
 80071c8:	1009883a 	mov	r4,r2
 80071cc:	180b883a 	mov	r5,r3
 80071d0:	100d883a 	mov	r6,r2
 80071d4:	180f883a 	mov	r7,r3
 80071d8:	800b7440 	call	800b744 <__divdf3>
 80071dc:	003f8606 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 80071e0:	00800434 	movhi	r2,16
 80071e4:	10bfffc4 	addi	r2,r2,-1
 80071e8:	1482e816 	blt	r2,r18,8007d8c <__ieee754_pow+0xe84>
 80071ec:	b009883a 	mov	r4,r22
 80071f0:	180b883a 	mov	r5,r3
 80071f4:	000d883a 	mov	r6,zero
 80071f8:	01d0d034 	movhi	r7,17216
 80071fc:	dac00915 	stw	r11,36(sp)
 8007200:	800c2540 	call	800c254 <__muldf3>
 8007204:	dac00917 	ldw	r11,36(sp)
 8007208:	102d883a 	mov	r22,r2
 800720c:	1825883a 	mov	r18,r3
 8007210:	013ff2c4 	movi	r4,-53
 8007214:	9007d53a 	srai	r3,r18,20
 8007218:	00800434 	movhi	r2,16
 800721c:	10bfffc4 	addi	r2,r2,-1
 8007220:	18ff0044 	addi	r3,r3,-1023
 8007224:	1911883a 	add	r8,r3,r4
 8007228:	00c00134 	movhi	r3,4
 800722c:	9084703a 	and	r2,r18,r2
 8007230:	18e62384 	addi	r3,r3,-26482
 8007234:	14cffc34 	orhi	r19,r2,16368
 8007238:	1882d10e 	bge	r3,r2,8007d80 <__ieee754_pow+0xe78>
 800723c:	00c00334 	movhi	r3,12
 8007240:	18ed9e44 	addi	r3,r3,-18823
 8007244:	1883550e 	bge	r3,r2,8007f9c <__ieee754_pow+0x1094>
 8007248:	00bffc34 	movhi	r2,65520
 800724c:	42000044 	addi	r8,r8,1
 8007250:	98a7883a 	add	r19,r19,r2
 8007254:	0021883a 	mov	r16,zero
 8007258:	0019883a 	mov	r12,zero
 800725c:	601890fa 	slli	r12,r12,3
 8007260:	008200f4 	movhi	r2,2051
 8007264:	10aa2e04 	addi	r2,r2,-22344
 8007268:	1305883a 	add	r2,r2,r12
 800726c:	13400017 	ldw	r13,0(r2)
 8007270:	12800117 	ldw	r10,4(r2)
 8007274:	b009883a 	mov	r4,r22
 8007278:	980b883a 	mov	r5,r19
 800727c:	680d883a 	mov	r6,r13
 8007280:	500f883a 	mov	r7,r10
 8007284:	da000815 	stw	r8,32(sp)
 8007288:	dac00915 	stw	r11,36(sp)
 800728c:	db000715 	stw	r12,28(sp)
 8007290:	da800315 	stw	r10,12(sp)
 8007294:	db400415 	stw	r13,16(sp)
 8007298:	800c9780 	call	800c978 <__subdf3>
 800729c:	da800317 	ldw	r10,12(sp)
 80072a0:	db400417 	ldw	r13,16(sp)
 80072a4:	b009883a 	mov	r4,r22
 80072a8:	500f883a 	mov	r7,r10
 80072ac:	680d883a 	mov	r6,r13
 80072b0:	980b883a 	mov	r5,r19
 80072b4:	1829883a 	mov	r20,r3
 80072b8:	d8800015 	stw	r2,0(sp)
 80072bc:	800aea80 	call	800aea8 <__adddf3>
 80072c0:	0009883a 	mov	r4,zero
 80072c4:	014ffc34 	movhi	r5,16368
 80072c8:	100d883a 	mov	r6,r2
 80072cc:	180f883a 	mov	r7,r3
 80072d0:	800b7440 	call	800b744 <__divdf3>
 80072d4:	d9000017 	ldw	r4,0(sp)
 80072d8:	a00b883a 	mov	r5,r20
 80072dc:	100d883a 	mov	r6,r2
 80072e0:	180f883a 	mov	r7,r3
 80072e4:	d8c00615 	stw	r3,24(sp)
 80072e8:	d8800515 	stw	r2,20(sp)
 80072ec:	800c2540 	call	800c254 <__muldf3>
 80072f0:	1025883a 	mov	r18,r2
 80072f4:	9805d07a 	srai	r2,r19,1
 80072f8:	1823883a 	mov	r17,r3
 80072fc:	880b883a 	mov	r5,r17
 8007300:	10c80034 	orhi	r3,r2,8192
 8007304:	00800234 	movhi	r2,8
 8007308:	1885883a 	add	r2,r3,r2
 800730c:	1421883a 	add	r16,r2,r16
 8007310:	800f883a 	mov	r7,r16
 8007314:	0009883a 	mov	r4,zero
 8007318:	000d883a 	mov	r6,zero
 800731c:	800c2540 	call	800c254 <__muldf3>
 8007320:	d9000017 	ldw	r4,0(sp)
 8007324:	a00b883a 	mov	r5,r20
 8007328:	100d883a 	mov	r6,r2
 800732c:	180f883a 	mov	r7,r3
 8007330:	800c9780 	call	800c978 <__subdf3>
 8007334:	da800317 	ldw	r10,12(sp)
 8007338:	db400417 	ldw	r13,16(sp)
 800733c:	800b883a 	mov	r5,r16
 8007340:	500f883a 	mov	r7,r10
 8007344:	680d883a 	mov	r6,r13
 8007348:	0009883a 	mov	r4,zero
 800734c:	1829883a 	mov	r20,r3
 8007350:	d8800315 	stw	r2,12(sp)
 8007354:	800c9780 	call	800c978 <__subdf3>
 8007358:	b009883a 	mov	r4,r22
 800735c:	980b883a 	mov	r5,r19
 8007360:	100d883a 	mov	r6,r2
 8007364:	180f883a 	mov	r7,r3
 8007368:	800c9780 	call	800c978 <__subdf3>
 800736c:	880b883a 	mov	r5,r17
 8007370:	0009883a 	mov	r4,zero
 8007374:	100d883a 	mov	r6,r2
 8007378:	180f883a 	mov	r7,r3
 800737c:	800c2540 	call	800c254 <__muldf3>
 8007380:	da400317 	ldw	r9,12(sp)
 8007384:	a00b883a 	mov	r5,r20
 8007388:	100d883a 	mov	r6,r2
 800738c:	4809883a 	mov	r4,r9
 8007390:	180f883a 	mov	r7,r3
 8007394:	800c9780 	call	800c978 <__subdf3>
 8007398:	dbc00517 	ldw	r15,20(sp)
 800739c:	db800617 	ldw	r14,24(sp)
 80073a0:	1009883a 	mov	r4,r2
 80073a4:	780d883a 	mov	r6,r15
 80073a8:	700f883a 	mov	r7,r14
 80073ac:	180b883a 	mov	r5,r3
 80073b0:	800c2540 	call	800c254 <__muldf3>
 80073b4:	9009883a 	mov	r4,r18
 80073b8:	880b883a 	mov	r5,r17
 80073bc:	900d883a 	mov	r6,r18
 80073c0:	880f883a 	mov	r7,r17
 80073c4:	182d883a 	mov	r22,r3
 80073c8:	d8800015 	stw	r2,0(sp)
 80073cc:	800c2540 	call	800c254 <__muldf3>
 80073d0:	1009883a 	mov	r4,r2
 80073d4:	180b883a 	mov	r5,r3
 80073d8:	100d883a 	mov	r6,r2
 80073dc:	180f883a 	mov	r7,r3
 80073e0:	1027883a 	mov	r19,r2
 80073e4:	1821883a 	mov	r16,r3
 80073e8:	800c2540 	call	800c254 <__muldf3>
 80073ec:	01929174 	movhi	r6,19013
 80073f0:	01cff2b4 	movhi	r7,16330
 80073f4:	9809883a 	mov	r4,r19
 80073f8:	800b883a 	mov	r5,r16
 80073fc:	3193bbc4 	addi	r6,r6,20207
 8007400:	39df8a04 	addi	r7,r7,32296
 8007404:	1829883a 	mov	r20,r3
 8007408:	d8800315 	stw	r2,12(sp)
 800740c:	800c2540 	call	800c254 <__muldf3>
 8007410:	01a4f2b4 	movhi	r6,37834
 8007414:	01cff3b4 	movhi	r7,16334
 8007418:	1009883a 	mov	r4,r2
 800741c:	180b883a 	mov	r5,r3
 8007420:	31b6d944 	addi	r6,r6,-9371
 8007424:	39e19284 	addi	r7,r7,-31158
 8007428:	800aea80 	call	800aea8 <__adddf3>
 800742c:	980d883a 	mov	r6,r19
 8007430:	800f883a 	mov	r7,r16
 8007434:	1009883a 	mov	r4,r2
 8007438:	180b883a 	mov	r5,r3
 800743c:	800c2540 	call	800c254 <__muldf3>
 8007440:	01aa4774 	movhi	r6,43293
 8007444:	01cff474 	movhi	r7,16337
 8007448:	1009883a 	mov	r4,r2
 800744c:	180b883a 	mov	r5,r3
 8007450:	31904044 	addi	r6,r6,16641
 8007454:	39dd1804 	addi	r7,r7,29792
 8007458:	800aea80 	call	800aea8 <__adddf3>
 800745c:	980d883a 	mov	r6,r19
 8007460:	800f883a 	mov	r7,r16
 8007464:	1009883a 	mov	r4,r2
 8007468:	180b883a 	mov	r5,r3
 800746c:	800c2540 	call	800c254 <__muldf3>
 8007470:	019463f4 	movhi	r6,20879
 8007474:	01cff574 	movhi	r7,16341
 8007478:	1009883a 	mov	r4,r2
 800747c:	180b883a 	mov	r5,r3
 8007480:	31899344 	addi	r6,r6,9805
 8007484:	39d55544 	addi	r7,r7,21845
 8007488:	800aea80 	call	800aea8 <__adddf3>
 800748c:	980d883a 	mov	r6,r19
 8007490:	800f883a 	mov	r7,r16
 8007494:	1009883a 	mov	r4,r2
 8007498:	180b883a 	mov	r5,r3
 800749c:	800c2540 	call	800c254 <__muldf3>
 80074a0:	01b6dc34 	movhi	r6,56176
 80074a4:	01cff6f4 	movhi	r7,16347
 80074a8:	1009883a 	mov	r4,r2
 80074ac:	180b883a 	mov	r5,r3
 80074b0:	31aaffc4 	addi	r6,r6,-21505
 80074b4:	39db6d84 	addi	r7,r7,28086
 80074b8:	800aea80 	call	800aea8 <__adddf3>
 80074bc:	980d883a 	mov	r6,r19
 80074c0:	800f883a 	mov	r7,r16
 80074c4:	1009883a 	mov	r4,r2
 80074c8:	180b883a 	mov	r5,r3
 80074cc:	800c2540 	call	800c254 <__muldf3>
 80074d0:	018cccf4 	movhi	r6,13107
 80074d4:	01cff8f4 	movhi	r7,16355
 80074d8:	1009883a 	mov	r4,r2
 80074dc:	180b883a 	mov	r5,r3
 80074e0:	318cc0c4 	addi	r6,r6,13059
 80074e4:	39ccccc4 	addi	r7,r7,13107
 80074e8:	800aea80 	call	800aea8 <__adddf3>
 80074ec:	da400317 	ldw	r9,12(sp)
 80074f0:	a00b883a 	mov	r5,r20
 80074f4:	100d883a 	mov	r6,r2
 80074f8:	4809883a 	mov	r4,r9
 80074fc:	180f883a 	mov	r7,r3
 8007500:	800c2540 	call	800c254 <__muldf3>
 8007504:	880b883a 	mov	r5,r17
 8007508:	900d883a 	mov	r6,r18
 800750c:	880f883a 	mov	r7,r17
 8007510:	0009883a 	mov	r4,zero
 8007514:	1027883a 	mov	r19,r2
 8007518:	1821883a 	mov	r16,r3
 800751c:	800aea80 	call	800aea8 <__adddf3>
 8007520:	d9800017 	ldw	r6,0(sp)
 8007524:	b00f883a 	mov	r7,r22
 8007528:	1009883a 	mov	r4,r2
 800752c:	180b883a 	mov	r5,r3
 8007530:	800c2540 	call	800c254 <__muldf3>
 8007534:	980d883a 	mov	r6,r19
 8007538:	800f883a 	mov	r7,r16
 800753c:	1009883a 	mov	r4,r2
 8007540:	180b883a 	mov	r5,r3
 8007544:	800aea80 	call	800aea8 <__adddf3>
 8007548:	880f883a 	mov	r7,r17
 800754c:	880b883a 	mov	r5,r17
 8007550:	000d883a 	mov	r6,zero
 8007554:	0009883a 	mov	r4,zero
 8007558:	1029883a 	mov	r20,r2
 800755c:	1827883a 	mov	r19,r3
 8007560:	800c2540 	call	800c254 <__muldf3>
 8007564:	1009883a 	mov	r4,r2
 8007568:	180b883a 	mov	r5,r3
 800756c:	000d883a 	mov	r6,zero
 8007570:	01d00234 	movhi	r7,16392
 8007574:	d8c00615 	stw	r3,24(sp)
 8007578:	d8800515 	stw	r2,20(sp)
 800757c:	800aea80 	call	800aea8 <__adddf3>
 8007580:	a00d883a 	mov	r6,r20
 8007584:	980f883a 	mov	r7,r19
 8007588:	1009883a 	mov	r4,r2
 800758c:	180b883a 	mov	r5,r3
 8007590:	800aea80 	call	800aea8 <__adddf3>
 8007594:	880b883a 	mov	r5,r17
 8007598:	000d883a 	mov	r6,zero
 800759c:	180f883a 	mov	r7,r3
 80075a0:	0009883a 	mov	r4,zero
 80075a4:	1821883a 	mov	r16,r3
 80075a8:	800c2540 	call	800c254 <__muldf3>
 80075ac:	d9000017 	ldw	r4,0(sp)
 80075b0:	b00b883a 	mov	r5,r22
 80075b4:	800f883a 	mov	r7,r16
 80075b8:	000d883a 	mov	r6,zero
 80075bc:	d8800115 	stw	r2,4(sp)
 80075c0:	d8c00215 	stw	r3,8(sp)
 80075c4:	800c2540 	call	800c254 <__muldf3>
 80075c8:	800b883a 	mov	r5,r16
 80075cc:	0009883a 	mov	r4,zero
 80075d0:	000d883a 	mov	r6,zero
 80075d4:	01d00234 	movhi	r7,16392
 80075d8:	182d883a 	mov	r22,r3
 80075dc:	d8800315 	stw	r2,12(sp)
 80075e0:	800c9780 	call	800c978 <__subdf3>
 80075e4:	dbc00517 	ldw	r15,20(sp)
 80075e8:	db800617 	ldw	r14,24(sp)
 80075ec:	1009883a 	mov	r4,r2
 80075f0:	780d883a 	mov	r6,r15
 80075f4:	700f883a 	mov	r7,r14
 80075f8:	180b883a 	mov	r5,r3
 80075fc:	800c9780 	call	800c978 <__subdf3>
 8007600:	a009883a 	mov	r4,r20
 8007604:	980b883a 	mov	r5,r19
 8007608:	100d883a 	mov	r6,r2
 800760c:	180f883a 	mov	r7,r3
 8007610:	800c9780 	call	800c978 <__subdf3>
 8007614:	900d883a 	mov	r6,r18
 8007618:	880f883a 	mov	r7,r17
 800761c:	1009883a 	mov	r4,r2
 8007620:	180b883a 	mov	r5,r3
 8007624:	800c2540 	call	800c254 <__muldf3>
 8007628:	da400317 	ldw	r9,12(sp)
 800762c:	b00b883a 	mov	r5,r22
 8007630:	100d883a 	mov	r6,r2
 8007634:	4809883a 	mov	r4,r9
 8007638:	180f883a 	mov	r7,r3
 800763c:	800aea80 	call	800aea8 <__adddf3>
 8007640:	d9000117 	ldw	r4,4(sp)
 8007644:	d9400217 	ldw	r5,8(sp)
 8007648:	100d883a 	mov	r6,r2
 800764c:	180f883a 	mov	r7,r3
 8007650:	102d883a 	mov	r22,r2
 8007654:	1825883a 	mov	r18,r3
 8007658:	800aea80 	call	800aea8 <__adddf3>
 800765c:	01cffbf4 	movhi	r7,16367
 8007660:	39f1c244 	addi	r7,r7,-14583
 8007664:	0009883a 	mov	r4,zero
 8007668:	180b883a 	mov	r5,r3
 800766c:	01b80034 	movhi	r6,57344
 8007670:	1823883a 	mov	r17,r3
 8007674:	800c2540 	call	800c254 <__muldf3>
 8007678:	018516f4 	movhi	r6,5211
 800767c:	01ef8fb4 	movhi	r7,48702
 8007680:	880b883a 	mov	r5,r17
 8007684:	31807d44 	addi	r6,r6,501
 8007688:	39cbf804 	addi	r7,r7,12256
 800768c:	0009883a 	mov	r4,zero
 8007690:	1029883a 	mov	r20,r2
 8007694:	1827883a 	mov	r19,r3
 8007698:	800c2540 	call	800c254 <__muldf3>
 800769c:	d9800117 	ldw	r6,4(sp)
 80076a0:	d9c00217 	ldw	r7,8(sp)
 80076a4:	880b883a 	mov	r5,r17
 80076a8:	0009883a 	mov	r4,zero
 80076ac:	1821883a 	mov	r16,r3
 80076b0:	d8800415 	stw	r2,16(sp)
 80076b4:	800c9780 	call	800c978 <__subdf3>
 80076b8:	b009883a 	mov	r4,r22
 80076bc:	900b883a 	mov	r5,r18
 80076c0:	100d883a 	mov	r6,r2
 80076c4:	180f883a 	mov	r7,r3
 80076c8:	800c9780 	call	800c978 <__subdf3>
 80076cc:	01b70eb4 	movhi	r6,56378
 80076d0:	01cffbf4 	movhi	r7,16367
 80076d4:	1009883a 	mov	r4,r2
 80076d8:	180b883a 	mov	r5,r3
 80076dc:	3180ff44 	addi	r6,r6,1021
 80076e0:	39f1c244 	addi	r7,r7,-14583
 80076e4:	800c2540 	call	800c254 <__muldf3>
 80076e8:	db400417 	ldw	r13,16(sp)
 80076ec:	800b883a 	mov	r5,r16
 80076f0:	100d883a 	mov	r6,r2
 80076f4:	6809883a 	mov	r4,r13
 80076f8:	180f883a 	mov	r7,r3
 80076fc:	800aea80 	call	800aea8 <__adddf3>
 8007700:	db000717 	ldw	r12,28(sp)
 8007704:	1009883a 	mov	r4,r2
 8007708:	008200f4 	movhi	r2,2051
 800770c:	10aa2604 	addi	r2,r2,-22376
 8007710:	1305883a 	add	r2,r2,r12
 8007714:	11800017 	ldw	r6,0(r2)
 8007718:	11c00117 	ldw	r7,4(r2)
 800771c:	180b883a 	mov	r5,r3
 8007720:	800aea80 	call	800aea8 <__adddf3>
 8007724:	da000817 	ldw	r8,32(sp)
 8007728:	1025883a 	mov	r18,r2
 800772c:	1823883a 	mov	r17,r3
 8007730:	4009883a 	mov	r4,r8
 8007734:	800d2d00 	call	800d2d0 <__floatsidf>
 8007738:	db000717 	ldw	r12,28(sp)
 800773c:	d8800115 	stw	r2,4(sp)
 8007740:	008200f4 	movhi	r2,2051
 8007744:	10aa2a04 	addi	r2,r2,-22360
 8007748:	1319883a 	add	r12,r2,r12
 800774c:	65800017 	ldw	r22,0(r12)
 8007750:	63000117 	ldw	r12,4(r12)
 8007754:	a009883a 	mov	r4,r20
 8007758:	980b883a 	mov	r5,r19
 800775c:	900d883a 	mov	r6,r18
 8007760:	880f883a 	mov	r7,r17
 8007764:	db000015 	stw	r12,0(sp)
 8007768:	d8c00215 	stw	r3,8(sp)
 800776c:	800aea80 	call	800aea8 <__adddf3>
 8007770:	d9c00017 	ldw	r7,0(sp)
 8007774:	1009883a 	mov	r4,r2
 8007778:	180b883a 	mov	r5,r3
 800777c:	b00d883a 	mov	r6,r22
 8007780:	800aea80 	call	800aea8 <__adddf3>
 8007784:	d9800117 	ldw	r6,4(sp)
 8007788:	d9c00217 	ldw	r7,8(sp)
 800778c:	1009883a 	mov	r4,r2
 8007790:	180b883a 	mov	r5,r3
 8007794:	800aea80 	call	800aea8 <__adddf3>
 8007798:	d9800117 	ldw	r6,4(sp)
 800779c:	d9c00217 	ldw	r7,8(sp)
 80077a0:	0009883a 	mov	r4,zero
 80077a4:	180b883a 	mov	r5,r3
 80077a8:	1821883a 	mov	r16,r3
 80077ac:	800c9780 	call	800c978 <__subdf3>
 80077b0:	d9c00017 	ldw	r7,0(sp)
 80077b4:	1009883a 	mov	r4,r2
 80077b8:	180b883a 	mov	r5,r3
 80077bc:	b00d883a 	mov	r6,r22
 80077c0:	800c9780 	call	800c978 <__subdf3>
 80077c4:	1009883a 	mov	r4,r2
 80077c8:	180b883a 	mov	r5,r3
 80077cc:	a00d883a 	mov	r6,r20
 80077d0:	980f883a 	mov	r7,r19
 80077d4:	800c9780 	call	800c978 <__subdf3>
 80077d8:	9009883a 	mov	r4,r18
 80077dc:	880b883a 	mov	r5,r17
 80077e0:	100d883a 	mov	r6,r2
 80077e4:	180f883a 	mov	r7,r3
 80077e8:	800c9780 	call	800c978 <__subdf3>
 80077ec:	dac00917 	ldw	r11,36(sp)
 80077f0:	e2bfffc4 	addi	r10,fp,-1
 80077f4:	1027883a 	mov	r19,r2
 80077f8:	52d6b03a 	or	r11,r10,r11
 80077fc:	1823883a 	mov	r17,r3
 8007800:	5801591e 	bne	r11,zero,8007d68 <__ieee754_pow+0xe60>
 8007804:	04affc34 	movhi	r18,49136
 8007808:	b80f883a 	mov	r7,r23
 800780c:	a809883a 	mov	r4,r21
 8007810:	b80b883a 	mov	r5,r23
 8007814:	000d883a 	mov	r6,zero
 8007818:	800c9780 	call	800c978 <__subdf3>
 800781c:	1009883a 	mov	r4,r2
 8007820:	180b883a 	mov	r5,r3
 8007824:	000d883a 	mov	r6,zero
 8007828:	800f883a 	mov	r7,r16
 800782c:	800c2540 	call	800c254 <__muldf3>
 8007830:	a809883a 	mov	r4,r21
 8007834:	b80b883a 	mov	r5,r23
 8007838:	980d883a 	mov	r6,r19
 800783c:	880f883a 	mov	r7,r17
 8007840:	102d883a 	mov	r22,r2
 8007844:	1829883a 	mov	r20,r3
 8007848:	800c2540 	call	800c254 <__muldf3>
 800784c:	b009883a 	mov	r4,r22
 8007850:	a00b883a 	mov	r5,r20
 8007854:	100d883a 	mov	r6,r2
 8007858:	180f883a 	mov	r7,r3
 800785c:	800aea80 	call	800aea8 <__adddf3>
 8007860:	b80b883a 	mov	r5,r23
 8007864:	0009883a 	mov	r4,zero
 8007868:	000d883a 	mov	r6,zero
 800786c:	800f883a 	mov	r7,r16
 8007870:	1027883a 	mov	r19,r2
 8007874:	1823883a 	mov	r17,r3
 8007878:	800c2540 	call	800c254 <__muldf3>
 800787c:	9809883a 	mov	r4,r19
 8007880:	880b883a 	mov	r5,r17
 8007884:	100d883a 	mov	r6,r2
 8007888:	180f883a 	mov	r7,r3
 800788c:	102d883a 	mov	r22,r2
 8007890:	182b883a 	mov	r21,r3
 8007894:	800aea80 	call	800aea8 <__adddf3>
 8007898:	102f883a 	mov	r23,r2
 800789c:	00902434 	movhi	r2,16528
 80078a0:	10bfffc4 	addi	r2,r2,-1
 80078a4:	1829883a 	mov	r20,r3
 80078a8:	b013883a 	mov	r9,r22
 80078ac:	a811883a 	mov	r8,r21
 80078b0:	10c1080e 	bge	r2,r3,8007cd4 <__ieee754_pow+0xdcc>
 80078b4:	00efdc34 	movhi	r3,49008
 80078b8:	a0c7883a 	add	r3,r20,r3
 80078bc:	1dc6b03a 	or	r3,r3,r23
 80078c0:	1801961e 	bne	r3,zero,8007f1c <__ieee754_pow+0x1014>
 80078c4:	01994b34 	movhi	r6,25900
 80078c8:	01cf25f4 	movhi	r7,15511
 80078cc:	31a0bf84 	addi	r6,r6,-32002
 80078d0:	39c551c4 	addi	r7,r7,5447
 80078d4:	9809883a 	mov	r4,r19
 80078d8:	880b883a 	mov	r5,r17
 80078dc:	800aea80 	call	800aea8 <__adddf3>
 80078e0:	b809883a 	mov	r4,r23
 80078e4:	a00b883a 	mov	r5,r20
 80078e8:	b00d883a 	mov	r6,r22
 80078ec:	a80f883a 	mov	r7,r21
 80078f0:	1039883a 	mov	fp,r2
 80078f4:	1821883a 	mov	r16,r3
 80078f8:	800c9780 	call	800c978 <__subdf3>
 80078fc:	e009883a 	mov	r4,fp
 8007900:	800b883a 	mov	r5,r16
 8007904:	100d883a 	mov	r6,r2
 8007908:	180f883a 	mov	r7,r3
 800790c:	800c0940 	call	800c094 <__gedf2>
 8007910:	00818216 	blt	zero,r2,8007f1c <__ieee754_pow+0x1014>
 8007914:	a021883a 	mov	r16,r20
 8007918:	8011d53a 	srai	r8,r16,20
 800791c:	00800434 	movhi	r2,16
 8007920:	a02ed7fa 	srli	r23,r20,31
 8007924:	423f0084 	addi	r8,r8,-1022
 8007928:	1211d83a 	sra	r8,r2,r8
 800792c:	00c00434 	movhi	r3,16
 8007930:	18ffffc4 	addi	r3,r3,-1
 8007934:	4529883a 	add	r20,r8,r20
 8007938:	a00a907a 	slli	r5,r20,1
 800793c:	a0c4703a 	and	r2,r20,r3
 8007940:	10800434 	orhi	r2,r2,16
 8007944:	280ad57a 	srli	r5,r5,21
 8007948:	05cdc83a 	sub	r6,zero,r23
 800794c:	b009883a 	mov	r4,r22
 8007950:	29ff0044 	addi	r7,r5,-1023
 8007954:	19c7d83a 	sra	r3,r3,r7
 8007958:	01c104c4 	movi	r7,1043
 800795c:	394bc83a 	sub	r5,r7,r5
 8007960:	1145d83a 	sra	r2,r2,r5
 8007964:	00ce303a 	nor	r7,zero,r3
 8007968:	3d0e703a 	and	r7,r7,r20
 800796c:	1184f03a 	xor	r2,r2,r6
 8007970:	a80b883a 	mov	r5,r21
 8007974:	000d883a 	mov	r6,zero
 8007978:	15ef883a 	add	r23,r2,r23
 800797c:	ddc00115 	stw	r23,4(sp)
 8007980:	800c9780 	call	800c978 <__subdf3>
 8007984:	9809883a 	mov	r4,r19
 8007988:	880b883a 	mov	r5,r17
 800798c:	100d883a 	mov	r6,r2
 8007990:	180f883a 	mov	r7,r3
 8007994:	d8c00815 	stw	r3,32(sp)
 8007998:	d8800315 	stw	r2,12(sp)
 800799c:	800aea80 	call	800aea8 <__adddf3>
 80079a0:	d8800117 	ldw	r2,4(sp)
 80079a4:	da000817 	ldw	r8,32(sp)
 80079a8:	da400317 	ldw	r9,12(sp)
 80079ac:	1004953a 	slli	r2,r2,20
 80079b0:	1829883a 	mov	r20,r3
 80079b4:	d8800015 	stw	r2,0(sp)
 80079b8:	01cff9b4 	movhi	r7,16358
 80079bc:	a00b883a 	mov	r5,r20
 80079c0:	39cb90c4 	addi	r7,r7,11843
 80079c4:	0009883a 	mov	r4,zero
 80079c8:	000d883a 	mov	r6,zero
 80079cc:	da000815 	stw	r8,32(sp)
 80079d0:	da400315 	stw	r9,12(sp)
 80079d4:	800c2540 	call	800c254 <__muldf3>
 80079d8:	da400317 	ldw	r9,12(sp)
 80079dc:	da000817 	ldw	r8,32(sp)
 80079e0:	a00b883a 	mov	r5,r20
 80079e4:	480d883a 	mov	r6,r9
 80079e8:	400f883a 	mov	r7,r8
 80079ec:	0009883a 	mov	r4,zero
 80079f0:	1039883a 	mov	fp,r2
 80079f4:	182d883a 	mov	r22,r3
 80079f8:	800c9780 	call	800c978 <__subdf3>
 80079fc:	9809883a 	mov	r4,r19
 8007a00:	880b883a 	mov	r5,r17
 8007a04:	100d883a 	mov	r6,r2
 8007a08:	180f883a 	mov	r7,r3
 8007a0c:	800c9780 	call	800c978 <__subdf3>
 8007a10:	01bfbeb4 	movhi	r6,65274
 8007a14:	01cff9b4 	movhi	r7,16358
 8007a18:	1009883a 	mov	r4,r2
 8007a1c:	180b883a 	mov	r5,r3
 8007a20:	318e7bc4 	addi	r6,r6,14831
 8007a24:	39cb9084 	addi	r7,r7,11842
 8007a28:	800c2540 	call	800c254 <__muldf3>
 8007a2c:	01832a34 	movhi	r6,3240
 8007a30:	01ef8834 	movhi	r7,48672
 8007a34:	a00b883a 	mov	r5,r20
 8007a38:	319b0e44 	addi	r6,r6,27705
 8007a3c:	39d71844 	addi	r7,r7,23649
 8007a40:	0009883a 	mov	r4,zero
 8007a44:	1023883a 	mov	r17,r2
 8007a48:	1821883a 	mov	r16,r3
 8007a4c:	800c2540 	call	800c254 <__muldf3>
 8007a50:	8809883a 	mov	r4,r17
 8007a54:	800b883a 	mov	r5,r16
 8007a58:	100d883a 	mov	r6,r2
 8007a5c:	180f883a 	mov	r7,r3
 8007a60:	800aea80 	call	800aea8 <__adddf3>
 8007a64:	e009883a 	mov	r4,fp
 8007a68:	b00b883a 	mov	r5,r22
 8007a6c:	100d883a 	mov	r6,r2
 8007a70:	180f883a 	mov	r7,r3
 8007a74:	1029883a 	mov	r20,r2
 8007a78:	1827883a 	mov	r19,r3
 8007a7c:	800aea80 	call	800aea8 <__adddf3>
 8007a80:	e00d883a 	mov	r6,fp
 8007a84:	b00f883a 	mov	r7,r22
 8007a88:	1009883a 	mov	r4,r2
 8007a8c:	180b883a 	mov	r5,r3
 8007a90:	1023883a 	mov	r17,r2
 8007a94:	1821883a 	mov	r16,r3
 8007a98:	800c9780 	call	800c978 <__subdf3>
 8007a9c:	a009883a 	mov	r4,r20
 8007aa0:	980b883a 	mov	r5,r19
 8007aa4:	100d883a 	mov	r6,r2
 8007aa8:	180f883a 	mov	r7,r3
 8007aac:	800c9780 	call	800c978 <__subdf3>
 8007ab0:	8809883a 	mov	r4,r17
 8007ab4:	800b883a 	mov	r5,r16
 8007ab8:	880d883a 	mov	r6,r17
 8007abc:	800f883a 	mov	r7,r16
 8007ac0:	1039883a 	mov	fp,r2
 8007ac4:	182d883a 	mov	r22,r3
 8007ac8:	800c2540 	call	800c254 <__muldf3>
 8007acc:	019caff4 	movhi	r6,29375
 8007ad0:	01cf99b4 	movhi	r7,15974
 8007ad4:	1009883a 	mov	r4,r2
 8007ad8:	180b883a 	mov	r5,r3
 8007adc:	31a93404 	addi	r6,r6,-23344
 8007ae0:	39cdda44 	addi	r7,r7,14185
 8007ae4:	1029883a 	mov	r20,r2
 8007ae8:	1827883a 	mov	r19,r3
 8007aec:	800c2540 	call	800c254 <__muldf3>
 8007af0:	01b174b4 	movhi	r6,50642
 8007af4:	01cfaf34 	movhi	r7,16060
 8007af8:	1009883a 	mov	r4,r2
 8007afc:	180b883a 	mov	r5,r3
 8007b00:	319afc44 	addi	r6,r6,27633
 8007b04:	39ef5044 	addi	r7,r7,-17087
 8007b08:	800c9780 	call	800c978 <__subdf3>
 8007b0c:	a00d883a 	mov	r6,r20
 8007b10:	980f883a 	mov	r7,r19
 8007b14:	1009883a 	mov	r4,r2
 8007b18:	180b883a 	mov	r5,r3
 8007b1c:	800c2540 	call	800c254 <__muldf3>
 8007b20:	01abc9b4 	movhi	r6,44838
 8007b24:	01cfc474 	movhi	r7,16145
 8007b28:	1009883a 	mov	r4,r2
 8007b2c:	180b883a 	mov	r5,r3
 8007b30:	31b78b04 	addi	r6,r6,-8660
 8007b34:	39d59a84 	addi	r7,r7,22122
 8007b38:	800aea80 	call	800aea8 <__adddf3>
 8007b3c:	a00d883a 	mov	r6,r20
 8007b40:	980f883a 	mov	r7,r19
 8007b44:	1009883a 	mov	r4,r2
 8007b48:	180b883a 	mov	r5,r3
 8007b4c:	800c2540 	call	800c254 <__muldf3>
 8007b50:	0185aff4 	movhi	r6,5823
 8007b54:	01cfd9f4 	movhi	r7,16231
 8007b58:	1009883a 	mov	r4,r2
 8007b5c:	180b883a 	mov	r5,r3
 8007b60:	31af64c4 	addi	r6,r6,-17005
 8007b64:	39f05b04 	addi	r7,r7,-16020
 8007b68:	800c9780 	call	800c978 <__subdf3>
 8007b6c:	a00d883a 	mov	r6,r20
 8007b70:	980f883a 	mov	r7,r19
 8007b74:	1009883a 	mov	r4,r2
 8007b78:	180b883a 	mov	r5,r3
 8007b7c:	800c2540 	call	800c254 <__muldf3>
 8007b80:	01955574 	movhi	r6,21845
 8007b84:	01cff174 	movhi	r7,16325
 8007b88:	1009883a 	mov	r4,r2
 8007b8c:	180b883a 	mov	r5,r3
 8007b90:	31954f84 	addi	r6,r6,21822
 8007b94:	39d55544 	addi	r7,r7,21845
 8007b98:	800aea80 	call	800aea8 <__adddf3>
 8007b9c:	a00d883a 	mov	r6,r20
 8007ba0:	980f883a 	mov	r7,r19
 8007ba4:	1009883a 	mov	r4,r2
 8007ba8:	180b883a 	mov	r5,r3
 8007bac:	800c2540 	call	800c254 <__muldf3>
 8007bb0:	8809883a 	mov	r4,r17
 8007bb4:	800b883a 	mov	r5,r16
 8007bb8:	100d883a 	mov	r6,r2
 8007bbc:	180f883a 	mov	r7,r3
 8007bc0:	800c9780 	call	800c978 <__subdf3>
 8007bc4:	8809883a 	mov	r4,r17
 8007bc8:	800b883a 	mov	r5,r16
 8007bcc:	100d883a 	mov	r6,r2
 8007bd0:	180f883a 	mov	r7,r3
 8007bd4:	1029883a 	mov	r20,r2
 8007bd8:	1827883a 	mov	r19,r3
 8007bdc:	800c2540 	call	800c254 <__muldf3>
 8007be0:	a009883a 	mov	r4,r20
 8007be4:	980b883a 	mov	r5,r19
 8007be8:	000d883a 	mov	r6,zero
 8007bec:	01d00034 	movhi	r7,16384
 8007bf0:	102b883a 	mov	r21,r2
 8007bf4:	182f883a 	mov	r23,r3
 8007bf8:	800c9780 	call	800c978 <__subdf3>
 8007bfc:	a809883a 	mov	r4,r21
 8007c00:	b80b883a 	mov	r5,r23
 8007c04:	100d883a 	mov	r6,r2
 8007c08:	180f883a 	mov	r7,r3
 8007c0c:	800b7440 	call	800b744 <__divdf3>
 8007c10:	8809883a 	mov	r4,r17
 8007c14:	800b883a 	mov	r5,r16
 8007c18:	e00d883a 	mov	r6,fp
 8007c1c:	b00f883a 	mov	r7,r22
 8007c20:	1029883a 	mov	r20,r2
 8007c24:	1827883a 	mov	r19,r3
 8007c28:	800c2540 	call	800c254 <__muldf3>
 8007c2c:	1009883a 	mov	r4,r2
 8007c30:	180b883a 	mov	r5,r3
 8007c34:	e00d883a 	mov	r6,fp
 8007c38:	b00f883a 	mov	r7,r22
 8007c3c:	800aea80 	call	800aea8 <__adddf3>
 8007c40:	a009883a 	mov	r4,r20
 8007c44:	980b883a 	mov	r5,r19
 8007c48:	100d883a 	mov	r6,r2
 8007c4c:	180f883a 	mov	r7,r3
 8007c50:	800c9780 	call	800c978 <__subdf3>
 8007c54:	1009883a 	mov	r4,r2
 8007c58:	180b883a 	mov	r5,r3
 8007c5c:	880d883a 	mov	r6,r17
 8007c60:	800f883a 	mov	r7,r16
 8007c64:	800c9780 	call	800c978 <__subdf3>
 8007c68:	0009883a 	mov	r4,zero
 8007c6c:	180f883a 	mov	r7,r3
 8007c70:	014ffc34 	movhi	r5,16368
 8007c74:	100d883a 	mov	r6,r2
 8007c78:	800c9780 	call	800c978 <__subdf3>
 8007c7c:	d9000017 	ldw	r4,0(sp)
 8007c80:	190f883a 	add	r7,r3,r4
 8007c84:	3809d53a 	srai	r4,r7,20
 8007c88:	0100c70e 	bge	zero,r4,8007fa8 <__ieee754_pow+0x10a0>
 8007c8c:	100d883a 	mov	r6,r2
 8007c90:	0009883a 	mov	r4,zero
 8007c94:	900b883a 	mov	r5,r18
 8007c98:	800c2540 	call	800c254 <__muldf3>
 8007c9c:	003cd606 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 8007ca0:	00b00434 	movhi	r2,49168
 8007ca4:	9085883a 	add	r2,r18,r2
 8007ca8:	e084b03a 	or	r2,fp,r2
 8007cac:	1000aa1e 	bne	r2,zero,8007f58 <__ieee754_pow+0x1050>
 8007cb0:	b009883a 	mov	r4,r22
 8007cb4:	180b883a 	mov	r5,r3
 8007cb8:	003d4006 	br	80071bc <__alt_data_end+0xfc0071bc>
 8007cbc:	8009883a 	mov	r4,r16
 8007cc0:	980b883a 	mov	r5,r19
 8007cc4:	800d883a 	mov	r6,r16
 8007cc8:	980f883a 	mov	r7,r19
 8007ccc:	800c2540 	call	800c254 <__muldf3>
 8007cd0:	003cc906 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 8007cd4:	04200034 	movhi	r16,32768
 8007cd8:	843fffc4 	addi	r16,r16,-1
 8007cdc:	00902474 	movhi	r2,16529
 8007ce0:	1c20703a 	and	r16,r3,r16
 8007ce4:	10b2ffc4 	addi	r2,r2,-13313
 8007ce8:	1400a70e 	bge	r2,r16,8007f88 <__ieee754_pow+0x1080>
 8007cec:	008fdbf4 	movhi	r2,16239
 8007cf0:	108d0004 	addi	r2,r2,13312
 8007cf4:	1885883a 	add	r2,r3,r2
 8007cf8:	15c4b03a 	or	r2,r2,r23
 8007cfc:	10000b1e 	bne	r2,zero,8007d2c <__ieee754_pow+0xe24>
 8007d00:	b809883a 	mov	r4,r23
 8007d04:	180b883a 	mov	r5,r3
 8007d08:	b00d883a 	mov	r6,r22
 8007d0c:	a80f883a 	mov	r7,r21
 8007d10:	800c9780 	call	800c978 <__subdf3>
 8007d14:	9809883a 	mov	r4,r19
 8007d18:	880b883a 	mov	r5,r17
 8007d1c:	100d883a 	mov	r6,r2
 8007d20:	180f883a 	mov	r7,r3
 8007d24:	800c1740 	call	800c174 <__ledf2>
 8007d28:	00befb16 	blt	zero,r2,8007918 <__alt_data_end+0xfc007918>
 8007d2c:	01b0be74 	movhi	r6,49913
 8007d30:	01c06974 	movhi	r7,421
 8007d34:	900b883a 	mov	r5,r18
 8007d38:	31bcd644 	addi	r6,r6,-3239
 8007d3c:	39db87c4 	addi	r7,r7,28191
 8007d40:	0009883a 	mov	r4,zero
 8007d44:	800c2540 	call	800c254 <__muldf3>
 8007d48:	01b0be74 	movhi	r6,49913
 8007d4c:	01c06974 	movhi	r7,421
 8007d50:	1009883a 	mov	r4,r2
 8007d54:	180b883a 	mov	r5,r3
 8007d58:	31bcd644 	addi	r6,r6,-3239
 8007d5c:	39db87c4 	addi	r7,r7,28191
 8007d60:	800c2540 	call	800c254 <__muldf3>
 8007d64:	003ca406 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 8007d68:	048ffc34 	movhi	r18,16368
 8007d6c:	003ea606 	br	8007808 <__alt_data_end+0xfc007808>
 8007d70:	b83cce0e 	bge	r23,zero,80070ac <__alt_data_end+0xfc0070ac>
 8007d74:	0005883a 	mov	r2,zero
 8007d78:	b8e0003c 	xorhi	r3,r23,32768
 8007d7c:	003c9e06 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 8007d80:	0021883a 	mov	r16,zero
 8007d84:	0019883a 	mov	r12,zero
 8007d88:	003d3406 	br	800725c <__alt_data_end+0xfc00725c>
 8007d8c:	0009883a 	mov	r4,zero
 8007d90:	003d2006 	br	8007214 <__alt_data_end+0xfc007214>
 8007d94:	008ffc34 	movhi	r2,16368
 8007d98:	10bfff84 	addi	r2,r2,-2
 8007d9c:	14bcc20e 	bge	r2,r18,80070a8 <__alt_data_end+0xfc0070a8>
 8007da0:	01cffc34 	movhi	r7,16368
 8007da4:	3cbcd916 	blt	r7,r18,800710c <__alt_data_end+0xfc00710c>
 8007da8:	b009883a 	mov	r4,r22
 8007dac:	000d883a 	mov	r6,zero
 8007db0:	180b883a 	mov	r5,r3
 8007db4:	dac00915 	stw	r11,36(sp)
 8007db8:	800c9780 	call	800c978 <__subdf3>
 8007dbc:	01cffdf4 	movhi	r7,16375
 8007dc0:	1009883a 	mov	r4,r2
 8007dc4:	180b883a 	mov	r5,r3
 8007dc8:	39c551c4 	addi	r7,r7,5447
 8007dcc:	01980034 	movhi	r6,24576
 8007dd0:	1023883a 	mov	r17,r2
 8007dd4:	1821883a 	mov	r16,r3
 8007dd8:	800c2540 	call	800c254 <__muldf3>
 8007ddc:	01be17b4 	movhi	r6,63582
 8007de0:	01cf9574 	movhi	r7,15957
 8007de4:	8809883a 	mov	r4,r17
 8007de8:	800b883a 	mov	r5,r16
 8007dec:	31b7d104 	addi	r6,r6,-8380
 8007df0:	39eb82c4 	addi	r7,r7,-20981
 8007df4:	1027883a 	mov	r19,r2
 8007df8:	1825883a 	mov	r18,r3
 8007dfc:	800c2540 	call	800c254 <__muldf3>
 8007e00:	8809883a 	mov	r4,r17
 8007e04:	800b883a 	mov	r5,r16
 8007e08:	880d883a 	mov	r6,r17
 8007e0c:	800f883a 	mov	r7,r16
 8007e10:	1829883a 	mov	r20,r3
 8007e14:	d8800815 	stw	r2,32(sp)
 8007e18:	800c2540 	call	800c254 <__muldf3>
 8007e1c:	8809883a 	mov	r4,r17
 8007e20:	800b883a 	mov	r5,r16
 8007e24:	000d883a 	mov	r6,zero
 8007e28:	01cff434 	movhi	r7,16336
 8007e2c:	182d883a 	mov	r22,r3
 8007e30:	d8800315 	stw	r2,12(sp)
 8007e34:	800c2540 	call	800c254 <__muldf3>
 8007e38:	01155574 	movhi	r4,21845
 8007e3c:	014ff574 	movhi	r5,16341
 8007e40:	21155544 	addi	r4,r4,21845
 8007e44:	29555544 	addi	r5,r5,21845
 8007e48:	100d883a 	mov	r6,r2
 8007e4c:	180f883a 	mov	r7,r3
 8007e50:	800c9780 	call	800c978 <__subdf3>
 8007e54:	880d883a 	mov	r6,r17
 8007e58:	800f883a 	mov	r7,r16
 8007e5c:	1009883a 	mov	r4,r2
 8007e60:	180b883a 	mov	r5,r3
 8007e64:	800c2540 	call	800c254 <__muldf3>
 8007e68:	0009883a 	mov	r4,zero
 8007e6c:	014ff834 	movhi	r5,16352
 8007e70:	100d883a 	mov	r6,r2
 8007e74:	180f883a 	mov	r7,r3
 8007e78:	800c9780 	call	800c978 <__subdf3>
 8007e7c:	da400317 	ldw	r9,12(sp)
 8007e80:	b00b883a 	mov	r5,r22
 8007e84:	100d883a 	mov	r6,r2
 8007e88:	4809883a 	mov	r4,r9
 8007e8c:	180f883a 	mov	r7,r3
 8007e90:	800c2540 	call	800c254 <__muldf3>
 8007e94:	01994b34 	movhi	r6,25900
 8007e98:	01cffdf4 	movhi	r7,16375
 8007e9c:	1009883a 	mov	r4,r2
 8007ea0:	180b883a 	mov	r5,r3
 8007ea4:	31a0bf84 	addi	r6,r6,-32002
 8007ea8:	39c551c4 	addi	r7,r7,5447
 8007eac:	800c2540 	call	800c254 <__muldf3>
 8007eb0:	da000817 	ldw	r8,32(sp)
 8007eb4:	a00b883a 	mov	r5,r20
 8007eb8:	100d883a 	mov	r6,r2
 8007ebc:	4009883a 	mov	r4,r8
 8007ec0:	180f883a 	mov	r7,r3
 8007ec4:	800c9780 	call	800c978 <__subdf3>
 8007ec8:	9809883a 	mov	r4,r19
 8007ecc:	900b883a 	mov	r5,r18
 8007ed0:	100d883a 	mov	r6,r2
 8007ed4:	180f883a 	mov	r7,r3
 8007ed8:	1029883a 	mov	r20,r2
 8007edc:	1823883a 	mov	r17,r3
 8007ee0:	800aea80 	call	800aea8 <__adddf3>
 8007ee4:	0009883a 	mov	r4,zero
 8007ee8:	180b883a 	mov	r5,r3
 8007eec:	980d883a 	mov	r6,r19
 8007ef0:	900f883a 	mov	r7,r18
 8007ef4:	1821883a 	mov	r16,r3
 8007ef8:	800c9780 	call	800c978 <__subdf3>
 8007efc:	a009883a 	mov	r4,r20
 8007f00:	003e3606 	br	80077dc <__alt_data_end+0xfc0077dc>
 8007f04:	0009883a 	mov	r4,zero
 8007f08:	880b883a 	mov	r5,r17
 8007f0c:	800d883a 	mov	r6,r16
 8007f10:	980f883a 	mov	r7,r19
 8007f14:	800b7440 	call	800b744 <__divdf3>
 8007f18:	003c3706 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 8007f1c:	01a20034 	movhi	r6,34816
 8007f20:	01df8e34 	movhi	r7,32312
 8007f24:	900b883a 	mov	r5,r18
 8007f28:	319d6704 	addi	r6,r6,30108
 8007f2c:	39f90f04 	addi	r7,r7,-7108
 8007f30:	0009883a 	mov	r4,zero
 8007f34:	800c2540 	call	800c254 <__muldf3>
 8007f38:	01a20034 	movhi	r6,34816
 8007f3c:	01df8e34 	movhi	r7,32312
 8007f40:	1009883a 	mov	r4,r2
 8007f44:	180b883a 	mov	r5,r3
 8007f48:	319d6704 	addi	r6,r6,30108
 8007f4c:	39f90f04 	addi	r7,r7,-7108
 8007f50:	800c2540 	call	800c254 <__muldf3>
 8007f54:	003c2806 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 8007f58:	00800044 	movi	r2,1
 8007f5c:	e0bc5e1e 	bne	fp,r2,80070d8 <__alt_data_end+0xfc0070d8>
 8007f60:	18e0003c 	xorhi	r3,r3,32768
 8007f64:	b005883a 	mov	r2,r22
 8007f68:	003c2306 	br	8006ff8 <__alt_data_end+0xfc006ff8>
 8007f6c:	303c3d1e 	bne	r6,zero,8007064 <__alt_data_end+0xfc007064>
 8007f70:	1907c83a 	sub	r3,r3,r4
 8007f74:	88c5d83a 	sra	r2,r17,r3
 8007f78:	10c6983a 	sll	r3,r2,r3
 8007f7c:	1c401126 	beq	r3,r17,8007fc4 <__ieee754_pow+0x10bc>
 8007f80:	0039883a 	mov	fp,zero
 8007f84:	003c0006 	br	8006f88 <__alt_data_end+0xfc006f88>
 8007f88:	008ff834 	movhi	r2,16352
 8007f8c:	143e6216 	blt	r2,r16,8007918 <__alt_data_end+0xfc007918>
 8007f90:	d8000015 	stw	zero,0(sp)
 8007f94:	d8000115 	stw	zero,4(sp)
 8007f98:	003e8706 	br	80079b8 <__alt_data_end+0xfc0079b8>
 8007f9c:	04000134 	movhi	r16,4
 8007fa0:	03000044 	movi	r12,1
 8007fa4:	003cad06 	br	800725c <__alt_data_end+0xfc00725c>
 8007fa8:	d9800117 	ldw	r6,4(sp)
 8007fac:	1009883a 	mov	r4,r2
 8007fb0:	180b883a 	mov	r5,r3
 8007fb4:	800a6b40 	call	800a6b4 <scalbn>
 8007fb8:	100d883a 	mov	r6,r2
 8007fbc:	180f883a 	mov	r7,r3
 8007fc0:	003f3306 	br	8007c90 <__alt_data_end+0xfc007c90>
 8007fc4:	1080004c 	andi	r2,r2,1
 8007fc8:	02800084 	movi	r10,2
 8007fcc:	50b9c83a 	sub	fp,r10,r2
 8007fd0:	003bed06 	br	8006f88 <__alt_data_end+0xfc006f88>

08007fd4 <__ieee754_rem_pio2>:
 8007fd4:	02200034 	movhi	r8,32768
 8007fd8:	deffea04 	addi	sp,sp,-88
 8007fdc:	423fffc4 	addi	r8,r8,-1
 8007fe0:	00cffa74 	movhi	r3,16361
 8007fe4:	ddc01315 	stw	r23,76(sp)
 8007fe8:	dc400d15 	stw	r17,52(sp)
 8007fec:	dfc01515 	stw	ra,84(sp)
 8007ff0:	df001415 	stw	fp,80(sp)
 8007ff4:	dd801215 	stw	r22,72(sp)
 8007ff8:	dd401115 	stw	r21,68(sp)
 8007ffc:	dd001015 	stw	r20,64(sp)
 8008000:	dcc00f15 	stw	r19,60(sp)
 8008004:	dc800e15 	stw	r18,56(sp)
 8008008:	dc000c15 	stw	r16,48(sp)
 800800c:	2a2e703a 	and	r23,r5,r8
 8008010:	18c87ec4 	addi	r3,r3,8699
 8008014:	2823883a 	mov	r17,r5
 8008018:	1dc0790e 	bge	r3,r23,8008200 <__ieee754_rem_pio2+0x22c>
 800801c:	009000f4 	movhi	r2,16387
 8008020:	10b65ec4 	addi	r2,r2,-9861
 8008024:	3021883a 	mov	r16,r6
 8008028:	2027883a 	mov	r19,r4
 800802c:	15c02316 	blt	r2,r23,80080bc <__ieee754_rem_pio2+0xe8>
 8008030:	01cffe74 	movhi	r7,16377
 8008034:	39c87ec4 	addi	r7,r7,8699
 8008038:	01951034 	movhi	r6,21568
 800803c:	0141800e 	bge	zero,r5,8008640 <__ieee754_rem_pio2+0x66c>
 8008040:	800c9780 	call	800c978 <__subdf3>
 8008044:	1025883a 	mov	r18,r2
 8008048:	008ffe74 	movhi	r2,16377
 800804c:	10887ec4 	addi	r2,r2,8699
 8008050:	1823883a 	mov	r17,r3
 8008054:	b8808426 	beq	r23,r2,8008268 <__ieee754_rem_pio2+0x294>
 8008058:	018698b4 	movhi	r6,6754
 800805c:	01cf7474 	movhi	r7,15825
 8008060:	3198cc44 	addi	r6,r6,25393
 8008064:	39ed1844 	addi	r7,r7,-19359
 8008068:	9009883a 	mov	r4,r18
 800806c:	180b883a 	mov	r5,r3
 8008070:	800c9780 	call	800c978 <__subdf3>
 8008074:	100d883a 	mov	r6,r2
 8008078:	180f883a 	mov	r7,r3
 800807c:	9009883a 	mov	r4,r18
 8008080:	880b883a 	mov	r5,r17
 8008084:	80800015 	stw	r2,0(r16)
 8008088:	80c00115 	stw	r3,4(r16)
 800808c:	800c9780 	call	800c978 <__subdf3>
 8008090:	018698b4 	movhi	r6,6754
 8008094:	01cf7474 	movhi	r7,15825
 8008098:	1009883a 	mov	r4,r2
 800809c:	180b883a 	mov	r5,r3
 80080a0:	3198cc44 	addi	r6,r6,25393
 80080a4:	39ed1844 	addi	r7,r7,-19359
 80080a8:	800c9780 	call	800c978 <__subdf3>
 80080ac:	80800215 	stw	r2,8(r16)
 80080b0:	80c00315 	stw	r3,12(r16)
 80080b4:	00800044 	movi	r2,1
 80080b8:	00005606 	br	8008214 <__ieee754_rem_pio2+0x240>
 80080bc:	00904e74 	movhi	r2,16697
 80080c0:	10887ec4 	addi	r2,r2,8699
 80080c4:	15c0890e 	bge	r2,r23,80082ec <__ieee754_rem_pio2+0x318>
 80080c8:	009ffc34 	movhi	r2,32752
 80080cc:	10bfffc4 	addi	r2,r2,-1
 80080d0:	15c05c16 	blt	r2,r23,8008244 <__ieee754_rem_pio2+0x270>
 80080d4:	b829d53a 	srai	r20,r23,20
 80080d8:	a53efa84 	addi	r20,r20,-1046
 80080dc:	a024953a 	slli	r18,r20,20
 80080e0:	bca5c83a 	sub	r18,r23,r18
 80080e4:	900b883a 	mov	r5,r18
 80080e8:	800d2480 	call	800d248 <__fixdfsi>
 80080ec:	1009883a 	mov	r4,r2
 80080f0:	800d2d00 	call	800d2d0 <__floatsidf>
 80080f4:	9809883a 	mov	r4,r19
 80080f8:	900b883a 	mov	r5,r18
 80080fc:	100d883a 	mov	r6,r2
 8008100:	180f883a 	mov	r7,r3
 8008104:	d8800215 	stw	r2,8(sp)
 8008108:	d8c00315 	stw	r3,12(sp)
 800810c:	800c9780 	call	800c978 <__subdf3>
 8008110:	000d883a 	mov	r6,zero
 8008114:	01d05c34 	movhi	r7,16752
 8008118:	1009883a 	mov	r4,r2
 800811c:	180b883a 	mov	r5,r3
 8008120:	800c2540 	call	800c254 <__muldf3>
 8008124:	180b883a 	mov	r5,r3
 8008128:	1009883a 	mov	r4,r2
 800812c:	182b883a 	mov	r21,r3
 8008130:	102d883a 	mov	r22,r2
 8008134:	800d2480 	call	800d248 <__fixdfsi>
 8008138:	1009883a 	mov	r4,r2
 800813c:	800d2d00 	call	800d2d0 <__floatsidf>
 8008140:	100d883a 	mov	r6,r2
 8008144:	180f883a 	mov	r7,r3
 8008148:	b009883a 	mov	r4,r22
 800814c:	a80b883a 	mov	r5,r21
 8008150:	1027883a 	mov	r19,r2
 8008154:	1825883a 	mov	r18,r3
 8008158:	d8800415 	stw	r2,16(sp)
 800815c:	d8c00515 	stw	r3,20(sp)
 8008160:	800c9780 	call	800c978 <__subdf3>
 8008164:	1009883a 	mov	r4,r2
 8008168:	180b883a 	mov	r5,r3
 800816c:	000d883a 	mov	r6,zero
 8008170:	01d05c34 	movhi	r7,16752
 8008174:	800c2540 	call	800c254 <__muldf3>
 8008178:	1009883a 	mov	r4,r2
 800817c:	180b883a 	mov	r5,r3
 8008180:	000d883a 	mov	r6,zero
 8008184:	000f883a 	mov	r7,zero
 8008188:	d8800615 	stw	r2,24(sp)
 800818c:	d8c00715 	stw	r3,28(sp)
 8008190:	800c0100 	call	800c010 <__eqdf2>
 8008194:	1001491e 	bne	r2,zero,80086bc <__ieee754_rem_pio2+0x6e8>
 8008198:	000f883a 	mov	r7,zero
 800819c:	9809883a 	mov	r4,r19
 80081a0:	900b883a 	mov	r5,r18
 80081a4:	000d883a 	mov	r6,zero
 80081a8:	800c0100 	call	800c010 <__eqdf2>
 80081ac:	100f003a 	cmpeq	r7,r2,zero
 80081b0:	00800084 	movi	r2,2
 80081b4:	11cfc83a 	sub	r7,r2,r7
 80081b8:	00800084 	movi	r2,2
 80081bc:	d8800015 	stw	r2,0(sp)
 80081c0:	008200f4 	movhi	r2,2051
 80081c4:	10aa5204 	addi	r2,r2,-22200
 80081c8:	d8800115 	stw	r2,4(sp)
 80081cc:	d9000204 	addi	r4,sp,8
 80081d0:	800b883a 	mov	r5,r16
 80081d4:	a00d883a 	mov	r6,r20
 80081d8:	8008ea80 	call	8008ea8 <__kernel_rem_pio2>
 80081dc:	88000d0e 	bge	r17,zero,8008214 <__ieee754_rem_pio2+0x240>
 80081e0:	81000117 	ldw	r4,4(r16)
 80081e4:	80c00317 	ldw	r3,12(r16)
 80081e8:	0085c83a 	sub	r2,zero,r2
 80081ec:	2120003c 	xorhi	r4,r4,32768
 80081f0:	18e0003c 	xorhi	r3,r3,32768
 80081f4:	81000115 	stw	r4,4(r16)
 80081f8:	80c00315 	stw	r3,12(r16)
 80081fc:	00000506 	br	8008214 <__ieee754_rem_pio2+0x240>
 8008200:	31000015 	stw	r4,0(r6)
 8008204:	31400115 	stw	r5,4(r6)
 8008208:	30000215 	stw	zero,8(r6)
 800820c:	30000315 	stw	zero,12(r6)
 8008210:	0005883a 	mov	r2,zero
 8008214:	dfc01517 	ldw	ra,84(sp)
 8008218:	df001417 	ldw	fp,80(sp)
 800821c:	ddc01317 	ldw	r23,76(sp)
 8008220:	dd801217 	ldw	r22,72(sp)
 8008224:	dd401117 	ldw	r21,68(sp)
 8008228:	dd001017 	ldw	r20,64(sp)
 800822c:	dcc00f17 	ldw	r19,60(sp)
 8008230:	dc800e17 	ldw	r18,56(sp)
 8008234:	dc400d17 	ldw	r17,52(sp)
 8008238:	dc000c17 	ldw	r16,48(sp)
 800823c:	dec01604 	addi	sp,sp,88
 8008240:	f800283a 	ret
 8008244:	200d883a 	mov	r6,r4
 8008248:	280f883a 	mov	r7,r5
 800824c:	800c9780 	call	800c978 <__subdf3>
 8008250:	80800215 	stw	r2,8(r16)
 8008254:	80800015 	stw	r2,0(r16)
 8008258:	80c00315 	stw	r3,12(r16)
 800825c:	80c00115 	stw	r3,4(r16)
 8008260:	0005883a 	mov	r2,zero
 8008264:	003feb06 	br	8008214 <__alt_data_end+0xfc008214>
 8008268:	01cf7474 	movhi	r7,15825
 800826c:	9009883a 	mov	r4,r18
 8008270:	39ed1844 	addi	r7,r7,-19359
 8008274:	01869834 	movhi	r6,6752
 8008278:	180b883a 	mov	r5,r3
 800827c:	800c9780 	call	800c978 <__subdf3>
 8008280:	018b80f4 	movhi	r6,11779
 8008284:	01cee8f4 	movhi	r7,15267
 8008288:	1009883a 	mov	r4,r2
 800828c:	180b883a 	mov	r5,r3
 8008290:	319c1cc4 	addi	r6,r6,28787
 8008294:	39c66284 	addi	r7,r7,6538
 8008298:	1025883a 	mov	r18,r2
 800829c:	1823883a 	mov	r17,r3
 80082a0:	800c9780 	call	800c978 <__subdf3>
 80082a4:	100d883a 	mov	r6,r2
 80082a8:	180f883a 	mov	r7,r3
 80082ac:	9009883a 	mov	r4,r18
 80082b0:	880b883a 	mov	r5,r17
 80082b4:	80800015 	stw	r2,0(r16)
 80082b8:	80c00115 	stw	r3,4(r16)
 80082bc:	800c9780 	call	800c978 <__subdf3>
 80082c0:	018b80f4 	movhi	r6,11779
 80082c4:	01cee8f4 	movhi	r7,15267
 80082c8:	1009883a 	mov	r4,r2
 80082cc:	180b883a 	mov	r5,r3
 80082d0:	319c1cc4 	addi	r6,r6,28787
 80082d4:	39c66284 	addi	r7,r7,6538
 80082d8:	800c9780 	call	800c978 <__subdf3>
 80082dc:	80800215 	stw	r2,8(r16)
 80082e0:	80c00315 	stw	r3,12(r16)
 80082e4:	00800044 	movi	r2,1
 80082e8:	003fca06 	br	8008214 <__alt_data_end+0xfc008214>
 80082ec:	800a4180 	call	800a418 <fabs>
 80082f0:	019b72b4 	movhi	r6,28106
 80082f4:	01cff934 	movhi	r7,16356
 80082f8:	1009883a 	mov	r4,r2
 80082fc:	180b883a 	mov	r5,r3
 8008300:	31b220c4 	addi	r6,r6,-14205
 8008304:	39d7cc04 	addi	r7,r7,24368
 8008308:	102d883a 	mov	r22,r2
 800830c:	182b883a 	mov	r21,r3
 8008310:	800c2540 	call	800c254 <__muldf3>
 8008314:	000d883a 	mov	r6,zero
 8008318:	01cff834 	movhi	r7,16352
 800831c:	1009883a 	mov	r4,r2
 8008320:	180b883a 	mov	r5,r3
 8008324:	800aea80 	call	800aea8 <__adddf3>
 8008328:	180b883a 	mov	r5,r3
 800832c:	1009883a 	mov	r4,r2
 8008330:	800d2480 	call	800d248 <__fixdfsi>
 8008334:	1009883a 	mov	r4,r2
 8008338:	1025883a 	mov	r18,r2
 800833c:	800d2d00 	call	800d2d0 <__floatsidf>
 8008340:	01cffe74 	movhi	r7,16377
 8008344:	1009883a 	mov	r4,r2
 8008348:	180b883a 	mov	r5,r3
 800834c:	39c87ec4 	addi	r7,r7,8699
 8008350:	01951034 	movhi	r6,21568
 8008354:	1029883a 	mov	r20,r2
 8008358:	1827883a 	mov	r19,r3
 800835c:	800c2540 	call	800c254 <__muldf3>
 8008360:	b009883a 	mov	r4,r22
 8008364:	a80b883a 	mov	r5,r21
 8008368:	100d883a 	mov	r6,r2
 800836c:	180f883a 	mov	r7,r3
 8008370:	800c9780 	call	800c978 <__subdf3>
 8008374:	018698b4 	movhi	r6,6754
 8008378:	01cf7474 	movhi	r7,15825
 800837c:	a009883a 	mov	r4,r20
 8008380:	3198cc44 	addi	r6,r6,25393
 8008384:	39ed1844 	addi	r7,r7,-19359
 8008388:	980b883a 	mov	r5,r19
 800838c:	1039883a 	mov	fp,r2
 8008390:	d8c00815 	stw	r3,32(sp)
 8008394:	800c2540 	call	800c254 <__muldf3>
 8008398:	010007c4 	movi	r4,31
 800839c:	e017883a 	mov	r11,fp
 80083a0:	da800817 	ldw	r10,32(sp)
 80083a4:	102d883a 	mov	r22,r2
 80083a8:	182b883a 	mov	r21,r3
 80083ac:	24802816 	blt	r4,r18,8008450 <__ieee754_rem_pio2+0x47c>
 80083b0:	927fffc4 	addi	r9,r18,-1
 80083b4:	4a53883a 	add	r9,r9,r9
 80083b8:	010200f4 	movhi	r4,2051
 80083bc:	212a3204 	addi	r4,r4,-22328
 80083c0:	4a53883a 	add	r9,r9,r9
 80083c4:	2253883a 	add	r9,r4,r9
 80083c8:	49000017 	ldw	r4,0(r9)
 80083cc:	25c02026 	beq	r4,r23,8008450 <__ieee754_rem_pio2+0x47c>
 80083d0:	e009883a 	mov	r4,fp
 80083d4:	500b883a 	mov	r5,r10
 80083d8:	100d883a 	mov	r6,r2
 80083dc:	180f883a 	mov	r7,r3
 80083e0:	da800b15 	stw	r10,44(sp)
 80083e4:	df000a15 	stw	fp,40(sp)
 80083e8:	800c9780 	call	800c978 <__subdf3>
 80083ec:	da800b17 	ldw	r10,44(sp)
 80083f0:	dac00a17 	ldw	r11,40(sp)
 80083f4:	1019883a 	mov	r12,r2
 80083f8:	1813883a 	mov	r9,r3
 80083fc:	80800015 	stw	r2,0(r16)
 8008400:	80c00115 	stw	r3,4(r16)
 8008404:	600d883a 	mov	r6,r12
 8008408:	480f883a 	mov	r7,r9
 800840c:	5809883a 	mov	r4,r11
 8008410:	500b883a 	mov	r5,r10
 8008414:	da400b15 	stw	r9,44(sp)
 8008418:	db000a15 	stw	r12,40(sp)
 800841c:	800c9780 	call	800c978 <__subdf3>
 8008420:	1009883a 	mov	r4,r2
 8008424:	180b883a 	mov	r5,r3
 8008428:	b00d883a 	mov	r6,r22
 800842c:	a80f883a 	mov	r7,r21
 8008430:	800c9780 	call	800c978 <__subdf3>
 8008434:	80800215 	stw	r2,8(r16)
 8008438:	80c00315 	stw	r3,12(r16)
 800843c:	da400b17 	ldw	r9,44(sp)
 8008440:	db000a17 	ldw	r12,40(sp)
 8008444:	88009f16 	blt	r17,zero,80086c4 <__ieee754_rem_pio2+0x6f0>
 8008448:	9005883a 	mov	r2,r18
 800844c:	003f7106 	br	8008214 <__alt_data_end+0xfc008214>
 8008450:	d9400817 	ldw	r5,32(sp)
 8008454:	e009883a 	mov	r4,fp
 8008458:	100d883a 	mov	r6,r2
 800845c:	180f883a 	mov	r7,r3
 8008460:	da800b15 	stw	r10,44(sp)
 8008464:	dac00a15 	stw	r11,40(sp)
 8008468:	800c9780 	call	800c978 <__subdf3>
 800846c:	1019883a 	mov	r12,r2
 8008470:	1804d53a 	srli	r2,r3,20
 8008474:	b811d53a 	srai	r8,r23,20
 8008478:	1813883a 	mov	r9,r3
 800847c:	1081ffcc 	andi	r2,r2,2047
 8008480:	80c00115 	stw	r3,4(r16)
 8008484:	83000015 	stw	r12,0(r16)
 8008488:	4085c83a 	sub	r2,r8,r2
 800848c:	00c00404 	movi	r3,16
 8008490:	da800b17 	ldw	r10,44(sp)
 8008494:	dac00a17 	ldw	r11,40(sp)
 8008498:	18bfda0e 	bge	r3,r2,8008404 <__alt_data_end+0xfc008404>
 800849c:	01cf7474 	movhi	r7,15825
 80084a0:	39ed1844 	addi	r7,r7,-19359
 80084a4:	a009883a 	mov	r4,r20
 80084a8:	980b883a 	mov	r5,r19
 80084ac:	01869834 	movhi	r6,6752
 80084b0:	da000a15 	stw	r8,40(sp)
 80084b4:	800c2540 	call	800c254 <__muldf3>
 80084b8:	d9400817 	ldw	r5,32(sp)
 80084bc:	e009883a 	mov	r4,fp
 80084c0:	100d883a 	mov	r6,r2
 80084c4:	180f883a 	mov	r7,r3
 80084c8:	102d883a 	mov	r22,r2
 80084cc:	182b883a 	mov	r21,r3
 80084d0:	800c9780 	call	800c978 <__subdf3>
 80084d4:	d9400817 	ldw	r5,32(sp)
 80084d8:	e009883a 	mov	r4,fp
 80084dc:	100d883a 	mov	r6,r2
 80084e0:	180f883a 	mov	r7,r3
 80084e4:	182f883a 	mov	r23,r3
 80084e8:	d8800915 	stw	r2,36(sp)
 80084ec:	800c9780 	call	800c978 <__subdf3>
 80084f0:	b00d883a 	mov	r6,r22
 80084f4:	a80f883a 	mov	r7,r21
 80084f8:	1009883a 	mov	r4,r2
 80084fc:	180b883a 	mov	r5,r3
 8008500:	800c9780 	call	800c978 <__subdf3>
 8008504:	018b80f4 	movhi	r6,11779
 8008508:	01cee8f4 	movhi	r7,15267
 800850c:	a009883a 	mov	r4,r20
 8008510:	980b883a 	mov	r5,r19
 8008514:	319c1cc4 	addi	r6,r6,28787
 8008518:	39c66284 	addi	r7,r7,6538
 800851c:	102d883a 	mov	r22,r2
 8008520:	182b883a 	mov	r21,r3
 8008524:	800c2540 	call	800c254 <__muldf3>
 8008528:	b00d883a 	mov	r6,r22
 800852c:	a80f883a 	mov	r7,r21
 8008530:	1009883a 	mov	r4,r2
 8008534:	180b883a 	mov	r5,r3
 8008538:	800c9780 	call	800c978 <__subdf3>
 800853c:	d9000917 	ldw	r4,36(sp)
 8008540:	b80b883a 	mov	r5,r23
 8008544:	100d883a 	mov	r6,r2
 8008548:	180f883a 	mov	r7,r3
 800854c:	102d883a 	mov	r22,r2
 8008550:	182b883a 	mov	r21,r3
 8008554:	800c9780 	call	800c978 <__subdf3>
 8008558:	1019883a 	mov	r12,r2
 800855c:	1804d53a 	srli	r2,r3,20
 8008560:	da000a17 	ldw	r8,40(sp)
 8008564:	83000015 	stw	r12,0(r16)
 8008568:	1081ffcc 	andi	r2,r2,2047
 800856c:	4091c83a 	sub	r8,r8,r2
 8008570:	80c00115 	stw	r3,4(r16)
 8008574:	00800c44 	movi	r2,49
 8008578:	1813883a 	mov	r9,r3
 800857c:	1200790e 	bge	r2,r8,8008764 <__ieee754_rem_pio2+0x790>
 8008580:	01cee8f4 	movhi	r7,15267
 8008584:	39c66284 	addi	r7,r7,6538
 8008588:	a009883a 	mov	r4,r20
 800858c:	980b883a 	mov	r5,r19
 8008590:	018b8034 	movhi	r6,11776
 8008594:	800c2540 	call	800c254 <__muldf3>
 8008598:	d9000917 	ldw	r4,36(sp)
 800859c:	b80b883a 	mov	r5,r23
 80085a0:	100d883a 	mov	r6,r2
 80085a4:	180f883a 	mov	r7,r3
 80085a8:	102d883a 	mov	r22,r2
 80085ac:	182b883a 	mov	r21,r3
 80085b0:	800c9780 	call	800c978 <__subdf3>
 80085b4:	d9000917 	ldw	r4,36(sp)
 80085b8:	b80b883a 	mov	r5,r23
 80085bc:	100d883a 	mov	r6,r2
 80085c0:	180f883a 	mov	r7,r3
 80085c4:	d8c00b15 	stw	r3,44(sp)
 80085c8:	d8800a15 	stw	r2,40(sp)
 80085cc:	800c9780 	call	800c978 <__subdf3>
 80085d0:	b00d883a 	mov	r6,r22
 80085d4:	a80f883a 	mov	r7,r21
 80085d8:	1009883a 	mov	r4,r2
 80085dc:	180b883a 	mov	r5,r3
 80085e0:	800c9780 	call	800c978 <__subdf3>
 80085e4:	01894834 	movhi	r6,9504
 80085e8:	01ce5f34 	movhi	r7,14716
 80085ec:	a009883a 	mov	r4,r20
 80085f0:	980b883a 	mov	r5,r19
 80085f4:	31927044 	addi	r6,r6,18881
 80085f8:	39e0e684 	addi	r7,r7,-31846
 80085fc:	102d883a 	mov	r22,r2
 8008600:	182b883a 	mov	r21,r3
 8008604:	800c2540 	call	800c254 <__muldf3>
 8008608:	b00d883a 	mov	r6,r22
 800860c:	a80f883a 	mov	r7,r21
 8008610:	1009883a 	mov	r4,r2
 8008614:	180b883a 	mov	r5,r3
 8008618:	800c9780 	call	800c978 <__subdf3>
 800861c:	dac00a17 	ldw	r11,40(sp)
 8008620:	da800b17 	ldw	r10,44(sp)
 8008624:	102d883a 	mov	r22,r2
 8008628:	182b883a 	mov	r21,r3
 800862c:	5809883a 	mov	r4,r11
 8008630:	500b883a 	mov	r5,r10
 8008634:	100d883a 	mov	r6,r2
 8008638:	180f883a 	mov	r7,r3
 800863c:	003f6a06 	br	80083e8 <__alt_data_end+0xfc0083e8>
 8008640:	800aea80 	call	800aea8 <__adddf3>
 8008644:	1025883a 	mov	r18,r2
 8008648:	008ffe74 	movhi	r2,16377
 800864c:	10887ec4 	addi	r2,r2,8699
 8008650:	1823883a 	mov	r17,r3
 8008654:	b8802226 	beq	r23,r2,80086e0 <__ieee754_rem_pio2+0x70c>
 8008658:	018698b4 	movhi	r6,6754
 800865c:	01cf7474 	movhi	r7,15825
 8008660:	3198cc44 	addi	r6,r6,25393
 8008664:	39ed1844 	addi	r7,r7,-19359
 8008668:	9009883a 	mov	r4,r18
 800866c:	180b883a 	mov	r5,r3
 8008670:	800aea80 	call	800aea8 <__adddf3>
 8008674:	100d883a 	mov	r6,r2
 8008678:	180f883a 	mov	r7,r3
 800867c:	9009883a 	mov	r4,r18
 8008680:	880b883a 	mov	r5,r17
 8008684:	80800015 	stw	r2,0(r16)
 8008688:	80c00115 	stw	r3,4(r16)
 800868c:	800c9780 	call	800c978 <__subdf3>
 8008690:	018698b4 	movhi	r6,6754
 8008694:	01cf7474 	movhi	r7,15825
 8008698:	1009883a 	mov	r4,r2
 800869c:	180b883a 	mov	r5,r3
 80086a0:	3198cc44 	addi	r6,r6,25393
 80086a4:	39ed1844 	addi	r7,r7,-19359
 80086a8:	800aea80 	call	800aea8 <__adddf3>
 80086ac:	80800215 	stw	r2,8(r16)
 80086b0:	80c00315 	stw	r3,12(r16)
 80086b4:	00bfffc4 	movi	r2,-1
 80086b8:	003ed606 	br	8008214 <__alt_data_end+0xfc008214>
 80086bc:	01c000c4 	movi	r7,3
 80086c0:	003ebd06 	br	80081b8 <__alt_data_end+0xfc0081b8>
 80086c4:	4a60003c 	xorhi	r9,r9,32768
 80086c8:	18e0003c 	xorhi	r3,r3,32768
 80086cc:	83000015 	stw	r12,0(r16)
 80086d0:	82400115 	stw	r9,4(r16)
 80086d4:	80c00315 	stw	r3,12(r16)
 80086d8:	0485c83a 	sub	r2,zero,r18
 80086dc:	003ecd06 	br	8008214 <__alt_data_end+0xfc008214>
 80086e0:	01cf7474 	movhi	r7,15825
 80086e4:	9009883a 	mov	r4,r18
 80086e8:	39ed1844 	addi	r7,r7,-19359
 80086ec:	01869834 	movhi	r6,6752
 80086f0:	180b883a 	mov	r5,r3
 80086f4:	800aea80 	call	800aea8 <__adddf3>
 80086f8:	018b80f4 	movhi	r6,11779
 80086fc:	01cee8f4 	movhi	r7,15267
 8008700:	1009883a 	mov	r4,r2
 8008704:	180b883a 	mov	r5,r3
 8008708:	319c1cc4 	addi	r6,r6,28787
 800870c:	39c66284 	addi	r7,r7,6538
 8008710:	1025883a 	mov	r18,r2
 8008714:	1823883a 	mov	r17,r3
 8008718:	800aea80 	call	800aea8 <__adddf3>
 800871c:	100d883a 	mov	r6,r2
 8008720:	180f883a 	mov	r7,r3
 8008724:	9009883a 	mov	r4,r18
 8008728:	880b883a 	mov	r5,r17
 800872c:	80800015 	stw	r2,0(r16)
 8008730:	80c00115 	stw	r3,4(r16)
 8008734:	800c9780 	call	800c978 <__subdf3>
 8008738:	018b80f4 	movhi	r6,11779
 800873c:	01cee8f4 	movhi	r7,15267
 8008740:	1009883a 	mov	r4,r2
 8008744:	180b883a 	mov	r5,r3
 8008748:	319c1cc4 	addi	r6,r6,28787
 800874c:	39c66284 	addi	r7,r7,6538
 8008750:	800aea80 	call	800aea8 <__adddf3>
 8008754:	80800215 	stw	r2,8(r16)
 8008758:	80c00315 	stw	r3,12(r16)
 800875c:	00bfffc4 	movi	r2,-1
 8008760:	003eac06 	br	8008214 <__alt_data_end+0xfc008214>
 8008764:	dac00917 	ldw	r11,36(sp)
 8008768:	b815883a 	mov	r10,r23
 800876c:	003f2506 	br	8008404 <__alt_data_end+0xfc008404>

08008770 <__ieee754_sqrt>:
 8008770:	defffd04 	addi	sp,sp,-12
 8008774:	dc400115 	stw	r17,4(sp)
 8008778:	dc000015 	stw	r16,0(sp)
 800877c:	dfc00215 	stw	ra,8(sp)
 8008780:	28dffc2c 	andhi	r3,r5,32752
 8008784:	009ffc34 	movhi	r2,32752
 8008788:	2821883a 	mov	r16,r5
 800878c:	2023883a 	mov	r17,r4
 8008790:	18807c26 	beq	r3,r2,8008984 <__ieee754_sqrt+0x214>
 8008794:	2011883a 	mov	r8,r4
 8008798:	01405f0e 	bge	zero,r5,8008918 <__ieee754_sqrt+0x1a8>
 800879c:	2815d53a 	srai	r10,r5,20
 80087a0:	50006a26 	beq	r10,zero,800894c <__ieee754_sqrt+0x1dc>
 80087a4:	00800434 	movhi	r2,16
 80087a8:	52bf0044 	addi	r10,r10,-1023
 80087ac:	10bfffc4 	addi	r2,r2,-1
 80087b0:	8084703a 	and	r2,r16,r2
 80087b4:	50c0004c 	andi	r3,r10,1
 80087b8:	10800434 	orhi	r2,r2,16
 80087bc:	18004f1e 	bne	r3,zero,80088fc <__ieee754_sqrt+0x18c>
 80087c0:	4006d7fa 	srli	r3,r8,31
 80087c4:	5015d07a 	srai	r10,r10,1
 80087c8:	1085883a 	add	r2,r2,r2
 80087cc:	10c5883a 	add	r2,r2,r3
 80087d0:	01800584 	movi	r6,22
 80087d4:	4207883a 	add	r3,r8,r8
 80087d8:	0013883a 	mov	r9,zero
 80087dc:	000b883a 	mov	r5,zero
 80087e0:	01000834 	movhi	r4,32
 80087e4:	290f883a 	add	r7,r5,r4
 80087e8:	1810d7fa 	srli	r8,r3,31
 80087ec:	31bfffc4 	addi	r6,r6,-1
 80087f0:	11c00316 	blt	r2,r7,8008800 <__ieee754_sqrt+0x90>
 80087f4:	11c5c83a 	sub	r2,r2,r7
 80087f8:	390b883a 	add	r5,r7,r4
 80087fc:	4913883a 	add	r9,r9,r4
 8008800:	1085883a 	add	r2,r2,r2
 8008804:	1205883a 	add	r2,r2,r8
 8008808:	18c7883a 	add	r3,r3,r3
 800880c:	2008d07a 	srli	r4,r4,1
 8008810:	303ff41e 	bne	r6,zero,80087e4 <__alt_data_end+0xfc0087e4>
 8008814:	01200034 	movhi	r4,32768
 8008818:	01c00804 	movi	r7,32
 800881c:	0011883a 	mov	r8,zero
 8008820:	0017883a 	mov	r11,zero
 8008824:	201b883a 	mov	r13,r4
 8008828:	00000806 	br	800884c <__ieee754_sqrt+0xdc>
 800882c:	11401726 	beq	r2,r5,800888c <__ieee754_sqrt+0x11c>
 8008830:	180cd7fa 	srli	r6,r3,31
 8008834:	1085883a 	add	r2,r2,r2
 8008838:	39ffffc4 	addi	r7,r7,-1
 800883c:	1185883a 	add	r2,r2,r6
 8008840:	18c7883a 	add	r3,r3,r3
 8008844:	2008d07a 	srli	r4,r4,1
 8008848:	38001726 	beq	r7,zero,80088a8 <__ieee754_sqrt+0x138>
 800884c:	590d883a 	add	r6,r11,r4
 8008850:	28bff60e 	bge	r5,r2,800882c <__alt_data_end+0xfc00882c>
 8008854:	3320002c 	andhi	r12,r6,32768
 8008858:	3117883a 	add	r11,r6,r4
 800885c:	63400826 	beq	r12,r13,8008880 <__ieee754_sqrt+0x110>
 8008860:	2819883a 	mov	r12,r5
 8008864:	1145c83a 	sub	r2,r2,r5
 8008868:	1980012e 	bgeu	r3,r6,8008870 <__ieee754_sqrt+0x100>
 800886c:	10bfffc4 	addi	r2,r2,-1
 8008870:	1987c83a 	sub	r3,r3,r6
 8008874:	4111883a 	add	r8,r8,r4
 8008878:	600b883a 	mov	r5,r12
 800887c:	003fec06 	br	8008830 <__alt_data_end+0xfc008830>
 8008880:	583ff716 	blt	r11,zero,8008860 <__alt_data_end+0xfc008860>
 8008884:	2b000044 	addi	r12,r5,1
 8008888:	003ff606 	br	8008864 <__alt_data_end+0xfc008864>
 800888c:	19801936 	bltu	r3,r6,80088f4 <__ieee754_sqrt+0x184>
 8008890:	3320002c 	andhi	r12,r6,32768
 8008894:	3117883a 	add	r11,r6,r4
 8008898:	63404626 	beq	r12,r13,80089b4 <__ieee754_sqrt+0x244>
 800889c:	1019883a 	mov	r12,r2
 80088a0:	0005883a 	mov	r2,zero
 80088a4:	003ff206 	br	8008870 <__alt_data_end+0xfc008870>
 80088a8:	10c4b03a 	or	r2,r2,r3
 80088ac:	10000426 	beq	r2,zero,80088c0 <__ieee754_sqrt+0x150>
 80088b0:	00bfffc4 	movi	r2,-1
 80088b4:	40804326 	beq	r8,r2,80089c4 <__ieee754_sqrt+0x254>
 80088b8:	4080004c 	andi	r2,r8,1
 80088bc:	1211883a 	add	r8,r2,r8
 80088c0:	4004d07a 	srli	r2,r8,1
 80088c4:	4807d07a 	srai	r3,r9,1
 80088c8:	010ff834 	movhi	r4,16352
 80088cc:	4a40004c 	andi	r9,r9,1
 80088d0:	1909883a 	add	r4,r3,r4
 80088d4:	48000e1e 	bne	r9,zero,8008910 <__ieee754_sqrt+0x1a0>
 80088d8:	5006953a 	slli	r3,r10,20
 80088dc:	1907883a 	add	r3,r3,r4
 80088e0:	dfc00217 	ldw	ra,8(sp)
 80088e4:	dc400117 	ldw	r17,4(sp)
 80088e8:	dc000017 	ldw	r16,0(sp)
 80088ec:	dec00304 	addi	sp,sp,12
 80088f0:	f800283a 	ret
 80088f4:	100b883a 	mov	r5,r2
 80088f8:	003fcd06 	br	8008830 <__alt_data_end+0xfc008830>
 80088fc:	4006d7fa 	srli	r3,r8,31
 8008900:	1085883a 	add	r2,r2,r2
 8008904:	4211883a 	add	r8,r8,r8
 8008908:	10c5883a 	add	r2,r2,r3
 800890c:	003fac06 	br	80087c0 <__alt_data_end+0xfc0087c0>
 8008910:	10a00034 	orhi	r2,r2,32768
 8008914:	003ff006 	br	80088d8 <__alt_data_end+0xfc0088d8>
 8008918:	00a00034 	movhi	r2,32768
 800891c:	10bfffc4 	addi	r2,r2,-1
 8008920:	2884703a 	and	r2,r5,r2
 8008924:	1104b03a 	or	r2,r2,r4
 8008928:	10001f26 	beq	r2,zero,80089a8 <__ieee754_sqrt+0x238>
 800892c:	28002c1e 	bne	r5,zero,80089e0 <__ieee754_sqrt+0x270>
 8008930:	0015883a 	mov	r10,zero
 8008934:	4020d2fa 	srli	r16,r8,11
 8008938:	52bffac4 	addi	r10,r10,-21
 800893c:	4010957a 	slli	r8,r8,21
 8008940:	803ffc26 	beq	r16,zero,8008934 <__alt_data_end+0xfc008934>
 8008944:	8080042c 	andhi	r2,r16,16
 8008948:	1000211e 	bne	r2,zero,80089d0 <__ieee754_sqrt+0x260>
 800894c:	0005883a 	mov	r2,zero
 8008950:	8421883a 	add	r16,r16,r16
 8008954:	80c0042c 	andhi	r3,r16,16
 8008958:	10800044 	addi	r2,r2,1
 800895c:	183ffc26 	beq	r3,zero,8008950 <__alt_data_end+0xfc008950>
 8008960:	01000044 	movi	r4,1
 8008964:	00c00804 	movi	r3,32
 8008968:	2089c83a 	sub	r4,r4,r2
 800896c:	1887c83a 	sub	r3,r3,r2
 8008970:	40c6d83a 	srl	r3,r8,r3
 8008974:	5115883a 	add	r10,r10,r4
 8008978:	4090983a 	sll	r8,r8,r2
 800897c:	80e0b03a 	or	r16,r16,r3
 8008980:	003f8806 	br	80087a4 <__alt_data_end+0xfc0087a4>
 8008984:	200d883a 	mov	r6,r4
 8008988:	280f883a 	mov	r7,r5
 800898c:	800c2540 	call	800c254 <__muldf3>
 8008990:	1009883a 	mov	r4,r2
 8008994:	180b883a 	mov	r5,r3
 8008998:	880d883a 	mov	r6,r17
 800899c:	800f883a 	mov	r7,r16
 80089a0:	800aea80 	call	800aea8 <__adddf3>
 80089a4:	003fce06 	br	80088e0 <__alt_data_end+0xfc0088e0>
 80089a8:	2005883a 	mov	r2,r4
 80089ac:	2807883a 	mov	r3,r5
 80089b0:	003fcb06 	br	80088e0 <__alt_data_end+0xfc0088e0>
 80089b4:	583fb30e 	bge	r11,zero,8008884 <__alt_data_end+0xfc008884>
 80089b8:	0005883a 	mov	r2,zero
 80089bc:	2819883a 	mov	r12,r5
 80089c0:	003fab06 	br	8008870 <__alt_data_end+0xfc008870>
 80089c4:	4a400044 	addi	r9,r9,1
 80089c8:	0005883a 	mov	r2,zero
 80089cc:	003fbd06 	br	80088c4 <__alt_data_end+0xfc0088c4>
 80089d0:	00c00804 	movi	r3,32
 80089d4:	01000044 	movi	r4,1
 80089d8:	0005883a 	mov	r2,zero
 80089dc:	003fe406 	br	8008970 <__alt_data_end+0xfc008970>
 80089e0:	200d883a 	mov	r6,r4
 80089e4:	280f883a 	mov	r7,r5
 80089e8:	800c9780 	call	800c978 <__subdf3>
 80089ec:	1009883a 	mov	r4,r2
 80089f0:	180b883a 	mov	r5,r3
 80089f4:	100d883a 	mov	r6,r2
 80089f8:	180f883a 	mov	r7,r3
 80089fc:	800b7440 	call	800b744 <__divdf3>
 8008a00:	003fb706 	br	80088e0 <__alt_data_end+0xfc0088e0>

08008a04 <__kernel_cos>:
 8008a04:	defff304 	addi	sp,sp,-52
 8008a08:	dc000315 	stw	r16,12(sp)
 8008a0c:	04200034 	movhi	r16,32768
 8008a10:	843fffc4 	addi	r16,r16,-1
 8008a14:	008f9034 	movhi	r2,15936
 8008a18:	df000b15 	stw	fp,44(sp)
 8008a1c:	ddc00a15 	stw	r23,40(sp)
 8008a20:	dd800915 	stw	r22,36(sp)
 8008a24:	dcc00615 	stw	r19,24(sp)
 8008a28:	dfc00c15 	stw	ra,48(sp)
 8008a2c:	dd400815 	stw	r21,32(sp)
 8008a30:	dd000715 	stw	r20,28(sp)
 8008a34:	dc800515 	stw	r18,20(sp)
 8008a38:	dc400415 	stw	r17,16(sp)
 8008a3c:	2c20703a 	and	r16,r5,r16
 8008a40:	10bfffc4 	addi	r2,r2,-1
 8008a44:	2827883a 	mov	r19,r5
 8008a48:	202d883a 	mov	r22,r4
 8008a4c:	302f883a 	mov	r23,r6
 8008a50:	3839883a 	mov	fp,r7
 8008a54:	14007516 	blt	r2,r16,8008c2c <__kernel_cos+0x228>
 8008a58:	800d2480 	call	800d248 <__fixdfsi>
 8008a5c:	10010f26 	beq	r2,zero,8008e9c <__kernel_cos+0x498>
 8008a60:	b00d883a 	mov	r6,r22
 8008a64:	980f883a 	mov	r7,r19
 8008a68:	b009883a 	mov	r4,r22
 8008a6c:	980b883a 	mov	r5,r19
 8008a70:	800c2540 	call	800c254 <__muldf3>
 8008a74:	01afa234 	movhi	r6,48776
 8008a78:	01ef6a74 	movhi	r7,48553
 8008a7c:	1009883a 	mov	r4,r2
 8008a80:	180b883a 	mov	r5,r3
 8008a84:	318e3504 	addi	r6,r6,14548
 8008a88:	39feba44 	addi	r7,r7,-1303
 8008a8c:	102b883a 	mov	r21,r2
 8008a90:	1829883a 	mov	r20,r3
 8008a94:	800c2540 	call	800c254 <__muldf3>
 8008a98:	01af6d74 	movhi	r6,48565
 8008a9c:	01cf88b4 	movhi	r7,15906
 8008aa0:	1009883a 	mov	r4,r2
 8008aa4:	180b883a 	mov	r5,r3
 8008aa8:	31ac7104 	addi	r6,r6,-20028
 8008aac:	39fba784 	addi	r7,r7,-4450
 8008ab0:	800aea80 	call	800aea8 <__adddf3>
 8008ab4:	1009883a 	mov	r4,r2
 8008ab8:	180b883a 	mov	r5,r3
 8008abc:	a80d883a 	mov	r6,r21
 8008ac0:	a00f883a 	mov	r7,r20
 8008ac4:	800c2540 	call	800c254 <__muldf3>
 8008ac8:	01a02734 	movhi	r6,32924
 8008acc:	01cfa4b4 	movhi	r7,16018
 8008ad0:	1009883a 	mov	r4,r2
 8008ad4:	180b883a 	mov	r5,r3
 8008ad8:	3194ab44 	addi	r6,r6,21165
 8008adc:	39df93c4 	addi	r7,r7,32335
 8008ae0:	800c9780 	call	800c978 <__subdf3>
 8008ae4:	1009883a 	mov	r4,r2
 8008ae8:	180b883a 	mov	r5,r3
 8008aec:	a80d883a 	mov	r6,r21
 8008af0:	a00f883a 	mov	r7,r20
 8008af4:	800c2540 	call	800c254 <__muldf3>
 8008af8:	018672f4 	movhi	r6,6603
 8008afc:	01cfbeb4 	movhi	r7,16122
 8008b00:	1009883a 	mov	r4,r2
 8008b04:	180b883a 	mov	r5,r3
 8008b08:	31856404 	addi	r6,r6,5520
 8008b0c:	39c06804 	addi	r7,r7,416
 8008b10:	800aea80 	call	800aea8 <__adddf3>
 8008b14:	1009883a 	mov	r4,r2
 8008b18:	180b883a 	mov	r5,r3
 8008b1c:	a80d883a 	mov	r6,r21
 8008b20:	a00f883a 	mov	r7,r20
 8008b24:	800c2540 	call	800c254 <__muldf3>
 8008b28:	0185b074 	movhi	r6,5825
 8008b2c:	01cfd5f4 	movhi	r7,16215
 8008b30:	1009883a 	mov	r4,r2
 8008b34:	180b883a 	mov	r5,r3
 8008b38:	31945dc4 	addi	r6,r6,20855
 8008b3c:	39f05b04 	addi	r7,r7,-16020
 8008b40:	800c9780 	call	800c978 <__subdf3>
 8008b44:	1009883a 	mov	r4,r2
 8008b48:	180b883a 	mov	r5,r3
 8008b4c:	a80d883a 	mov	r6,r21
 8008b50:	a00f883a 	mov	r7,r20
 8008b54:	800c2540 	call	800c254 <__muldf3>
 8008b58:	01955574 	movhi	r6,21845
 8008b5c:	01cfe974 	movhi	r7,16293
 8008b60:	1009883a 	mov	r4,r2
 8008b64:	180b883a 	mov	r5,r3
 8008b68:	31955304 	addi	r6,r6,21836
 8008b6c:	39d55544 	addi	r7,r7,21845
 8008b70:	800aea80 	call	800aea8 <__adddf3>
 8008b74:	1009883a 	mov	r4,r2
 8008b78:	180b883a 	mov	r5,r3
 8008b7c:	a80d883a 	mov	r6,r21
 8008b80:	a00f883a 	mov	r7,r20
 8008b84:	800c2540 	call	800c254 <__muldf3>
 8008b88:	1017883a 	mov	r11,r2
 8008b8c:	1815883a 	mov	r10,r3
 8008b90:	a809883a 	mov	r4,r21
 8008b94:	a00b883a 	mov	r5,r20
 8008b98:	000d883a 	mov	r6,zero
 8008b9c:	01cff834 	movhi	r7,16352
 8008ba0:	da800215 	stw	r10,8(sp)
 8008ba4:	dac00115 	stw	r11,4(sp)
 8008ba8:	800c2540 	call	800c254 <__muldf3>
 8008bac:	dac00117 	ldw	r11,4(sp)
 8008bb0:	da800217 	ldw	r10,8(sp)
 8008bb4:	a809883a 	mov	r4,r21
 8008bb8:	580d883a 	mov	r6,r11
 8008bbc:	500f883a 	mov	r7,r10
 8008bc0:	a00b883a 	mov	r5,r20
 8008bc4:	1023883a 	mov	r17,r2
 8008bc8:	1821883a 	mov	r16,r3
 8008bcc:	800c2540 	call	800c254 <__muldf3>
 8008bd0:	b009883a 	mov	r4,r22
 8008bd4:	980b883a 	mov	r5,r19
 8008bd8:	b80d883a 	mov	r6,r23
 8008bdc:	e00f883a 	mov	r7,fp
 8008be0:	1029883a 	mov	r20,r2
 8008be4:	1825883a 	mov	r18,r3
 8008be8:	800c2540 	call	800c254 <__muldf3>
 8008bec:	a009883a 	mov	r4,r20
 8008bf0:	900b883a 	mov	r5,r18
 8008bf4:	100d883a 	mov	r6,r2
 8008bf8:	180f883a 	mov	r7,r3
 8008bfc:	800c9780 	call	800c978 <__subdf3>
 8008c00:	8809883a 	mov	r4,r17
 8008c04:	800b883a 	mov	r5,r16
 8008c08:	100d883a 	mov	r6,r2
 8008c0c:	180f883a 	mov	r7,r3
 8008c10:	800c9780 	call	800c978 <__subdf3>
 8008c14:	0009883a 	mov	r4,zero
 8008c18:	014ffc34 	movhi	r5,16368
 8008c1c:	100d883a 	mov	r6,r2
 8008c20:	180f883a 	mov	r7,r3
 8008c24:	800c9780 	call	800c978 <__subdf3>
 8008c28:	00008b06 	br	8008e58 <__kernel_cos+0x454>
 8008c2c:	200d883a 	mov	r6,r4
 8008c30:	280f883a 	mov	r7,r5
 8008c34:	800c2540 	call	800c254 <__muldf3>
 8008c38:	01afa234 	movhi	r6,48776
 8008c3c:	01ef6a74 	movhi	r7,48553
 8008c40:	318e3504 	addi	r6,r6,14548
 8008c44:	39feba44 	addi	r7,r7,-1303
 8008c48:	1009883a 	mov	r4,r2
 8008c4c:	180b883a 	mov	r5,r3
 8008c50:	1025883a 	mov	r18,r2
 8008c54:	1823883a 	mov	r17,r3
 8008c58:	800c2540 	call	800c254 <__muldf3>
 8008c5c:	01af6d74 	movhi	r6,48565
 8008c60:	01cf88b4 	movhi	r7,15906
 8008c64:	1009883a 	mov	r4,r2
 8008c68:	180b883a 	mov	r5,r3
 8008c6c:	31ac7104 	addi	r6,r6,-20028
 8008c70:	39fba784 	addi	r7,r7,-4450
 8008c74:	800aea80 	call	800aea8 <__adddf3>
 8008c78:	1009883a 	mov	r4,r2
 8008c7c:	180b883a 	mov	r5,r3
 8008c80:	900d883a 	mov	r6,r18
 8008c84:	880f883a 	mov	r7,r17
 8008c88:	800c2540 	call	800c254 <__muldf3>
 8008c8c:	01a02734 	movhi	r6,32924
 8008c90:	01cfa4b4 	movhi	r7,16018
 8008c94:	1009883a 	mov	r4,r2
 8008c98:	180b883a 	mov	r5,r3
 8008c9c:	3194ab44 	addi	r6,r6,21165
 8008ca0:	39df93c4 	addi	r7,r7,32335
 8008ca4:	800c9780 	call	800c978 <__subdf3>
 8008ca8:	1009883a 	mov	r4,r2
 8008cac:	180b883a 	mov	r5,r3
 8008cb0:	900d883a 	mov	r6,r18
 8008cb4:	880f883a 	mov	r7,r17
 8008cb8:	800c2540 	call	800c254 <__muldf3>
 8008cbc:	018672f4 	movhi	r6,6603
 8008cc0:	01cfbeb4 	movhi	r7,16122
 8008cc4:	1009883a 	mov	r4,r2
 8008cc8:	180b883a 	mov	r5,r3
 8008ccc:	31856404 	addi	r6,r6,5520
 8008cd0:	39c06804 	addi	r7,r7,416
 8008cd4:	800aea80 	call	800aea8 <__adddf3>
 8008cd8:	1009883a 	mov	r4,r2
 8008cdc:	180b883a 	mov	r5,r3
 8008ce0:	900d883a 	mov	r6,r18
 8008ce4:	880f883a 	mov	r7,r17
 8008ce8:	800c2540 	call	800c254 <__muldf3>
 8008cec:	0185b074 	movhi	r6,5825
 8008cf0:	01cfd5f4 	movhi	r7,16215
 8008cf4:	1009883a 	mov	r4,r2
 8008cf8:	180b883a 	mov	r5,r3
 8008cfc:	31945dc4 	addi	r6,r6,20855
 8008d00:	39f05b04 	addi	r7,r7,-16020
 8008d04:	800c9780 	call	800c978 <__subdf3>
 8008d08:	1009883a 	mov	r4,r2
 8008d0c:	180b883a 	mov	r5,r3
 8008d10:	900d883a 	mov	r6,r18
 8008d14:	880f883a 	mov	r7,r17
 8008d18:	800c2540 	call	800c254 <__muldf3>
 8008d1c:	01955574 	movhi	r6,21845
 8008d20:	01cfe974 	movhi	r7,16293
 8008d24:	1009883a 	mov	r4,r2
 8008d28:	180b883a 	mov	r5,r3
 8008d2c:	31955304 	addi	r6,r6,21836
 8008d30:	39d55544 	addi	r7,r7,21845
 8008d34:	800aea80 	call	800aea8 <__adddf3>
 8008d38:	1009883a 	mov	r4,r2
 8008d3c:	180b883a 	mov	r5,r3
 8008d40:	900d883a 	mov	r6,r18
 8008d44:	880f883a 	mov	r7,r17
 8008d48:	800c2540 	call	800c254 <__muldf3>
 8008d4c:	1013883a 	mov	r9,r2
 8008d50:	1017883a 	mov	r11,r2
 8008d54:	008ff4f4 	movhi	r2,16339
 8008d58:	108ccc84 	addi	r2,r2,13106
 8008d5c:	902b883a 	mov	r21,r18
 8008d60:	8829883a 	mov	r20,r17
 8008d64:	1811883a 	mov	r8,r3
 8008d68:	1815883a 	mov	r10,r3
 8008d6c:	143f880e 	bge	r2,r16,8008b90 <__alt_data_end+0xfc008b90>
 8008d70:	008ffa74 	movhi	r2,16361
 8008d74:	14004416 	blt	r2,r16,8008e88 <__kernel_cos+0x484>
 8008d78:	00bff834 	movhi	r2,65504
 8008d7c:	80a1883a 	add	r16,r16,r2
 8008d80:	0009883a 	mov	r4,zero
 8008d84:	014ffc34 	movhi	r5,16368
 8008d88:	000d883a 	mov	r6,zero
 8008d8c:	800f883a 	mov	r7,r16
 8008d90:	da400115 	stw	r9,4(sp)
 8008d94:	d8c00215 	stw	r3,8(sp)
 8008d98:	800c9780 	call	800c978 <__subdf3>
 8008d9c:	da000217 	ldw	r8,8(sp)
 8008da0:	da400117 	ldw	r9,4(sp)
 8008da4:	102b883a 	mov	r21,r2
 8008da8:	d8c00015 	stw	r3,0(sp)
 8008dac:	9009883a 	mov	r4,r18
 8008db0:	880b883a 	mov	r5,r17
 8008db4:	000d883a 	mov	r6,zero
 8008db8:	01cff834 	movhi	r7,16352
 8008dbc:	da000215 	stw	r8,8(sp)
 8008dc0:	da400115 	stw	r9,4(sp)
 8008dc4:	800c2540 	call	800c254 <__muldf3>
 8008dc8:	800f883a 	mov	r7,r16
 8008dcc:	1009883a 	mov	r4,r2
 8008dd0:	180b883a 	mov	r5,r3
 8008dd4:	000d883a 	mov	r6,zero
 8008dd8:	800c9780 	call	800c978 <__subdf3>
 8008ddc:	da400117 	ldw	r9,4(sp)
 8008de0:	da000217 	ldw	r8,8(sp)
 8008de4:	9009883a 	mov	r4,r18
 8008de8:	480d883a 	mov	r6,r9
 8008dec:	400f883a 	mov	r7,r8
 8008df0:	880b883a 	mov	r5,r17
 8008df4:	1029883a 	mov	r20,r2
 8008df8:	1821883a 	mov	r16,r3
 8008dfc:	800c2540 	call	800c254 <__muldf3>
 8008e00:	b009883a 	mov	r4,r22
 8008e04:	980b883a 	mov	r5,r19
 8008e08:	b80d883a 	mov	r6,r23
 8008e0c:	e00f883a 	mov	r7,fp
 8008e10:	1025883a 	mov	r18,r2
 8008e14:	1823883a 	mov	r17,r3
 8008e18:	800c2540 	call	800c254 <__muldf3>
 8008e1c:	9009883a 	mov	r4,r18
 8008e20:	880b883a 	mov	r5,r17
 8008e24:	100d883a 	mov	r6,r2
 8008e28:	180f883a 	mov	r7,r3
 8008e2c:	800c9780 	call	800c978 <__subdf3>
 8008e30:	a009883a 	mov	r4,r20
 8008e34:	800b883a 	mov	r5,r16
 8008e38:	100d883a 	mov	r6,r2
 8008e3c:	180f883a 	mov	r7,r3
 8008e40:	800c9780 	call	800c978 <__subdf3>
 8008e44:	d9400017 	ldw	r5,0(sp)
 8008e48:	a809883a 	mov	r4,r21
 8008e4c:	100d883a 	mov	r6,r2
 8008e50:	180f883a 	mov	r7,r3
 8008e54:	800c9780 	call	800c978 <__subdf3>
 8008e58:	dfc00c17 	ldw	ra,48(sp)
 8008e5c:	df000b17 	ldw	fp,44(sp)
 8008e60:	ddc00a17 	ldw	r23,40(sp)
 8008e64:	dd800917 	ldw	r22,36(sp)
 8008e68:	dd400817 	ldw	r21,32(sp)
 8008e6c:	dd000717 	ldw	r20,28(sp)
 8008e70:	dcc00617 	ldw	r19,24(sp)
 8008e74:	dc800517 	ldw	r18,20(sp)
 8008e78:	dc400417 	ldw	r17,16(sp)
 8008e7c:	dc000317 	ldw	r16,12(sp)
 8008e80:	dec00d04 	addi	sp,sp,52
 8008e84:	f800283a 	ret
 8008e88:	008ff9f4 	movhi	r2,16359
 8008e8c:	002b883a 	mov	r21,zero
 8008e90:	d8800015 	stw	r2,0(sp)
 8008e94:	040ff4b4 	movhi	r16,16338
 8008e98:	003fc406 	br	8008dac <__alt_data_end+0xfc008dac>
 8008e9c:	0005883a 	mov	r2,zero
 8008ea0:	00cffc34 	movhi	r3,16368
 8008ea4:	003fec06 	br	8008e58 <__alt_data_end+0xfc008e58>

08008ea8 <__kernel_rem_pio2>:
 8008ea8:	deff5b04 	addi	sp,sp,-660
 8008eac:	da00a517 	ldw	r8,660(sp)
 8008eb0:	00c200f4 	movhi	r3,2051
 8008eb4:	18eaa404 	addi	r3,r3,-21872
 8008eb8:	4205883a 	add	r2,r8,r8
 8008ebc:	1085883a 	add	r2,r2,r2
 8008ec0:	1885883a 	add	r2,r3,r2
 8008ec4:	d9008d15 	stw	r4,564(sp)
 8008ec8:	d9409015 	stw	r5,576(sp)
 8008ecc:	313fff44 	addi	r4,r6,-3
 8008ed0:	01400604 	movi	r5,24
 8008ed4:	dd80a115 	stw	r22,644(sp)
 8008ed8:	dc009b15 	stw	r16,620(sp)
 8008edc:	dfc0a415 	stw	ra,656(sp)
 8008ee0:	df00a315 	stw	fp,652(sp)
 8008ee4:	ddc0a215 	stw	r23,648(sp)
 8008ee8:	dd40a015 	stw	r21,640(sp)
 8008eec:	dd009f15 	stw	r20,636(sp)
 8008ef0:	dcc09e15 	stw	r19,632(sp)
 8008ef4:	dc809d15 	stw	r18,628(sp)
 8008ef8:	dc409c15 	stw	r17,624(sp)
 8008efc:	3021883a 	mov	r16,r6
 8008f00:	d9c09315 	stw	r7,588(sp)
 8008f04:	15800017 	ldw	r22,0(r2)
 8008f08:	800a9080 	call	800a908 <__divsi3>
 8008f0c:	da009317 	ldw	r8,588(sp)
 8008f10:	d8809215 	stw	r2,584(sp)
 8008f14:	423fffc4 	addi	r8,r8,-1
 8008f18:	da008c15 	stw	r8,560(sp)
 8008f1c:	10032a16 	blt	r2,zero,8009bc8 <__kernel_rem_pio2+0xd20>
 8008f20:	da009217 	ldw	r8,584(sp)
 8008f24:	d9009217 	ldw	r4,584(sp)
 8008f28:	0206303a 	nor	r3,zero,r8
 8008f2c:	18c00624 	muli	r3,r3,24
 8008f30:	da008c17 	ldw	r8,560(sp)
 8008f34:	1c07883a 	add	r3,r3,r16
 8008f38:	4585883a 	add	r2,r8,r22
 8008f3c:	d8c08f15 	stw	r3,572(sp)
 8008f40:	2223c83a 	sub	r17,r4,r8
 8008f44:	10001016 	blt	r2,zero,8008f88 <__kernel_rem_pio2+0xe0>
 8008f48:	da00a617 	ldw	r8,664(sp)
 8008f4c:	8c65883a 	add	r18,r17,r17
 8008f50:	94a5883a 	add	r18,r18,r18
 8008f54:	8885883a 	add	r2,r17,r2
 8008f58:	dcc05004 	addi	r19,sp,320
 8008f5c:	44a5883a 	add	r18,r8,r18
 8008f60:	14000044 	addi	r16,r2,1
 8008f64:	88014516 	blt	r17,zero,800947c <__kernel_rem_pio2+0x5d4>
 8008f68:	91000017 	ldw	r4,0(r18)
 8008f6c:	800d2d00 	call	800d2d0 <__floatsidf>
 8008f70:	98800015 	stw	r2,0(r19)
 8008f74:	98c00115 	stw	r3,4(r19)
 8008f78:	8c400044 	addi	r17,r17,1
 8008f7c:	9cc00204 	addi	r19,r19,8
 8008f80:	94800104 	addi	r18,r18,4
 8008f84:	8c3ff71e 	bne	r17,r16,8008f64 <__alt_data_end+0xfc008f64>
 8008f88:	b0002116 	blt	r22,zero,8009010 <__kernel_rem_pio2+0x168>
 8008f8c:	da009317 	ldw	r8,588(sp)
 8008f90:	b02490fa 	slli	r18,r22,3
 8008f94:	d8805004 	addi	r2,sp,320
 8008f98:	402e90fa 	slli	r23,r8,3
 8008f9c:	d823883a 	mov	r17,sp
 8008fa0:	dc004e04 	addi	r16,sp,312
 8008fa4:	14b9883a 	add	fp,r2,r18
 8008fa8:	da008c17 	ldw	r8,560(sp)
 8008fac:	40015816 	blt	r8,zero,8009510 <__kernel_rem_pio2+0x668>
 8008fb0:	dcc08d17 	ldw	r19,564(sp)
 8008fb4:	85e5883a 	add	r18,r16,r23
 8008fb8:	002b883a 	mov	r21,zero
 8008fbc:	0029883a 	mov	r20,zero
 8008fc0:	99000017 	ldw	r4,0(r19)
 8008fc4:	99400117 	ldw	r5,4(r19)
 8008fc8:	91800017 	ldw	r6,0(r18)
 8008fcc:	91c00117 	ldw	r7,4(r18)
 8008fd0:	94bffe04 	addi	r18,r18,-8
 8008fd4:	9cc00204 	addi	r19,r19,8
 8008fd8:	800c2540 	call	800c254 <__muldf3>
 8008fdc:	a809883a 	mov	r4,r21
 8008fe0:	a00b883a 	mov	r5,r20
 8008fe4:	100d883a 	mov	r6,r2
 8008fe8:	180f883a 	mov	r7,r3
 8008fec:	800aea80 	call	800aea8 <__adddf3>
 8008ff0:	102b883a 	mov	r21,r2
 8008ff4:	1829883a 	mov	r20,r3
 8008ff8:	84bff11e 	bne	r16,r18,8008fc0 <__alt_data_end+0xfc008fc0>
 8008ffc:	8d400015 	stw	r21,0(r17)
 8009000:	8d000115 	stw	r20,4(r17)
 8009004:	84000204 	addi	r16,r16,8
 8009008:	8c400204 	addi	r17,r17,8
 800900c:	873fe61e 	bne	r16,fp,8008fa8 <__alt_data_end+0xfc008fa8>
 8009010:	da009317 	ldw	r8,588(sp)
 8009014:	b00690ba 	slli	r3,r22,2
 8009018:	b0bfffc4 	addi	r2,r22,-1
 800901c:	423ffe24 	muli	r8,r8,-8
 8009020:	193fff04 	addi	r4,r3,-4
 8009024:	1085883a 	add	r2,r2,r2
 8009028:	da008e15 	stw	r8,568(sp)
 800902c:	18fffe04 	addi	r3,r3,-8
 8009030:	da007804 	addi	r8,sp,480
 8009034:	40d1883a 	add	r8,r8,r3
 8009038:	1085883a 	add	r2,r2,r2
 800903c:	d885883a 	add	r2,sp,r2
 8009040:	da009515 	stw	r8,596(sp)
 8009044:	da007804 	addi	r8,sp,480
 8009048:	4111883a 	add	r8,r8,r4
 800904c:	10807804 	addi	r2,r2,480
 8009050:	da009615 	stw	r8,600(sp)
 8009054:	b021883a 	mov	r16,r22
 8009058:	d8809715 	stw	r2,604(sp)
 800905c:	dd809415 	stw	r22,592(sp)
 8009060:	800490fa 	slli	r2,r16,3
 8009064:	d885883a 	add	r2,sp,r2
 8009068:	15c00017 	ldw	r23,0(r2)
 800906c:	15000117 	ldw	r20,4(r2)
 8009070:	04002d0e 	bge	zero,r16,8009128 <__kernel_rem_pio2+0x280>
 8009074:	00880034 	movhi	r2,8192
 8009078:	10bfffc4 	addi	r2,r2,-1
 800907c:	80a5883a 	add	r18,r16,r2
 8009080:	902490fa 	slli	r18,r18,3
 8009084:	8423883a 	add	r17,r16,r16
 8009088:	8c63883a 	add	r17,r17,r17
 800908c:	dcc07804 	addi	r19,sp,480
 8009090:	dca5883a 	add	r18,sp,r18
 8009094:	9c63883a 	add	r17,r19,r17
 8009098:	000d883a 	mov	r6,zero
 800909c:	01cf9c34 	movhi	r7,15984
 80090a0:	b809883a 	mov	r4,r23
 80090a4:	a00b883a 	mov	r5,r20
 80090a8:	800c2540 	call	800c254 <__muldf3>
 80090ac:	180b883a 	mov	r5,r3
 80090b0:	1009883a 	mov	r4,r2
 80090b4:	800d2480 	call	800d248 <__fixdfsi>
 80090b8:	1009883a 	mov	r4,r2
 80090bc:	800d2d00 	call	800d2d0 <__floatsidf>
 80090c0:	1009883a 	mov	r4,r2
 80090c4:	180b883a 	mov	r5,r3
 80090c8:	000d883a 	mov	r6,zero
 80090cc:	01d05c34 	movhi	r7,16752
 80090d0:	102d883a 	mov	r22,r2
 80090d4:	182b883a 	mov	r21,r3
 80090d8:	800c2540 	call	800c254 <__muldf3>
 80090dc:	b809883a 	mov	r4,r23
 80090e0:	a00b883a 	mov	r5,r20
 80090e4:	100d883a 	mov	r6,r2
 80090e8:	180f883a 	mov	r7,r3
 80090ec:	800c9780 	call	800c978 <__subdf3>
 80090f0:	180b883a 	mov	r5,r3
 80090f4:	1009883a 	mov	r4,r2
 80090f8:	800d2480 	call	800d248 <__fixdfsi>
 80090fc:	91800017 	ldw	r6,0(r18)
 8009100:	91c00117 	ldw	r7,4(r18)
 8009104:	98800015 	stw	r2,0(r19)
 8009108:	b009883a 	mov	r4,r22
 800910c:	a80b883a 	mov	r5,r21
 8009110:	800aea80 	call	800aea8 <__adddf3>
 8009114:	9cc00104 	addi	r19,r19,4
 8009118:	102f883a 	mov	r23,r2
 800911c:	1829883a 	mov	r20,r3
 8009120:	94bffe04 	addi	r18,r18,-8
 8009124:	9c7fdc1e 	bne	r19,r17,8009098 <__alt_data_end+0xfc009098>
 8009128:	d9808f17 	ldw	r6,572(sp)
 800912c:	a00b883a 	mov	r5,r20
 8009130:	b809883a 	mov	r4,r23
 8009134:	800a6b40 	call	800a6b4 <scalbn>
 8009138:	000d883a 	mov	r6,zero
 800913c:	01cff034 	movhi	r7,16320
 8009140:	1009883a 	mov	r4,r2
 8009144:	180b883a 	mov	r5,r3
 8009148:	1025883a 	mov	r18,r2
 800914c:	1823883a 	mov	r17,r3
 8009150:	800c2540 	call	800c254 <__muldf3>
 8009154:	1009883a 	mov	r4,r2
 8009158:	180b883a 	mov	r5,r3
 800915c:	80056300 	call	8005630 <floor>
 8009160:	1009883a 	mov	r4,r2
 8009164:	180b883a 	mov	r5,r3
 8009168:	000d883a 	mov	r6,zero
 800916c:	01d00834 	movhi	r7,16416
 8009170:	800c2540 	call	800c254 <__muldf3>
 8009174:	100d883a 	mov	r6,r2
 8009178:	180f883a 	mov	r7,r3
 800917c:	9009883a 	mov	r4,r18
 8009180:	880b883a 	mov	r5,r17
 8009184:	800c9780 	call	800c978 <__subdf3>
 8009188:	180b883a 	mov	r5,r3
 800918c:	1009883a 	mov	r4,r2
 8009190:	1825883a 	mov	r18,r3
 8009194:	1027883a 	mov	r19,r2
 8009198:	800d2480 	call	800d248 <__fixdfsi>
 800919c:	1009883a 	mov	r4,r2
 80091a0:	1023883a 	mov	r17,r2
 80091a4:	800d2d00 	call	800d2d0 <__floatsidf>
 80091a8:	9809883a 	mov	r4,r19
 80091ac:	900b883a 	mov	r5,r18
 80091b0:	100d883a 	mov	r6,r2
 80091b4:	180f883a 	mov	r7,r3
 80091b8:	800c9780 	call	800c978 <__subdf3>
 80091bc:	da008f17 	ldw	r8,572(sp)
 80091c0:	1019883a 	mov	r12,r2
 80091c4:	1029883a 	mov	r20,r2
 80091c8:	1817883a 	mov	r11,r3
 80091cc:	0200ae0e 	bge	zero,r8,8009488 <__kernel_rem_pio2+0x5e0>
 80091d0:	80bfffc4 	addi	r2,r16,-1
 80091d4:	1085883a 	add	r2,r2,r2
 80091d8:	1085883a 	add	r2,r2,r2
 80091dc:	d885883a 	add	r2,sp,r2
 80091e0:	10807804 	addi	r2,r2,480
 80091e4:	11400017 	ldw	r5,0(r2)
 80091e8:	01000604 	movi	r4,24
 80091ec:	2209c83a 	sub	r4,r4,r8
 80091f0:	290dd83a 	sra	r6,r5,r4
 80091f4:	048005c4 	movi	r18,23
 80091f8:	9225c83a 	sub	r18,r18,r8
 80091fc:	3108983a 	sll	r4,r6,r4
 8009200:	89a3883a 	add	r17,r17,r6
 8009204:	2909c83a 	sub	r4,r5,r4
 8009208:	24a5d83a 	sra	r18,r4,r18
 800920c:	11000015 	stw	r4,0(r2)
 8009210:	04802a0e 	bge	zero,r18,80092bc <__kernel_rem_pio2+0x414>
 8009214:	8c400044 	addi	r17,r17,1
 8009218:	0400c40e 	bge	zero,r16,800952c <__kernel_rem_pio2+0x684>
 800921c:	01404034 	movhi	r5,256
 8009220:	297fffc4 	addi	r5,r5,-1
 8009224:	da007804 	addi	r8,sp,480
 8009228:	0015883a 	mov	r10,zero
 800922c:	0027883a 	mov	r19,zero
 8009230:	01004034 	movhi	r4,256
 8009234:	00000706 	br	8009254 <__kernel_rem_pio2+0x3ac>
 8009238:	208dc83a 	sub	r6,r4,r2
 800923c:	10000226 	beq	r2,zero,8009248 <__kernel_rem_pio2+0x3a0>
 8009240:	41800015 	stw	r6,0(r8)
 8009244:	04c00044 	movi	r19,1
 8009248:	52800044 	addi	r10,r10,1
 800924c:	42000104 	addi	r8,r8,4
 8009250:	5400080e 	bge	r10,r16,8009274 <__kernel_rem_pio2+0x3cc>
 8009254:	40800017 	ldw	r2,0(r8)
 8009258:	983ff726 	beq	r19,zero,8009238 <__alt_data_end+0xfc009238>
 800925c:	2885c83a 	sub	r2,r5,r2
 8009260:	40800015 	stw	r2,0(r8)
 8009264:	52800044 	addi	r10,r10,1
 8009268:	04c00044 	movi	r19,1
 800926c:	42000104 	addi	r8,r8,4
 8009270:	543ff816 	blt	r10,r16,8009254 <__alt_data_end+0xfc009254>
 8009274:	da008f17 	ldw	r8,572(sp)
 8009278:	02000e0e 	bge	zero,r8,80092b4 <__kernel_rem_pio2+0x40c>
 800927c:	00800044 	movi	r2,1
 8009280:	40808a26 	beq	r8,r2,80094ac <__kernel_rem_pio2+0x604>
 8009284:	00800084 	movi	r2,2
 8009288:	40800a1e 	bne	r8,r2,80092b4 <__kernel_rem_pio2+0x40c>
 800928c:	80bfffc4 	addi	r2,r16,-1
 8009290:	1085883a 	add	r2,r2,r2
 8009294:	1085883a 	add	r2,r2,r2
 8009298:	d885883a 	add	r2,sp,r2
 800929c:	10807804 	addi	r2,r2,480
 80092a0:	11400017 	ldw	r5,0(r2)
 80092a4:	01001034 	movhi	r4,64
 80092a8:	213fffc4 	addi	r4,r4,-1
 80092ac:	2908703a 	and	r4,r5,r4
 80092b0:	11000015 	stw	r4,0(r2)
 80092b4:	00800084 	movi	r2,2
 80092b8:	90805a26 	beq	r18,r2,8009424 <__kernel_rem_pio2+0x57c>
 80092bc:	580b883a 	mov	r5,r11
 80092c0:	a009883a 	mov	r4,r20
 80092c4:	000d883a 	mov	r6,zero
 80092c8:	000f883a 	mov	r7,zero
 80092cc:	dac09a15 	stw	r11,616(sp)
 80092d0:	800c0100 	call	800c010 <__eqdf2>
 80092d4:	dac09a17 	ldw	r11,616(sp)
 80092d8:	1000961e 	bne	r2,zero,8009534 <__kernel_rem_pio2+0x68c>
 80092dc:	da009417 	ldw	r8,592(sp)
 80092e0:	817fffc4 	addi	r5,r16,-1
 80092e4:	2a000b16 	blt	r5,r8,8009314 <__kernel_rem_pio2+0x46c>
 80092e8:	800490ba 	slli	r2,r16,2
 80092ec:	d9809617 	ldw	r6,600(sp)
 80092f0:	d9007804 	addi	r4,sp,480
 80092f4:	10bfff04 	addi	r2,r2,-4
 80092f8:	0007883a 	mov	r3,zero
 80092fc:	2085883a 	add	r2,r4,r2
 8009300:	11000017 	ldw	r4,0(r2)
 8009304:	10bfff04 	addi	r2,r2,-4
 8009308:	1906b03a 	or	r3,r3,r4
 800930c:	11bffc1e 	bne	r2,r6,8009300 <__alt_data_end+0xfc009300>
 8009310:	18013c1e 	bne	r3,zero,8009804 <__kernel_rem_pio2+0x95c>
 8009314:	da009717 	ldw	r8,604(sp)
 8009318:	40800017 	ldw	r2,0(r8)
 800931c:	1001371e 	bne	r2,zero,80097fc <__kernel_rem_pio2+0x954>
 8009320:	d8809517 	ldw	r2,596(sp)
 8009324:	00c00044 	movi	r3,1
 8009328:	10bfff04 	addi	r2,r2,-4
 800932c:	11000117 	ldw	r4,4(r2)
 8009330:	18c00044 	addi	r3,r3,1
 8009334:	203ffc26 	beq	r4,zero,8009328 <__alt_data_end+0xfc009328>
 8009338:	80c7883a 	add	r3,r16,r3
 800933c:	80800044 	addi	r2,r16,1
 8009340:	d8c09115 	stw	r3,580(sp)
 8009344:	18803216 	blt	r3,r2,8009410 <__kernel_rem_pio2+0x568>
 8009348:	da009317 	ldw	r8,588(sp)
 800934c:	8223883a 	add	r17,r16,r8
 8009350:	da009117 	ldw	r8,580(sp)
 8009354:	882290fa 	slli	r17,r17,3
 8009358:	45000044 	addi	r20,r8,1
 800935c:	da009217 	ldw	r8,584(sp)
 8009360:	a02890fa 	slli	r20,r20,3
 8009364:	1227883a 	add	r19,r2,r8
 8009368:	100490fa 	slli	r2,r2,3
 800936c:	da00a617 	ldw	r8,664(sp)
 8009370:	9ce7883a 	add	r19,r19,r19
 8009374:	9ce7883a 	add	r19,r19,r19
 8009378:	d8a5883a 	add	r18,sp,r2
 800937c:	d8805004 	addi	r2,sp,320
 8009380:	44e7883a 	add	r19,r8,r19
 8009384:	1463883a 	add	r17,r2,r17
 8009388:	dd29883a 	add	r20,sp,r20
 800938c:	99000017 	ldw	r4,0(r19)
 8009390:	800d2d00 	call	800d2d0 <__floatsidf>
 8009394:	da008c17 	ldw	r8,560(sp)
 8009398:	88800015 	stw	r2,0(r17)
 800939c:	88c00115 	stw	r3,4(r17)
 80093a0:	40001d16 	blt	r8,zero,8009418 <__kernel_rem_pio2+0x570>
 80093a4:	da008e17 	ldw	r8,568(sp)
 80093a8:	dd808d17 	ldw	r22,564(sp)
 80093ac:	8821883a 	mov	r16,r17
 80093b0:	8a2b883a 	add	r21,r17,r8
 80093b4:	0039883a 	mov	fp,zero
 80093b8:	002f883a 	mov	r23,zero
 80093bc:	b1000017 	ldw	r4,0(r22)
 80093c0:	b1400117 	ldw	r5,4(r22)
 80093c4:	81800017 	ldw	r6,0(r16)
 80093c8:	81c00117 	ldw	r7,4(r16)
 80093cc:	843ffe04 	addi	r16,r16,-8
 80093d0:	b5800204 	addi	r22,r22,8
 80093d4:	800c2540 	call	800c254 <__muldf3>
 80093d8:	e009883a 	mov	r4,fp
 80093dc:	b80b883a 	mov	r5,r23
 80093e0:	100d883a 	mov	r6,r2
 80093e4:	180f883a 	mov	r7,r3
 80093e8:	800aea80 	call	800aea8 <__adddf3>
 80093ec:	1039883a 	mov	fp,r2
 80093f0:	182f883a 	mov	r23,r3
 80093f4:	857ff11e 	bne	r16,r21,80093bc <__alt_data_end+0xfc0093bc>
 80093f8:	97000015 	stw	fp,0(r18)
 80093fc:	95c00115 	stw	r23,4(r18)
 8009400:	94800204 	addi	r18,r18,8
 8009404:	9cc00104 	addi	r19,r19,4
 8009408:	8c400204 	addi	r17,r17,8
 800940c:	953fdf1e 	bne	r18,r20,800938c <__alt_data_end+0xfc00938c>
 8009410:	dc009117 	ldw	r16,580(sp)
 8009414:	003f1206 	br	8009060 <__alt_data_end+0xfc009060>
 8009418:	0039883a 	mov	fp,zero
 800941c:	002f883a 	mov	r23,zero
 8009420:	003ff506 	br	80093f8 <__alt_data_end+0xfc0093f8>
 8009424:	0009883a 	mov	r4,zero
 8009428:	014ffc34 	movhi	r5,16368
 800942c:	600d883a 	mov	r6,r12
 8009430:	180f883a 	mov	r7,r3
 8009434:	800c9780 	call	800c978 <__subdf3>
 8009438:	1029883a 	mov	r20,r2
 800943c:	1817883a 	mov	r11,r3
 8009440:	983f9e26 	beq	r19,zero,80092bc <__alt_data_end+0xfc0092bc>
 8009444:	d9808f17 	ldw	r6,572(sp)
 8009448:	0009883a 	mov	r4,zero
 800944c:	014ffc34 	movhi	r5,16368
 8009450:	d8c09a15 	stw	r3,616(sp)
 8009454:	800a6b40 	call	800a6b4 <scalbn>
 8009458:	dac09a17 	ldw	r11,616(sp)
 800945c:	a009883a 	mov	r4,r20
 8009460:	100d883a 	mov	r6,r2
 8009464:	580b883a 	mov	r5,r11
 8009468:	180f883a 	mov	r7,r3
 800946c:	800c9780 	call	800c978 <__subdf3>
 8009470:	1029883a 	mov	r20,r2
 8009474:	1817883a 	mov	r11,r3
 8009478:	003f9006 	br	80092bc <__alt_data_end+0xfc0092bc>
 800947c:	0005883a 	mov	r2,zero
 8009480:	0007883a 	mov	r3,zero
 8009484:	003eba06 	br	8008f70 <__alt_data_end+0xfc008f70>
 8009488:	da008f17 	ldw	r8,572(sp)
 800948c:	4000121e 	bne	r8,zero,80094d8 <__kernel_rem_pio2+0x630>
 8009490:	80bfffc4 	addi	r2,r16,-1
 8009494:	1085883a 	add	r2,r2,r2
 8009498:	1085883a 	add	r2,r2,r2
 800949c:	d885883a 	add	r2,sp,r2
 80094a0:	14807817 	ldw	r18,480(r2)
 80094a4:	9025d5fa 	srai	r18,r18,23
 80094a8:	003f5906 	br	8009210 <__alt_data_end+0xfc009210>
 80094ac:	80bfffc4 	addi	r2,r16,-1
 80094b0:	1085883a 	add	r2,r2,r2
 80094b4:	1085883a 	add	r2,r2,r2
 80094b8:	d885883a 	add	r2,sp,r2
 80094bc:	10807804 	addi	r2,r2,480
 80094c0:	11000017 	ldw	r4,0(r2)
 80094c4:	01402034 	movhi	r5,128
 80094c8:	297fffc4 	addi	r5,r5,-1
 80094cc:	2148703a 	and	r4,r4,r5
 80094d0:	11000015 	stw	r4,0(r2)
 80094d4:	003f7706 	br	80092b4 <__alt_data_end+0xfc0092b4>
 80094d8:	180b883a 	mov	r5,r3
 80094dc:	1009883a 	mov	r4,r2
 80094e0:	000d883a 	mov	r6,zero
 80094e4:	01cff834 	movhi	r7,16352
 80094e8:	d8c09915 	stw	r3,612(sp)
 80094ec:	d8c09a15 	stw	r3,616(sp)
 80094f0:	d8809815 	stw	r2,608(sp)
 80094f4:	800c0940 	call	800c094 <__gedf2>
 80094f8:	d8c09917 	ldw	r3,612(sp)
 80094fc:	dac09a17 	ldw	r11,616(sp)
 8009500:	db009817 	ldw	r12,608(sp)
 8009504:	1000050e 	bge	r2,zero,800951c <__kernel_rem_pio2+0x674>
 8009508:	0025883a 	mov	r18,zero
 800950c:	003f6b06 	br	80092bc <__alt_data_end+0xfc0092bc>
 8009510:	002b883a 	mov	r21,zero
 8009514:	0029883a 	mov	r20,zero
 8009518:	003eb806 	br	8008ffc <__alt_data_end+0xfc008ffc>
 800951c:	8c400044 	addi	r17,r17,1
 8009520:	0401960e 	bge	zero,r16,8009b7c <__kernel_rem_pio2+0xcd4>
 8009524:	04800084 	movi	r18,2
 8009528:	003f3c06 	br	800921c <__alt_data_end+0xfc00921c>
 800952c:	0027883a 	mov	r19,zero
 8009530:	003f5006 	br	8009274 <__alt_data_end+0xfc009274>
 8009534:	da008f17 	ldw	r8,572(sp)
 8009538:	a009883a 	mov	r4,r20
 800953c:	580b883a 	mov	r5,r11
 8009540:	020dc83a 	sub	r6,zero,r8
 8009544:	dc808c15 	stw	r18,560(sp)
 8009548:	dd809417 	ldw	r22,592(sp)
 800954c:	dc408e15 	stw	r17,568(sp)
 8009550:	800a6b40 	call	800a6b4 <scalbn>
 8009554:	1009883a 	mov	r4,r2
 8009558:	180b883a 	mov	r5,r3
 800955c:	000d883a 	mov	r6,zero
 8009560:	01d05c34 	movhi	r7,16752
 8009564:	1029883a 	mov	r20,r2
 8009568:	182f883a 	mov	r23,r3
 800956c:	800c0940 	call	800c094 <__gedf2>
 8009570:	10018b16 	blt	r2,zero,8009ba0 <__kernel_rem_pio2+0xcf8>
 8009574:	01cf9c34 	movhi	r7,15984
 8009578:	000d883a 	mov	r6,zero
 800957c:	a009883a 	mov	r4,r20
 8009580:	b80b883a 	mov	r5,r23
 8009584:	800c2540 	call	800c254 <__muldf3>
 8009588:	180b883a 	mov	r5,r3
 800958c:	1009883a 	mov	r4,r2
 8009590:	800d2480 	call	800d248 <__fixdfsi>
 8009594:	840d883a 	add	r6,r16,r16
 8009598:	318d883a 	add	r6,r6,r6
 800959c:	1009883a 	mov	r4,r2
 80095a0:	d9a7883a 	add	r19,sp,r6
 80095a4:	102b883a 	mov	r21,r2
 80095a8:	800d2d00 	call	800d2d0 <__floatsidf>
 80095ac:	1009883a 	mov	r4,r2
 80095b0:	180b883a 	mov	r5,r3
 80095b4:	000d883a 	mov	r6,zero
 80095b8:	01d05c34 	movhi	r7,16752
 80095bc:	800c2540 	call	800c254 <__muldf3>
 80095c0:	a009883a 	mov	r4,r20
 80095c4:	b80b883a 	mov	r5,r23
 80095c8:	100d883a 	mov	r6,r2
 80095cc:	180f883a 	mov	r7,r3
 80095d0:	800c9780 	call	800c978 <__subdf3>
 80095d4:	180b883a 	mov	r5,r3
 80095d8:	1009883a 	mov	r4,r2
 80095dc:	800d2480 	call	800d248 <__fixdfsi>
 80095e0:	da008f17 	ldw	r8,572(sp)
 80095e4:	84400044 	addi	r17,r16,1
 80095e8:	8c47883a 	add	r3,r17,r17
 80095ec:	9cc07804 	addi	r19,r19,480
 80095f0:	18c7883a 	add	r3,r3,r3
 80095f4:	98800015 	stw	r2,0(r19)
 80095f8:	d8c7883a 	add	r3,sp,r3
 80095fc:	42000604 	addi	r8,r8,24
 8009600:	da008f15 	stw	r8,572(sp)
 8009604:	1d407815 	stw	r21,480(r3)
 8009608:	d9808f17 	ldw	r6,572(sp)
 800960c:	0009883a 	mov	r4,zero
 8009610:	014ffc34 	movhi	r5,16368
 8009614:	800a6b40 	call	800a6b4 <scalbn>
 8009618:	1029883a 	mov	r20,r2
 800961c:	182b883a 	mov	r21,r3
 8009620:	88006e16 	blt	r17,zero,80097dc <__kernel_rem_pio2+0x934>
 8009624:	881090fa 	slli	r8,r17,3
 8009628:	d8c07804 	addi	r3,sp,480
 800962c:	dc3ffe04 	addi	r16,sp,-8
 8009630:	da008d15 	stw	r8,564(sp)
 8009634:	d8808d17 	ldw	r2,564(sp)
 8009638:	8c51883a 	add	r8,r17,r17
 800963c:	4211883a 	add	r8,r8,r8
 8009640:	d8a7883a 	add	r19,sp,r2
 8009644:	1a2f883a 	add	r23,r3,r8
 8009648:	9839883a 	mov	fp,r19
 800964c:	b9000017 	ldw	r4,0(r23)
 8009650:	e73ffe04 	addi	fp,fp,-8
 8009654:	bdffff04 	addi	r23,r23,-4
 8009658:	800d2d00 	call	800d2d0 <__floatsidf>
 800965c:	a00d883a 	mov	r6,r20
 8009660:	a80f883a 	mov	r7,r21
 8009664:	1009883a 	mov	r4,r2
 8009668:	180b883a 	mov	r5,r3
 800966c:	800c2540 	call	800c254 <__muldf3>
 8009670:	a009883a 	mov	r4,r20
 8009674:	a80b883a 	mov	r5,r21
 8009678:	e0800215 	stw	r2,8(fp)
 800967c:	e0c00315 	stw	r3,12(fp)
 8009680:	000d883a 	mov	r6,zero
 8009684:	01cf9c34 	movhi	r7,15984
 8009688:	800c2540 	call	800c254 <__muldf3>
 800968c:	1029883a 	mov	r20,r2
 8009690:	182b883a 	mov	r21,r3
 8009694:	e43fed1e 	bne	fp,r16,800964c <__alt_data_end+0xfc00964c>
 8009698:	8a000044 	addi	r8,r17,1
 800969c:	0029883a 	mov	r20,zero
 80096a0:	4039883a 	mov	fp,r8
 80096a4:	dc408f15 	stw	r17,572(sp)
 80096a8:	b0004916 	blt	r22,zero,80097d0 <__kernel_rem_pio2+0x928>
 80096ac:	a0004816 	blt	r20,zero,80097d0 <__kernel_rem_pio2+0x928>
 80096b0:	040200f4 	movhi	r16,2051
 80096b4:	842a9404 	addi	r16,r16,-21936
 80096b8:	982b883a 	mov	r21,r19
 80096bc:	0023883a 	mov	r17,zero
 80096c0:	002f883a 	mov	r23,zero
 80096c4:	0025883a 	mov	r18,zero
 80096c8:	00000206 	br	80096d4 <__kernel_rem_pio2+0x82c>
 80096cc:	ad400204 	addi	r21,r21,8
 80096d0:	a4800f16 	blt	r20,r18,8009710 <__kernel_rem_pio2+0x868>
 80096d4:	81000017 	ldw	r4,0(r16)
 80096d8:	81400117 	ldw	r5,4(r16)
 80096dc:	a9800017 	ldw	r6,0(r21)
 80096e0:	a9c00117 	ldw	r7,4(r21)
 80096e4:	94800044 	addi	r18,r18,1
 80096e8:	84000204 	addi	r16,r16,8
 80096ec:	800c2540 	call	800c254 <__muldf3>
 80096f0:	8809883a 	mov	r4,r17
 80096f4:	b80b883a 	mov	r5,r23
 80096f8:	100d883a 	mov	r6,r2
 80096fc:	180f883a 	mov	r7,r3
 8009700:	800aea80 	call	800aea8 <__adddf3>
 8009704:	1023883a 	mov	r17,r2
 8009708:	182f883a 	mov	r23,r3
 800970c:	b4bfef0e 	bge	r22,r18,80096cc <__alt_data_end+0xfc0096cc>
 8009710:	a00490fa 	slli	r2,r20,3
 8009714:	a5000044 	addi	r20,r20,1
 8009718:	9cfffe04 	addi	r19,r19,-8
 800971c:	d885883a 	add	r2,sp,r2
 8009720:	10802804 	addi	r2,r2,160
 8009724:	14400015 	stw	r17,0(r2)
 8009728:	15c00115 	stw	r23,4(r2)
 800972c:	a73fde1e 	bne	r20,fp,80096a8 <__alt_data_end+0xfc0096a8>
 8009730:	da00a517 	ldw	r8,660(sp)
 8009734:	00800084 	movi	r2,2
 8009738:	dc408f17 	ldw	r17,572(sp)
 800973c:	12007316 	blt	r2,r8,800990c <__kernel_rem_pio2+0xa64>
 8009740:	02004816 	blt	zero,r8,8009864 <__kernel_rem_pio2+0x9bc>
 8009744:	4000141e 	bne	r8,zero,8009798 <__kernel_rem_pio2+0x8f0>
 8009748:	da008d17 	ldw	r8,564(sp)
 800974c:	d8802804 	addi	r2,sp,160
 8009750:	0007883a 	mov	r3,zero
 8009754:	1221883a 	add	r16,r2,r8
 8009758:	04ffffc4 	movi	r19,-1
 800975c:	0005883a 	mov	r2,zero
 8009760:	81800017 	ldw	r6,0(r16)
 8009764:	81c00117 	ldw	r7,4(r16)
 8009768:	1009883a 	mov	r4,r2
 800976c:	180b883a 	mov	r5,r3
 8009770:	8c7fffc4 	addi	r17,r17,-1
 8009774:	800aea80 	call	800aea8 <__adddf3>
 8009778:	843ffe04 	addi	r16,r16,-8
 800977c:	8cfff81e 	bne	r17,r19,8009760 <__alt_data_end+0xfc009760>
 8009780:	da008c17 	ldw	r8,560(sp)
 8009784:	40000126 	beq	r8,zero,800978c <__kernel_rem_pio2+0x8e4>
 8009788:	18e0003c 	xorhi	r3,r3,32768
 800978c:	da009017 	ldw	r8,576(sp)
 8009790:	40800015 	stw	r2,0(r8)
 8009794:	40c00115 	stw	r3,4(r8)
 8009798:	da008e17 	ldw	r8,568(sp)
 800979c:	408001cc 	andi	r2,r8,7
 80097a0:	dfc0a417 	ldw	ra,656(sp)
 80097a4:	df00a317 	ldw	fp,652(sp)
 80097a8:	ddc0a217 	ldw	r23,648(sp)
 80097ac:	dd80a117 	ldw	r22,644(sp)
 80097b0:	dd40a017 	ldw	r21,640(sp)
 80097b4:	dd009f17 	ldw	r20,636(sp)
 80097b8:	dcc09e17 	ldw	r19,632(sp)
 80097bc:	dc809d17 	ldw	r18,628(sp)
 80097c0:	dc409c17 	ldw	r17,624(sp)
 80097c4:	dc009b17 	ldw	r16,620(sp)
 80097c8:	dec0a504 	addi	sp,sp,660
 80097cc:	f800283a 	ret
 80097d0:	0023883a 	mov	r17,zero
 80097d4:	002f883a 	mov	r23,zero
 80097d8:	003fcd06 	br	8009710 <__alt_data_end+0xfc009710>
 80097dc:	da00a517 	ldw	r8,660(sp)
 80097e0:	00800084 	movi	r2,2
 80097e4:	1200d216 	blt	r2,r8,8009b30 <__kernel_rem_pio2+0xc88>
 80097e8:	0200c016 	blt	zero,r8,8009aec <__kernel_rem_pio2+0xc44>
 80097ec:	403fea1e 	bne	r8,zero,8009798 <__alt_data_end+0xfc009798>
 80097f0:	0005883a 	mov	r2,zero
 80097f4:	0007883a 	mov	r3,zero
 80097f8:	003fe106 	br	8009780 <__alt_data_end+0xfc009780>
 80097fc:	00c00044 	movi	r3,1
 8009800:	003ecd06 	br	8009338 <__alt_data_end+0xfc009338>
 8009804:	2945883a 	add	r2,r5,r5
 8009808:	da008f17 	ldw	r8,572(sp)
 800980c:	1085883a 	add	r2,r2,r2
 8009810:	d885883a 	add	r2,sp,r2
 8009814:	10807817 	ldw	r2,480(r2)
 8009818:	423ffa04 	addi	r8,r8,-24
 800981c:	dc408e15 	stw	r17,568(sp)
 8009820:	dc808c15 	stw	r18,560(sp)
 8009824:	da008f15 	stw	r8,572(sp)
 8009828:	dd809417 	ldw	r22,592(sp)
 800982c:	2823883a 	mov	r17,r5
 8009830:	103f751e 	bne	r2,zero,8009608 <__alt_data_end+0xfc009608>
 8009834:	280490ba 	slli	r2,r5,2
 8009838:	d8c07804 	addi	r3,sp,480
 800983c:	10bfff04 	addi	r2,r2,-4
 8009840:	1885883a 	add	r2,r3,r2
 8009844:	4007883a 	mov	r3,r8
 8009848:	10bfff04 	addi	r2,r2,-4
 800984c:	11000117 	ldw	r4,4(r2)
 8009850:	8c7fffc4 	addi	r17,r17,-1
 8009854:	18fffa04 	addi	r3,r3,-24
 8009858:	203ffb26 	beq	r4,zero,8009848 <__alt_data_end+0xfc009848>
 800985c:	d8c08f15 	stw	r3,572(sp)
 8009860:	003f6906 	br	8009608 <__alt_data_end+0xfc009608>
 8009864:	da008d17 	ldw	r8,564(sp)
 8009868:	d8802804 	addi	r2,sp,160
 800986c:	dcc02604 	addi	r19,sp,152
 8009870:	1221883a 	add	r16,r2,r8
 8009874:	0007883a 	mov	r3,zero
 8009878:	0005883a 	mov	r2,zero
 800987c:	81800017 	ldw	r6,0(r16)
 8009880:	81c00117 	ldw	r7,4(r16)
 8009884:	1009883a 	mov	r4,r2
 8009888:	843ffe04 	addi	r16,r16,-8
 800988c:	180b883a 	mov	r5,r3
 8009890:	800aea80 	call	800aea8 <__adddf3>
 8009894:	84fff91e 	bne	r16,r19,800987c <__alt_data_end+0xfc00987c>
 8009898:	da008c17 	ldw	r8,560(sp)
 800989c:	d9002817 	ldw	r4,160(sp)
 80098a0:	d9402917 	ldw	r5,164(sp)
 80098a4:	40009726 	beq	r8,zero,8009b04 <__kernel_rem_pio2+0xc5c>
 80098a8:	da009017 	ldw	r8,576(sp)
 80098ac:	19a0003c 	xorhi	r6,r3,32768
 80098b0:	180f883a 	mov	r7,r3
 80098b4:	41800115 	stw	r6,4(r8)
 80098b8:	40800015 	stw	r2,0(r8)
 80098bc:	100d883a 	mov	r6,r2
 80098c0:	800c9780 	call	800c978 <__subdf3>
 80098c4:	04400c0e 	bge	zero,r17,80098f8 <__kernel_rem_pio2+0xa50>
 80098c8:	dc002a04 	addi	r16,sp,168
 80098cc:	04c00044 	movi	r19,1
 80098d0:	81800017 	ldw	r6,0(r16)
 80098d4:	81c00117 	ldw	r7,4(r16)
 80098d8:	1009883a 	mov	r4,r2
 80098dc:	180b883a 	mov	r5,r3
 80098e0:	9cc00044 	addi	r19,r19,1
 80098e4:	800aea80 	call	800aea8 <__adddf3>
 80098e8:	84000204 	addi	r16,r16,8
 80098ec:	8cfff80e 	bge	r17,r19,80098d0 <__alt_data_end+0xfc0098d0>
 80098f0:	da008c17 	ldw	r8,560(sp)
 80098f4:	40000126 	beq	r8,zero,80098fc <__kernel_rem_pio2+0xa54>
 80098f8:	18e0003c 	xorhi	r3,r3,32768
 80098fc:	da009017 	ldw	r8,576(sp)
 8009900:	40800215 	stw	r2,8(r8)
 8009904:	40c00315 	stw	r3,12(r8)
 8009908:	003fa306 	br	8009798 <__alt_data_end+0xfc009798>
 800990c:	da00a517 	ldw	r8,660(sp)
 8009910:	008000c4 	movi	r2,3
 8009914:	40bfa01e 	bne	r8,r2,8009798 <__alt_data_end+0xfc009798>
 8009918:	0440880e 	bge	zero,r17,8009b3c <__kernel_rem_pio2+0xc94>
 800991c:	da008d17 	ldw	r8,564(sp)
 8009920:	882690fa 	slli	r19,r17,3
 8009924:	dd402804 	addi	r21,sp,160
 8009928:	da05883a 	add	r2,sp,r8
 800992c:	10802804 	addi	r2,r2,160
 8009930:	15c00017 	ldw	r23,0(r2)
 8009934:	15800117 	ldw	r22,4(r2)
 8009938:	9829883a 	mov	r20,r19
 800993c:	9cfffe04 	addi	r19,r19,-8
 8009940:	ace7883a 	add	r19,r21,r19
 8009944:	ad29883a 	add	r20,r21,r20
 8009948:	dac02604 	addi	r11,sp,152
 800994c:	8811883a 	mov	r8,r17
 8009950:	9c400017 	ldw	r17,0(r19)
 8009954:	9f000117 	ldw	fp,4(r19)
 8009958:	b809883a 	mov	r4,r23
 800995c:	b00b883a 	mov	r5,r22
 8009960:	880d883a 	mov	r6,r17
 8009964:	e00f883a 	mov	r7,fp
 8009968:	da009815 	stw	r8,608(sp)
 800996c:	dac09a15 	stw	r11,616(sp)
 8009970:	800aea80 	call	800aea8 <__adddf3>
 8009974:	8809883a 	mov	r4,r17
 8009978:	e00b883a 	mov	r5,fp
 800997c:	100d883a 	mov	r6,r2
 8009980:	180f883a 	mov	r7,r3
 8009984:	1025883a 	mov	r18,r2
 8009988:	1821883a 	mov	r16,r3
 800998c:	800c9780 	call	800c978 <__subdf3>
 8009990:	b809883a 	mov	r4,r23
 8009994:	b00b883a 	mov	r5,r22
 8009998:	100d883a 	mov	r6,r2
 800999c:	180f883a 	mov	r7,r3
 80099a0:	800aea80 	call	800aea8 <__adddf3>
 80099a4:	dac09a17 	ldw	r11,616(sp)
 80099a8:	a0800015 	stw	r2,0(r20)
 80099ac:	a0c00115 	stw	r3,4(r20)
 80099b0:	9c800015 	stw	r18,0(r19)
 80099b4:	9c000115 	stw	r16,4(r19)
 80099b8:	9cfffe04 	addi	r19,r19,-8
 80099bc:	a53ffe04 	addi	r20,r20,-8
 80099c0:	902f883a 	mov	r23,r18
 80099c4:	802d883a 	mov	r22,r16
 80099c8:	da009817 	ldw	r8,608(sp)
 80099cc:	9affe01e 	bne	r19,r11,8009950 <__alt_data_end+0xfc009950>
 80099d0:	00800044 	movi	r2,1
 80099d4:	1200590e 	bge	r2,r8,8009b3c <__kernel_rem_pio2+0xc94>
 80099d8:	402290fa 	slli	r17,r8,3
 80099dc:	da008d17 	ldw	r8,564(sp)
 80099e0:	8c3ffe04 	addi	r16,r17,-8
 80099e4:	da05883a 	add	r2,sp,r8
 80099e8:	10802804 	addi	r2,r2,160
 80099ec:	15800017 	ldw	r22,0(r2)
 80099f0:	15000117 	ldw	r20,4(r2)
 80099f4:	ac63883a 	add	r17,r21,r17
 80099f8:	ac21883a 	add	r16,r21,r16
 80099fc:	8827883a 	mov	r19,r17
 8009a00:	8811883a 	mov	r8,r17
 8009a04:	84400017 	ldw	r17,0(r16)
 8009a08:	87000117 	ldw	fp,4(r16)
 8009a0c:	b00d883a 	mov	r6,r22
 8009a10:	a00f883a 	mov	r7,r20
 8009a14:	8809883a 	mov	r4,r17
 8009a18:	e00b883a 	mov	r5,fp
 8009a1c:	da009815 	stw	r8,608(sp)
 8009a20:	800aea80 	call	800aea8 <__adddf3>
 8009a24:	8809883a 	mov	r4,r17
 8009a28:	e00b883a 	mov	r5,fp
 8009a2c:	100d883a 	mov	r6,r2
 8009a30:	180f883a 	mov	r7,r3
 8009a34:	102f883a 	mov	r23,r2
 8009a38:	1825883a 	mov	r18,r3
 8009a3c:	800c9780 	call	800c978 <__subdf3>
 8009a40:	b00d883a 	mov	r6,r22
 8009a44:	a00f883a 	mov	r7,r20
 8009a48:	1009883a 	mov	r4,r2
 8009a4c:	180b883a 	mov	r5,r3
 8009a50:	800aea80 	call	800aea8 <__adddf3>
 8009a54:	98800015 	stw	r2,0(r19)
 8009a58:	98c00115 	stw	r3,4(r19)
 8009a5c:	85c00015 	stw	r23,0(r16)
 8009a60:	84800115 	stw	r18,4(r16)
 8009a64:	843ffe04 	addi	r16,r16,-8
 8009a68:	9cfffe04 	addi	r19,r19,-8
 8009a6c:	b82d883a 	mov	r22,r23
 8009a70:	9029883a 	mov	r20,r18
 8009a74:	da009817 	ldw	r8,608(sp)
 8009a78:	ac3fe21e 	bne	r21,r16,8009a04 <__alt_data_end+0xfc009a04>
 8009a7c:	4023883a 	mov	r17,r8
 8009a80:	dc002a04 	addi	r16,sp,168
 8009a84:	0005883a 	mov	r2,zero
 8009a88:	0007883a 	mov	r3,zero
 8009a8c:	89800017 	ldw	r6,0(r17)
 8009a90:	89c00117 	ldw	r7,4(r17)
 8009a94:	1009883a 	mov	r4,r2
 8009a98:	8c7ffe04 	addi	r17,r17,-8
 8009a9c:	180b883a 	mov	r5,r3
 8009aa0:	800aea80 	call	800aea8 <__adddf3>
 8009aa4:	8c3ff91e 	bne	r17,r16,8009a8c <__alt_data_end+0xfc009a8c>
 8009aa8:	da008c17 	ldw	r8,560(sp)
 8009aac:	40002726 	beq	r8,zero,8009b4c <__kernel_rem_pio2+0xca4>
 8009ab0:	d9002b17 	ldw	r4,172(sp)
 8009ab4:	d9402917 	ldw	r5,164(sp)
 8009ab8:	d9802a17 	ldw	r6,168(sp)
 8009abc:	da009017 	ldw	r8,576(sp)
 8009ac0:	d9c02817 	ldw	r7,160(sp)
 8009ac4:	2960003c 	xorhi	r5,r5,32768
 8009ac8:	2120003c 	xorhi	r4,r4,32768
 8009acc:	18e0003c 	xorhi	r3,r3,32768
 8009ad0:	41c00015 	stw	r7,0(r8)
 8009ad4:	41400115 	stw	r5,4(r8)
 8009ad8:	41800215 	stw	r6,8(r8)
 8009adc:	41000315 	stw	r4,12(r8)
 8009ae0:	40800415 	stw	r2,16(r8)
 8009ae4:	40c00515 	stw	r3,20(r8)
 8009ae8:	003f2b06 	br	8009798 <__alt_data_end+0xfc009798>
 8009aec:	da008c17 	ldw	r8,560(sp)
 8009af0:	0005883a 	mov	r2,zero
 8009af4:	0007883a 	mov	r3,zero
 8009af8:	d9002817 	ldw	r4,160(sp)
 8009afc:	d9402917 	ldw	r5,164(sp)
 8009b00:	403f691e 	bne	r8,zero,80098a8 <__alt_data_end+0xfc0098a8>
 8009b04:	da009017 	ldw	r8,576(sp)
 8009b08:	100d883a 	mov	r6,r2
 8009b0c:	180f883a 	mov	r7,r3
 8009b10:	40800015 	stw	r2,0(r8)
 8009b14:	40c00115 	stw	r3,4(r8)
 8009b18:	800c9780 	call	800c978 <__subdf3>
 8009b1c:	047f6a16 	blt	zero,r17,80098c8 <__alt_data_end+0xfc0098c8>
 8009b20:	da009017 	ldw	r8,576(sp)
 8009b24:	40800215 	stw	r2,8(r8)
 8009b28:	40c00315 	stw	r3,12(r8)
 8009b2c:	003f1a06 	br	8009798 <__alt_data_end+0xfc009798>
 8009b30:	da00a517 	ldw	r8,660(sp)
 8009b34:	008000c4 	movi	r2,3
 8009b38:	40bf171e 	bne	r8,r2,8009798 <__alt_data_end+0xfc009798>
 8009b3c:	da008c17 	ldw	r8,560(sp)
 8009b40:	0005883a 	mov	r2,zero
 8009b44:	0007883a 	mov	r3,zero
 8009b48:	403fd91e 	bne	r8,zero,8009ab0 <__alt_data_end+0xfc009ab0>
 8009b4c:	da009017 	ldw	r8,576(sp)
 8009b50:	d9802817 	ldw	r6,160(sp)
 8009b54:	d9402a17 	ldw	r5,168(sp)
 8009b58:	d9002b17 	ldw	r4,172(sp)
 8009b5c:	41800015 	stw	r6,0(r8)
 8009b60:	d9802917 	ldw	r6,164(sp)
 8009b64:	41400215 	stw	r5,8(r8)
 8009b68:	41000315 	stw	r4,12(r8)
 8009b6c:	41800115 	stw	r6,4(r8)
 8009b70:	40800415 	stw	r2,16(r8)
 8009b74:	40c00515 	stw	r3,20(r8)
 8009b78:	003f0706 	br	8009798 <__alt_data_end+0xfc009798>
 8009b7c:	a00d883a 	mov	r6,r20
 8009b80:	580f883a 	mov	r7,r11
 8009b84:	0009883a 	mov	r4,zero
 8009b88:	014ffc34 	movhi	r5,16368
 8009b8c:	800c9780 	call	800c978 <__subdf3>
 8009b90:	1029883a 	mov	r20,r2
 8009b94:	1817883a 	mov	r11,r3
 8009b98:	04800084 	movi	r18,2
 8009b9c:	003dc706 	br	80092bc <__alt_data_end+0xfc0092bc>
 8009ba0:	840d883a 	add	r6,r16,r16
 8009ba4:	318d883a 	add	r6,r6,r6
 8009ba8:	d9a3883a 	add	r17,sp,r6
 8009bac:	a009883a 	mov	r4,r20
 8009bb0:	b80b883a 	mov	r5,r23
 8009bb4:	8c407804 	addi	r17,r17,480
 8009bb8:	800d2480 	call	800d248 <__fixdfsi>
 8009bbc:	88800015 	stw	r2,0(r17)
 8009bc0:	8023883a 	mov	r17,r16
 8009bc4:	003e9006 	br	8009608 <__alt_data_end+0xfc009608>
 8009bc8:	d8009215 	stw	zero,584(sp)
 8009bcc:	003cd406 	br	8008f20 <__alt_data_end+0xfc008f20>

08009bd0 <__kernel_sin>:
 8009bd0:	00a00034 	movhi	r2,32768
 8009bd4:	defff404 	addi	sp,sp,-48
 8009bd8:	10bfffc4 	addi	r2,r2,-1
 8009bdc:	00cf9034 	movhi	r3,15936
 8009be0:	ddc00915 	stw	r23,36(sp)
 8009be4:	dd800815 	stw	r22,32(sp)
 8009be8:	dc400315 	stw	r17,12(sp)
 8009bec:	dc000215 	stw	r16,8(sp)
 8009bf0:	dfc00b15 	stw	ra,44(sp)
 8009bf4:	df000a15 	stw	fp,40(sp)
 8009bf8:	dd400715 	stw	r21,28(sp)
 8009bfc:	dd000615 	stw	r20,24(sp)
 8009c00:	dcc00515 	stw	r19,20(sp)
 8009c04:	dc800415 	stw	r18,16(sp)
 8009c08:	2884703a 	and	r2,r5,r2
 8009c0c:	18ffffc4 	addi	r3,r3,-1
 8009c10:	2821883a 	mov	r16,r5
 8009c14:	2023883a 	mov	r17,r4
 8009c18:	302f883a 	mov	r23,r6
 8009c1c:	382d883a 	mov	r22,r7
 8009c20:	18800216 	blt	r3,r2,8009c2c <__kernel_sin+0x5c>
 8009c24:	800d2480 	call	800d248 <__fixdfsi>
 8009c28:	10009826 	beq	r2,zero,8009e8c <__kernel_sin+0x2bc>
 8009c2c:	8809883a 	mov	r4,r17
 8009c30:	800b883a 	mov	r5,r16
 8009c34:	880d883a 	mov	r6,r17
 8009c38:	800f883a 	mov	r7,r16
 8009c3c:	800c2540 	call	800c254 <__muldf3>
 8009c40:	1009883a 	mov	r4,r2
 8009c44:	180b883a 	mov	r5,r3
 8009c48:	880d883a 	mov	r6,r17
 8009c4c:	800f883a 	mov	r7,r16
 8009c50:	1027883a 	mov	r19,r2
 8009c54:	1825883a 	mov	r18,r3
 8009c58:	800c2540 	call	800c254 <__muldf3>
 8009c5c:	0196b434 	movhi	r6,23248
 8009c60:	01cf79b4 	movhi	r7,15846
 8009c64:	9809883a 	mov	r4,r19
 8009c68:	900b883a 	mov	r5,r18
 8009c6c:	31b55f04 	addi	r6,r6,-10884
 8009c70:	39f64e84 	addi	r7,r7,-9926
 8009c74:	102b883a 	mov	r21,r2
 8009c78:	1829883a 	mov	r20,r3
 8009c7c:	800c2540 	call	800c254 <__muldf3>
 8009c80:	01a28b34 	movhi	r6,35372
 8009c84:	01cf96f4 	movhi	r7,15963
 8009c88:	1009883a 	mov	r4,r2
 8009c8c:	180b883a 	mov	r5,r3
 8009c90:	31a73ac4 	addi	r6,r6,-25365
 8009c94:	39f97984 	addi	r7,r7,-6682
 8009c98:	800c9780 	call	800c978 <__subdf3>
 8009c9c:	1009883a 	mov	r4,r2
 8009ca0:	180b883a 	mov	r5,r3
 8009ca4:	980d883a 	mov	r6,r19
 8009ca8:	900f883a 	mov	r7,r18
 8009cac:	800c2540 	call	800c254 <__muldf3>
 8009cb0:	0195ecb4 	movhi	r6,22450
 8009cb4:	01cfb1f4 	movhi	r7,16071
 8009cb8:	1009883a 	mov	r4,r2
 8009cbc:	180b883a 	mov	r5,r3
 8009cc0:	31bf9f44 	addi	r6,r6,-387
 8009cc4:	39c778c4 	addi	r7,r7,7651
 8009cc8:	800aea80 	call	800aea8 <__adddf3>
 8009ccc:	1009883a 	mov	r4,r2
 8009cd0:	180b883a 	mov	r5,r3
 8009cd4:	980d883a 	mov	r6,r19
 8009cd8:	900f883a 	mov	r7,r18
 8009cdc:	800c2540 	call	800c254 <__muldf3>
 8009ce0:	01867074 	movhi	r6,6593
 8009ce4:	01cfcab4 	movhi	r7,16170
 8009ce8:	1009883a 	mov	r4,r2
 8009cec:	180b883a 	mov	r5,r3
 8009cf0:	31987544 	addi	r6,r6,25045
 8009cf4:	39c06804 	addi	r7,r7,416
 8009cf8:	800c9780 	call	800c978 <__subdf3>
 8009cfc:	1009883a 	mov	r4,r2
 8009d00:	180b883a 	mov	r5,r3
 8009d04:	980d883a 	mov	r6,r19
 8009d08:	900f883a 	mov	r7,r18
 8009d0c:	800c2540 	call	800c254 <__muldf3>
 8009d10:	01844474 	movhi	r6,4369
 8009d14:	01cfe074 	movhi	r7,16257
 8009d18:	1009883a 	mov	r4,r2
 8009d1c:	180b883a 	mov	r5,r3
 8009d20:	31be2984 	addi	r6,r6,-1882
 8009d24:	39c44444 	addi	r7,r7,4369
 8009d28:	800aea80 	call	800aea8 <__adddf3>
 8009d2c:	d9000c17 	ldw	r4,48(sp)
 8009d30:	1839883a 	mov	fp,r3
 8009d34:	20003e26 	beq	r4,zero,8009e30 <__kernel_sin+0x260>
 8009d38:	b809883a 	mov	r4,r23
 8009d3c:	b00b883a 	mov	r5,r22
 8009d40:	000d883a 	mov	r6,zero
 8009d44:	01cff834 	movhi	r7,16352
 8009d48:	d8800015 	stw	r2,0(sp)
 8009d4c:	800c2540 	call	800c254 <__muldf3>
 8009d50:	da000017 	ldw	r8,0(sp)
 8009d54:	a809883a 	mov	r4,r21
 8009d58:	a00b883a 	mov	r5,r20
 8009d5c:	400d883a 	mov	r6,r8
 8009d60:	e00f883a 	mov	r7,fp
 8009d64:	d8c00115 	stw	r3,4(sp)
 8009d68:	d8800015 	stw	r2,0(sp)
 8009d6c:	800c2540 	call	800c254 <__muldf3>
 8009d70:	da800017 	ldw	r10,0(sp)
 8009d74:	da400117 	ldw	r9,4(sp)
 8009d78:	100d883a 	mov	r6,r2
 8009d7c:	5009883a 	mov	r4,r10
 8009d80:	480b883a 	mov	r5,r9
 8009d84:	180f883a 	mov	r7,r3
 8009d88:	800c9780 	call	800c978 <__subdf3>
 8009d8c:	980d883a 	mov	r6,r19
 8009d90:	900f883a 	mov	r7,r18
 8009d94:	1009883a 	mov	r4,r2
 8009d98:	180b883a 	mov	r5,r3
 8009d9c:	800c2540 	call	800c254 <__muldf3>
 8009da0:	1009883a 	mov	r4,r2
 8009da4:	180b883a 	mov	r5,r3
 8009da8:	b80d883a 	mov	r6,r23
 8009dac:	b00f883a 	mov	r7,r22
 8009db0:	800c9780 	call	800c978 <__subdf3>
 8009db4:	01955574 	movhi	r6,21845
 8009db8:	01cff174 	movhi	r7,16325
 8009dbc:	a809883a 	mov	r4,r21
 8009dc0:	a00b883a 	mov	r5,r20
 8009dc4:	31955244 	addi	r6,r6,21833
 8009dc8:	39d55544 	addi	r7,r7,21845
 8009dcc:	1027883a 	mov	r19,r2
 8009dd0:	1825883a 	mov	r18,r3
 8009dd4:	800c2540 	call	800c254 <__muldf3>
 8009dd8:	9809883a 	mov	r4,r19
 8009ddc:	900b883a 	mov	r5,r18
 8009de0:	100d883a 	mov	r6,r2
 8009de4:	180f883a 	mov	r7,r3
 8009de8:	800aea80 	call	800aea8 <__adddf3>
 8009dec:	8809883a 	mov	r4,r17
 8009df0:	800b883a 	mov	r5,r16
 8009df4:	100d883a 	mov	r6,r2
 8009df8:	180f883a 	mov	r7,r3
 8009dfc:	800c9780 	call	800c978 <__subdf3>
 8009e00:	dfc00b17 	ldw	ra,44(sp)
 8009e04:	df000a17 	ldw	fp,40(sp)
 8009e08:	ddc00917 	ldw	r23,36(sp)
 8009e0c:	dd800817 	ldw	r22,32(sp)
 8009e10:	dd400717 	ldw	r21,28(sp)
 8009e14:	dd000617 	ldw	r20,24(sp)
 8009e18:	dcc00517 	ldw	r19,20(sp)
 8009e1c:	dc800417 	ldw	r18,16(sp)
 8009e20:	dc400317 	ldw	r17,12(sp)
 8009e24:	dc000217 	ldw	r16,8(sp)
 8009e28:	dec00c04 	addi	sp,sp,48
 8009e2c:	f800283a 	ret
 8009e30:	9809883a 	mov	r4,r19
 8009e34:	900b883a 	mov	r5,r18
 8009e38:	100d883a 	mov	r6,r2
 8009e3c:	180f883a 	mov	r7,r3
 8009e40:	800c2540 	call	800c254 <__muldf3>
 8009e44:	01955574 	movhi	r6,21845
 8009e48:	01cff174 	movhi	r7,16325
 8009e4c:	1009883a 	mov	r4,r2
 8009e50:	180b883a 	mov	r5,r3
 8009e54:	31955244 	addi	r6,r6,21833
 8009e58:	39d55544 	addi	r7,r7,21845
 8009e5c:	800c9780 	call	800c978 <__subdf3>
 8009e60:	a80d883a 	mov	r6,r21
 8009e64:	a00f883a 	mov	r7,r20
 8009e68:	1009883a 	mov	r4,r2
 8009e6c:	180b883a 	mov	r5,r3
 8009e70:	800c2540 	call	800c254 <__muldf3>
 8009e74:	1009883a 	mov	r4,r2
 8009e78:	180b883a 	mov	r5,r3
 8009e7c:	880d883a 	mov	r6,r17
 8009e80:	800f883a 	mov	r7,r16
 8009e84:	800aea80 	call	800aea8 <__adddf3>
 8009e88:	003fdd06 	br	8009e00 <__alt_data_end+0xfc009e00>
 8009e8c:	8805883a 	mov	r2,r17
 8009e90:	8007883a 	mov	r3,r16
 8009e94:	003fda06 	br	8009e00 <__alt_data_end+0xfc009e00>

08009e98 <atan>:
 8009e98:	defff704 	addi	sp,sp,-36
 8009e9c:	dc400115 	stw	r17,4(sp)
 8009ea0:	04600034 	movhi	r17,32768
 8009ea4:	8c7fffc4 	addi	r17,r17,-1
 8009ea8:	00910434 	movhi	r2,17424
 8009eac:	dc800215 	stw	r18,8(sp)
 8009eb0:	dc000015 	stw	r16,0(sp)
 8009eb4:	dfc00815 	stw	ra,32(sp)
 8009eb8:	ddc00715 	stw	r23,28(sp)
 8009ebc:	dd800615 	stw	r22,24(sp)
 8009ec0:	dd400515 	stw	r21,20(sp)
 8009ec4:	dd000415 	stw	r20,16(sp)
 8009ec8:	dcc00315 	stw	r19,12(sp)
 8009ecc:	2c62703a 	and	r17,r5,r17
 8009ed0:	10bfffc4 	addi	r2,r2,-1
 8009ed4:	2821883a 	mov	r16,r5
 8009ed8:	2025883a 	mov	r18,r4
 8009edc:	1440090e 	bge	r2,r17,8009f04 <atan+0x6c>
 8009ee0:	009ffc34 	movhi	r2,32752
 8009ee4:	1440bf16 	blt	r2,r17,800a1e4 <atan+0x34c>
 8009ee8:	8880bd26 	beq	r17,r2,800a1e0 <atan+0x348>
 8009eec:	00951134 	movhi	r2,21572
 8009ef0:	108b4604 	addi	r2,r2,11544
 8009ef4:	0400fc0e 	bge	zero,r16,800a2e8 <atan+0x450>
 8009ef8:	00cffe74 	movhi	r3,16377
 8009efc:	18c87ec4 	addi	r3,r3,8699
 8009f00:	0000bd06 	br	800a1f8 <atan+0x360>
 8009f04:	008ff734 	movhi	r2,16348
 8009f08:	10bfffc4 	addi	r2,r2,-1
 8009f0c:	282b883a 	mov	r21,r5
 8009f10:	1440d216 	blt	r2,r17,800a25c <atan+0x3c4>
 8009f14:	008f8834 	movhi	r2,15904
 8009f18:	10bfffc4 	addi	r2,r2,-1
 8009f1c:	1440c10e 	bge	r2,r17,800a224 <atan+0x38c>
 8009f20:	053fffc4 	movi	r20,-1
 8009f24:	9009883a 	mov	r4,r18
 8009f28:	800b883a 	mov	r5,r16
 8009f2c:	900d883a 	mov	r6,r18
 8009f30:	800f883a 	mov	r7,r16
 8009f34:	800c2540 	call	800c254 <__muldf3>
 8009f38:	1009883a 	mov	r4,r2
 8009f3c:	180b883a 	mov	r5,r3
 8009f40:	100d883a 	mov	r6,r2
 8009f44:	180f883a 	mov	r7,r3
 8009f48:	102f883a 	mov	r23,r2
 8009f4c:	182d883a 	mov	r22,r3
 8009f50:	800c2540 	call	800c254 <__muldf3>
 8009f54:	01b8c8f4 	movhi	r6,58147
 8009f58:	01cfe474 	movhi	r7,16273
 8009f5c:	1009883a 	mov	r4,r2
 8009f60:	180b883a 	mov	r5,r3
 8009f64:	31b68444 	addi	r6,r6,-9711
 8009f68:	39eb4e84 	addi	r7,r7,-21190
 8009f6c:	1027883a 	mov	r19,r2
 8009f70:	1823883a 	mov	r17,r3
 8009f74:	800c2540 	call	800c254 <__muldf3>
 8009f78:	01891db4 	movhi	r6,9334
 8009f7c:	01cfea74 	movhi	r7,16297
 8009f80:	1009883a 	mov	r4,r2
 8009f84:	180b883a 	mov	r5,r3
 8009f88:	31837ac4 	addi	r6,r6,3563
 8009f8c:	39ded2c4 	addi	r7,r7,31563
 8009f90:	800aea80 	call	800aea8 <__adddf3>
 8009f94:	1009883a 	mov	r4,r2
 8009f98:	180b883a 	mov	r5,r3
 8009f9c:	980d883a 	mov	r6,r19
 8009fa0:	880f883a 	mov	r7,r17
 8009fa4:	800c2540 	call	800c254 <__muldf3>
 8009fa8:	01a83434 	movhi	r6,41168
 8009fac:	01cfec74 	movhi	r7,16305
 8009fb0:	1009883a 	mov	r4,r2
 8009fb4:	180b883a 	mov	r5,r3
 8009fb8:	318f5444 	addi	r6,r6,15697
 8009fbc:	39c35984 	addi	r7,r7,3430
 8009fc0:	800aea80 	call	800aea8 <__adddf3>
 8009fc4:	1009883a 	mov	r4,r2
 8009fc8:	180b883a 	mov	r5,r3
 8009fcc:	980d883a 	mov	r6,r19
 8009fd0:	880f883a 	mov	r7,r17
 8009fd4:	800c2540 	call	800c254 <__muldf3>
 8009fd8:	01b15334 	movhi	r6,50508
 8009fdc:	01cfedf4 	movhi	r7,16311
 8009fe0:	1009883a 	mov	r4,r2
 8009fe4:	180b883a 	mov	r5,r3
 8009fe8:	31881b84 	addi	r6,r6,8302
 8009fec:	39d17344 	addi	r7,r7,17869
 8009ff0:	800aea80 	call	800aea8 <__adddf3>
 8009ff4:	1009883a 	mov	r4,r2
 8009ff8:	180b883a 	mov	r5,r3
 8009ffc:	980d883a 	mov	r6,r19
 800a000:	880f883a 	mov	r7,r17
 800a004:	800c2540 	call	800c254 <__muldf3>
 800a008:	01a48074 	movhi	r6,37377
 800a00c:	01cff0b4 	movhi	r7,16322
 800a010:	1009883a 	mov	r4,r2
 800a014:	180b883a 	mov	r5,r3
 800a018:	31a0ffc4 	addi	r6,r6,-31745
 800a01c:	39d24904 	addi	r7,r7,18724
 800a020:	800aea80 	call	800aea8 <__adddf3>
 800a024:	1009883a 	mov	r4,r2
 800a028:	180b883a 	mov	r5,r3
 800a02c:	980d883a 	mov	r6,r19
 800a030:	880f883a 	mov	r7,r17
 800a034:	800c2540 	call	800c254 <__muldf3>
 800a038:	01955574 	movhi	r6,21845
 800a03c:	01cff574 	movhi	r7,16341
 800a040:	1009883a 	mov	r4,r2
 800a044:	180b883a 	mov	r5,r3
 800a048:	31954344 	addi	r6,r6,21773
 800a04c:	39d55544 	addi	r7,r7,21845
 800a050:	800aea80 	call	800aea8 <__adddf3>
 800a054:	b80d883a 	mov	r6,r23
 800a058:	b00f883a 	mov	r7,r22
 800a05c:	1009883a 	mov	r4,r2
 800a060:	180b883a 	mov	r5,r3
 800a064:	800c2540 	call	800c254 <__muldf3>
 800a068:	018b1ab4 	movhi	r6,11370
 800a06c:	01efe8f4 	movhi	r7,49059
 800a070:	9809883a 	mov	r4,r19
 800a074:	880b883a 	mov	r5,r17
 800a078:	319b0bc4 	addi	r6,r6,27695
 800a07c:	39ed1104 	addi	r7,r7,-19388
 800a080:	102f883a 	mov	r23,r2
 800a084:	182d883a 	mov	r22,r3
 800a088:	800c2540 	call	800c254 <__muldf3>
 800a08c:	0194b7f4 	movhi	r6,21215
 800a090:	01cfebb4 	movhi	r7,16302
 800a094:	1009883a 	mov	r4,r2
 800a098:	180b883a 	mov	r5,r3
 800a09c:	31bf6684 	addi	r6,r6,-614
 800a0a0:	39f78b44 	addi	r7,r7,-8659
 800a0a4:	800c9780 	call	800c978 <__subdf3>
 800a0a8:	1009883a 	mov	r4,r2
 800a0ac:	180b883a 	mov	r5,r3
 800a0b0:	980d883a 	mov	r6,r19
 800a0b4:	880f883a 	mov	r7,r17
 800a0b8:	800c2540 	call	800c254 <__muldf3>
 800a0bc:	01abdd74 	movhi	r6,44917
 800a0c0:	01cfed34 	movhi	r7,16308
 800a0c4:	1009883a 	mov	r4,r2
 800a0c8:	180b883a 	mov	r5,r3
 800a0cc:	31a69b44 	addi	r6,r6,-26003
 800a0d0:	39ec3c84 	addi	r7,r7,-20238
 800a0d4:	800c9780 	call	800c978 <__subdf3>
 800a0d8:	1009883a 	mov	r4,r2
 800a0dc:	180b883a 	mov	r5,r3
 800a0e0:	980d883a 	mov	r6,r19
 800a0e4:	880f883a 	mov	r7,r17
 800a0e8:	800c2540 	call	800c254 <__muldf3>
 800a0ec:	01bf88f4 	movhi	r6,65059
 800a0f0:	01cfef34 	movhi	r7,16316
 800a0f4:	1009883a 	mov	r4,r2
 800a0f8:	180b883a 	mov	r5,r3
 800a0fc:	31859c44 	addi	r6,r6,5745
 800a100:	39dc7184 	addi	r7,r7,29126
 800a104:	800c9780 	call	800c978 <__subdf3>
 800a108:	1009883a 	mov	r4,r2
 800a10c:	180b883a 	mov	r5,r3
 800a110:	980d883a 	mov	r6,r19
 800a114:	880f883a 	mov	r7,r17
 800a118:	800c2540 	call	800c254 <__muldf3>
 800a11c:	01a66674 	movhi	r6,39321
 800a120:	01cff2b4 	movhi	r7,16330
 800a124:	1009883a 	mov	r4,r2
 800a128:	180b883a 	mov	r5,r3
 800a12c:	31baf104 	addi	r6,r6,-5180
 800a130:	39e66644 	addi	r7,r7,-26215
 800a134:	800c9780 	call	800c978 <__subdf3>
 800a138:	980d883a 	mov	r6,r19
 800a13c:	880f883a 	mov	r7,r17
 800a140:	1009883a 	mov	r4,r2
 800a144:	180b883a 	mov	r5,r3
 800a148:	800c2540 	call	800c254 <__muldf3>
 800a14c:	100d883a 	mov	r6,r2
 800a150:	00bfffc4 	movi	r2,-1
 800a154:	180f883a 	mov	r7,r3
 800a158:	a0806626 	beq	r20,r2,800a2f4 <atan+0x45c>
 800a15c:	b809883a 	mov	r4,r23
 800a160:	b00b883a 	mov	r5,r22
 800a164:	800aea80 	call	800aea8 <__adddf3>
 800a168:	1009883a 	mov	r4,r2
 800a16c:	180b883a 	mov	r5,r3
 800a170:	900d883a 	mov	r6,r18
 800a174:	800f883a 	mov	r7,r16
 800a178:	800c2540 	call	800c254 <__muldf3>
 800a17c:	a02890fa 	slli	r20,r20,3
 800a180:	1009883a 	mov	r4,r2
 800a184:	044200f4 	movhi	r17,2051
 800a188:	008200f4 	movhi	r2,2051
 800a18c:	10aaa804 	addi	r2,r2,-21856
 800a190:	8c6ab004 	addi	r17,r17,-21824
 800a194:	8d23883a 	add	r17,r17,r20
 800a198:	1529883a 	add	r20,r2,r20
 800a19c:	a1800017 	ldw	r6,0(r20)
 800a1a0:	a1c00117 	ldw	r7,4(r20)
 800a1a4:	180b883a 	mov	r5,r3
 800a1a8:	800c9780 	call	800c978 <__subdf3>
 800a1ac:	1009883a 	mov	r4,r2
 800a1b0:	180b883a 	mov	r5,r3
 800a1b4:	900d883a 	mov	r6,r18
 800a1b8:	800f883a 	mov	r7,r16
 800a1bc:	800c9780 	call	800c978 <__subdf3>
 800a1c0:	89000017 	ldw	r4,0(r17)
 800a1c4:	89400117 	ldw	r5,4(r17)
 800a1c8:	100d883a 	mov	r6,r2
 800a1cc:	180f883a 	mov	r7,r3
 800a1d0:	800c9780 	call	800c978 <__subdf3>
 800a1d4:	a800080e 	bge	r21,zero,800a1f8 <atan+0x360>
 800a1d8:	18e0003c 	xorhi	r3,r3,32768
 800a1dc:	00000606 	br	800a1f8 <atan+0x360>
 800a1e0:	203f4226 	beq	r4,zero,8009eec <__alt_data_end+0xfc009eec>
 800a1e4:	9009883a 	mov	r4,r18
 800a1e8:	800b883a 	mov	r5,r16
 800a1ec:	900d883a 	mov	r6,r18
 800a1f0:	800f883a 	mov	r7,r16
 800a1f4:	800aea80 	call	800aea8 <__adddf3>
 800a1f8:	dfc00817 	ldw	ra,32(sp)
 800a1fc:	ddc00717 	ldw	r23,28(sp)
 800a200:	dd800617 	ldw	r22,24(sp)
 800a204:	dd400517 	ldw	r21,20(sp)
 800a208:	dd000417 	ldw	r20,16(sp)
 800a20c:	dcc00317 	ldw	r19,12(sp)
 800a210:	dc800217 	ldw	r18,8(sp)
 800a214:	dc400117 	ldw	r17,4(sp)
 800a218:	dc000017 	ldw	r16,0(sp)
 800a21c:	dec00904 	addi	sp,sp,36
 800a220:	f800283a 	ret
 800a224:	01a20034 	movhi	r6,34816
 800a228:	01df8e34 	movhi	r7,32312
 800a22c:	319d6704 	addi	r6,r6,30108
 800a230:	39f90f04 	addi	r7,r7,-7108
 800a234:	800aea80 	call	800aea8 <__adddf3>
 800a238:	1009883a 	mov	r4,r2
 800a23c:	180b883a 	mov	r5,r3
 800a240:	000d883a 	mov	r6,zero
 800a244:	01cffc34 	movhi	r7,16368
 800a248:	800c0940 	call	800c094 <__gedf2>
 800a24c:	00bf340e 	bge	zero,r2,8009f20 <__alt_data_end+0xfc009f20>
 800a250:	9005883a 	mov	r2,r18
 800a254:	8007883a 	mov	r3,r16
 800a258:	003fe706 	br	800a1f8 <__alt_data_end+0xfc00a1f8>
 800a25c:	800a4180 	call	800a418 <fabs>
 800a260:	1025883a 	mov	r18,r2
 800a264:	008ffcf4 	movhi	r2,16371
 800a268:	10bfffc4 	addi	r2,r2,-1
 800a26c:	1821883a 	mov	r16,r3
 800a270:	14402e16 	blt	r2,r17,800a32c <atan+0x494>
 800a274:	008ff9b4 	movhi	r2,16358
 800a278:	10bfffc4 	addi	r2,r2,-1
 800a27c:	14405116 	blt	r2,r17,800a3c4 <atan+0x52c>
 800a280:	900d883a 	mov	r6,r18
 800a284:	9009883a 	mov	r4,r18
 800a288:	180f883a 	mov	r7,r3
 800a28c:	180b883a 	mov	r5,r3
 800a290:	800aea80 	call	800aea8 <__adddf3>
 800a294:	1009883a 	mov	r4,r2
 800a298:	180b883a 	mov	r5,r3
 800a29c:	000d883a 	mov	r6,zero
 800a2a0:	01cffc34 	movhi	r7,16368
 800a2a4:	800c9780 	call	800c978 <__subdf3>
 800a2a8:	9009883a 	mov	r4,r18
 800a2ac:	800b883a 	mov	r5,r16
 800a2b0:	000d883a 	mov	r6,zero
 800a2b4:	01d00034 	movhi	r7,16384
 800a2b8:	1027883a 	mov	r19,r2
 800a2bc:	1823883a 	mov	r17,r3
 800a2c0:	800aea80 	call	800aea8 <__adddf3>
 800a2c4:	9809883a 	mov	r4,r19
 800a2c8:	880b883a 	mov	r5,r17
 800a2cc:	100d883a 	mov	r6,r2
 800a2d0:	180f883a 	mov	r7,r3
 800a2d4:	800b7440 	call	800b744 <__divdf3>
 800a2d8:	1025883a 	mov	r18,r2
 800a2dc:	1821883a 	mov	r16,r3
 800a2e0:	0029883a 	mov	r20,zero
 800a2e4:	003f0f06 	br	8009f24 <__alt_data_end+0xfc009f24>
 800a2e8:	00effe74 	movhi	r3,49145
 800a2ec:	18c87ec4 	addi	r3,r3,8699
 800a2f0:	003fc106 	br	800a1f8 <__alt_data_end+0xfc00a1f8>
 800a2f4:	b809883a 	mov	r4,r23
 800a2f8:	b00b883a 	mov	r5,r22
 800a2fc:	800aea80 	call	800aea8 <__adddf3>
 800a300:	900d883a 	mov	r6,r18
 800a304:	800f883a 	mov	r7,r16
 800a308:	1009883a 	mov	r4,r2
 800a30c:	180b883a 	mov	r5,r3
 800a310:	800c2540 	call	800c254 <__muldf3>
 800a314:	9009883a 	mov	r4,r18
 800a318:	800b883a 	mov	r5,r16
 800a31c:	100d883a 	mov	r6,r2
 800a320:	180f883a 	mov	r7,r3
 800a324:	800c9780 	call	800c978 <__subdf3>
 800a328:	003fb306 	br	800a1f8 <__alt_data_end+0xfc00a1f8>
 800a32c:	009000f4 	movhi	r2,16387
 800a330:	109fffc4 	addi	r2,r2,32767
 800a334:	14401a16 	blt	r2,r17,800a3a0 <atan+0x508>
 800a338:	9009883a 	mov	r4,r18
 800a33c:	000d883a 	mov	r6,zero
 800a340:	01cffe34 	movhi	r7,16376
 800a344:	180b883a 	mov	r5,r3
 800a348:	800c9780 	call	800c978 <__subdf3>
 800a34c:	9009883a 	mov	r4,r18
 800a350:	800b883a 	mov	r5,r16
 800a354:	000d883a 	mov	r6,zero
 800a358:	01cffe34 	movhi	r7,16376
 800a35c:	1027883a 	mov	r19,r2
 800a360:	1823883a 	mov	r17,r3
 800a364:	800c2540 	call	800c254 <__muldf3>
 800a368:	1009883a 	mov	r4,r2
 800a36c:	180b883a 	mov	r5,r3
 800a370:	000d883a 	mov	r6,zero
 800a374:	01cffc34 	movhi	r7,16368
 800a378:	800aea80 	call	800aea8 <__adddf3>
 800a37c:	9809883a 	mov	r4,r19
 800a380:	880b883a 	mov	r5,r17
 800a384:	100d883a 	mov	r6,r2
 800a388:	180f883a 	mov	r7,r3
 800a38c:	800b7440 	call	800b744 <__divdf3>
 800a390:	1025883a 	mov	r18,r2
 800a394:	1821883a 	mov	r16,r3
 800a398:	05000084 	movi	r20,2
 800a39c:	003ee106 	br	8009f24 <__alt_data_end+0xfc009f24>
 800a3a0:	900d883a 	mov	r6,r18
 800a3a4:	0009883a 	mov	r4,zero
 800a3a8:	016ffc34 	movhi	r5,49136
 800a3ac:	180f883a 	mov	r7,r3
 800a3b0:	800b7440 	call	800b744 <__divdf3>
 800a3b4:	1025883a 	mov	r18,r2
 800a3b8:	1821883a 	mov	r16,r3
 800a3bc:	050000c4 	movi	r20,3
 800a3c0:	003ed806 	br	8009f24 <__alt_data_end+0xfc009f24>
 800a3c4:	9009883a 	mov	r4,r18
 800a3c8:	000d883a 	mov	r6,zero
 800a3cc:	01cffc34 	movhi	r7,16368
 800a3d0:	180b883a 	mov	r5,r3
 800a3d4:	800c9780 	call	800c978 <__subdf3>
 800a3d8:	9009883a 	mov	r4,r18
 800a3dc:	800b883a 	mov	r5,r16
 800a3e0:	000d883a 	mov	r6,zero
 800a3e4:	01cffc34 	movhi	r7,16368
 800a3e8:	1027883a 	mov	r19,r2
 800a3ec:	1823883a 	mov	r17,r3
 800a3f0:	800aea80 	call	800aea8 <__adddf3>
 800a3f4:	9809883a 	mov	r4,r19
 800a3f8:	880b883a 	mov	r5,r17
 800a3fc:	100d883a 	mov	r6,r2
 800a400:	180f883a 	mov	r7,r3
 800a404:	800b7440 	call	800b744 <__divdf3>
 800a408:	1025883a 	mov	r18,r2
 800a40c:	1821883a 	mov	r16,r3
 800a410:	05000044 	movi	r20,1
 800a414:	003ec306 	br	8009f24 <__alt_data_end+0xfc009f24>

0800a418 <fabs>:
 800a418:	00e00034 	movhi	r3,32768
 800a41c:	18ffffc4 	addi	r3,r3,-1
 800a420:	2005883a 	mov	r2,r4
 800a424:	28c6703a 	and	r3,r5,r3
 800a428:	f800283a 	ret

0800a42c <finite>:
 800a42c:	00a00034 	movhi	r2,32768
 800a430:	10bfffc4 	addi	r2,r2,-1
 800a434:	288a703a 	and	r5,r5,r2
 800a438:	00e00434 	movhi	r3,32784
 800a43c:	28c5883a 	add	r2,r5,r3
 800a440:	1004d7fa 	srli	r2,r2,31
 800a444:	f800283a 	ret

0800a448 <__fpclassifyd>:
 800a448:	00a00034 	movhi	r2,32768
 800a44c:	10bfffc4 	addi	r2,r2,-1
 800a450:	2884703a 	and	r2,r5,r2
 800a454:	10000726 	beq	r2,zero,800a474 <__fpclassifyd+0x2c>
 800a458:	00fffc34 	movhi	r3,65520
 800a45c:	019ff834 	movhi	r6,32736
 800a460:	28c7883a 	add	r3,r5,r3
 800a464:	31bfffc4 	addi	r6,r6,-1
 800a468:	30c00536 	bltu	r6,r3,800a480 <__fpclassifyd+0x38>
 800a46c:	00800104 	movi	r2,4
 800a470:	f800283a 	ret
 800a474:	2000021e 	bne	r4,zero,800a480 <__fpclassifyd+0x38>
 800a478:	00800084 	movi	r2,2
 800a47c:	f800283a 	ret
 800a480:	00dffc34 	movhi	r3,32752
 800a484:	019ff834 	movhi	r6,32736
 800a488:	28cb883a 	add	r5,r5,r3
 800a48c:	31bfffc4 	addi	r6,r6,-1
 800a490:	317ff62e 	bgeu	r6,r5,800a46c <__alt_data_end+0xfc00a46c>
 800a494:	01400434 	movhi	r5,16
 800a498:	297fffc4 	addi	r5,r5,-1
 800a49c:	28800236 	bltu	r5,r2,800a4a8 <__fpclassifyd+0x60>
 800a4a0:	008000c4 	movi	r2,3
 800a4a4:	f800283a 	ret
 800a4a8:	10c00226 	beq	r2,r3,800a4b4 <__fpclassifyd+0x6c>
 800a4ac:	0005883a 	mov	r2,zero
 800a4b0:	f800283a 	ret
 800a4b4:	2005003a 	cmpeq	r2,r4,zero
 800a4b8:	f800283a 	ret

0800a4bc <matherr>:
 800a4bc:	0005883a 	mov	r2,zero
 800a4c0:	f800283a 	ret

0800a4c4 <nan>:
 800a4c4:	0005883a 	mov	r2,zero
 800a4c8:	00dffe34 	movhi	r3,32760
 800a4cc:	f800283a 	ret

0800a4d0 <rint>:
 800a4d0:	2813d53a 	srai	r9,r5,20
 800a4d4:	defff904 	addi	sp,sp,-28
 800a4d8:	dc400315 	stw	r17,12(sp)
 800a4dc:	4a41ffcc 	andi	r9,r9,2047
 800a4e0:	dfc00615 	stw	ra,24(sp)
 800a4e4:	dcc00515 	stw	r19,20(sp)
 800a4e8:	dc800415 	stw	r18,16(sp)
 800a4ec:	dc000215 	stw	r16,8(sp)
 800a4f0:	02c004c4 	movi	r11,19
 800a4f4:	4abf0044 	addi	r10,r9,-1023
 800a4f8:	2811883a 	mov	r8,r5
 800a4fc:	2005883a 	mov	r2,r4
 800a500:	280f883a 	mov	r7,r5
 800a504:	200d883a 	mov	r6,r4
 800a508:	2822d7fa 	srli	r17,r5,31
 800a50c:	5a801316 	blt	r11,r10,800a55c <rint+0x8c>
 800a510:	50003c16 	blt	r10,zero,800a604 <rint+0x134>
 800a514:	00c00434 	movhi	r3,16
 800a518:	18ffffc4 	addi	r3,r3,-1
 800a51c:	1a87d83a 	sra	r3,r3,r10
 800a520:	1948703a 	and	r4,r3,r5
 800a524:	2088b03a 	or	r4,r4,r2
 800a528:	20001026 	beq	r4,zero,800a56c <rint+0x9c>
 800a52c:	1804d07a 	srli	r2,r3,1
 800a530:	1146703a 	and	r3,r2,r5
 800a534:	198cb03a 	or	r6,r3,r6
 800a538:	30005526 	beq	r6,zero,800a690 <rint+0x1c0>
 800a53c:	52c05b26 	beq	r10,r11,800a6ac <rint+0x1dc>
 800a540:	000d883a 	mov	r6,zero
 800a544:	00c00134 	movhi	r3,4
 800a548:	1a87d83a 	sra	r3,r3,r10
 800a54c:	0084303a 	nor	r2,zero,r2
 800a550:	1210703a 	and	r8,r2,r8
 800a554:	40ceb03a 	or	r7,r8,r3
 800a558:	00001906 	br	800a5c0 <rint+0xf0>
 800a55c:	00c00cc4 	movi	r3,51
 800a560:	1a800a0e 	bge	r3,r10,800a58c <rint+0xbc>
 800a564:	00c10004 	movi	r3,1024
 800a568:	50c04d26 	beq	r10,r3,800a6a0 <rint+0x1d0>
 800a56c:	3807883a 	mov	r3,r7
 800a570:	dfc00617 	ldw	ra,24(sp)
 800a574:	dcc00517 	ldw	r19,20(sp)
 800a578:	dc800417 	ldw	r18,16(sp)
 800a57c:	dc400317 	ldw	r17,12(sp)
 800a580:	dc000217 	ldw	r16,8(sp)
 800a584:	dec00704 	addi	sp,sp,28
 800a588:	f800283a 	ret
 800a58c:	4a7efb44 	addi	r9,r9,-1043
 800a590:	00ffffc4 	movi	r3,-1
 800a594:	1a46d83a 	srl	r3,r3,r9
 800a598:	1908703a 	and	r4,r3,r4
 800a59c:	20003e26 	beq	r4,zero,800a698 <rint+0x1c8>
 800a5a0:	1806d07a 	srli	r3,r3,1
 800a5a4:	1884703a 	and	r2,r3,r2
 800a5a8:	10000526 	beq	r2,zero,800a5c0 <rint+0xf0>
 800a5ac:	00900034 	movhi	r2,16384
 800a5b0:	1253d83a 	sra	r9,r2,r9
 800a5b4:	00c6303a 	nor	r3,zero,r3
 800a5b8:	198c703a 	and	r6,r3,r6
 800a5bc:	324cb03a 	or	r6,r6,r9
 800a5c0:	882290fa 	slli	r17,r17,3
 800a5c4:	00c200f4 	movhi	r3,2051
 800a5c8:	18eab804 	addi	r3,r3,-21792
 800a5cc:	1c63883a 	add	r17,r3,r17
 800a5d0:	8c800017 	ldw	r18,0(r17)
 800a5d4:	8c000117 	ldw	r16,4(r17)
 800a5d8:	9009883a 	mov	r4,r18
 800a5dc:	800b883a 	mov	r5,r16
 800a5e0:	800aea80 	call	800aea8 <__adddf3>
 800a5e4:	d8800015 	stw	r2,0(sp)
 800a5e8:	d8c00115 	stw	r3,4(sp)
 800a5ec:	d9000017 	ldw	r4,0(sp)
 800a5f0:	d9400117 	ldw	r5,4(sp)
 800a5f4:	900d883a 	mov	r6,r18
 800a5f8:	800f883a 	mov	r7,r16
 800a5fc:	800c9780 	call	800c978 <__subdf3>
 800a600:	003fdb06 	br	800a570 <__alt_data_end+0xfc00a570>
 800a604:	04200034 	movhi	r16,32768
 800a608:	843fffc4 	addi	r16,r16,-1
 800a60c:	2c06703a 	and	r3,r5,r16
 800a610:	1906b03a 	or	r3,r3,r4
 800a614:	18002026 	beq	r3,zero,800a698 <rint+0x1c8>
 800a618:	00c00434 	movhi	r3,16
 800a61c:	18ffffc4 	addi	r3,r3,-1
 800a620:	28c6703a 	and	r3,r5,r3
 800a624:	1886b03a 	or	r3,r3,r2
 800a628:	880890fa 	slli	r4,r17,3
 800a62c:	00d3c83a 	sub	r9,zero,r3
 800a630:	48d2b03a 	or	r9,r9,r3
 800a634:	00c200f4 	movhi	r3,2051
 800a638:	18eab804 	addi	r3,r3,-21792
 800a63c:	1907883a 	add	r3,r3,r4
 800a640:	4812d33a 	srli	r9,r9,12
 800a644:	1cc00017 	ldw	r19,0(r3)
 800a648:	1c800117 	ldw	r18,4(r3)
 800a64c:	4a40022c 	andhi	r9,r9,8
 800a650:	29ffffac 	andhi	r7,r5,65534
 800a654:	49ceb03a 	or	r7,r9,r7
 800a658:	9809883a 	mov	r4,r19
 800a65c:	900b883a 	mov	r5,r18
 800a660:	800aea80 	call	800aea8 <__adddf3>
 800a664:	d8800015 	stw	r2,0(sp)
 800a668:	d8c00115 	stw	r3,4(sp)
 800a66c:	d9000017 	ldw	r4,0(sp)
 800a670:	d9400117 	ldw	r5,4(sp)
 800a674:	980d883a 	mov	r6,r19
 800a678:	900f883a 	mov	r7,r18
 800a67c:	800c9780 	call	800c978 <__subdf3>
 800a680:	881097fa 	slli	r8,r17,31
 800a684:	1c06703a 	and	r3,r3,r16
 800a688:	40c6b03a 	or	r3,r8,r3
 800a68c:	003fb806 	br	800a570 <__alt_data_end+0xfc00a570>
 800a690:	000d883a 	mov	r6,zero
 800a694:	003fca06 	br	800a5c0 <__alt_data_end+0xfc00a5c0>
 800a698:	4007883a 	mov	r3,r8
 800a69c:	003fb406 	br	800a570 <__alt_data_end+0xfc00a570>
 800a6a0:	200d883a 	mov	r6,r4
 800a6a4:	800aea80 	call	800aea8 <__adddf3>
 800a6a8:	003fb106 	br	800a570 <__alt_data_end+0xfc00a570>
 800a6ac:	01a00034 	movhi	r6,32768
 800a6b0:	003fa406 	br	800a544 <__alt_data_end+0xfc00a544>

0800a6b4 <scalbn>:
 800a6b4:	2a1ffc2c 	andhi	r8,r5,32752
 800a6b8:	4011d53a 	srai	r8,r8,20
 800a6bc:	defffe04 	addi	sp,sp,-8
 800a6c0:	dc000015 	stw	r16,0(sp)
 800a6c4:	dfc00115 	stw	ra,4(sp)
 800a6c8:	280f883a 	mov	r7,r5
 800a6cc:	2015883a 	mov	r10,r4
 800a6d0:	3021883a 	mov	r16,r6
 800a6d4:	4000251e 	bne	r8,zero,800a76c <scalbn+0xb8>
 800a6d8:	00a00034 	movhi	r2,32768
 800a6dc:	10bfffc4 	addi	r2,r2,-1
 800a6e0:	2884703a 	and	r2,r5,r2
 800a6e4:	1104b03a 	or	r2,r2,r4
 800a6e8:	10003126 	beq	r2,zero,800a7b0 <scalbn+0xfc>
 800a6ec:	01d0d434 	movhi	r7,17232
 800a6f0:	000d883a 	mov	r6,zero
 800a6f4:	800c2540 	call	800c254 <__muldf3>
 800a6f8:	013ffff4 	movhi	r4,65535
 800a6fc:	210f2c04 	addi	r4,r4,15536
 800a700:	1015883a 	mov	r10,r2
 800a704:	180f883a 	mov	r7,r3
 800a708:	81002f16 	blt	r16,r4,800a7c8 <scalbn+0x114>
 800a70c:	1a5ffc2c 	andhi	r9,r3,32752
 800a710:	4813d53a 	srai	r9,r9,20
 800a714:	0081ff84 	movi	r2,2046
 800a718:	180d883a 	mov	r6,r3
 800a71c:	4a3ff284 	addi	r8,r9,-54
 800a720:	4411883a 	add	r8,r8,r16
 800a724:	1200170e 	bge	r2,r8,800a784 <scalbn+0xd0>
 800a728:	01220034 	movhi	r4,34816
 800a72c:	015f8e34 	movhi	r5,32312
 800a730:	500d883a 	mov	r6,r10
 800a734:	211d6704 	addi	r4,r4,30108
 800a738:	29790f04 	addi	r5,r5,-7108
 800a73c:	800a8800 	call	800a880 <copysign>
 800a740:	01a20034 	movhi	r6,34816
 800a744:	01df8e34 	movhi	r7,32312
 800a748:	1009883a 	mov	r4,r2
 800a74c:	180b883a 	mov	r5,r3
 800a750:	319d6704 	addi	r6,r6,30108
 800a754:	39f90f04 	addi	r7,r7,-7108
 800a758:	800c2540 	call	800c254 <__muldf3>
 800a75c:	dfc00117 	ldw	ra,4(sp)
 800a760:	dc000017 	ldw	r16,0(sp)
 800a764:	dec00204 	addi	sp,sp,8
 800a768:	f800283a 	ret
 800a76c:	0081ffc4 	movi	r2,2047
 800a770:	280d883a 	mov	r6,r5
 800a774:	40803126 	beq	r8,r2,800a83c <scalbn+0x188>
 800a778:	4411883a 	add	r8,r8,r16
 800a77c:	0081ff84 	movi	r2,2046
 800a780:	123fe916 	blt	r2,r8,800a728 <__alt_data_end+0xfc00a728>
 800a784:	02001b0e 	bge	zero,r8,800a7f4 <scalbn+0x140>
 800a788:	4010953a 	slli	r8,r8,20
 800a78c:	00e00434 	movhi	r3,32784
 800a790:	18ffffc4 	addi	r3,r3,-1
 800a794:	30ce703a 	and	r7,r6,r3
 800a798:	5005883a 	mov	r2,r10
 800a79c:	41c6b03a 	or	r3,r8,r7
 800a7a0:	dfc00117 	ldw	ra,4(sp)
 800a7a4:	dc000017 	ldw	r16,0(sp)
 800a7a8:	dec00204 	addi	sp,sp,8
 800a7ac:	f800283a 	ret
 800a7b0:	2005883a 	mov	r2,r4
 800a7b4:	2807883a 	mov	r3,r5
 800a7b8:	dfc00117 	ldw	ra,4(sp)
 800a7bc:	dc000017 	ldw	r16,0(sp)
 800a7c0:	dec00204 	addi	sp,sp,8
 800a7c4:	f800283a 	ret
 800a7c8:	01b0be74 	movhi	r6,49913
 800a7cc:	01c06974 	movhi	r7,421
 800a7d0:	31bcd644 	addi	r6,r6,-3239
 800a7d4:	39db87c4 	addi	r7,r7,28191
 800a7d8:	1009883a 	mov	r4,r2
 800a7dc:	180b883a 	mov	r5,r3
 800a7e0:	800c2540 	call	800c254 <__muldf3>
 800a7e4:	dfc00117 	ldw	ra,4(sp)
 800a7e8:	dc000017 	ldw	r16,0(sp)
 800a7ec:	dec00204 	addi	sp,sp,8
 800a7f0:	f800283a 	ret
 800a7f4:	00bff2c4 	movi	r2,-53
 800a7f8:	4080160e 	bge	r8,r2,800a854 <scalbn+0x1a0>
 800a7fc:	00b0d414 	movui	r2,50000
 800a800:	143fc916 	blt	r2,r16,800a728 <__alt_data_end+0xfc00a728>
 800a804:	0130be74 	movhi	r4,49913
 800a808:	01406974 	movhi	r5,421
 800a80c:	500d883a 	mov	r6,r10
 800a810:	213cd644 	addi	r4,r4,-3239
 800a814:	295b87c4 	addi	r5,r5,28191
 800a818:	800a8800 	call	800a880 <copysign>
 800a81c:	01b0be74 	movhi	r6,49913
 800a820:	01c06974 	movhi	r7,421
 800a824:	1009883a 	mov	r4,r2
 800a828:	180b883a 	mov	r5,r3
 800a82c:	31bcd644 	addi	r6,r6,-3239
 800a830:	39db87c4 	addi	r7,r7,28191
 800a834:	800c2540 	call	800c254 <__muldf3>
 800a838:	003fd906 	br	800a7a0 <__alt_data_end+0xfc00a7a0>
 800a83c:	200d883a 	mov	r6,r4
 800a840:	800aea80 	call	800aea8 <__adddf3>
 800a844:	dfc00117 	ldw	ra,4(sp)
 800a848:	dc000017 	ldw	r16,0(sp)
 800a84c:	dec00204 	addi	sp,sp,8
 800a850:	f800283a 	ret
 800a854:	42000d84 	addi	r8,r8,54
 800a858:	4012953a 	slli	r9,r8,20
 800a85c:	01e00434 	movhi	r7,32784
 800a860:	39ffffc4 	addi	r7,r7,-1
 800a864:	31ca703a 	and	r5,r6,r7
 800a868:	5009883a 	mov	r4,r10
 800a86c:	494ab03a 	or	r5,r9,r5
 800a870:	000d883a 	mov	r6,zero
 800a874:	01cf2434 	movhi	r7,15504
 800a878:	800c2540 	call	800c254 <__muldf3>
 800a87c:	003fc806 	br	800a7a0 <__alt_data_end+0xfc00a7a0>

0800a880 <copysign>:
 800a880:	2005883a 	mov	r2,r4
 800a884:	01200034 	movhi	r4,32768
 800a888:	213fffc4 	addi	r4,r4,-1
 800a88c:	38e0002c 	andhi	r3,r7,32768
 800a890:	290a703a 	and	r5,r5,r4
 800a894:	1946b03a 	or	r3,r3,r5
 800a898:	f800283a 	ret

0800a89c <udivmodsi4>:
 800a89c:	2900182e 	bgeu	r5,r4,800a900 <udivmodsi4+0x64>
 800a8a0:	28001716 	blt	r5,zero,800a900 <udivmodsi4+0x64>
 800a8a4:	00800804 	movi	r2,32
 800a8a8:	00c00044 	movi	r3,1
 800a8ac:	00000206 	br	800a8b8 <udivmodsi4+0x1c>
 800a8b0:	10001126 	beq	r2,zero,800a8f8 <udivmodsi4+0x5c>
 800a8b4:	28000516 	blt	r5,zero,800a8cc <udivmodsi4+0x30>
 800a8b8:	294b883a 	add	r5,r5,r5
 800a8bc:	10bfffc4 	addi	r2,r2,-1
 800a8c0:	18c7883a 	add	r3,r3,r3
 800a8c4:	293ffa36 	bltu	r5,r4,800a8b0 <__alt_data_end+0xfc00a8b0>
 800a8c8:	18000b26 	beq	r3,zero,800a8f8 <udivmodsi4+0x5c>
 800a8cc:	0005883a 	mov	r2,zero
 800a8d0:	21400236 	bltu	r4,r5,800a8dc <udivmodsi4+0x40>
 800a8d4:	2149c83a 	sub	r4,r4,r5
 800a8d8:	10c4b03a 	or	r2,r2,r3
 800a8dc:	1806d07a 	srli	r3,r3,1
 800a8e0:	280ad07a 	srli	r5,r5,1
 800a8e4:	183ffa1e 	bne	r3,zero,800a8d0 <__alt_data_end+0xfc00a8d0>
 800a8e8:	3000011e 	bne	r6,zero,800a8f0 <udivmodsi4+0x54>
 800a8ec:	f800283a 	ret
 800a8f0:	2005883a 	mov	r2,r4
 800a8f4:	f800283a 	ret
 800a8f8:	0005883a 	mov	r2,zero
 800a8fc:	003ffa06 	br	800a8e8 <__alt_data_end+0xfc00a8e8>
 800a900:	00c00044 	movi	r3,1
 800a904:	003ff106 	br	800a8cc <__alt_data_end+0xfc00a8cc>

0800a908 <__divsi3>:
 800a908:	defffe04 	addi	sp,sp,-8
 800a90c:	dfc00115 	stw	ra,4(sp)
 800a910:	dc000015 	stw	r16,0(sp)
 800a914:	20000b16 	blt	r4,zero,800a944 <__divsi3+0x3c>
 800a918:	0021883a 	mov	r16,zero
 800a91c:	28000c16 	blt	r5,zero,800a950 <__divsi3+0x48>
 800a920:	000d883a 	mov	r6,zero
 800a924:	800a89c0 	call	800a89c <udivmodsi4>
 800a928:	0407c83a 	sub	r3,zero,r16
 800a92c:	1884f03a 	xor	r2,r3,r2
 800a930:	1405883a 	add	r2,r2,r16
 800a934:	dfc00117 	ldw	ra,4(sp)
 800a938:	dc000017 	ldw	r16,0(sp)
 800a93c:	dec00204 	addi	sp,sp,8
 800a940:	f800283a 	ret
 800a944:	0109c83a 	sub	r4,zero,r4
 800a948:	04000044 	movi	r16,1
 800a94c:	283ff40e 	bge	r5,zero,800a920 <__alt_data_end+0xfc00a920>
 800a950:	014bc83a 	sub	r5,zero,r5
 800a954:	8400005c 	xori	r16,r16,1
 800a958:	003ff106 	br	800a920 <__alt_data_end+0xfc00a920>

0800a95c <__modsi3>:
 800a95c:	defffd04 	addi	sp,sp,-12
 800a960:	dfc00215 	stw	ra,8(sp)
 800a964:	dc400115 	stw	r17,4(sp)
 800a968:	dc000015 	stw	r16,0(sp)
 800a96c:	20000c16 	blt	r4,zero,800a9a0 <__modsi3+0x44>
 800a970:	0023883a 	mov	r17,zero
 800a974:	0021883a 	mov	r16,zero
 800a978:	28000d16 	blt	r5,zero,800a9b0 <__modsi3+0x54>
 800a97c:	01800044 	movi	r6,1
 800a980:	800a89c0 	call	800a89c <udivmodsi4>
 800a984:	1404f03a 	xor	r2,r2,r16
 800a988:	8885883a 	add	r2,r17,r2
 800a98c:	dfc00217 	ldw	ra,8(sp)
 800a990:	dc400117 	ldw	r17,4(sp)
 800a994:	dc000017 	ldw	r16,0(sp)
 800a998:	dec00304 	addi	sp,sp,12
 800a99c:	f800283a 	ret
 800a9a0:	0109c83a 	sub	r4,zero,r4
 800a9a4:	04400044 	movi	r17,1
 800a9a8:	043fffc4 	movi	r16,-1
 800a9ac:	283ff30e 	bge	r5,zero,800a97c <__alt_data_end+0xfc00a97c>
 800a9b0:	014bc83a 	sub	r5,zero,r5
 800a9b4:	003ff106 	br	800a97c <__alt_data_end+0xfc00a97c>

0800a9b8 <__udivsi3>:
 800a9b8:	000d883a 	mov	r6,zero
 800a9bc:	800a89c1 	jmpi	800a89c <udivmodsi4>

0800a9c0 <__umodsi3>:
 800a9c0:	01800044 	movi	r6,1
 800a9c4:	800a89c1 	jmpi	800a89c <udivmodsi4>

0800a9c8 <__addsf3>:
 800a9c8:	defffc04 	addi	sp,sp,-16
 800a9cc:	2004d7fa 	srli	r2,r4,31
 800a9d0:	280ed5fa 	srli	r7,r5,23
 800a9d4:	dc000015 	stw	r16,0(sp)
 800a9d8:	01802034 	movhi	r6,128
 800a9dc:	2020d5fa 	srli	r16,r4,23
 800a9e0:	31bfffc4 	addi	r6,r6,-1
 800a9e4:	2810d7fa 	srli	r8,r5,31
 800a9e8:	3108703a 	and	r4,r6,r4
 800a9ec:	dc800215 	stw	r18,8(sp)
 800a9f0:	314c703a 	and	r6,r6,r5
 800a9f4:	84003fcc 	andi	r16,r16,255
 800a9f8:	200690fa 	slli	r3,r4,3
 800a9fc:	dfc00315 	stw	ra,12(sp)
 800aa00:	39003fcc 	andi	r4,r7,255
 800aa04:	dc400115 	stw	r17,4(sp)
 800aa08:	14803fcc 	andi	r18,r2,255
 800aa0c:	300c90fa 	slli	r6,r6,3
 800aa10:	810bc83a 	sub	r5,r16,r4
 800aa14:	92004826 	beq	r18,r8,800ab38 <__addsf3+0x170>
 800aa18:	01406c0e 	bge	zero,r5,800abcc <__addsf3+0x204>
 800aa1c:	20001e1e 	bne	r4,zero,800aa98 <__addsf3+0xd0>
 800aa20:	3000611e 	bne	r6,zero,800aba8 <__addsf3+0x1e0>
 800aa24:	188001cc 	andi	r2,r3,7
 800aa28:	10000426 	beq	r2,zero,800aa3c <__addsf3+0x74>
 800aa2c:	190003cc 	andi	r4,r3,15
 800aa30:	00800104 	movi	r2,4
 800aa34:	20800126 	beq	r4,r2,800aa3c <__addsf3+0x74>
 800aa38:	18c00104 	addi	r3,r3,4
 800aa3c:	1901002c 	andhi	r4,r3,1024
 800aa40:	9005883a 	mov	r2,r18
 800aa44:	20003426 	beq	r4,zero,800ab18 <__addsf3+0x150>
 800aa48:	81400044 	addi	r5,r16,1
 800aa4c:	01003fc4 	movi	r4,255
 800aa50:	29006926 	beq	r5,r4,800abf8 <__addsf3+0x230>
 800aa54:	180691ba 	slli	r3,r3,6
 800aa58:	1808d27a 	srli	r4,r3,9
 800aa5c:	29403fcc 	andi	r5,r5,255
 800aa60:	280a95fa 	slli	r5,r5,23
 800aa64:	10803fcc 	andi	r2,r2,255
 800aa68:	00c02034 	movhi	r3,128
 800aa6c:	100497fa 	slli	r2,r2,31
 800aa70:	18ffffc4 	addi	r3,r3,-1
 800aa74:	20c6703a 	and	r3,r4,r3
 800aa78:	1946b03a 	or	r3,r3,r5
 800aa7c:	1884b03a 	or	r2,r3,r2
 800aa80:	dfc00317 	ldw	ra,12(sp)
 800aa84:	dc800217 	ldw	r18,8(sp)
 800aa88:	dc400117 	ldw	r17,4(sp)
 800aa8c:	dc000017 	ldw	r16,0(sp)
 800aa90:	dec00404 	addi	sp,sp,16
 800aa94:	f800283a 	ret
 800aa98:	00803fc4 	movi	r2,255
 800aa9c:	80bfe126 	beq	r16,r2,800aa24 <__alt_data_end+0xfc00aa24>
 800aaa0:	31810034 	orhi	r6,r6,1024
 800aaa4:	008006c4 	movi	r2,27
 800aaa8:	11405b0e 	bge	r2,r5,800ac18 <__addsf3+0x250>
 800aaac:	01400044 	movi	r5,1
 800aab0:	1947c83a 	sub	r3,r3,r5
 800aab4:	1881002c 	andhi	r2,r3,1024
 800aab8:	10001426 	beq	r2,zero,800ab0c <__addsf3+0x144>
 800aabc:	04410034 	movhi	r17,1024
 800aac0:	8c7fffc4 	addi	r17,r17,-1
 800aac4:	1c62703a 	and	r17,r3,r17
 800aac8:	8809883a 	mov	r4,r17
 800aacc:	800d6480 	call	800d648 <__clzsi2>
 800aad0:	10bffec4 	addi	r2,r2,-5
 800aad4:	88a2983a 	sll	r17,r17,r2
 800aad8:	14004a16 	blt	r2,r16,800ac04 <__addsf3+0x23c>
 800aadc:	140bc83a 	sub	r5,r2,r16
 800aae0:	00c007c4 	movi	r3,31
 800aae4:	1947c83a 	sub	r3,r3,r5
 800aae8:	88c6983a 	sll	r3,r17,r3
 800aaec:	29400044 	addi	r5,r5,1
 800aaf0:	8962d83a 	srl	r17,r17,r5
 800aaf4:	1806c03a 	cmpne	r3,r3,zero
 800aaf8:	0021883a 	mov	r16,zero
 800aafc:	1c46b03a 	or	r3,r3,r17
 800ab00:	003fc806 	br	800aa24 <__alt_data_end+0xfc00aa24>
 800ab04:	1000e526 	beq	r2,zero,800ae9c <__addsf3+0x4d4>
 800ab08:	1007883a 	mov	r3,r2
 800ab0c:	188001cc 	andi	r2,r3,7
 800ab10:	103fc61e 	bne	r2,zero,800aa2c <__alt_data_end+0xfc00aa2c>
 800ab14:	9005883a 	mov	r2,r18
 800ab18:	01003fc4 	movi	r4,255
 800ab1c:	1806d0fa 	srli	r3,r3,3
 800ab20:	81001a26 	beq	r16,r4,800ab8c <__addsf3+0x1c4>
 800ab24:	01002034 	movhi	r4,128
 800ab28:	213fffc4 	addi	r4,r4,-1
 800ab2c:	800b883a 	mov	r5,r16
 800ab30:	1908703a 	and	r4,r3,r4
 800ab34:	003fc906 	br	800aa5c <__alt_data_end+0xfc00aa5c>
 800ab38:	01403e0e 	bge	zero,r5,800ac34 <__addsf3+0x26c>
 800ab3c:	20001e26 	beq	r4,zero,800abb8 <__addsf3+0x1f0>
 800ab40:	01003fc4 	movi	r4,255
 800ab44:	813fb726 	beq	r16,r4,800aa24 <__alt_data_end+0xfc00aa24>
 800ab48:	31810034 	orhi	r6,r6,1024
 800ab4c:	010006c4 	movi	r4,27
 800ab50:	2140570e 	bge	r4,r5,800acb0 <__addsf3+0x2e8>
 800ab54:	01400044 	movi	r5,1
 800ab58:	1947883a 	add	r3,r3,r5
 800ab5c:	1901002c 	andhi	r4,r3,1024
 800ab60:	203fea26 	beq	r4,zero,800ab0c <__alt_data_end+0xfc00ab0c>
 800ab64:	84000044 	addi	r16,r16,1
 800ab68:	01003fc4 	movi	r4,255
 800ab6c:	81007526 	beq	r16,r4,800ad44 <__addsf3+0x37c>
 800ab70:	00bf0034 	movhi	r2,64512
 800ab74:	10bfffc4 	addi	r2,r2,-1
 800ab78:	1900004c 	andi	r4,r3,1
 800ab7c:	1886703a 	and	r3,r3,r2
 800ab80:	1806d07a 	srli	r3,r3,1
 800ab84:	1906b03a 	or	r3,r3,r4
 800ab88:	003fa606 	br	800aa24 <__alt_data_end+0xfc00aa24>
 800ab8c:	18001a26 	beq	r3,zero,800abf8 <__addsf3+0x230>
 800ab90:	19001034 	orhi	r4,r3,64
 800ab94:	00c02034 	movhi	r3,128
 800ab98:	18ffffc4 	addi	r3,r3,-1
 800ab9c:	017fffc4 	movi	r5,-1
 800aba0:	20c8703a 	and	r4,r4,r3
 800aba4:	003fad06 	br	800aa5c <__alt_data_end+0xfc00aa5c>
 800aba8:	297fffc4 	addi	r5,r5,-1
 800abac:	28002c1e 	bne	r5,zero,800ac60 <__addsf3+0x298>
 800abb0:	1987c83a 	sub	r3,r3,r6
 800abb4:	003fbf06 	br	800aab4 <__alt_data_end+0xfc00aab4>
 800abb8:	303f9a26 	beq	r6,zero,800aa24 <__alt_data_end+0xfc00aa24>
 800abbc:	297fffc4 	addi	r5,r5,-1
 800abc0:	28004b1e 	bne	r5,zero,800acf0 <__addsf3+0x328>
 800abc4:	1987883a 	add	r3,r3,r6
 800abc8:	003fe406 	br	800ab5c <__alt_data_end+0xfc00ab5c>
 800abcc:	2800271e 	bne	r5,zero,800ac6c <__addsf3+0x2a4>
 800abd0:	80800044 	addi	r2,r16,1
 800abd4:	10803fcc 	andi	r2,r2,255
 800abd8:	01000044 	movi	r4,1
 800abdc:	2080520e 	bge	r4,r2,800ad28 <__addsf3+0x360>
 800abe0:	19a3c83a 	sub	r17,r3,r6
 800abe4:	8881002c 	andhi	r2,r17,1024
 800abe8:	10002c26 	beq	r2,zero,800ac9c <__addsf3+0x2d4>
 800abec:	30e3c83a 	sub	r17,r6,r3
 800abf0:	4025883a 	mov	r18,r8
 800abf4:	003fb406 	br	800aac8 <__alt_data_end+0xfc00aac8>
 800abf8:	017fffc4 	movi	r5,-1
 800abfc:	0009883a 	mov	r4,zero
 800ac00:	003f9606 	br	800aa5c <__alt_data_end+0xfc00aa5c>
 800ac04:	00ff0034 	movhi	r3,64512
 800ac08:	18ffffc4 	addi	r3,r3,-1
 800ac0c:	80a1c83a 	sub	r16,r16,r2
 800ac10:	88c6703a 	and	r3,r17,r3
 800ac14:	003f8306 	br	800aa24 <__alt_data_end+0xfc00aa24>
 800ac18:	00800804 	movi	r2,32
 800ac1c:	1145c83a 	sub	r2,r2,r5
 800ac20:	3084983a 	sll	r2,r6,r2
 800ac24:	314cd83a 	srl	r6,r6,r5
 800ac28:	100ac03a 	cmpne	r5,r2,zero
 800ac2c:	298ab03a 	or	r5,r5,r6
 800ac30:	003f9f06 	br	800aab0 <__alt_data_end+0xfc00aab0>
 800ac34:	2800451e 	bne	r5,zero,800ad4c <__addsf3+0x384>
 800ac38:	81000044 	addi	r4,r16,1
 800ac3c:	21c03fcc 	andi	r7,r4,255
 800ac40:	01400044 	movi	r5,1
 800ac44:	29c02d0e 	bge	r5,r7,800acfc <__addsf3+0x334>
 800ac48:	01403fc4 	movi	r5,255
 800ac4c:	21403c26 	beq	r4,r5,800ad40 <__addsf3+0x378>
 800ac50:	30c7883a 	add	r3,r6,r3
 800ac54:	1806d07a 	srli	r3,r3,1
 800ac58:	2021883a 	mov	r16,r4
 800ac5c:	003f7106 	br	800aa24 <__alt_data_end+0xfc00aa24>
 800ac60:	00803fc4 	movi	r2,255
 800ac64:	80bf8f1e 	bne	r16,r2,800aaa4 <__alt_data_end+0xfc00aaa4>
 800ac68:	003f6e06 	br	800aa24 <__alt_data_end+0xfc00aa24>
 800ac6c:	80001726 	beq	r16,zero,800accc <__addsf3+0x304>
 800ac70:	00803fc4 	movi	r2,255
 800ac74:	20801a26 	beq	r4,r2,800ace0 <__addsf3+0x318>
 800ac78:	014bc83a 	sub	r5,zero,r5
 800ac7c:	18c10034 	orhi	r3,r3,1024
 800ac80:	008006c4 	movi	r2,27
 800ac84:	1140430e 	bge	r2,r5,800ad94 <__addsf3+0x3cc>
 800ac88:	00c00044 	movi	r3,1
 800ac8c:	30c7c83a 	sub	r3,r6,r3
 800ac90:	2021883a 	mov	r16,r4
 800ac94:	4025883a 	mov	r18,r8
 800ac98:	003f8606 	br	800aab4 <__alt_data_end+0xfc00aab4>
 800ac9c:	883f8a1e 	bne	r17,zero,800aac8 <__alt_data_end+0xfc00aac8>
 800aca0:	0007883a 	mov	r3,zero
 800aca4:	0005883a 	mov	r2,zero
 800aca8:	0021883a 	mov	r16,zero
 800acac:	003f9a06 	br	800ab18 <__alt_data_end+0xfc00ab18>
 800acb0:	01000804 	movi	r4,32
 800acb4:	2149c83a 	sub	r4,r4,r5
 800acb8:	3108983a 	sll	r4,r6,r4
 800acbc:	314cd83a 	srl	r6,r6,r5
 800acc0:	200ac03a 	cmpne	r5,r4,zero
 800acc4:	298ab03a 	or	r5,r5,r6
 800acc8:	003fa306 	br	800ab58 <__alt_data_end+0xfc00ab58>
 800accc:	18000426 	beq	r3,zero,800ace0 <__addsf3+0x318>
 800acd0:	014a303a 	nor	r5,zero,r5
 800acd4:	283fed26 	beq	r5,zero,800ac8c <__alt_data_end+0xfc00ac8c>
 800acd8:	00803fc4 	movi	r2,255
 800acdc:	20bfe81e 	bne	r4,r2,800ac80 <__alt_data_end+0xfc00ac80>
 800ace0:	3007883a 	mov	r3,r6
 800ace4:	2021883a 	mov	r16,r4
 800ace8:	4025883a 	mov	r18,r8
 800acec:	003f4d06 	br	800aa24 <__alt_data_end+0xfc00aa24>
 800acf0:	01003fc4 	movi	r4,255
 800acf4:	813f951e 	bne	r16,r4,800ab4c <__alt_data_end+0xfc00ab4c>
 800acf8:	003f4a06 	br	800aa24 <__alt_data_end+0xfc00aa24>
 800acfc:	8000471e 	bne	r16,zero,800ae1c <__addsf3+0x454>
 800ad00:	18006126 	beq	r3,zero,800ae88 <__addsf3+0x4c0>
 800ad04:	303f4726 	beq	r6,zero,800aa24 <__alt_data_end+0xfc00aa24>
 800ad08:	1987883a 	add	r3,r3,r6
 800ad0c:	1881002c 	andhi	r2,r3,1024
 800ad10:	103f7e26 	beq	r2,zero,800ab0c <__alt_data_end+0xfc00ab0c>
 800ad14:	00bf0034 	movhi	r2,64512
 800ad18:	10bfffc4 	addi	r2,r2,-1
 800ad1c:	2821883a 	mov	r16,r5
 800ad20:	1886703a 	and	r3,r3,r2
 800ad24:	003f3f06 	br	800aa24 <__alt_data_end+0xfc00aa24>
 800ad28:	8000141e 	bne	r16,zero,800ad7c <__addsf3+0x3b4>
 800ad2c:	1800311e 	bne	r3,zero,800adf4 <__addsf3+0x42c>
 800ad30:	30004626 	beq	r6,zero,800ae4c <__addsf3+0x484>
 800ad34:	3007883a 	mov	r3,r6
 800ad38:	4025883a 	mov	r18,r8
 800ad3c:	003f3906 	br	800aa24 <__alt_data_end+0xfc00aa24>
 800ad40:	2021883a 	mov	r16,r4
 800ad44:	0007883a 	mov	r3,zero
 800ad48:	003f7306 	br	800ab18 <__alt_data_end+0xfc00ab18>
 800ad4c:	8000181e 	bne	r16,zero,800adb0 <__addsf3+0x3e8>
 800ad50:	18002f26 	beq	r3,zero,800ae10 <__addsf3+0x448>
 800ad54:	014a303a 	nor	r5,zero,r5
 800ad58:	28000526 	beq	r5,zero,800ad70 <__addsf3+0x3a8>
 800ad5c:	01c03fc4 	movi	r7,255
 800ad60:	21c02b26 	beq	r4,r7,800ae10 <__addsf3+0x448>
 800ad64:	01c006c4 	movi	r7,27
 800ad68:	3940400e 	bge	r7,r5,800ae6c <__addsf3+0x4a4>
 800ad6c:	00c00044 	movi	r3,1
 800ad70:	1987883a 	add	r3,r3,r6
 800ad74:	2021883a 	mov	r16,r4
 800ad78:	003f7806 	br	800ab5c <__alt_data_end+0xfc00ab5c>
 800ad7c:	1800111e 	bne	r3,zero,800adc4 <__addsf3+0x3fc>
 800ad80:	30003526 	beq	r6,zero,800ae58 <__addsf3+0x490>
 800ad84:	3007883a 	mov	r3,r6
 800ad88:	4025883a 	mov	r18,r8
 800ad8c:	04003fc4 	movi	r16,255
 800ad90:	003f2406 	br	800aa24 <__alt_data_end+0xfc00aa24>
 800ad94:	00800804 	movi	r2,32
 800ad98:	1145c83a 	sub	r2,r2,r5
 800ad9c:	1884983a 	sll	r2,r3,r2
 800ada0:	194ad83a 	srl	r5,r3,r5
 800ada4:	1006c03a 	cmpne	r3,r2,zero
 800ada8:	1946b03a 	or	r3,r3,r5
 800adac:	003fb706 	br	800ac8c <__alt_data_end+0xfc00ac8c>
 800adb0:	01c03fc4 	movi	r7,255
 800adb4:	21c01626 	beq	r4,r7,800ae10 <__addsf3+0x448>
 800adb8:	014bc83a 	sub	r5,zero,r5
 800adbc:	18c10034 	orhi	r3,r3,1024
 800adc0:	003fe806 	br	800ad64 <__alt_data_end+0xfc00ad64>
 800adc4:	30001f26 	beq	r6,zero,800ae44 <__addsf3+0x47c>
 800adc8:	1806d0fa 	srli	r3,r3,3
 800adcc:	1880102c 	andhi	r2,r3,64
 800add0:	10000526 	beq	r2,zero,800ade8 <__addsf3+0x420>
 800add4:	300cd0fa 	srli	r6,r6,3
 800add8:	3080102c 	andhi	r2,r6,64
 800addc:	1000021e 	bne	r2,zero,800ade8 <__addsf3+0x420>
 800ade0:	3007883a 	mov	r3,r6
 800ade4:	4025883a 	mov	r18,r8
 800ade8:	180690fa 	slli	r3,r3,3
 800adec:	04003fc4 	movi	r16,255
 800adf0:	003f0c06 	br	800aa24 <__alt_data_end+0xfc00aa24>
 800adf4:	303f0b26 	beq	r6,zero,800aa24 <__alt_data_end+0xfc00aa24>
 800adf8:	1985c83a 	sub	r2,r3,r6
 800adfc:	1101002c 	andhi	r4,r2,1024
 800ae00:	203f4026 	beq	r4,zero,800ab04 <__alt_data_end+0xfc00ab04>
 800ae04:	30c7c83a 	sub	r3,r6,r3
 800ae08:	4025883a 	mov	r18,r8
 800ae0c:	003f0506 	br	800aa24 <__alt_data_end+0xfc00aa24>
 800ae10:	3007883a 	mov	r3,r6
 800ae14:	2021883a 	mov	r16,r4
 800ae18:	003f0206 	br	800aa24 <__alt_data_end+0xfc00aa24>
 800ae1c:	18001c26 	beq	r3,zero,800ae90 <__addsf3+0x4c8>
 800ae20:	30000826 	beq	r6,zero,800ae44 <__addsf3+0x47c>
 800ae24:	1806d0fa 	srli	r3,r3,3
 800ae28:	1880102c 	andhi	r2,r3,64
 800ae2c:	103fee26 	beq	r2,zero,800ade8 <__alt_data_end+0xfc00ade8>
 800ae30:	300cd0fa 	srli	r6,r6,3
 800ae34:	3080102c 	andhi	r2,r6,64
 800ae38:	103feb1e 	bne	r2,zero,800ade8 <__alt_data_end+0xfc00ade8>
 800ae3c:	3007883a 	mov	r3,r6
 800ae40:	003fe906 	br	800ade8 <__alt_data_end+0xfc00ade8>
 800ae44:	04003fc4 	movi	r16,255
 800ae48:	003ef606 	br	800aa24 <__alt_data_end+0xfc00aa24>
 800ae4c:	8007883a 	mov	r3,r16
 800ae50:	0005883a 	mov	r2,zero
 800ae54:	003f3006 	br	800ab18 <__alt_data_end+0xfc00ab18>
 800ae58:	00c10034 	movhi	r3,1024
 800ae5c:	0005883a 	mov	r2,zero
 800ae60:	18fffe04 	addi	r3,r3,-8
 800ae64:	04003fc4 	movi	r16,255
 800ae68:	003f2b06 	br	800ab18 <__alt_data_end+0xfc00ab18>
 800ae6c:	01c00804 	movi	r7,32
 800ae70:	394fc83a 	sub	r7,r7,r5
 800ae74:	19ce983a 	sll	r7,r3,r7
 800ae78:	194ad83a 	srl	r5,r3,r5
 800ae7c:	3806c03a 	cmpne	r3,r7,zero
 800ae80:	1946b03a 	or	r3,r3,r5
 800ae84:	003fba06 	br	800ad70 <__alt_data_end+0xfc00ad70>
 800ae88:	3007883a 	mov	r3,r6
 800ae8c:	003ee506 	br	800aa24 <__alt_data_end+0xfc00aa24>
 800ae90:	3007883a 	mov	r3,r6
 800ae94:	04003fc4 	movi	r16,255
 800ae98:	003ee206 	br	800aa24 <__alt_data_end+0xfc00aa24>
 800ae9c:	0007883a 	mov	r3,zero
 800aea0:	0005883a 	mov	r2,zero
 800aea4:	003f1c06 	br	800ab18 <__alt_data_end+0xfc00ab18>

0800aea8 <__adddf3>:
 800aea8:	02000434 	movhi	r8,16
 800aeac:	423fffc4 	addi	r8,r8,-1
 800aeb0:	defffb04 	addi	sp,sp,-20
 800aeb4:	2a12703a 	and	r9,r5,r8
 800aeb8:	2806d7fa 	srli	r3,r5,31
 800aebc:	3a10703a 	and	r8,r7,r8
 800aec0:	3804d53a 	srli	r2,r7,20
 800aec4:	3014d77a 	srli	r10,r6,29
 800aec8:	dc000015 	stw	r16,0(sp)
 800aecc:	481290fa 	slli	r9,r9,3
 800aed0:	2820d53a 	srli	r16,r5,20
 800aed4:	401090fa 	slli	r8,r8,3
 800aed8:	200ad77a 	srli	r5,r4,29
 800aedc:	380ed7fa 	srli	r7,r7,31
 800aee0:	dc800215 	stw	r18,8(sp)
 800aee4:	dc400115 	stw	r17,4(sp)
 800aee8:	dfc00415 	stw	ra,16(sp)
 800aeec:	dcc00315 	stw	r19,12(sp)
 800aef0:	1c803fcc 	andi	r18,r3,255
 800aef4:	8401ffcc 	andi	r16,r16,2047
 800aef8:	494ab03a 	or	r5,r9,r5
 800aefc:	202290fa 	slli	r17,r4,3
 800af00:	1081ffcc 	andi	r2,r2,2047
 800af04:	4290b03a 	or	r8,r8,r10
 800af08:	300c90fa 	slli	r6,r6,3
 800af0c:	91c07026 	beq	r18,r7,800b0d0 <__adddf3+0x228>
 800af10:	8087c83a 	sub	r3,r16,r2
 800af14:	00c0b30e 	bge	zero,r3,800b1e4 <__adddf3+0x33c>
 800af18:	10002a1e 	bne	r2,zero,800afc4 <__adddf3+0x11c>
 800af1c:	4184b03a 	or	r2,r8,r6
 800af20:	1000991e 	bne	r2,zero,800b188 <__adddf3+0x2e0>
 800af24:	888001cc 	andi	r2,r17,7
 800af28:	10005b26 	beq	r2,zero,800b098 <__adddf3+0x1f0>
 800af2c:	88c003cc 	andi	r3,r17,15
 800af30:	00800104 	movi	r2,4
 800af34:	18805826 	beq	r3,r2,800b098 <__adddf3+0x1f0>
 800af38:	89800104 	addi	r6,r17,4
 800af3c:	3463803a 	cmpltu	r17,r6,r17
 800af40:	2c4b883a 	add	r5,r5,r17
 800af44:	2880202c 	andhi	r2,r5,128
 800af48:	9007883a 	mov	r3,r18
 800af4c:	3023883a 	mov	r17,r6
 800af50:	10005426 	beq	r2,zero,800b0a4 <__adddf3+0x1fc>
 800af54:	84000044 	addi	r16,r16,1
 800af58:	0081ffc4 	movi	r2,2047
 800af5c:	8080c126 	beq	r16,r2,800b264 <__adddf3+0x3bc>
 800af60:	013fe034 	movhi	r4,65408
 800af64:	213fffc4 	addi	r4,r4,-1
 800af68:	290a703a 	and	r5,r5,r4
 800af6c:	2804977a 	slli	r2,r5,29
 800af70:	280a927a 	slli	r5,r5,9
 800af74:	8822d0fa 	srli	r17,r17,3
 800af78:	8401ffcc 	andi	r16,r16,2047
 800af7c:	2808d33a 	srli	r4,r5,12
 800af80:	1444b03a 	or	r2,r2,r17
 800af84:	8401ffcc 	andi	r16,r16,2047
 800af88:	800a953a 	slli	r5,r16,20
 800af8c:	18c03fcc 	andi	r3,r3,255
 800af90:	04000434 	movhi	r16,16
 800af94:	180697fa 	slli	r3,r3,31
 800af98:	843fffc4 	addi	r16,r16,-1
 800af9c:	2420703a 	and	r16,r4,r16
 800afa0:	8160b03a 	or	r16,r16,r5
 800afa4:	80c6b03a 	or	r3,r16,r3
 800afa8:	dfc00417 	ldw	ra,16(sp)
 800afac:	dcc00317 	ldw	r19,12(sp)
 800afb0:	dc800217 	ldw	r18,8(sp)
 800afb4:	dc400117 	ldw	r17,4(sp)
 800afb8:	dc000017 	ldw	r16,0(sp)
 800afbc:	dec00504 	addi	sp,sp,20
 800afc0:	f800283a 	ret
 800afc4:	0081ffc4 	movi	r2,2047
 800afc8:	80bfd626 	beq	r16,r2,800af24 <__alt_data_end+0xfc00af24>
 800afcc:	42002034 	orhi	r8,r8,128
 800afd0:	00800e04 	movi	r2,56
 800afd4:	10c0a616 	blt	r2,r3,800b270 <__adddf3+0x3c8>
 800afd8:	008007c4 	movi	r2,31
 800afdc:	10c0c916 	blt	r2,r3,800b304 <__adddf3+0x45c>
 800afe0:	00800804 	movi	r2,32
 800afe4:	10c5c83a 	sub	r2,r2,r3
 800afe8:	408e983a 	sll	r7,r8,r2
 800afec:	30c8d83a 	srl	r4,r6,r3
 800aff0:	3084983a 	sll	r2,r6,r2
 800aff4:	40c6d83a 	srl	r3,r8,r3
 800aff8:	390cb03a 	or	r6,r7,r4
 800affc:	1004c03a 	cmpne	r2,r2,zero
 800b000:	308cb03a 	or	r6,r6,r2
 800b004:	898dc83a 	sub	r6,r17,r6
 800b008:	89a3803a 	cmpltu	r17,r17,r6
 800b00c:	28cbc83a 	sub	r5,r5,r3
 800b010:	2c4bc83a 	sub	r5,r5,r17
 800b014:	3023883a 	mov	r17,r6
 800b018:	2880202c 	andhi	r2,r5,128
 800b01c:	10006d26 	beq	r2,zero,800b1d4 <__adddf3+0x32c>
 800b020:	04c02034 	movhi	r19,128
 800b024:	9cffffc4 	addi	r19,r19,-1
 800b028:	2ce6703a 	and	r19,r5,r19
 800b02c:	98007e26 	beq	r19,zero,800b228 <__adddf3+0x380>
 800b030:	9809883a 	mov	r4,r19
 800b034:	800d6480 	call	800d648 <__clzsi2>
 800b038:	10fffe04 	addi	r3,r2,-8
 800b03c:	010007c4 	movi	r4,31
 800b040:	20c07f16 	blt	r4,r3,800b240 <__adddf3+0x398>
 800b044:	01400a04 	movi	r5,40
 800b048:	2885c83a 	sub	r2,r5,r2
 800b04c:	888ad83a 	srl	r5,r17,r2
 800b050:	98e6983a 	sll	r19,r19,r3
 800b054:	88e2983a 	sll	r17,r17,r3
 800b058:	2ce6b03a 	or	r19,r5,r19
 800b05c:	1c007c16 	blt	r3,r16,800b250 <__adddf3+0x3a8>
 800b060:	1c21c83a 	sub	r16,r3,r16
 800b064:	81400044 	addi	r5,r16,1
 800b068:	00c007c4 	movi	r3,31
 800b06c:	19409816 	blt	r3,r5,800b2d0 <__adddf3+0x428>
 800b070:	1c21c83a 	sub	r16,r3,r16
 800b074:	8c08983a 	sll	r4,r17,r16
 800b078:	8946d83a 	srl	r3,r17,r5
 800b07c:	9c20983a 	sll	r16,r19,r16
 800b080:	2008c03a 	cmpne	r4,r4,zero
 800b084:	994ad83a 	srl	r5,r19,r5
 800b088:	1c06b03a 	or	r3,r3,r16
 800b08c:	1922b03a 	or	r17,r3,r4
 800b090:	0021883a 	mov	r16,zero
 800b094:	003fa306 	br	800af24 <__alt_data_end+0xfc00af24>
 800b098:	2880202c 	andhi	r2,r5,128
 800b09c:	9007883a 	mov	r3,r18
 800b0a0:	103fac1e 	bne	r2,zero,800af54 <__alt_data_end+0xfc00af54>
 800b0a4:	2804977a 	slli	r2,r5,29
 800b0a8:	8822d0fa 	srli	r17,r17,3
 800b0ac:	0101ffc4 	movi	r4,2047
 800b0b0:	280ad0fa 	srli	r5,r5,3
 800b0b4:	1444b03a 	or	r2,r2,r17
 800b0b8:	81002c26 	beq	r16,r4,800b16c <__adddf3+0x2c4>
 800b0bc:	8120703a 	and	r16,r16,r4
 800b0c0:	01000434 	movhi	r4,16
 800b0c4:	213fffc4 	addi	r4,r4,-1
 800b0c8:	2908703a 	and	r4,r5,r4
 800b0cc:	003fad06 	br	800af84 <__alt_data_end+0xfc00af84>
 800b0d0:	8089c83a 	sub	r4,r16,r2
 800b0d4:	01006a0e 	bge	zero,r4,800b280 <__adddf3+0x3d8>
 800b0d8:	10003326 	beq	r2,zero,800b1a8 <__adddf3+0x300>
 800b0dc:	0081ffc4 	movi	r2,2047
 800b0e0:	80bf9026 	beq	r16,r2,800af24 <__alt_data_end+0xfc00af24>
 800b0e4:	42002034 	orhi	r8,r8,128
 800b0e8:	00800e04 	movi	r2,56
 800b0ec:	1100b116 	blt	r2,r4,800b3b4 <__adddf3+0x50c>
 800b0f0:	008007c4 	movi	r2,31
 800b0f4:	1100e216 	blt	r2,r4,800b480 <__adddf3+0x5d8>
 800b0f8:	00800804 	movi	r2,32
 800b0fc:	1105c83a 	sub	r2,r2,r4
 800b100:	4092983a 	sll	r9,r8,r2
 800b104:	310ed83a 	srl	r7,r6,r4
 800b108:	3084983a 	sll	r2,r6,r2
 800b10c:	4110d83a 	srl	r8,r8,r4
 800b110:	49ccb03a 	or	r6,r9,r7
 800b114:	1004c03a 	cmpne	r2,r2,zero
 800b118:	308cb03a 	or	r6,r6,r2
 800b11c:	344d883a 	add	r6,r6,r17
 800b120:	3463803a 	cmpltu	r17,r6,r17
 800b124:	414b883a 	add	r5,r8,r5
 800b128:	2c4b883a 	add	r5,r5,r17
 800b12c:	3023883a 	mov	r17,r6
 800b130:	2880202c 	andhi	r2,r5,128
 800b134:	10002726 	beq	r2,zero,800b1d4 <__adddf3+0x32c>
 800b138:	84000044 	addi	r16,r16,1
 800b13c:	0081ffc4 	movi	r2,2047
 800b140:	8080ae26 	beq	r16,r2,800b3fc <__adddf3+0x554>
 800b144:	00bfe034 	movhi	r2,65408
 800b148:	10bfffc4 	addi	r2,r2,-1
 800b14c:	288a703a 	and	r5,r5,r2
 800b150:	880cd07a 	srli	r6,r17,1
 800b154:	280897fa 	slli	r4,r5,31
 800b158:	88c0004c 	andi	r3,r17,1
 800b15c:	30e2b03a 	or	r17,r6,r3
 800b160:	280ad07a 	srli	r5,r5,1
 800b164:	8922b03a 	or	r17,r17,r4
 800b168:	003f6e06 	br	800af24 <__alt_data_end+0xfc00af24>
 800b16c:	1148b03a 	or	r4,r2,r5
 800b170:	20003c26 	beq	r4,zero,800b264 <__adddf3+0x3bc>
 800b174:	29000234 	orhi	r4,r5,8
 800b178:	01400434 	movhi	r5,16
 800b17c:	297fffc4 	addi	r5,r5,-1
 800b180:	2148703a 	and	r4,r4,r5
 800b184:	003f7f06 	br	800af84 <__alt_data_end+0xfc00af84>
 800b188:	18ffffc4 	addi	r3,r3,-1
 800b18c:	18004d1e 	bne	r3,zero,800b2c4 <__adddf3+0x41c>
 800b190:	898dc83a 	sub	r6,r17,r6
 800b194:	89a3803a 	cmpltu	r17,r17,r6
 800b198:	2a0bc83a 	sub	r5,r5,r8
 800b19c:	2c4bc83a 	sub	r5,r5,r17
 800b1a0:	3023883a 	mov	r17,r6
 800b1a4:	003f9c06 	br	800b018 <__alt_data_end+0xfc00b018>
 800b1a8:	4184b03a 	or	r2,r8,r6
 800b1ac:	103f5d26 	beq	r2,zero,800af24 <__alt_data_end+0xfc00af24>
 800b1b0:	213fffc4 	addi	r4,r4,-1
 800b1b4:	203fd926 	beq	r4,zero,800b11c <__alt_data_end+0xfc00b11c>
 800b1b8:	0081ffc4 	movi	r2,2047
 800b1bc:	80bfca1e 	bne	r16,r2,800b0e8 <__alt_data_end+0xfc00b0e8>
 800b1c0:	003f5806 	br	800af24 <__alt_data_end+0xfc00af24>
 800b1c4:	10c8b03a 	or	r4,r2,r3
 800b1c8:	20008b26 	beq	r4,zero,800b3f8 <__adddf3+0x550>
 800b1cc:	100b883a 	mov	r5,r2
 800b1d0:	1823883a 	mov	r17,r3
 800b1d4:	888001cc 	andi	r2,r17,7
 800b1d8:	103f541e 	bne	r2,zero,800af2c <__alt_data_end+0xfc00af2c>
 800b1dc:	9007883a 	mov	r3,r18
 800b1e0:	003fb006 	br	800b0a4 <__alt_data_end+0xfc00b0a4>
 800b1e4:	1800531e 	bne	r3,zero,800b334 <__adddf3+0x48c>
 800b1e8:	80800044 	addi	r2,r16,1
 800b1ec:	1081ffcc 	andi	r2,r2,2047
 800b1f0:	00c00044 	movi	r3,1
 800b1f4:	1880990e 	bge	r3,r2,800b45c <__adddf3+0x5b4>
 800b1f8:	8985c83a 	sub	r2,r17,r6
 800b1fc:	8887803a 	cmpltu	r3,r17,r2
 800b200:	2a27c83a 	sub	r19,r5,r8
 800b204:	98e7c83a 	sub	r19,r19,r3
 800b208:	98c0202c 	andhi	r3,r19,128
 800b20c:	18006226 	beq	r3,zero,800b398 <__adddf3+0x4f0>
 800b210:	3463c83a 	sub	r17,r6,r17
 800b214:	4151c83a 	sub	r8,r8,r5
 800b218:	344d803a 	cmpltu	r6,r6,r17
 800b21c:	41a7c83a 	sub	r19,r8,r6
 800b220:	3825883a 	mov	r18,r7
 800b224:	983f821e 	bne	r19,zero,800b030 <__alt_data_end+0xfc00b030>
 800b228:	8809883a 	mov	r4,r17
 800b22c:	800d6480 	call	800d648 <__clzsi2>
 800b230:	10800804 	addi	r2,r2,32
 800b234:	10fffe04 	addi	r3,r2,-8
 800b238:	010007c4 	movi	r4,31
 800b23c:	20ff810e 	bge	r4,r3,800b044 <__alt_data_end+0xfc00b044>
 800b240:	14fff604 	addi	r19,r2,-40
 800b244:	8ce6983a 	sll	r19,r17,r19
 800b248:	0023883a 	mov	r17,zero
 800b24c:	1c3f840e 	bge	r3,r16,800b060 <__alt_data_end+0xfc00b060>
 800b250:	017fe034 	movhi	r5,65408
 800b254:	297fffc4 	addi	r5,r5,-1
 800b258:	80e1c83a 	sub	r16,r16,r3
 800b25c:	994a703a 	and	r5,r19,r5
 800b260:	003f3006 	br	800af24 <__alt_data_end+0xfc00af24>
 800b264:	0009883a 	mov	r4,zero
 800b268:	0005883a 	mov	r2,zero
 800b26c:	003f4506 	br	800af84 <__alt_data_end+0xfc00af84>
 800b270:	418cb03a 	or	r6,r8,r6
 800b274:	300cc03a 	cmpne	r6,r6,zero
 800b278:	0007883a 	mov	r3,zero
 800b27c:	003f6106 	br	800b004 <__alt_data_end+0xfc00b004>
 800b280:	2000921e 	bne	r4,zero,800b4cc <__adddf3+0x624>
 800b284:	80800044 	addi	r2,r16,1
 800b288:	11c1ffcc 	andi	r7,r2,2047
 800b28c:	01000044 	movi	r4,1
 800b290:	21c0610e 	bge	r4,r7,800b418 <__adddf3+0x570>
 800b294:	0101ffc4 	movi	r4,2047
 800b298:	1100a326 	beq	r2,r4,800b528 <__adddf3+0x680>
 800b29c:	344d883a 	add	r6,r6,r17
 800b2a0:	3463803a 	cmpltu	r17,r6,r17
 800b2a4:	414b883a 	add	r5,r8,r5
 800b2a8:	2c4b883a 	add	r5,r5,r17
 800b2ac:	282297fa 	slli	r17,r5,31
 800b2b0:	300cd07a 	srli	r6,r6,1
 800b2b4:	280ad07a 	srli	r5,r5,1
 800b2b8:	1021883a 	mov	r16,r2
 800b2bc:	89a2b03a 	or	r17,r17,r6
 800b2c0:	003f1806 	br	800af24 <__alt_data_end+0xfc00af24>
 800b2c4:	0081ffc4 	movi	r2,2047
 800b2c8:	80bf411e 	bne	r16,r2,800afd0 <__alt_data_end+0xfc00afd0>
 800b2cc:	003f1506 	br	800af24 <__alt_data_end+0xfc00af24>
 800b2d0:	80bff844 	addi	r2,r16,-31
 800b2d4:	00c00804 	movi	r3,32
 800b2d8:	9884d83a 	srl	r2,r19,r2
 800b2dc:	28c04a26 	beq	r5,r3,800b408 <__adddf3+0x560>
 800b2e0:	00c00fc4 	movi	r3,63
 800b2e4:	1c21c83a 	sub	r16,r3,r16
 800b2e8:	9c26983a 	sll	r19,r19,r16
 800b2ec:	9c62b03a 	or	r17,r19,r17
 800b2f0:	8822c03a 	cmpne	r17,r17,zero
 800b2f4:	88a2b03a 	or	r17,r17,r2
 800b2f8:	000b883a 	mov	r5,zero
 800b2fc:	0021883a 	mov	r16,zero
 800b300:	003fb406 	br	800b1d4 <__alt_data_end+0xfc00b1d4>
 800b304:	18bff804 	addi	r2,r3,-32
 800b308:	01000804 	movi	r4,32
 800b30c:	4084d83a 	srl	r2,r8,r2
 800b310:	19003f26 	beq	r3,r4,800b410 <__adddf3+0x568>
 800b314:	01001004 	movi	r4,64
 800b318:	20c7c83a 	sub	r3,r4,r3
 800b31c:	40d0983a 	sll	r8,r8,r3
 800b320:	418cb03a 	or	r6,r8,r6
 800b324:	300cc03a 	cmpne	r6,r6,zero
 800b328:	308cb03a 	or	r6,r6,r2
 800b32c:	0007883a 	mov	r3,zero
 800b330:	003f3406 	br	800b004 <__alt_data_end+0xfc00b004>
 800b334:	80002326 	beq	r16,zero,800b3c4 <__adddf3+0x51c>
 800b338:	0101ffc4 	movi	r4,2047
 800b33c:	11005e26 	beq	r2,r4,800b4b8 <__adddf3+0x610>
 800b340:	00c7c83a 	sub	r3,zero,r3
 800b344:	29402034 	orhi	r5,r5,128
 800b348:	01000e04 	movi	r4,56
 800b34c:	20c07216 	blt	r4,r3,800b518 <__adddf3+0x670>
 800b350:	010007c4 	movi	r4,31
 800b354:	20c0ce16 	blt	r4,r3,800b690 <__adddf3+0x7e8>
 800b358:	01000804 	movi	r4,32
 800b35c:	20c9c83a 	sub	r4,r4,r3
 800b360:	2914983a 	sll	r10,r5,r4
 800b364:	88d2d83a 	srl	r9,r17,r3
 800b368:	8908983a 	sll	r4,r17,r4
 800b36c:	28c6d83a 	srl	r3,r5,r3
 800b370:	5262b03a 	or	r17,r10,r9
 800b374:	2008c03a 	cmpne	r4,r4,zero
 800b378:	8922b03a 	or	r17,r17,r4
 800b37c:	3463c83a 	sub	r17,r6,r17
 800b380:	40c7c83a 	sub	r3,r8,r3
 800b384:	344d803a 	cmpltu	r6,r6,r17
 800b388:	198bc83a 	sub	r5,r3,r6
 800b38c:	1021883a 	mov	r16,r2
 800b390:	3825883a 	mov	r18,r7
 800b394:	003f2006 	br	800b018 <__alt_data_end+0xfc00b018>
 800b398:	9886b03a 	or	r3,r19,r2
 800b39c:	1800141e 	bne	r3,zero,800b3f0 <__adddf3+0x548>
 800b3a0:	0007883a 	mov	r3,zero
 800b3a4:	000b883a 	mov	r5,zero
 800b3a8:	0023883a 	mov	r17,zero
 800b3ac:	0021883a 	mov	r16,zero
 800b3b0:	003f3c06 	br	800b0a4 <__alt_data_end+0xfc00b0a4>
 800b3b4:	418cb03a 	or	r6,r8,r6
 800b3b8:	300cc03a 	cmpne	r6,r6,zero
 800b3bc:	0011883a 	mov	r8,zero
 800b3c0:	003f5606 	br	800b11c <__alt_data_end+0xfc00b11c>
 800b3c4:	2c48b03a 	or	r4,r5,r17
 800b3c8:	20003b26 	beq	r4,zero,800b4b8 <__adddf3+0x610>
 800b3cc:	00c6303a 	nor	r3,zero,r3
 800b3d0:	1800371e 	bne	r3,zero,800b4b0 <__adddf3+0x608>
 800b3d4:	3463c83a 	sub	r17,r6,r17
 800b3d8:	414bc83a 	sub	r5,r8,r5
 800b3dc:	344d803a 	cmpltu	r6,r6,r17
 800b3e0:	298bc83a 	sub	r5,r5,r6
 800b3e4:	1021883a 	mov	r16,r2
 800b3e8:	3825883a 	mov	r18,r7
 800b3ec:	003f0a06 	br	800b018 <__alt_data_end+0xfc00b018>
 800b3f0:	1023883a 	mov	r17,r2
 800b3f4:	003f0d06 	br	800b02c <__alt_data_end+0xfc00b02c>
 800b3f8:	0007883a 	mov	r3,zero
 800b3fc:	000b883a 	mov	r5,zero
 800b400:	0023883a 	mov	r17,zero
 800b404:	003f2706 	br	800b0a4 <__alt_data_end+0xfc00b0a4>
 800b408:	0027883a 	mov	r19,zero
 800b40c:	003fb706 	br	800b2ec <__alt_data_end+0xfc00b2ec>
 800b410:	0011883a 	mov	r8,zero
 800b414:	003fc206 	br	800b320 <__alt_data_end+0xfc00b320>
 800b418:	2c44b03a 	or	r2,r5,r17
 800b41c:	8000871e 	bne	r16,zero,800b63c <__adddf3+0x794>
 800b420:	1000b126 	beq	r2,zero,800b6e8 <__adddf3+0x840>
 800b424:	4184b03a 	or	r2,r8,r6
 800b428:	103ebe26 	beq	r2,zero,800af24 <__alt_data_end+0xfc00af24>
 800b42c:	3445883a 	add	r2,r6,r17
 800b430:	1463803a 	cmpltu	r17,r2,r17
 800b434:	414b883a 	add	r5,r8,r5
 800b438:	2c4b883a 	add	r5,r5,r17
 800b43c:	28c0202c 	andhi	r3,r5,128
 800b440:	1023883a 	mov	r17,r2
 800b444:	183f6326 	beq	r3,zero,800b1d4 <__alt_data_end+0xfc00b1d4>
 800b448:	00bfe034 	movhi	r2,65408
 800b44c:	10bfffc4 	addi	r2,r2,-1
 800b450:	2021883a 	mov	r16,r4
 800b454:	288a703a 	and	r5,r5,r2
 800b458:	003eb206 	br	800af24 <__alt_data_end+0xfc00af24>
 800b45c:	2c44b03a 	or	r2,r5,r17
 800b460:	8000251e 	bne	r16,zero,800b4f8 <__adddf3+0x650>
 800b464:	10004b1e 	bne	r2,zero,800b594 <__adddf3+0x6ec>
 800b468:	4184b03a 	or	r2,r8,r6
 800b46c:	103fe226 	beq	r2,zero,800b3f8 <__alt_data_end+0xfc00b3f8>
 800b470:	400b883a 	mov	r5,r8
 800b474:	3023883a 	mov	r17,r6
 800b478:	3825883a 	mov	r18,r7
 800b47c:	003ea906 	br	800af24 <__alt_data_end+0xfc00af24>
 800b480:	20bff804 	addi	r2,r4,-32
 800b484:	01c00804 	movi	r7,32
 800b488:	4084d83a 	srl	r2,r8,r2
 800b48c:	21c07e26 	beq	r4,r7,800b688 <__adddf3+0x7e0>
 800b490:	01c01004 	movi	r7,64
 800b494:	3909c83a 	sub	r4,r7,r4
 800b498:	4110983a 	sll	r8,r8,r4
 800b49c:	418cb03a 	or	r6,r8,r6
 800b4a0:	300cc03a 	cmpne	r6,r6,zero
 800b4a4:	308cb03a 	or	r6,r6,r2
 800b4a8:	0011883a 	mov	r8,zero
 800b4ac:	003f1b06 	br	800b11c <__alt_data_end+0xfc00b11c>
 800b4b0:	0101ffc4 	movi	r4,2047
 800b4b4:	113fa41e 	bne	r2,r4,800b348 <__alt_data_end+0xfc00b348>
 800b4b8:	400b883a 	mov	r5,r8
 800b4bc:	3023883a 	mov	r17,r6
 800b4c0:	1021883a 	mov	r16,r2
 800b4c4:	3825883a 	mov	r18,r7
 800b4c8:	003e9606 	br	800af24 <__alt_data_end+0xfc00af24>
 800b4cc:	80001a1e 	bne	r16,zero,800b538 <__adddf3+0x690>
 800b4d0:	2c4eb03a 	or	r7,r5,r17
 800b4d4:	38005526 	beq	r7,zero,800b62c <__adddf3+0x784>
 800b4d8:	0108303a 	nor	r4,zero,r4
 800b4dc:	2000511e 	bne	r4,zero,800b624 <__adddf3+0x77c>
 800b4e0:	89a3883a 	add	r17,r17,r6
 800b4e4:	414b883a 	add	r5,r8,r5
 800b4e8:	898d803a 	cmpltu	r6,r17,r6
 800b4ec:	298b883a 	add	r5,r5,r6
 800b4f0:	1021883a 	mov	r16,r2
 800b4f4:	003f0e06 	br	800b130 <__alt_data_end+0xfc00b130>
 800b4f8:	1000341e 	bne	r2,zero,800b5cc <__adddf3+0x724>
 800b4fc:	4184b03a 	or	r2,r8,r6
 800b500:	10006f26 	beq	r2,zero,800b6c0 <__adddf3+0x818>
 800b504:	400b883a 	mov	r5,r8
 800b508:	3023883a 	mov	r17,r6
 800b50c:	3825883a 	mov	r18,r7
 800b510:	0401ffc4 	movi	r16,2047
 800b514:	003e8306 	br	800af24 <__alt_data_end+0xfc00af24>
 800b518:	2c62b03a 	or	r17,r5,r17
 800b51c:	8822c03a 	cmpne	r17,r17,zero
 800b520:	0007883a 	mov	r3,zero
 800b524:	003f9506 	br	800b37c <__alt_data_end+0xfc00b37c>
 800b528:	1021883a 	mov	r16,r2
 800b52c:	000b883a 	mov	r5,zero
 800b530:	0023883a 	mov	r17,zero
 800b534:	003edb06 	br	800b0a4 <__alt_data_end+0xfc00b0a4>
 800b538:	01c1ffc4 	movi	r7,2047
 800b53c:	11c03b26 	beq	r2,r7,800b62c <__adddf3+0x784>
 800b540:	0109c83a 	sub	r4,zero,r4
 800b544:	29402034 	orhi	r5,r5,128
 800b548:	01c00e04 	movi	r7,56
 800b54c:	39006216 	blt	r7,r4,800b6d8 <__adddf3+0x830>
 800b550:	01c007c4 	movi	r7,31
 800b554:	39006b16 	blt	r7,r4,800b704 <__adddf3+0x85c>
 800b558:	01c00804 	movi	r7,32
 800b55c:	390fc83a 	sub	r7,r7,r4
 800b560:	29d4983a 	sll	r10,r5,r7
 800b564:	8912d83a 	srl	r9,r17,r4
 800b568:	89ce983a 	sll	r7,r17,r7
 800b56c:	2908d83a 	srl	r4,r5,r4
 800b570:	5262b03a 	or	r17,r10,r9
 800b574:	380ac03a 	cmpne	r5,r7,zero
 800b578:	8962b03a 	or	r17,r17,r5
 800b57c:	89a3883a 	add	r17,r17,r6
 800b580:	2211883a 	add	r8,r4,r8
 800b584:	898d803a 	cmpltu	r6,r17,r6
 800b588:	418b883a 	add	r5,r8,r6
 800b58c:	1021883a 	mov	r16,r2
 800b590:	003ee706 	br	800b130 <__alt_data_end+0xfc00b130>
 800b594:	4184b03a 	or	r2,r8,r6
 800b598:	103e6226 	beq	r2,zero,800af24 <__alt_data_end+0xfc00af24>
 800b59c:	8987c83a 	sub	r3,r17,r6
 800b5a0:	88c9803a 	cmpltu	r4,r17,r3
 800b5a4:	2a05c83a 	sub	r2,r5,r8
 800b5a8:	1105c83a 	sub	r2,r2,r4
 800b5ac:	1100202c 	andhi	r4,r2,128
 800b5b0:	203f0426 	beq	r4,zero,800b1c4 <__alt_data_end+0xfc00b1c4>
 800b5b4:	3463c83a 	sub	r17,r6,r17
 800b5b8:	414bc83a 	sub	r5,r8,r5
 800b5bc:	344d803a 	cmpltu	r6,r6,r17
 800b5c0:	298bc83a 	sub	r5,r5,r6
 800b5c4:	3825883a 	mov	r18,r7
 800b5c8:	003e5606 	br	800af24 <__alt_data_end+0xfc00af24>
 800b5cc:	4184b03a 	or	r2,r8,r6
 800b5d0:	10002b26 	beq	r2,zero,800b680 <__adddf3+0x7d8>
 800b5d4:	2804d0fa 	srli	r2,r5,3
 800b5d8:	8822d0fa 	srli	r17,r17,3
 800b5dc:	280a977a 	slli	r5,r5,29
 800b5e0:	10c0022c 	andhi	r3,r2,8
 800b5e4:	2c62b03a 	or	r17,r5,r17
 800b5e8:	18000826 	beq	r3,zero,800b60c <__adddf3+0x764>
 800b5ec:	4008d0fa 	srli	r4,r8,3
 800b5f0:	20c0022c 	andhi	r3,r4,8
 800b5f4:	1800051e 	bne	r3,zero,800b60c <__adddf3+0x764>
 800b5f8:	300cd0fa 	srli	r6,r6,3
 800b5fc:	4010977a 	slli	r8,r8,29
 800b600:	2005883a 	mov	r2,r4
 800b604:	3825883a 	mov	r18,r7
 800b608:	41a2b03a 	or	r17,r8,r6
 800b60c:	880ad77a 	srli	r5,r17,29
 800b610:	100490fa 	slli	r2,r2,3
 800b614:	882290fa 	slli	r17,r17,3
 800b618:	0401ffc4 	movi	r16,2047
 800b61c:	288ab03a 	or	r5,r5,r2
 800b620:	003e4006 	br	800af24 <__alt_data_end+0xfc00af24>
 800b624:	01c1ffc4 	movi	r7,2047
 800b628:	11ffc71e 	bne	r2,r7,800b548 <__alt_data_end+0xfc00b548>
 800b62c:	400b883a 	mov	r5,r8
 800b630:	3023883a 	mov	r17,r6
 800b634:	1021883a 	mov	r16,r2
 800b638:	003e3a06 	br	800af24 <__alt_data_end+0xfc00af24>
 800b63c:	10002d26 	beq	r2,zero,800b6f4 <__adddf3+0x84c>
 800b640:	4184b03a 	or	r2,r8,r6
 800b644:	10000e26 	beq	r2,zero,800b680 <__adddf3+0x7d8>
 800b648:	2804d0fa 	srli	r2,r5,3
 800b64c:	8822d0fa 	srli	r17,r17,3
 800b650:	280a977a 	slli	r5,r5,29
 800b654:	10c0022c 	andhi	r3,r2,8
 800b658:	2c62b03a 	or	r17,r5,r17
 800b65c:	183feb26 	beq	r3,zero,800b60c <__alt_data_end+0xfc00b60c>
 800b660:	4008d0fa 	srli	r4,r8,3
 800b664:	20c0022c 	andhi	r3,r4,8
 800b668:	183fe81e 	bne	r3,zero,800b60c <__alt_data_end+0xfc00b60c>
 800b66c:	300cd0fa 	srli	r6,r6,3
 800b670:	4010977a 	slli	r8,r8,29
 800b674:	2005883a 	mov	r2,r4
 800b678:	41a2b03a 	or	r17,r8,r6
 800b67c:	003fe306 	br	800b60c <__alt_data_end+0xfc00b60c>
 800b680:	0401ffc4 	movi	r16,2047
 800b684:	003e2706 	br	800af24 <__alt_data_end+0xfc00af24>
 800b688:	0011883a 	mov	r8,zero
 800b68c:	003f8306 	br	800b49c <__alt_data_end+0xfc00b49c>
 800b690:	193ff804 	addi	r4,r3,-32
 800b694:	02400804 	movi	r9,32
 800b698:	2908d83a 	srl	r4,r5,r4
 800b69c:	1a402526 	beq	r3,r9,800b734 <__adddf3+0x88c>
 800b6a0:	02401004 	movi	r9,64
 800b6a4:	48c7c83a 	sub	r3,r9,r3
 800b6a8:	28ca983a 	sll	r5,r5,r3
 800b6ac:	2c62b03a 	or	r17,r5,r17
 800b6b0:	8822c03a 	cmpne	r17,r17,zero
 800b6b4:	8922b03a 	or	r17,r17,r4
 800b6b8:	0007883a 	mov	r3,zero
 800b6bc:	003f2f06 	br	800b37c <__alt_data_end+0xfc00b37c>
 800b6c0:	01402034 	movhi	r5,128
 800b6c4:	0007883a 	mov	r3,zero
 800b6c8:	297fffc4 	addi	r5,r5,-1
 800b6cc:	047ffe04 	movi	r17,-8
 800b6d0:	0401ffc4 	movi	r16,2047
 800b6d4:	003e7306 	br	800b0a4 <__alt_data_end+0xfc00b0a4>
 800b6d8:	2c62b03a 	or	r17,r5,r17
 800b6dc:	8822c03a 	cmpne	r17,r17,zero
 800b6e0:	0009883a 	mov	r4,zero
 800b6e4:	003fa506 	br	800b57c <__alt_data_end+0xfc00b57c>
 800b6e8:	400b883a 	mov	r5,r8
 800b6ec:	3023883a 	mov	r17,r6
 800b6f0:	003e0c06 	br	800af24 <__alt_data_end+0xfc00af24>
 800b6f4:	400b883a 	mov	r5,r8
 800b6f8:	3023883a 	mov	r17,r6
 800b6fc:	0401ffc4 	movi	r16,2047
 800b700:	003e0806 	br	800af24 <__alt_data_end+0xfc00af24>
 800b704:	21fff804 	addi	r7,r4,-32
 800b708:	02400804 	movi	r9,32
 800b70c:	29ced83a 	srl	r7,r5,r7
 800b710:	22400a26 	beq	r4,r9,800b73c <__adddf3+0x894>
 800b714:	02401004 	movi	r9,64
 800b718:	4909c83a 	sub	r4,r9,r4
 800b71c:	290a983a 	sll	r5,r5,r4
 800b720:	2c62b03a 	or	r17,r5,r17
 800b724:	8822c03a 	cmpne	r17,r17,zero
 800b728:	89e2b03a 	or	r17,r17,r7
 800b72c:	0009883a 	mov	r4,zero
 800b730:	003f9206 	br	800b57c <__alt_data_end+0xfc00b57c>
 800b734:	000b883a 	mov	r5,zero
 800b738:	003fdc06 	br	800b6ac <__alt_data_end+0xfc00b6ac>
 800b73c:	000b883a 	mov	r5,zero
 800b740:	003ff706 	br	800b720 <__alt_data_end+0xfc00b720>

0800b744 <__divdf3>:
 800b744:	defff204 	addi	sp,sp,-56
 800b748:	dd000815 	stw	r20,32(sp)
 800b74c:	2828d53a 	srli	r20,r5,20
 800b750:	dd800a15 	stw	r22,40(sp)
 800b754:	282cd7fa 	srli	r22,r5,31
 800b758:	dc000415 	stw	r16,16(sp)
 800b75c:	04000434 	movhi	r16,16
 800b760:	df000c15 	stw	fp,48(sp)
 800b764:	dcc00715 	stw	r19,28(sp)
 800b768:	dc800615 	stw	r18,24(sp)
 800b76c:	dc400515 	stw	r17,20(sp)
 800b770:	843fffc4 	addi	r16,r16,-1
 800b774:	dfc00d15 	stw	ra,52(sp)
 800b778:	ddc00b15 	stw	r23,44(sp)
 800b77c:	dd400915 	stw	r21,36(sp)
 800b780:	a501ffcc 	andi	r20,r20,2047
 800b784:	2025883a 	mov	r18,r4
 800b788:	2027883a 	mov	r19,r4
 800b78c:	2c22703a 	and	r17,r5,r16
 800b790:	b7003fcc 	andi	fp,r22,255
 800b794:	a0005e26 	beq	r20,zero,800b910 <__divdf3+0x1cc>
 800b798:	0081ffc4 	movi	r2,2047
 800b79c:	a0803526 	beq	r20,r2,800b874 <__divdf3+0x130>
 800b7a0:	8c000434 	orhi	r16,r17,16
 800b7a4:	2004d77a 	srli	r2,r4,29
 800b7a8:	802090fa 	slli	r16,r16,3
 800b7ac:	202690fa 	slli	r19,r4,3
 800b7b0:	a53f0044 	addi	r20,r20,-1023
 800b7b4:	80a2b03a 	or	r17,r16,r2
 800b7b8:	0025883a 	mov	r18,zero
 800b7bc:	0011883a 	mov	r8,zero
 800b7c0:	380ad53a 	srli	r5,r7,20
 800b7c4:	382ed7fa 	srli	r23,r7,31
 800b7c8:	04000434 	movhi	r16,16
 800b7cc:	843fffc4 	addi	r16,r16,-1
 800b7d0:	2941ffcc 	andi	r5,r5,2047
 800b7d4:	302b883a 	mov	r21,r6
 800b7d8:	3c20703a 	and	r16,r7,r16
 800b7dc:	ba403fcc 	andi	r9,r23,255
 800b7e0:	28006726 	beq	r5,zero,800b980 <__divdf3+0x23c>
 800b7e4:	0081ffc4 	movi	r2,2047
 800b7e8:	28805f26 	beq	r5,r2,800b968 <__divdf3+0x224>
 800b7ec:	84000434 	orhi	r16,r16,16
 800b7f0:	3004d77a 	srli	r2,r6,29
 800b7f4:	802090fa 	slli	r16,r16,3
 800b7f8:	302a90fa 	slli	r21,r6,3
 800b7fc:	297f0044 	addi	r5,r5,-1023
 800b800:	80a0b03a 	or	r16,r16,r2
 800b804:	000f883a 	mov	r7,zero
 800b808:	3c86b03a 	or	r3,r7,r18
 800b80c:	180690ba 	slli	r3,r3,2
 800b810:	00820074 	movhi	r2,2049
 800b814:	10ae0d04 	addi	r2,r2,-18380
 800b818:	1887883a 	add	r3,r3,r2
 800b81c:	18c00017 	ldw	r3,0(r3)
 800b820:	b5c8f03a 	xor	r4,r22,r23
 800b824:	200d883a 	mov	r6,r4
 800b828:	24803fcc 	andi	r18,r4,255
 800b82c:	a169c83a 	sub	r20,r20,r5
 800b830:	1800683a 	jmp	r3
 800b834:	0800ba7c 	xorhi	zero,at,745
 800b838:	0800b8ac 	andhi	zero,at,738
 800b83c:	0800ba40 	call	800ba4 <__alt_mem_sdram-0x77ff45c>
 800b840:	0800b890 	cmplti	zero,at,738
 800b844:	0800ba40 	call	800ba4 <__alt_mem_sdram-0x77ff45c>
 800b848:	0800ba14 	ori	zero,at,744
 800b84c:	0800ba40 	call	800ba4 <__alt_mem_sdram-0x77ff45c>
 800b850:	0800b890 	cmplti	zero,at,738
 800b854:	0800b8ac 	andhi	zero,at,738
 800b858:	0800b8ac 	andhi	zero,at,738
 800b85c:	0800ba14 	ori	zero,at,744
 800b860:	0800b890 	cmplti	zero,at,738
 800b864:	0800b8a0 	cmpeqi	zero,at,738
 800b868:	0800b8a0 	cmpeqi	zero,at,738
 800b86c:	0800b8a0 	cmpeqi	zero,at,738
 800b870:	0800ba50 	cmplti	zero,at,745
 800b874:	8904b03a 	or	r2,r17,r4
 800b878:	1000631e 	bne	r2,zero,800ba08 <__divdf3+0x2c4>
 800b87c:	04800204 	movi	r18,8
 800b880:	0023883a 	mov	r17,zero
 800b884:	0027883a 	mov	r19,zero
 800b888:	02000084 	movi	r8,2
 800b88c:	003fcc06 	br	800b7c0 <__alt_data_end+0xfc00b7c0>
 800b890:	8023883a 	mov	r17,r16
 800b894:	a827883a 	mov	r19,r21
 800b898:	4839883a 	mov	fp,r9
 800b89c:	3811883a 	mov	r8,r7
 800b8a0:	00800084 	movi	r2,2
 800b8a4:	40812a1e 	bne	r8,r2,800bd50 <__divdf3+0x60c>
 800b8a8:	e025883a 	mov	r18,fp
 800b8ac:	9180004c 	andi	r6,r18,1
 800b8b0:	0101ffc4 	movi	r4,2047
 800b8b4:	000b883a 	mov	r5,zero
 800b8b8:	0027883a 	mov	r19,zero
 800b8bc:	2008953a 	slli	r4,r4,20
 800b8c0:	30c03fcc 	andi	r3,r6,255
 800b8c4:	04000434 	movhi	r16,16
 800b8c8:	180697fa 	slli	r3,r3,31
 800b8cc:	843fffc4 	addi	r16,r16,-1
 800b8d0:	2c20703a 	and	r16,r5,r16
 800b8d4:	8120b03a 	or	r16,r16,r4
 800b8d8:	80c6b03a 	or	r3,r16,r3
 800b8dc:	9805883a 	mov	r2,r19
 800b8e0:	dfc00d17 	ldw	ra,52(sp)
 800b8e4:	df000c17 	ldw	fp,48(sp)
 800b8e8:	ddc00b17 	ldw	r23,44(sp)
 800b8ec:	dd800a17 	ldw	r22,40(sp)
 800b8f0:	dd400917 	ldw	r21,36(sp)
 800b8f4:	dd000817 	ldw	r20,32(sp)
 800b8f8:	dcc00717 	ldw	r19,28(sp)
 800b8fc:	dc800617 	ldw	r18,24(sp)
 800b900:	dc400517 	ldw	r17,20(sp)
 800b904:	dc000417 	ldw	r16,16(sp)
 800b908:	dec00e04 	addi	sp,sp,56
 800b90c:	f800283a 	ret
 800b910:	8904b03a 	or	r2,r17,r4
 800b914:	10003726 	beq	r2,zero,800b9f4 <__divdf3+0x2b0>
 800b918:	88011c26 	beq	r17,zero,800bd8c <__divdf3+0x648>
 800b91c:	8809883a 	mov	r4,r17
 800b920:	d9800315 	stw	r6,12(sp)
 800b924:	d9c00115 	stw	r7,4(sp)
 800b928:	800d6480 	call	800d648 <__clzsi2>
 800b92c:	d9800317 	ldw	r6,12(sp)
 800b930:	d9c00117 	ldw	r7,4(sp)
 800b934:	1007883a 	mov	r3,r2
 800b938:	01000a04 	movi	r4,40
 800b93c:	1cfffe04 	addi	r19,r3,-8
 800b940:	20c9c83a 	sub	r4,r4,r3
 800b944:	8cca983a 	sll	r5,r17,r19
 800b948:	9108d83a 	srl	r4,r18,r4
 800b94c:	94e6983a 	sll	r19,r18,r19
 800b950:	2162b03a 	or	r17,r4,r5
 800b954:	053f0344 	movi	r20,-1011
 800b958:	a0e9c83a 	sub	r20,r20,r3
 800b95c:	0025883a 	mov	r18,zero
 800b960:	0011883a 	mov	r8,zero
 800b964:	003f9606 	br	800b7c0 <__alt_data_end+0xfc00b7c0>
 800b968:	8184b03a 	or	r2,r16,r6
 800b96c:	10001f1e 	bne	r2,zero,800b9ec <__divdf3+0x2a8>
 800b970:	0021883a 	mov	r16,zero
 800b974:	002b883a 	mov	r21,zero
 800b978:	01c00084 	movi	r7,2
 800b97c:	003fa206 	br	800b808 <__alt_data_end+0xfc00b808>
 800b980:	8184b03a 	or	r2,r16,r6
 800b984:	10001526 	beq	r2,zero,800b9dc <__divdf3+0x298>
 800b988:	80010c26 	beq	r16,zero,800bdbc <__divdf3+0x678>
 800b98c:	8009883a 	mov	r4,r16
 800b990:	d9800315 	stw	r6,12(sp)
 800b994:	da000215 	stw	r8,8(sp)
 800b998:	da400015 	stw	r9,0(sp)
 800b99c:	800d6480 	call	800d648 <__clzsi2>
 800b9a0:	d9800317 	ldw	r6,12(sp)
 800b9a4:	da000217 	ldw	r8,8(sp)
 800b9a8:	da400017 	ldw	r9,0(sp)
 800b9ac:	1007883a 	mov	r3,r2
 800b9b0:	01000a04 	movi	r4,40
 800b9b4:	1d7ffe04 	addi	r21,r3,-8
 800b9b8:	20c9c83a 	sub	r4,r4,r3
 800b9bc:	8560983a 	sll	r16,r16,r21
 800b9c0:	3108d83a 	srl	r4,r6,r4
 800b9c4:	356a983a 	sll	r21,r6,r21
 800b9c8:	2420b03a 	or	r16,r4,r16
 800b9cc:	017f0344 	movi	r5,-1011
 800b9d0:	28cbc83a 	sub	r5,r5,r3
 800b9d4:	000f883a 	mov	r7,zero
 800b9d8:	003f8b06 	br	800b808 <__alt_data_end+0xfc00b808>
 800b9dc:	0021883a 	mov	r16,zero
 800b9e0:	002b883a 	mov	r21,zero
 800b9e4:	01c00044 	movi	r7,1
 800b9e8:	003f8706 	br	800b808 <__alt_data_end+0xfc00b808>
 800b9ec:	01c000c4 	movi	r7,3
 800b9f0:	003f8506 	br	800b808 <__alt_data_end+0xfc00b808>
 800b9f4:	04800104 	movi	r18,4
 800b9f8:	0023883a 	mov	r17,zero
 800b9fc:	0027883a 	mov	r19,zero
 800ba00:	02000044 	movi	r8,1
 800ba04:	003f6e06 	br	800b7c0 <__alt_data_end+0xfc00b7c0>
 800ba08:	04800304 	movi	r18,12
 800ba0c:	020000c4 	movi	r8,3
 800ba10:	003f6b06 	br	800b7c0 <__alt_data_end+0xfc00b7c0>
 800ba14:	01400434 	movhi	r5,16
 800ba18:	000d883a 	mov	r6,zero
 800ba1c:	297fffc4 	addi	r5,r5,-1
 800ba20:	04ffffc4 	movi	r19,-1
 800ba24:	0101ffc4 	movi	r4,2047
 800ba28:	003fa406 	br	800b8bc <__alt_data_end+0xfc00b8bc>
 800ba2c:	043f0084 	movi	r16,-1022
 800ba30:	8521c83a 	sub	r16,r16,r20
 800ba34:	00800e04 	movi	r2,56
 800ba38:	1401200e 	bge	r2,r16,800bebc <__divdf3+0x778>
 800ba3c:	9180004c 	andi	r6,r18,1
 800ba40:	0009883a 	mov	r4,zero
 800ba44:	000b883a 	mov	r5,zero
 800ba48:	0027883a 	mov	r19,zero
 800ba4c:	003f9b06 	br	800b8bc <__alt_data_end+0xfc00b8bc>
 800ba50:	8880022c 	andhi	r2,r17,8
 800ba54:	1000c726 	beq	r2,zero,800bd74 <__divdf3+0x630>
 800ba58:	8080022c 	andhi	r2,r16,8
 800ba5c:	1000c51e 	bne	r2,zero,800bd74 <__divdf3+0x630>
 800ba60:	00800434 	movhi	r2,16
 800ba64:	81400234 	orhi	r5,r16,8
 800ba68:	10bfffc4 	addi	r2,r2,-1
 800ba6c:	b80d883a 	mov	r6,r23
 800ba70:	288a703a 	and	r5,r5,r2
 800ba74:	a827883a 	mov	r19,r21
 800ba78:	003fea06 	br	800ba24 <__alt_data_end+0xfc00ba24>
 800ba7c:	8440ea36 	bltu	r16,r17,800be28 <__divdf3+0x6e4>
 800ba80:	8c00e826 	beq	r17,r16,800be24 <__divdf3+0x6e0>
 800ba84:	a53fffc4 	addi	r20,r20,-1
 800ba88:	882d883a 	mov	r22,r17
 800ba8c:	000d883a 	mov	r6,zero
 800ba90:	a804d63a 	srli	r2,r21,24
 800ba94:	8020923a 	slli	r16,r16,8
 800ba98:	b009883a 	mov	r4,r22
 800ba9c:	d9800315 	stw	r6,12(sp)
 800baa0:	1420b03a 	or	r16,r2,r16
 800baa4:	802ed43a 	srli	r23,r16,16
 800baa8:	873fffcc 	andi	fp,r16,65535
 800baac:	a82a923a 	slli	r21,r21,8
 800bab0:	b80b883a 	mov	r5,r23
 800bab4:	800a9b80 	call	800a9b8 <__udivsi3>
 800bab8:	b009883a 	mov	r4,r22
 800babc:	b80b883a 	mov	r5,r23
 800bac0:	1023883a 	mov	r17,r2
 800bac4:	800a9c00 	call	800a9c0 <__umodsi3>
 800bac8:	1004943a 	slli	r2,r2,16
 800bacc:	9808d43a 	srli	r4,r19,16
 800bad0:	8f2d383a 	mul	r22,r17,fp
 800bad4:	d9800317 	ldw	r6,12(sp)
 800bad8:	1106b03a 	or	r3,r2,r4
 800badc:	1d80062e 	bgeu	r3,r22,800baf8 <__divdf3+0x3b4>
 800bae0:	1c07883a 	add	r3,r3,r16
 800bae4:	88bfffc4 	addi	r2,r17,-1
 800bae8:	1c00dc36 	bltu	r3,r16,800be5c <__divdf3+0x718>
 800baec:	1d80db2e 	bgeu	r3,r22,800be5c <__divdf3+0x718>
 800baf0:	8c7fff84 	addi	r17,r17,-2
 800baf4:	1c07883a 	add	r3,r3,r16
 800baf8:	1dadc83a 	sub	r22,r3,r22
 800bafc:	b009883a 	mov	r4,r22
 800bb00:	b80b883a 	mov	r5,r23
 800bb04:	d9800315 	stw	r6,12(sp)
 800bb08:	800a9b80 	call	800a9b8 <__udivsi3>
 800bb0c:	b009883a 	mov	r4,r22
 800bb10:	b80b883a 	mov	r5,r23
 800bb14:	d8800015 	stw	r2,0(sp)
 800bb18:	800a9c00 	call	800a9c0 <__umodsi3>
 800bb1c:	da400017 	ldw	r9,0(sp)
 800bb20:	1004943a 	slli	r2,r2,16
 800bb24:	9cffffcc 	andi	r19,r19,65535
 800bb28:	4f07383a 	mul	r3,r9,fp
 800bb2c:	14c8b03a 	or	r4,r2,r19
 800bb30:	d9800317 	ldw	r6,12(sp)
 800bb34:	20c0062e 	bgeu	r4,r3,800bb50 <__divdf3+0x40c>
 800bb38:	2409883a 	add	r4,r4,r16
 800bb3c:	48bfffc4 	addi	r2,r9,-1
 800bb40:	2400c436 	bltu	r4,r16,800be54 <__divdf3+0x710>
 800bb44:	20c0c32e 	bgeu	r4,r3,800be54 <__divdf3+0x710>
 800bb48:	4a7fff84 	addi	r9,r9,-2
 800bb4c:	2409883a 	add	r4,r4,r16
 800bb50:	8822943a 	slli	r17,r17,16
 800bb54:	a80ed43a 	srli	r7,r21,16
 800bb58:	aa3fffcc 	andi	r8,r21,65535
 800bb5c:	4c62b03a 	or	r17,r9,r17
 800bb60:	8816d43a 	srli	r11,r17,16
 800bb64:	897fffcc 	andi	r5,r17,65535
 800bb68:	2a15383a 	mul	r10,r5,r8
 800bb6c:	5a19383a 	mul	r12,r11,r8
 800bb70:	29cb383a 	mul	r5,r5,r7
 800bb74:	5012d43a 	srli	r9,r10,16
 800bb78:	20c5c83a 	sub	r2,r4,r3
 800bb7c:	614b883a 	add	r5,r12,r5
 800bb80:	2a4b883a 	add	r5,r5,r9
 800bb84:	59c7383a 	mul	r3,r11,r7
 800bb88:	2b00022e 	bgeu	r5,r12,800bb94 <__divdf3+0x450>
 800bb8c:	01000074 	movhi	r4,1
 800bb90:	1907883a 	add	r3,r3,r4
 800bb94:	2808d43a 	srli	r4,r5,16
 800bb98:	280a943a 	slli	r5,r5,16
 800bb9c:	54ffffcc 	andi	r19,r10,65535
 800bba0:	1907883a 	add	r3,r3,r4
 800bba4:	2ccb883a 	add	r5,r5,r19
 800bba8:	10c09336 	bltu	r2,r3,800bdf8 <__divdf3+0x6b4>
 800bbac:	10c0ad26 	beq	r2,r3,800be64 <__divdf3+0x720>
 800bbb0:	10c7c83a 	sub	r3,r2,r3
 800bbb4:	3167c83a 	sub	r19,r6,r5
 800bbb8:	34ed803a 	cmpltu	r22,r6,r19
 800bbbc:	1dadc83a 	sub	r22,r3,r22
 800bbc0:	b400b226 	beq	r22,r16,800be8c <__divdf3+0x748>
 800bbc4:	b009883a 	mov	r4,r22
 800bbc8:	b80b883a 	mov	r5,r23
 800bbcc:	d9c00115 	stw	r7,4(sp)
 800bbd0:	da000215 	stw	r8,8(sp)
 800bbd4:	800a9b80 	call	800a9b8 <__udivsi3>
 800bbd8:	b009883a 	mov	r4,r22
 800bbdc:	b80b883a 	mov	r5,r23
 800bbe0:	d8800315 	stw	r2,12(sp)
 800bbe4:	800a9c00 	call	800a9c0 <__umodsi3>
 800bbe8:	d9800317 	ldw	r6,12(sp)
 800bbec:	1004943a 	slli	r2,r2,16
 800bbf0:	9808d43a 	srli	r4,r19,16
 800bbf4:	372d383a 	mul	r22,r6,fp
 800bbf8:	d9c00117 	ldw	r7,4(sp)
 800bbfc:	1106b03a 	or	r3,r2,r4
 800bc00:	da000217 	ldw	r8,8(sp)
 800bc04:	1d80062e 	bgeu	r3,r22,800bc20 <__divdf3+0x4dc>
 800bc08:	1c07883a 	add	r3,r3,r16
 800bc0c:	30bfffc4 	addi	r2,r6,-1
 800bc10:	1c00a036 	bltu	r3,r16,800be94 <__divdf3+0x750>
 800bc14:	1d809f2e 	bgeu	r3,r22,800be94 <__divdf3+0x750>
 800bc18:	31bfff84 	addi	r6,r6,-2
 800bc1c:	1c07883a 	add	r3,r3,r16
 800bc20:	1dadc83a 	sub	r22,r3,r22
 800bc24:	b009883a 	mov	r4,r22
 800bc28:	b80b883a 	mov	r5,r23
 800bc2c:	d9800315 	stw	r6,12(sp)
 800bc30:	d9c00115 	stw	r7,4(sp)
 800bc34:	da000215 	stw	r8,8(sp)
 800bc38:	800a9b80 	call	800a9b8 <__udivsi3>
 800bc3c:	b009883a 	mov	r4,r22
 800bc40:	b80b883a 	mov	r5,r23
 800bc44:	d8800015 	stw	r2,0(sp)
 800bc48:	800a9c00 	call	800a9c0 <__umodsi3>
 800bc4c:	da400017 	ldw	r9,0(sp)
 800bc50:	1004943a 	slli	r2,r2,16
 800bc54:	993fffcc 	andi	r4,r19,65535
 800bc58:	4f39383a 	mul	fp,r9,fp
 800bc5c:	1106b03a 	or	r3,r2,r4
 800bc60:	d9800317 	ldw	r6,12(sp)
 800bc64:	d9c00117 	ldw	r7,4(sp)
 800bc68:	da000217 	ldw	r8,8(sp)
 800bc6c:	1f00062e 	bgeu	r3,fp,800bc88 <__divdf3+0x544>
 800bc70:	1c07883a 	add	r3,r3,r16
 800bc74:	48bfffc4 	addi	r2,r9,-1
 800bc78:	1c008836 	bltu	r3,r16,800be9c <__divdf3+0x758>
 800bc7c:	1f00872e 	bgeu	r3,fp,800be9c <__divdf3+0x758>
 800bc80:	4a7fff84 	addi	r9,r9,-2
 800bc84:	1c07883a 	add	r3,r3,r16
 800bc88:	3008943a 	slli	r4,r6,16
 800bc8c:	1f07c83a 	sub	r3,r3,fp
 800bc90:	4926b03a 	or	r19,r9,r4
 800bc94:	993fffcc 	andi	r4,r19,65535
 800bc98:	980cd43a 	srli	r6,r19,16
 800bc9c:	220b383a 	mul	r5,r4,r8
 800bca0:	21c5383a 	mul	r2,r4,r7
 800bca4:	3211383a 	mul	r8,r6,r8
 800bca8:	2808d43a 	srli	r4,r5,16
 800bcac:	31cf383a 	mul	r7,r6,r7
 800bcb0:	4085883a 	add	r2,r8,r2
 800bcb4:	1105883a 	add	r2,r2,r4
 800bcb8:	1200022e 	bgeu	r2,r8,800bcc4 <__divdf3+0x580>
 800bcbc:	01000074 	movhi	r4,1
 800bcc0:	390f883a 	add	r7,r7,r4
 800bcc4:	1008d43a 	srli	r4,r2,16
 800bcc8:	1004943a 	slli	r2,r2,16
 800bccc:	297fffcc 	andi	r5,r5,65535
 800bcd0:	390f883a 	add	r7,r7,r4
 800bcd4:	1145883a 	add	r2,r2,r5
 800bcd8:	19c06536 	bltu	r3,r7,800be70 <__divdf3+0x72c>
 800bcdc:	19c09f26 	beq	r3,r7,800bf5c <__divdf3+0x818>
 800bce0:	9cc00054 	ori	r19,r19,1
 800bce4:	a100ffc4 	addi	r4,r20,1023
 800bce8:	013f500e 	bge	zero,r4,800ba2c <__alt_data_end+0xfc00ba2c>
 800bcec:	988001cc 	andi	r2,r19,7
 800bcf0:	10000726 	beq	r2,zero,800bd10 <__divdf3+0x5cc>
 800bcf4:	98c003cc 	andi	r3,r19,15
 800bcf8:	00800104 	movi	r2,4
 800bcfc:	18800426 	beq	r3,r2,800bd10 <__divdf3+0x5cc>
 800bd00:	9885883a 	add	r2,r19,r2
 800bd04:	14e1803a 	cmpltu	r16,r2,r19
 800bd08:	8c23883a 	add	r17,r17,r16
 800bd0c:	1027883a 	mov	r19,r2
 800bd10:	8880402c 	andhi	r2,r17,256
 800bd14:	10000426 	beq	r2,zero,800bd28 <__divdf3+0x5e4>
 800bd18:	00bfc034 	movhi	r2,65280
 800bd1c:	10bfffc4 	addi	r2,r2,-1
 800bd20:	a1010004 	addi	r4,r20,1024
 800bd24:	88a2703a 	and	r17,r17,r2
 800bd28:	0081ff84 	movi	r2,2046
 800bd2c:	113edf16 	blt	r2,r4,800b8ac <__alt_data_end+0xfc00b8ac>
 800bd30:	9826d0fa 	srli	r19,r19,3
 800bd34:	8804977a 	slli	r2,r17,29
 800bd38:	8820927a 	slli	r16,r17,9
 800bd3c:	2101ffcc 	andi	r4,r4,2047
 800bd40:	14e6b03a 	or	r19,r2,r19
 800bd44:	800ad33a 	srli	r5,r16,12
 800bd48:	9180004c 	andi	r6,r18,1
 800bd4c:	003edb06 	br	800b8bc <__alt_data_end+0xfc00b8bc>
 800bd50:	008000c4 	movi	r2,3
 800bd54:	4080a826 	beq	r8,r2,800bff8 <__divdf3+0x8b4>
 800bd58:	00800044 	movi	r2,1
 800bd5c:	4080551e 	bne	r8,r2,800beb4 <__divdf3+0x770>
 800bd60:	e00d883a 	mov	r6,fp
 800bd64:	0009883a 	mov	r4,zero
 800bd68:	000b883a 	mov	r5,zero
 800bd6c:	0027883a 	mov	r19,zero
 800bd70:	003ed206 	br	800b8bc <__alt_data_end+0xfc00b8bc>
 800bd74:	00800434 	movhi	r2,16
 800bd78:	89400234 	orhi	r5,r17,8
 800bd7c:	10bfffc4 	addi	r2,r2,-1
 800bd80:	b00d883a 	mov	r6,r22
 800bd84:	288a703a 	and	r5,r5,r2
 800bd88:	003f2606 	br	800ba24 <__alt_data_end+0xfc00ba24>
 800bd8c:	d9800315 	stw	r6,12(sp)
 800bd90:	d9c00115 	stw	r7,4(sp)
 800bd94:	800d6480 	call	800d648 <__clzsi2>
 800bd98:	10c00804 	addi	r3,r2,32
 800bd9c:	010009c4 	movi	r4,39
 800bda0:	d9800317 	ldw	r6,12(sp)
 800bda4:	d9c00117 	ldw	r7,4(sp)
 800bda8:	20fee30e 	bge	r4,r3,800b938 <__alt_data_end+0xfc00b938>
 800bdac:	117ffe04 	addi	r5,r2,-8
 800bdb0:	9162983a 	sll	r17,r18,r5
 800bdb4:	0027883a 	mov	r19,zero
 800bdb8:	003ee606 	br	800b954 <__alt_data_end+0xfc00b954>
 800bdbc:	3009883a 	mov	r4,r6
 800bdc0:	d9800315 	stw	r6,12(sp)
 800bdc4:	da000215 	stw	r8,8(sp)
 800bdc8:	da400015 	stw	r9,0(sp)
 800bdcc:	800d6480 	call	800d648 <__clzsi2>
 800bdd0:	10c00804 	addi	r3,r2,32
 800bdd4:	010009c4 	movi	r4,39
 800bdd8:	d9800317 	ldw	r6,12(sp)
 800bddc:	da000217 	ldw	r8,8(sp)
 800bde0:	da400017 	ldw	r9,0(sp)
 800bde4:	20fef20e 	bge	r4,r3,800b9b0 <__alt_data_end+0xfc00b9b0>
 800bde8:	10bffe04 	addi	r2,r2,-8
 800bdec:	a8a0983a 	sll	r16,r21,r2
 800bdf0:	002b883a 	mov	r21,zero
 800bdf4:	003ef506 	br	800b9cc <__alt_data_end+0xfc00b9cc>
 800bdf8:	354d883a 	add	r6,r6,r21
 800bdfc:	3549803a 	cmpltu	r4,r6,r21
 800be00:	2409883a 	add	r4,r4,r16
 800be04:	2089883a 	add	r4,r4,r2
 800be08:	88bfffc4 	addi	r2,r17,-1
 800be0c:	81000c2e 	bgeu	r16,r4,800be40 <__divdf3+0x6fc>
 800be10:	20c04436 	bltu	r4,r3,800bf24 <__divdf3+0x7e0>
 800be14:	19006f26 	beq	r3,r4,800bfd4 <__divdf3+0x890>
 800be18:	20c7c83a 	sub	r3,r4,r3
 800be1c:	1023883a 	mov	r17,r2
 800be20:	003f6406 	br	800bbb4 <__alt_data_end+0xfc00bbb4>
 800be24:	9d7f1736 	bltu	r19,r21,800ba84 <__alt_data_end+0xfc00ba84>
 800be28:	9806d07a 	srli	r3,r19,1
 800be2c:	880497fa 	slli	r2,r17,31
 800be30:	980c97fa 	slli	r6,r19,31
 800be34:	882cd07a 	srli	r22,r17,1
 800be38:	18a6b03a 	or	r19,r3,r2
 800be3c:	003f1406 	br	800ba90 <__alt_data_end+0xfc00ba90>
 800be40:	243ff51e 	bne	r4,r16,800be18 <__alt_data_end+0xfc00be18>
 800be44:	357ff22e 	bgeu	r6,r21,800be10 <__alt_data_end+0xfc00be10>
 800be48:	80c7c83a 	sub	r3,r16,r3
 800be4c:	1023883a 	mov	r17,r2
 800be50:	003f5806 	br	800bbb4 <__alt_data_end+0xfc00bbb4>
 800be54:	1013883a 	mov	r9,r2
 800be58:	003f3d06 	br	800bb50 <__alt_data_end+0xfc00bb50>
 800be5c:	1023883a 	mov	r17,r2
 800be60:	003f2506 	br	800baf8 <__alt_data_end+0xfc00baf8>
 800be64:	317fe436 	bltu	r6,r5,800bdf8 <__alt_data_end+0xfc00bdf8>
 800be68:	0007883a 	mov	r3,zero
 800be6c:	003f5106 	br	800bbb4 <__alt_data_end+0xfc00bbb4>
 800be70:	1c07883a 	add	r3,r3,r16
 800be74:	993fffc4 	addi	r4,r19,-1
 800be78:	1c000a2e 	bgeu	r3,r16,800bea4 <__divdf3+0x760>
 800be7c:	2027883a 	mov	r19,r4
 800be80:	19ff971e 	bne	r3,r7,800bce0 <__alt_data_end+0xfc00bce0>
 800be84:	a8bf961e 	bne	r21,r2,800bce0 <__alt_data_end+0xfc00bce0>
 800be88:	003f9606 	br	800bce4 <__alt_data_end+0xfc00bce4>
 800be8c:	04ffffc4 	movi	r19,-1
 800be90:	003f9406 	br	800bce4 <__alt_data_end+0xfc00bce4>
 800be94:	100d883a 	mov	r6,r2
 800be98:	003f6106 	br	800bc20 <__alt_data_end+0xfc00bc20>
 800be9c:	1013883a 	mov	r9,r2
 800bea0:	003f7906 	br	800bc88 <__alt_data_end+0xfc00bc88>
 800bea4:	19c02636 	bltu	r3,r7,800bf40 <__divdf3+0x7fc>
 800bea8:	38c04d26 	beq	r7,r3,800bfe0 <__divdf3+0x89c>
 800beac:	2027883a 	mov	r19,r4
 800beb0:	003f8b06 	br	800bce0 <__alt_data_end+0xfc00bce0>
 800beb4:	e025883a 	mov	r18,fp
 800beb8:	003f8a06 	br	800bce4 <__alt_data_end+0xfc00bce4>
 800bebc:	008007c4 	movi	r2,31
 800bec0:	14002a16 	blt	r2,r16,800bf6c <__divdf3+0x828>
 800bec4:	a5010784 	addi	r20,r20,1054
 800bec8:	8d04983a 	sll	r2,r17,r20
 800becc:	9c06d83a 	srl	r3,r19,r16
 800bed0:	9d28983a 	sll	r20,r19,r20
 800bed4:	8c20d83a 	srl	r16,r17,r16
 800bed8:	1886b03a 	or	r3,r3,r2
 800bedc:	a004c03a 	cmpne	r2,r20,zero
 800bee0:	1884b03a 	or	r2,r3,r2
 800bee4:	10c001cc 	andi	r3,r2,7
 800bee8:	18000726 	beq	r3,zero,800bf08 <__divdf3+0x7c4>
 800beec:	110003cc 	andi	r4,r2,15
 800bef0:	00c00104 	movi	r3,4
 800bef4:	20c00426 	beq	r4,r3,800bf08 <__divdf3+0x7c4>
 800bef8:	10c00104 	addi	r3,r2,4
 800befc:	1885803a 	cmpltu	r2,r3,r2
 800bf00:	80a1883a 	add	r16,r16,r2
 800bf04:	1805883a 	mov	r2,r3
 800bf08:	80c0202c 	andhi	r3,r16,128
 800bf0c:	18002d26 	beq	r3,zero,800bfc4 <__divdf3+0x880>
 800bf10:	9180004c 	andi	r6,r18,1
 800bf14:	01000044 	movi	r4,1
 800bf18:	000b883a 	mov	r5,zero
 800bf1c:	0027883a 	mov	r19,zero
 800bf20:	003e6606 	br	800b8bc <__alt_data_end+0xfc00b8bc>
 800bf24:	354d883a 	add	r6,r6,r21
 800bf28:	356d803a 	cmpltu	r22,r6,r21
 800bf2c:	b42d883a 	add	r22,r22,r16
 800bf30:	b12d883a 	add	r22,r22,r4
 800bf34:	8c7fff84 	addi	r17,r17,-2
 800bf38:	b0c7c83a 	sub	r3,r22,r3
 800bf3c:	003f1d06 	br	800bbb4 <__alt_data_end+0xfc00bbb4>
 800bf40:	ad4b883a 	add	r5,r21,r21
 800bf44:	2d6b803a 	cmpltu	r21,r5,r21
 800bf48:	ac2b883a 	add	r21,r21,r16
 800bf4c:	1d47883a 	add	r3,r3,r21
 800bf50:	993fff84 	addi	r4,r19,-2
 800bf54:	282b883a 	mov	r21,r5
 800bf58:	003fc806 	br	800be7c <__alt_data_end+0xfc00be7c>
 800bf5c:	103fc41e 	bne	r2,zero,800be70 <__alt_data_end+0xfc00be70>
 800bf60:	002b883a 	mov	r21,zero
 800bf64:	a8bf5e1e 	bne	r21,r2,800bce0 <__alt_data_end+0xfc00bce0>
 800bf68:	003f5e06 	br	800bce4 <__alt_data_end+0xfc00bce4>
 800bf6c:	00bef884 	movi	r2,-1054
 800bf70:	1505c83a 	sub	r2,r2,r20
 800bf74:	00c00804 	movi	r3,32
 800bf78:	8884d83a 	srl	r2,r17,r2
 800bf7c:	80c01c26 	beq	r16,r3,800bff0 <__divdf3+0x8ac>
 800bf80:	a0c10f84 	addi	r3,r20,1086
 800bf84:	88c6983a 	sll	r3,r17,r3
 800bf88:	1cc6b03a 	or	r3,r3,r19
 800bf8c:	1806c03a 	cmpne	r3,r3,zero
 800bf90:	1884b03a 	or	r2,r3,r2
 800bf94:	140001cc 	andi	r16,r2,7
 800bf98:	8000061e 	bne	r16,zero,800bfb4 <__divdf3+0x870>
 800bf9c:	000b883a 	mov	r5,zero
 800bfa0:	1004d0fa 	srli	r2,r2,3
 800bfa4:	9180004c 	andi	r6,r18,1
 800bfa8:	0009883a 	mov	r4,zero
 800bfac:	1426b03a 	or	r19,r2,r16
 800bfb0:	003e4206 	br	800b8bc <__alt_data_end+0xfc00b8bc>
 800bfb4:	110003cc 	andi	r4,r2,15
 800bfb8:	00c00104 	movi	r3,4
 800bfbc:	0021883a 	mov	r16,zero
 800bfc0:	20ffcd1e 	bne	r4,r3,800bef8 <__alt_data_end+0xfc00bef8>
 800bfc4:	800a927a 	slli	r5,r16,9
 800bfc8:	8020977a 	slli	r16,r16,29
 800bfcc:	280ad33a 	srli	r5,r5,12
 800bfd0:	003ff306 	br	800bfa0 <__alt_data_end+0xfc00bfa0>
 800bfd4:	317fd336 	bltu	r6,r5,800bf24 <__alt_data_end+0xfc00bf24>
 800bfd8:	1023883a 	mov	r17,r2
 800bfdc:	003fa206 	br	800be68 <__alt_data_end+0xfc00be68>
 800bfe0:	a8bfd736 	bltu	r21,r2,800bf40 <__alt_data_end+0xfc00bf40>
 800bfe4:	2027883a 	mov	r19,r4
 800bfe8:	a8bf3d1e 	bne	r21,r2,800bce0 <__alt_data_end+0xfc00bce0>
 800bfec:	003f3d06 	br	800bce4 <__alt_data_end+0xfc00bce4>
 800bff0:	0007883a 	mov	r3,zero
 800bff4:	003fe406 	br	800bf88 <__alt_data_end+0xfc00bf88>
 800bff8:	00800434 	movhi	r2,16
 800bffc:	89400234 	orhi	r5,r17,8
 800c000:	10bfffc4 	addi	r2,r2,-1
 800c004:	e00d883a 	mov	r6,fp
 800c008:	288a703a 	and	r5,r5,r2
 800c00c:	003e8506 	br	800ba24 <__alt_data_end+0xfc00ba24>

0800c010 <__eqdf2>:
 800c010:	2804d53a 	srli	r2,r5,20
 800c014:	3806d53a 	srli	r3,r7,20
 800c018:	02000434 	movhi	r8,16
 800c01c:	423fffc4 	addi	r8,r8,-1
 800c020:	1081ffcc 	andi	r2,r2,2047
 800c024:	0241ffc4 	movi	r9,2047
 800c028:	2a14703a 	and	r10,r5,r8
 800c02c:	18c1ffcc 	andi	r3,r3,2047
 800c030:	3a10703a 	and	r8,r7,r8
 800c034:	280ad7fa 	srli	r5,r5,31
 800c038:	380ed7fa 	srli	r7,r7,31
 800c03c:	12400f26 	beq	r2,r9,800c07c <__eqdf2+0x6c>
 800c040:	0241ffc4 	movi	r9,2047
 800c044:	1a400326 	beq	r3,r9,800c054 <__eqdf2+0x44>
 800c048:	10c00526 	beq	r2,r3,800c060 <__eqdf2+0x50>
 800c04c:	00800044 	movi	r2,1
 800c050:	f800283a 	ret
 800c054:	4192b03a 	or	r9,r8,r6
 800c058:	483ffc1e 	bne	r9,zero,800c04c <__alt_data_end+0xfc00c04c>
 800c05c:	10fffb1e 	bne	r2,r3,800c04c <__alt_data_end+0xfc00c04c>
 800c060:	523ffa1e 	bne	r10,r8,800c04c <__alt_data_end+0xfc00c04c>
 800c064:	21bff91e 	bne	r4,r6,800c04c <__alt_data_end+0xfc00c04c>
 800c068:	29c00826 	beq	r5,r7,800c08c <__eqdf2+0x7c>
 800c06c:	103ff71e 	bne	r2,zero,800c04c <__alt_data_end+0xfc00c04c>
 800c070:	5104b03a 	or	r2,r10,r4
 800c074:	1004c03a 	cmpne	r2,r2,zero
 800c078:	f800283a 	ret
 800c07c:	5112b03a 	or	r9,r10,r4
 800c080:	483fef26 	beq	r9,zero,800c040 <__alt_data_end+0xfc00c040>
 800c084:	00800044 	movi	r2,1
 800c088:	f800283a 	ret
 800c08c:	0005883a 	mov	r2,zero
 800c090:	f800283a 	ret

0800c094 <__gedf2>:
 800c094:	2804d53a 	srli	r2,r5,20
 800c098:	3806d53a 	srli	r3,r7,20
 800c09c:	02000434 	movhi	r8,16
 800c0a0:	423fffc4 	addi	r8,r8,-1
 800c0a4:	0241ffc4 	movi	r9,2047
 800c0a8:	1081ffcc 	andi	r2,r2,2047
 800c0ac:	2a14703a 	and	r10,r5,r8
 800c0b0:	1a46703a 	and	r3,r3,r9
 800c0b4:	3a10703a 	and	r8,r7,r8
 800c0b8:	280ad7fa 	srli	r5,r5,31
 800c0bc:	380ed7fa 	srli	r7,r7,31
 800c0c0:	12400b26 	beq	r2,r9,800c0f0 <__gedf2+0x5c>
 800c0c4:	1a401626 	beq	r3,r9,800c120 <__gedf2+0x8c>
 800c0c8:	10000c1e 	bne	r2,zero,800c0fc <__gedf2+0x68>
 800c0cc:	5112b03a 	or	r9,r10,r4
 800c0d0:	4813003a 	cmpeq	r9,r9,zero
 800c0d4:	4817883a 	mov	r11,r9
 800c0d8:	18000c1e 	bne	r3,zero,800c10c <__gedf2+0x78>
 800c0dc:	4198b03a 	or	r12,r8,r6
 800c0e0:	60000a1e 	bne	r12,zero,800c10c <__gedf2+0x78>
 800c0e4:	48001326 	beq	r9,zero,800c134 <__gedf2+0xa0>
 800c0e8:	0005883a 	mov	r2,zero
 800c0ec:	f800283a 	ret
 800c0f0:	5112b03a 	or	r9,r10,r4
 800c0f4:	4800191e 	bne	r9,zero,800c15c <__gedf2+0xc8>
 800c0f8:	18800926 	beq	r3,r2,800c120 <__gedf2+0x8c>
 800c0fc:	18000b1e 	bne	r3,zero,800c12c <__gedf2+0x98>
 800c100:	4192b03a 	or	r9,r8,r6
 800c104:	0017883a 	mov	r11,zero
 800c108:	48000a26 	beq	r9,zero,800c134 <__gedf2+0xa0>
 800c10c:	39c03fcc 	andi	r7,r7,255
 800c110:	58000726 	beq	r11,zero,800c130 <__gedf2+0x9c>
 800c114:	3800081e 	bne	r7,zero,800c138 <__gedf2+0xa4>
 800c118:	00bfffc4 	movi	r2,-1
 800c11c:	f800283a 	ret
 800c120:	4192b03a 	or	r9,r8,r6
 800c124:	48000d1e 	bne	r9,zero,800c15c <__gedf2+0xc8>
 800c128:	103fe826 	beq	r2,zero,800c0cc <__alt_data_end+0xfc00c0cc>
 800c12c:	39c03fcc 	andi	r7,r7,255
 800c130:	29c00326 	beq	r5,r7,800c140 <__gedf2+0xac>
 800c134:	283ff81e 	bne	r5,zero,800c118 <__alt_data_end+0xfc00c118>
 800c138:	00800044 	movi	r2,1
 800c13c:	f800283a 	ret
 800c140:	18bffc16 	blt	r3,r2,800c134 <__alt_data_end+0xfc00c134>
 800c144:	10c00316 	blt	r2,r3,800c154 <__gedf2+0xc0>
 800c148:	42bffa36 	bltu	r8,r10,800c134 <__alt_data_end+0xfc00c134>
 800c14c:	52000526 	beq	r10,r8,800c164 <__gedf2+0xd0>
 800c150:	523fe52e 	bgeu	r10,r8,800c0e8 <__alt_data_end+0xfc00c0e8>
 800c154:	283ff026 	beq	r5,zero,800c118 <__alt_data_end+0xfc00c118>
 800c158:	003ff706 	br	800c138 <__alt_data_end+0xfc00c138>
 800c15c:	00bfff84 	movi	r2,-2
 800c160:	f800283a 	ret
 800c164:	313ff336 	bltu	r6,r4,800c134 <__alt_data_end+0xfc00c134>
 800c168:	21bfdf2e 	bgeu	r4,r6,800c0e8 <__alt_data_end+0xfc00c0e8>
 800c16c:	283fea26 	beq	r5,zero,800c118 <__alt_data_end+0xfc00c118>
 800c170:	003ff106 	br	800c138 <__alt_data_end+0xfc00c138>

0800c174 <__ledf2>:
 800c174:	2804d53a 	srli	r2,r5,20
 800c178:	3810d53a 	srli	r8,r7,20
 800c17c:	00c00434 	movhi	r3,16
 800c180:	18ffffc4 	addi	r3,r3,-1
 800c184:	0241ffc4 	movi	r9,2047
 800c188:	1081ffcc 	andi	r2,r2,2047
 800c18c:	28d4703a 	and	r10,r5,r3
 800c190:	4250703a 	and	r8,r8,r9
 800c194:	38c6703a 	and	r3,r7,r3
 800c198:	280ad7fa 	srli	r5,r5,31
 800c19c:	380ed7fa 	srli	r7,r7,31
 800c1a0:	12400b26 	beq	r2,r9,800c1d0 <__ledf2+0x5c>
 800c1a4:	42401926 	beq	r8,r9,800c20c <__ledf2+0x98>
 800c1a8:	10000c1e 	bne	r2,zero,800c1dc <__ledf2+0x68>
 800c1ac:	5112b03a 	or	r9,r10,r4
 800c1b0:	4813003a 	cmpeq	r9,r9,zero
 800c1b4:	4817883a 	mov	r11,r9
 800c1b8:	40000f26 	beq	r8,zero,800c1f8 <__ledf2+0x84>
 800c1bc:	39c03fcc 	andi	r7,r7,255
 800c1c0:	58001826 	beq	r11,zero,800c224 <__ledf2+0xb0>
 800c1c4:	38000a1e 	bne	r7,zero,800c1f0 <__ledf2+0x7c>
 800c1c8:	00bfffc4 	movi	r2,-1
 800c1cc:	f800283a 	ret
 800c1d0:	5112b03a 	or	r9,r10,r4
 800c1d4:	48000f1e 	bne	r9,zero,800c214 <__ledf2+0xa0>
 800c1d8:	40800c26 	beq	r8,r2,800c20c <__ledf2+0x98>
 800c1dc:	4000101e 	bne	r8,zero,800c220 <__ledf2+0xac>
 800c1e0:	1992b03a 	or	r9,r3,r6
 800c1e4:	0017883a 	mov	r11,zero
 800c1e8:	483ff41e 	bne	r9,zero,800c1bc <__alt_data_end+0xfc00c1bc>
 800c1ec:	283ff61e 	bne	r5,zero,800c1c8 <__alt_data_end+0xfc00c1c8>
 800c1f0:	00800044 	movi	r2,1
 800c1f4:	f800283a 	ret
 800c1f8:	1998b03a 	or	r12,r3,r6
 800c1fc:	603fef1e 	bne	r12,zero,800c1bc <__alt_data_end+0xfc00c1bc>
 800c200:	483ffa26 	beq	r9,zero,800c1ec <__alt_data_end+0xfc00c1ec>
 800c204:	0005883a 	mov	r2,zero
 800c208:	f800283a 	ret
 800c20c:	1992b03a 	or	r9,r3,r6
 800c210:	48000226 	beq	r9,zero,800c21c <__ledf2+0xa8>
 800c214:	00800084 	movi	r2,2
 800c218:	f800283a 	ret
 800c21c:	103fe326 	beq	r2,zero,800c1ac <__alt_data_end+0xfc00c1ac>
 800c220:	39c03fcc 	andi	r7,r7,255
 800c224:	29fff11e 	bne	r5,r7,800c1ec <__alt_data_end+0xfc00c1ec>
 800c228:	40bff016 	blt	r8,r2,800c1ec <__alt_data_end+0xfc00c1ec>
 800c22c:	12000316 	blt	r2,r8,800c23c <__ledf2+0xc8>
 800c230:	1abfee36 	bltu	r3,r10,800c1ec <__alt_data_end+0xfc00c1ec>
 800c234:	50c00326 	beq	r10,r3,800c244 <__ledf2+0xd0>
 800c238:	50fff22e 	bgeu	r10,r3,800c204 <__alt_data_end+0xfc00c204>
 800c23c:	283fe226 	beq	r5,zero,800c1c8 <__alt_data_end+0xfc00c1c8>
 800c240:	003feb06 	br	800c1f0 <__alt_data_end+0xfc00c1f0>
 800c244:	313fe936 	bltu	r6,r4,800c1ec <__alt_data_end+0xfc00c1ec>
 800c248:	21bfee2e 	bgeu	r4,r6,800c204 <__alt_data_end+0xfc00c204>
 800c24c:	283fde26 	beq	r5,zero,800c1c8 <__alt_data_end+0xfc00c1c8>
 800c250:	003fe706 	br	800c1f0 <__alt_data_end+0xfc00c1f0>

0800c254 <__muldf3>:
 800c254:	defff204 	addi	sp,sp,-56
 800c258:	2804d53a 	srli	r2,r5,20
 800c25c:	dd800a15 	stw	r22,40(sp)
 800c260:	282cd7fa 	srli	r22,r5,31
 800c264:	dc000415 	stw	r16,16(sp)
 800c268:	04000434 	movhi	r16,16
 800c26c:	df000c15 	stw	fp,48(sp)
 800c270:	dd000815 	stw	r20,32(sp)
 800c274:	dcc00715 	stw	r19,28(sp)
 800c278:	dc800615 	stw	r18,24(sp)
 800c27c:	dc400515 	stw	r17,20(sp)
 800c280:	843fffc4 	addi	r16,r16,-1
 800c284:	dfc00d15 	stw	ra,52(sp)
 800c288:	ddc00b15 	stw	r23,44(sp)
 800c28c:	dd400915 	stw	r21,36(sp)
 800c290:	1501ffcc 	andi	r20,r2,2047
 800c294:	2023883a 	mov	r17,r4
 800c298:	2025883a 	mov	r18,r4
 800c29c:	2c20703a 	and	r16,r5,r16
 800c2a0:	b027883a 	mov	r19,r22
 800c2a4:	b7003fcc 	andi	fp,r22,255
 800c2a8:	a0005926 	beq	r20,zero,800c410 <__muldf3+0x1bc>
 800c2ac:	0081ffc4 	movi	r2,2047
 800c2b0:	a0803426 	beq	r20,r2,800c384 <__muldf3+0x130>
 800c2b4:	84000434 	orhi	r16,r16,16
 800c2b8:	2004d77a 	srli	r2,r4,29
 800c2bc:	802090fa 	slli	r16,r16,3
 800c2c0:	202490fa 	slli	r18,r4,3
 800c2c4:	a53f0044 	addi	r20,r20,-1023
 800c2c8:	80a0b03a 	or	r16,r16,r2
 800c2cc:	002b883a 	mov	r21,zero
 800c2d0:	0015883a 	mov	r10,zero
 800c2d4:	3812d53a 	srli	r9,r7,20
 800c2d8:	3806d7fa 	srli	r3,r7,31
 800c2dc:	02000434 	movhi	r8,16
 800c2e0:	423fffc4 	addi	r8,r8,-1
 800c2e4:	4941ffcc 	andi	r5,r9,2047
 800c2e8:	302f883a 	mov	r23,r6
 800c2ec:	3a22703a 	and	r17,r7,r8
 800c2f0:	1ac03fcc 	andi	r11,r3,255
 800c2f4:	28006226 	beq	r5,zero,800c480 <__muldf3+0x22c>
 800c2f8:	0081ffc4 	movi	r2,2047
 800c2fc:	28805a26 	beq	r5,r2,800c468 <__muldf3+0x214>
 800c300:	8a000434 	orhi	r8,r17,16
 800c304:	3004d77a 	srli	r2,r6,29
 800c308:	401090fa 	slli	r8,r8,3
 800c30c:	302e90fa 	slli	r23,r6,3
 800c310:	297f0044 	addi	r5,r5,-1023
 800c314:	40a2b03a 	or	r17,r8,r2
 800c318:	0013883a 	mov	r9,zero
 800c31c:	4d4cb03a 	or	r6,r9,r21
 800c320:	300c90ba 	slli	r6,r6,2
 800c324:	02020074 	movhi	r8,2049
 800c328:	4230d104 	addi	r8,r8,-15548
 800c32c:	320d883a 	add	r6,r6,r8
 800c330:	31800017 	ldw	r6,0(r6)
 800c334:	a14b883a 	add	r5,r20,r5
 800c338:	1dacf03a 	xor	r22,r3,r22
 800c33c:	2b000044 	addi	r12,r5,1
 800c340:	3000683a 	jmp	r6
 800c344:	0800c580 	call	800c58 <__alt_mem_sdram-0x77ff3a8>
 800c348:	0800c56c 	andhi	zero,at,789
 800c34c:	0800c56c 	andhi	zero,at,789
 800c350:	0800c558 	cmpnei	zero,at,789
 800c354:	0800c3a0 	cmpeqi	zero,at,782
 800c358:	0800c3a0 	cmpeqi	zero,at,782
 800c35c:	0800c540 	call	800c54 <__alt_mem_sdram-0x77ff3ac>
 800c360:	0800c558 	cmpnei	zero,at,789
 800c364:	0800c3a0 	cmpeqi	zero,at,782
 800c368:	0800c540 	call	800c54 <__alt_mem_sdram-0x77ff3ac>
 800c36c:	0800c3a0 	cmpeqi	zero,at,782
 800c370:	0800c558 	cmpnei	zero,at,789
 800c374:	0800c3a4 	muli	zero,at,782
 800c378:	0800c3a4 	muli	zero,at,782
 800c37c:	0800c3a4 	muli	zero,at,782
 800c380:	0800c77c 	xorhi	zero,at,797
 800c384:	8104b03a 	or	r2,r16,r4
 800c388:	10006a1e 	bne	r2,zero,800c534 <__muldf3+0x2e0>
 800c38c:	05400204 	movi	r21,8
 800c390:	0021883a 	mov	r16,zero
 800c394:	0025883a 	mov	r18,zero
 800c398:	02800084 	movi	r10,2
 800c39c:	003fcd06 	br	800c2d4 <__alt_data_end+0xfc00c2d4>
 800c3a0:	b039883a 	mov	fp,r22
 800c3a4:	00800084 	movi	r2,2
 800c3a8:	50804e1e 	bne	r10,r2,800c4e4 <__muldf3+0x290>
 800c3ac:	e4c0004c 	andi	r19,fp,1
 800c3b0:	0101ffc4 	movi	r4,2047
 800c3b4:	0021883a 	mov	r16,zero
 800c3b8:	0025883a 	mov	r18,zero
 800c3bc:	2008953a 	slli	r4,r4,20
 800c3c0:	98c03fcc 	andi	r3,r19,255
 800c3c4:	01400434 	movhi	r5,16
 800c3c8:	297fffc4 	addi	r5,r5,-1
 800c3cc:	180697fa 	slli	r3,r3,31
 800c3d0:	8160703a 	and	r16,r16,r5
 800c3d4:	8120b03a 	or	r16,r16,r4
 800c3d8:	80c6b03a 	or	r3,r16,r3
 800c3dc:	9005883a 	mov	r2,r18
 800c3e0:	dfc00d17 	ldw	ra,52(sp)
 800c3e4:	df000c17 	ldw	fp,48(sp)
 800c3e8:	ddc00b17 	ldw	r23,44(sp)
 800c3ec:	dd800a17 	ldw	r22,40(sp)
 800c3f0:	dd400917 	ldw	r21,36(sp)
 800c3f4:	dd000817 	ldw	r20,32(sp)
 800c3f8:	dcc00717 	ldw	r19,28(sp)
 800c3fc:	dc800617 	ldw	r18,24(sp)
 800c400:	dc400517 	ldw	r17,20(sp)
 800c404:	dc000417 	ldw	r16,16(sp)
 800c408:	dec00e04 	addi	sp,sp,56
 800c40c:	f800283a 	ret
 800c410:	8104b03a 	or	r2,r16,r4
 800c414:	10004226 	beq	r2,zero,800c520 <__muldf3+0x2cc>
 800c418:	8000f926 	beq	r16,zero,800c800 <__muldf3+0x5ac>
 800c41c:	8009883a 	mov	r4,r16
 800c420:	d9800315 	stw	r6,12(sp)
 800c424:	d9c00015 	stw	r7,0(sp)
 800c428:	800d6480 	call	800d648 <__clzsi2>
 800c42c:	d9800317 	ldw	r6,12(sp)
 800c430:	d9c00017 	ldw	r7,0(sp)
 800c434:	1007883a 	mov	r3,r2
 800c438:	01000a04 	movi	r4,40
 800c43c:	18bffe04 	addi	r2,r3,-8
 800c440:	20c9c83a 	sub	r4,r4,r3
 800c444:	80a0983a 	sll	r16,r16,r2
 800c448:	8908d83a 	srl	r4,r17,r4
 800c44c:	88a4983a 	sll	r18,r17,r2
 800c450:	2420b03a 	or	r16,r4,r16
 800c454:	017f0344 	movi	r5,-1011
 800c458:	28e9c83a 	sub	r20,r5,r3
 800c45c:	002b883a 	mov	r21,zero
 800c460:	0015883a 	mov	r10,zero
 800c464:	003f9b06 	br	800c2d4 <__alt_data_end+0xfc00c2d4>
 800c468:	8984b03a 	or	r2,r17,r6
 800c46c:	10002a1e 	bne	r2,zero,800c518 <__muldf3+0x2c4>
 800c470:	0023883a 	mov	r17,zero
 800c474:	002f883a 	mov	r23,zero
 800c478:	02400084 	movi	r9,2
 800c47c:	003fa706 	br	800c31c <__alt_data_end+0xfc00c31c>
 800c480:	8984b03a 	or	r2,r17,r6
 800c484:	10002026 	beq	r2,zero,800c508 <__muldf3+0x2b4>
 800c488:	8800cc26 	beq	r17,zero,800c7bc <__muldf3+0x568>
 800c48c:	8809883a 	mov	r4,r17
 800c490:	d8c00215 	stw	r3,8(sp)
 800c494:	d9800315 	stw	r6,12(sp)
 800c498:	da800015 	stw	r10,0(sp)
 800c49c:	dac00115 	stw	r11,4(sp)
 800c4a0:	800d6480 	call	800d648 <__clzsi2>
 800c4a4:	d8c00217 	ldw	r3,8(sp)
 800c4a8:	d9800317 	ldw	r6,12(sp)
 800c4ac:	da800017 	ldw	r10,0(sp)
 800c4b0:	dac00117 	ldw	r11,4(sp)
 800c4b4:	1009883a 	mov	r4,r2
 800c4b8:	01400a04 	movi	r5,40
 800c4bc:	25fffe04 	addi	r23,r4,-8
 800c4c0:	290bc83a 	sub	r5,r5,r4
 800c4c4:	8dd0983a 	sll	r8,r17,r23
 800c4c8:	314ad83a 	srl	r5,r6,r5
 800c4cc:	35ee983a 	sll	r23,r6,r23
 800c4d0:	2a22b03a 	or	r17,r5,r8
 800c4d4:	017f0344 	movi	r5,-1011
 800c4d8:	290bc83a 	sub	r5,r5,r4
 800c4dc:	0013883a 	mov	r9,zero
 800c4e0:	003f8e06 	br	800c31c <__alt_data_end+0xfc00c31c>
 800c4e4:	008000c4 	movi	r2,3
 800c4e8:	50811d26 	beq	r10,r2,800c960 <__muldf3+0x70c>
 800c4ec:	00800044 	movi	r2,1
 800c4f0:	5080e01e 	bne	r10,r2,800c874 <__muldf3+0x620>
 800c4f4:	e0a6703a 	and	r19,fp,r2
 800c4f8:	0009883a 	mov	r4,zero
 800c4fc:	0021883a 	mov	r16,zero
 800c500:	0025883a 	mov	r18,zero
 800c504:	003fad06 	br	800c3bc <__alt_data_end+0xfc00c3bc>
 800c508:	0023883a 	mov	r17,zero
 800c50c:	002f883a 	mov	r23,zero
 800c510:	02400044 	movi	r9,1
 800c514:	003f8106 	br	800c31c <__alt_data_end+0xfc00c31c>
 800c518:	024000c4 	movi	r9,3
 800c51c:	003f7f06 	br	800c31c <__alt_data_end+0xfc00c31c>
 800c520:	05400104 	movi	r21,4
 800c524:	0021883a 	mov	r16,zero
 800c528:	0025883a 	mov	r18,zero
 800c52c:	02800044 	movi	r10,1
 800c530:	003f6806 	br	800c2d4 <__alt_data_end+0xfc00c2d4>
 800c534:	05400304 	movi	r21,12
 800c538:	028000c4 	movi	r10,3
 800c53c:	003f6506 	br	800c2d4 <__alt_data_end+0xfc00c2d4>
 800c540:	04000434 	movhi	r16,16
 800c544:	0027883a 	mov	r19,zero
 800c548:	843fffc4 	addi	r16,r16,-1
 800c54c:	04bfffc4 	movi	r18,-1
 800c550:	0101ffc4 	movi	r4,2047
 800c554:	003f9906 	br	800c3bc <__alt_data_end+0xfc00c3bc>
 800c558:	8821883a 	mov	r16,r17
 800c55c:	b825883a 	mov	r18,r23
 800c560:	5839883a 	mov	fp,r11
 800c564:	4815883a 	mov	r10,r9
 800c568:	003f8e06 	br	800c3a4 <__alt_data_end+0xfc00c3a4>
 800c56c:	8821883a 	mov	r16,r17
 800c570:	b825883a 	mov	r18,r23
 800c574:	b039883a 	mov	fp,r22
 800c578:	4815883a 	mov	r10,r9
 800c57c:	003f8906 	br	800c3a4 <__alt_data_end+0xfc00c3a4>
 800c580:	b80cd43a 	srli	r6,r23,16
 800c584:	9006d43a 	srli	r3,r18,16
 800c588:	90bfffcc 	andi	r2,r18,65535
 800c58c:	bdffffcc 	andi	r23,r23,65535
 800c590:	b891383a 	mul	r8,r23,r2
 800c594:	b8c9383a 	mul	r4,r23,r3
 800c598:	309b383a 	mul	r13,r6,r2
 800c59c:	400ed43a 	srli	r7,r8,16
 800c5a0:	30df383a 	mul	r15,r6,r3
 800c5a4:	235b883a 	add	r13,r4,r13
 800c5a8:	69db883a 	add	r13,r13,r7
 800c5ac:	6900022e 	bgeu	r13,r4,800c5b8 <__muldf3+0x364>
 800c5b0:	01000074 	movhi	r4,1
 800c5b4:	791f883a 	add	r15,r15,r4
 800c5b8:	8828d43a 	srli	r20,r17,16
 800c5bc:	8c7fffcc 	andi	r17,r17,65535
 800c5c0:	888f383a 	mul	r7,r17,r2
 800c5c4:	88d3383a 	mul	r9,r17,r3
 800c5c8:	a0a5383a 	mul	r18,r20,r2
 800c5cc:	3816d43a 	srli	r11,r7,16
 800c5d0:	6814943a 	slli	r10,r13,16
 800c5d4:	4ca5883a 	add	r18,r9,r18
 800c5d8:	423fffcc 	andi	r8,r8,65535
 800c5dc:	92e5883a 	add	r18,r18,r11
 800c5e0:	6808d43a 	srli	r4,r13,16
 800c5e4:	5215883a 	add	r10,r10,r8
 800c5e8:	a0c7383a 	mul	r3,r20,r3
 800c5ec:	9240022e 	bgeu	r18,r9,800c5f8 <__muldf3+0x3a4>
 800c5f0:	00800074 	movhi	r2,1
 800c5f4:	1887883a 	add	r3,r3,r2
 800c5f8:	802ad43a 	srli	r21,r16,16
 800c5fc:	80bfffcc 	andi	r2,r16,65535
 800c600:	b893383a 	mul	r9,r23,r2
 800c604:	3091383a 	mul	r8,r6,r2
 800c608:	bd6f383a 	mul	r23,r23,r21
 800c60c:	9026943a 	slli	r19,r18,16
 800c610:	481ad43a 	srli	r13,r9,16
 800c614:	9024d43a 	srli	r18,r18,16
 800c618:	39ffffcc 	andi	r7,r7,65535
 800c61c:	ba11883a 	add	r8,r23,r8
 800c620:	99e7883a 	add	r19,r19,r7
 800c624:	4351883a 	add	r8,r8,r13
 800c628:	1c97883a 	add	r11,r3,r18
 800c62c:	354d383a 	mul	r6,r6,r21
 800c630:	9925883a 	add	r18,r19,r4
 800c634:	45c0022e 	bgeu	r8,r23,800c640 <__muldf3+0x3ec>
 800c638:	00c00074 	movhi	r3,1
 800c63c:	30cd883a 	add	r6,r6,r3
 800c640:	8889383a 	mul	r4,r17,r2
 800c644:	8d63383a 	mul	r17,r17,r21
 800c648:	a085383a 	mul	r2,r20,r2
 800c64c:	200ed43a 	srli	r7,r4,16
 800c650:	401cd43a 	srli	r14,r8,16
 800c654:	401a943a 	slli	r13,r8,16
 800c658:	8885883a 	add	r2,r17,r2
 800c65c:	4a3fffcc 	andi	r8,r9,65535
 800c660:	11c5883a 	add	r2,r2,r7
 800c664:	339d883a 	add	r14,r6,r14
 800c668:	6a11883a 	add	r8,r13,r8
 800c66c:	a561383a 	mul	r16,r20,r21
 800c670:	1440022e 	bgeu	r2,r17,800c67c <__muldf3+0x428>
 800c674:	00c00074 	movhi	r3,1
 800c678:	80e1883a 	add	r16,r16,r3
 800c67c:	1006943a 	slli	r3,r2,16
 800c680:	213fffcc 	andi	r4,r4,65535
 800c684:	93db883a 	add	r13,r18,r15
 800c688:	1909883a 	add	r4,r3,r4
 800c68c:	22c7883a 	add	r3,r4,r11
 800c690:	6cd3803a 	cmpltu	r9,r13,r19
 800c694:	6a09883a 	add	r4,r13,r8
 800c698:	1a5b883a 	add	r13,r3,r9
 800c69c:	2211803a 	cmpltu	r8,r4,r8
 800c6a0:	734d883a 	add	r6,r14,r13
 800c6a4:	100ed43a 	srli	r7,r2,16
 800c6a8:	6a53803a 	cmpltu	r9,r13,r9
 800c6ac:	3205883a 	add	r2,r6,r8
 800c6b0:	1ac7803a 	cmpltu	r3,r3,r11
 800c6b4:	1211803a 	cmpltu	r8,r2,r8
 800c6b8:	48c6b03a 	or	r3,r9,r3
 800c6bc:	338d803a 	cmpltu	r6,r6,r14
 800c6c0:	19c7883a 	add	r3,r3,r7
 800c6c4:	418cb03a 	or	r6,r8,r6
 800c6c8:	1987883a 	add	r3,r3,r6
 800c6cc:	2024927a 	slli	r18,r4,9
 800c6d0:	1c07883a 	add	r3,r3,r16
 800c6d4:	1806927a 	slli	r3,r3,9
 800c6d8:	1020d5fa 	srli	r16,r2,23
 800c6dc:	2008d5fa 	srli	r4,r4,23
 800c6e0:	9294b03a 	or	r10,r18,r10
 800c6e4:	1004927a 	slli	r2,r2,9
 800c6e8:	5024c03a 	cmpne	r18,r10,zero
 800c6ec:	1c20b03a 	or	r16,r3,r16
 800c6f0:	9108b03a 	or	r4,r18,r4
 800c6f4:	80c0402c 	andhi	r3,r16,256
 800c6f8:	20a4b03a 	or	r18,r4,r2
 800c6fc:	18000726 	beq	r3,zero,800c71c <__muldf3+0x4c8>
 800c700:	9006d07a 	srli	r3,r18,1
 800c704:	800897fa 	slli	r4,r16,31
 800c708:	9080004c 	andi	r2,r18,1
 800c70c:	8020d07a 	srli	r16,r16,1
 800c710:	10c4b03a 	or	r2,r2,r3
 800c714:	1124b03a 	or	r18,r2,r4
 800c718:	600b883a 	mov	r5,r12
 800c71c:	2900ffc4 	addi	r4,r5,1023
 800c720:	01004b0e 	bge	zero,r4,800c850 <__muldf3+0x5fc>
 800c724:	908001cc 	andi	r2,r18,7
 800c728:	10000726 	beq	r2,zero,800c748 <__muldf3+0x4f4>
 800c72c:	90c003cc 	andi	r3,r18,15
 800c730:	00800104 	movi	r2,4
 800c734:	18800426 	beq	r3,r2,800c748 <__muldf3+0x4f4>
 800c738:	9087883a 	add	r3,r18,r2
 800c73c:	1c85803a 	cmpltu	r2,r3,r18
 800c740:	80a1883a 	add	r16,r16,r2
 800c744:	1825883a 	mov	r18,r3
 800c748:	8080402c 	andhi	r2,r16,256
 800c74c:	10000426 	beq	r2,zero,800c760 <__muldf3+0x50c>
 800c750:	00bfc034 	movhi	r2,65280
 800c754:	10bfffc4 	addi	r2,r2,-1
 800c758:	29010004 	addi	r4,r5,1024
 800c75c:	80a0703a 	and	r16,r16,r2
 800c760:	0081ff84 	movi	r2,2046
 800c764:	1100320e 	bge	r2,r4,800c830 <__muldf3+0x5dc>
 800c768:	b4c0004c 	andi	r19,r22,1
 800c76c:	0101ffc4 	movi	r4,2047
 800c770:	0021883a 	mov	r16,zero
 800c774:	0025883a 	mov	r18,zero
 800c778:	003f1006 	br	800c3bc <__alt_data_end+0xfc00c3bc>
 800c77c:	8080022c 	andhi	r2,r16,8
 800c780:	10000926 	beq	r2,zero,800c7a8 <__muldf3+0x554>
 800c784:	8880022c 	andhi	r2,r17,8
 800c788:	1000071e 	bne	r2,zero,800c7a8 <__muldf3+0x554>
 800c78c:	00800434 	movhi	r2,16
 800c790:	8c000234 	orhi	r16,r17,8
 800c794:	10bfffc4 	addi	r2,r2,-1
 800c798:	1827883a 	mov	r19,r3
 800c79c:	80a0703a 	and	r16,r16,r2
 800c7a0:	b825883a 	mov	r18,r23
 800c7a4:	003f6a06 	br	800c550 <__alt_data_end+0xfc00c550>
 800c7a8:	00800434 	movhi	r2,16
 800c7ac:	84000234 	orhi	r16,r16,8
 800c7b0:	10bfffc4 	addi	r2,r2,-1
 800c7b4:	80a0703a 	and	r16,r16,r2
 800c7b8:	003f6506 	br	800c550 <__alt_data_end+0xfc00c550>
 800c7bc:	3009883a 	mov	r4,r6
 800c7c0:	d8c00215 	stw	r3,8(sp)
 800c7c4:	d9800315 	stw	r6,12(sp)
 800c7c8:	da800015 	stw	r10,0(sp)
 800c7cc:	dac00115 	stw	r11,4(sp)
 800c7d0:	800d6480 	call	800d648 <__clzsi2>
 800c7d4:	11000804 	addi	r4,r2,32
 800c7d8:	014009c4 	movi	r5,39
 800c7dc:	d8c00217 	ldw	r3,8(sp)
 800c7e0:	d9800317 	ldw	r6,12(sp)
 800c7e4:	da800017 	ldw	r10,0(sp)
 800c7e8:	dac00117 	ldw	r11,4(sp)
 800c7ec:	293f320e 	bge	r5,r4,800c4b8 <__alt_data_end+0xfc00c4b8>
 800c7f0:	10bffe04 	addi	r2,r2,-8
 800c7f4:	b8a2983a 	sll	r17,r23,r2
 800c7f8:	002f883a 	mov	r23,zero
 800c7fc:	003f3506 	br	800c4d4 <__alt_data_end+0xfc00c4d4>
 800c800:	d9800315 	stw	r6,12(sp)
 800c804:	d9c00015 	stw	r7,0(sp)
 800c808:	800d6480 	call	800d648 <__clzsi2>
 800c80c:	10c00804 	addi	r3,r2,32
 800c810:	010009c4 	movi	r4,39
 800c814:	d9800317 	ldw	r6,12(sp)
 800c818:	d9c00017 	ldw	r7,0(sp)
 800c81c:	20ff060e 	bge	r4,r3,800c438 <__alt_data_end+0xfc00c438>
 800c820:	10bffe04 	addi	r2,r2,-8
 800c824:	88a0983a 	sll	r16,r17,r2
 800c828:	0025883a 	mov	r18,zero
 800c82c:	003f0906 	br	800c454 <__alt_data_end+0xfc00c454>
 800c830:	9004d0fa 	srli	r2,r18,3
 800c834:	8024977a 	slli	r18,r16,29
 800c838:	8020927a 	slli	r16,r16,9
 800c83c:	2101ffcc 	andi	r4,r4,2047
 800c840:	90a4b03a 	or	r18,r18,r2
 800c844:	8020d33a 	srli	r16,r16,12
 800c848:	b4c0004c 	andi	r19,r22,1
 800c84c:	003edb06 	br	800c3bc <__alt_data_end+0xfc00c3bc>
 800c850:	00ff0084 	movi	r3,-1022
 800c854:	1947c83a 	sub	r3,r3,r5
 800c858:	00800e04 	movi	r2,56
 800c85c:	10c0080e 	bge	r2,r3,800c880 <__muldf3+0x62c>
 800c860:	b4c0004c 	andi	r19,r22,1
 800c864:	0009883a 	mov	r4,zero
 800c868:	0021883a 	mov	r16,zero
 800c86c:	0025883a 	mov	r18,zero
 800c870:	003ed206 	br	800c3bc <__alt_data_end+0xfc00c3bc>
 800c874:	600b883a 	mov	r5,r12
 800c878:	e02d883a 	mov	r22,fp
 800c87c:	003fa706 	br	800c71c <__alt_data_end+0xfc00c71c>
 800c880:	008007c4 	movi	r2,31
 800c884:	10c01816 	blt	r2,r3,800c8e8 <__muldf3+0x694>
 800c888:	29410784 	addi	r5,r5,1054
 800c88c:	8144983a 	sll	r2,r16,r5
 800c890:	90c8d83a 	srl	r4,r18,r3
 800c894:	914a983a 	sll	r5,r18,r5
 800c898:	80c6d83a 	srl	r3,r16,r3
 800c89c:	2088b03a 	or	r4,r4,r2
 800c8a0:	2804c03a 	cmpne	r2,r5,zero
 800c8a4:	2084b03a 	or	r2,r4,r2
 800c8a8:	110001cc 	andi	r4,r2,7
 800c8ac:	20000726 	beq	r4,zero,800c8cc <__muldf3+0x678>
 800c8b0:	114003cc 	andi	r5,r2,15
 800c8b4:	01000104 	movi	r4,4
 800c8b8:	29000426 	beq	r5,r4,800c8cc <__muldf3+0x678>
 800c8bc:	11000104 	addi	r4,r2,4
 800c8c0:	2085803a 	cmpltu	r2,r4,r2
 800c8c4:	1887883a 	add	r3,r3,r2
 800c8c8:	2005883a 	mov	r2,r4
 800c8cc:	1900202c 	andhi	r4,r3,128
 800c8d0:	20001826 	beq	r4,zero,800c934 <__muldf3+0x6e0>
 800c8d4:	b4c0004c 	andi	r19,r22,1
 800c8d8:	01000044 	movi	r4,1
 800c8dc:	0021883a 	mov	r16,zero
 800c8e0:	0025883a 	mov	r18,zero
 800c8e4:	003eb506 	br	800c3bc <__alt_data_end+0xfc00c3bc>
 800c8e8:	00bef884 	movi	r2,-1054
 800c8ec:	1145c83a 	sub	r2,r2,r5
 800c8f0:	8088d83a 	srl	r4,r16,r2
 800c8f4:	00800804 	movi	r2,32
 800c8f8:	18801726 	beq	r3,r2,800c958 <__muldf3+0x704>
 800c8fc:	28810f84 	addi	r2,r5,1086
 800c900:	8084983a 	sll	r2,r16,r2
 800c904:	1484b03a 	or	r2,r2,r18
 800c908:	1004c03a 	cmpne	r2,r2,zero
 800c90c:	1104b03a 	or	r2,r2,r4
 800c910:	10c001cc 	andi	r3,r2,7
 800c914:	18000b1e 	bne	r3,zero,800c944 <__muldf3+0x6f0>
 800c918:	0021883a 	mov	r16,zero
 800c91c:	1004d0fa 	srli	r2,r2,3
 800c920:	b4c0004c 	andi	r19,r22,1
 800c924:	0009883a 	mov	r4,zero
 800c928:	10e4b03a 	or	r18,r2,r3
 800c92c:	003ea306 	br	800c3bc <__alt_data_end+0xfc00c3bc>
 800c930:	0007883a 	mov	r3,zero
 800c934:	1820927a 	slli	r16,r3,9
 800c938:	1806977a 	slli	r3,r3,29
 800c93c:	8020d33a 	srli	r16,r16,12
 800c940:	003ff606 	br	800c91c <__alt_data_end+0xfc00c91c>
 800c944:	110003cc 	andi	r4,r2,15
 800c948:	00c00104 	movi	r3,4
 800c94c:	20fff826 	beq	r4,r3,800c930 <__alt_data_end+0xfc00c930>
 800c950:	0007883a 	mov	r3,zero
 800c954:	003fd906 	br	800c8bc <__alt_data_end+0xfc00c8bc>
 800c958:	0005883a 	mov	r2,zero
 800c95c:	003fe906 	br	800c904 <__alt_data_end+0xfc00c904>
 800c960:	00800434 	movhi	r2,16
 800c964:	84000234 	orhi	r16,r16,8
 800c968:	10bfffc4 	addi	r2,r2,-1
 800c96c:	e4c0004c 	andi	r19,fp,1
 800c970:	80a0703a 	and	r16,r16,r2
 800c974:	003ef606 	br	800c550 <__alt_data_end+0xfc00c550>

0800c978 <__subdf3>:
 800c978:	00c00434 	movhi	r3,16
 800c97c:	18ffffc4 	addi	r3,r3,-1
 800c980:	defffb04 	addi	sp,sp,-20
 800c984:	28d2703a 	and	r9,r5,r3
 800c988:	3814d53a 	srli	r10,r7,20
 800c98c:	38c6703a 	and	r3,r7,r3
 800c990:	3004d77a 	srli	r2,r6,29
 800c994:	dc800215 	stw	r18,8(sp)
 800c998:	dc000015 	stw	r16,0(sp)
 800c99c:	2824d7fa 	srli	r18,r5,31
 800c9a0:	2820d53a 	srli	r16,r5,20
 800c9a4:	481290fa 	slli	r9,r9,3
 800c9a8:	200ad77a 	srli	r5,r4,29
 800c9ac:	180690fa 	slli	r3,r3,3
 800c9b0:	dc400115 	stw	r17,4(sp)
 800c9b4:	dfc00415 	stw	ra,16(sp)
 800c9b8:	202290fa 	slli	r17,r4,3
 800c9bc:	dcc00315 	stw	r19,12(sp)
 800c9c0:	5281ffcc 	andi	r10,r10,2047
 800c9c4:	0101ffc4 	movi	r4,2047
 800c9c8:	9011883a 	mov	r8,r18
 800c9cc:	8401ffcc 	andi	r16,r16,2047
 800c9d0:	94803fcc 	andi	r18,r18,255
 800c9d4:	494ab03a 	or	r5,r9,r5
 800c9d8:	380ed7fa 	srli	r7,r7,31
 800c9dc:	1886b03a 	or	r3,r3,r2
 800c9e0:	300c90fa 	slli	r6,r6,3
 800c9e4:	51009026 	beq	r10,r4,800cc28 <__subdf3+0x2b0>
 800c9e8:	39c0005c 	xori	r7,r7,1
 800c9ec:	8285c83a 	sub	r2,r16,r10
 800c9f0:	91c06f26 	beq	r18,r7,800cbb0 <__subdf3+0x238>
 800c9f4:	0080b10e 	bge	zero,r2,800ccbc <__subdf3+0x344>
 800c9f8:	50002a1e 	bne	r10,zero,800caa4 <__subdf3+0x12c>
 800c9fc:	1988b03a 	or	r4,r3,r6
 800ca00:	2000941e 	bne	r4,zero,800cc54 <__subdf3+0x2dc>
 800ca04:	888001cc 	andi	r2,r17,7
 800ca08:	10005b26 	beq	r2,zero,800cb78 <__subdf3+0x200>
 800ca0c:	88c003cc 	andi	r3,r17,15
 800ca10:	00800104 	movi	r2,4
 800ca14:	18805826 	beq	r3,r2,800cb78 <__subdf3+0x200>
 800ca18:	88c00104 	addi	r3,r17,4
 800ca1c:	1c63803a 	cmpltu	r17,r3,r17
 800ca20:	2c4b883a 	add	r5,r5,r17
 800ca24:	2880202c 	andhi	r2,r5,128
 800ca28:	9200004c 	andi	r8,r18,1
 800ca2c:	1823883a 	mov	r17,r3
 800ca30:	10005426 	beq	r2,zero,800cb84 <__subdf3+0x20c>
 800ca34:	84000044 	addi	r16,r16,1
 800ca38:	0081ffc4 	movi	r2,2047
 800ca3c:	8080bf26 	beq	r16,r2,800cd3c <__subdf3+0x3c4>
 800ca40:	013fe034 	movhi	r4,65408
 800ca44:	213fffc4 	addi	r4,r4,-1
 800ca48:	290a703a 	and	r5,r5,r4
 800ca4c:	2804977a 	slli	r2,r5,29
 800ca50:	280a927a 	slli	r5,r5,9
 800ca54:	8822d0fa 	srli	r17,r17,3
 800ca58:	8401ffcc 	andi	r16,r16,2047
 800ca5c:	2808d33a 	srli	r4,r5,12
 800ca60:	1444b03a 	or	r2,r2,r17
 800ca64:	8401ffcc 	andi	r16,r16,2047
 800ca68:	800a953a 	slli	r5,r16,20
 800ca6c:	40c03fcc 	andi	r3,r8,255
 800ca70:	04000434 	movhi	r16,16
 800ca74:	180697fa 	slli	r3,r3,31
 800ca78:	843fffc4 	addi	r16,r16,-1
 800ca7c:	2420703a 	and	r16,r4,r16
 800ca80:	8160b03a 	or	r16,r16,r5
 800ca84:	80c6b03a 	or	r3,r16,r3
 800ca88:	dfc00417 	ldw	ra,16(sp)
 800ca8c:	dcc00317 	ldw	r19,12(sp)
 800ca90:	dc800217 	ldw	r18,8(sp)
 800ca94:	dc400117 	ldw	r17,4(sp)
 800ca98:	dc000017 	ldw	r16,0(sp)
 800ca9c:	dec00504 	addi	sp,sp,20
 800caa0:	f800283a 	ret
 800caa4:	0101ffc4 	movi	r4,2047
 800caa8:	813fd626 	beq	r16,r4,800ca04 <__alt_data_end+0xfc00ca04>
 800caac:	18c02034 	orhi	r3,r3,128
 800cab0:	01000e04 	movi	r4,56
 800cab4:	2080a416 	blt	r4,r2,800cd48 <__subdf3+0x3d0>
 800cab8:	010007c4 	movi	r4,31
 800cabc:	2080c716 	blt	r4,r2,800cddc <__subdf3+0x464>
 800cac0:	01000804 	movi	r4,32
 800cac4:	2089c83a 	sub	r4,r4,r2
 800cac8:	1910983a 	sll	r8,r3,r4
 800cacc:	308ed83a 	srl	r7,r6,r2
 800cad0:	3108983a 	sll	r4,r6,r4
 800cad4:	1884d83a 	srl	r2,r3,r2
 800cad8:	41ccb03a 	or	r6,r8,r7
 800cadc:	2008c03a 	cmpne	r4,r4,zero
 800cae0:	310cb03a 	or	r6,r6,r4
 800cae4:	898dc83a 	sub	r6,r17,r6
 800cae8:	89a3803a 	cmpltu	r17,r17,r6
 800caec:	288bc83a 	sub	r5,r5,r2
 800caf0:	2c4bc83a 	sub	r5,r5,r17
 800caf4:	3023883a 	mov	r17,r6
 800caf8:	2880202c 	andhi	r2,r5,128
 800cafc:	10006b26 	beq	r2,zero,800ccac <__subdf3+0x334>
 800cb00:	04c02034 	movhi	r19,128
 800cb04:	9cffffc4 	addi	r19,r19,-1
 800cb08:	2ce6703a 	and	r19,r5,r19
 800cb0c:	98007c26 	beq	r19,zero,800cd00 <__subdf3+0x388>
 800cb10:	9809883a 	mov	r4,r19
 800cb14:	800d6480 	call	800d648 <__clzsi2>
 800cb18:	10fffe04 	addi	r3,r2,-8
 800cb1c:	010007c4 	movi	r4,31
 800cb20:	20c07d16 	blt	r4,r3,800cd18 <__subdf3+0x3a0>
 800cb24:	01400a04 	movi	r5,40
 800cb28:	2885c83a 	sub	r2,r5,r2
 800cb2c:	888ad83a 	srl	r5,r17,r2
 800cb30:	98e6983a 	sll	r19,r19,r3
 800cb34:	88e2983a 	sll	r17,r17,r3
 800cb38:	2ce6b03a 	or	r19,r5,r19
 800cb3c:	1c007a16 	blt	r3,r16,800cd28 <__subdf3+0x3b0>
 800cb40:	1c21c83a 	sub	r16,r3,r16
 800cb44:	81400044 	addi	r5,r16,1
 800cb48:	00c007c4 	movi	r3,31
 800cb4c:	19409616 	blt	r3,r5,800cda8 <__subdf3+0x430>
 800cb50:	1c21c83a 	sub	r16,r3,r16
 800cb54:	8c08983a 	sll	r4,r17,r16
 800cb58:	8946d83a 	srl	r3,r17,r5
 800cb5c:	9c20983a 	sll	r16,r19,r16
 800cb60:	2008c03a 	cmpne	r4,r4,zero
 800cb64:	994ad83a 	srl	r5,r19,r5
 800cb68:	1c06b03a 	or	r3,r3,r16
 800cb6c:	1922b03a 	or	r17,r3,r4
 800cb70:	0021883a 	mov	r16,zero
 800cb74:	003fa306 	br	800ca04 <__alt_data_end+0xfc00ca04>
 800cb78:	2880202c 	andhi	r2,r5,128
 800cb7c:	9200004c 	andi	r8,r18,1
 800cb80:	103fac1e 	bne	r2,zero,800ca34 <__alt_data_end+0xfc00ca34>
 800cb84:	2804977a 	slli	r2,r5,29
 800cb88:	8822d0fa 	srli	r17,r17,3
 800cb8c:	00c1ffc4 	movi	r3,2047
 800cb90:	280ad0fa 	srli	r5,r5,3
 800cb94:	1444b03a 	or	r2,r2,r17
 800cb98:	80c02726 	beq	r16,r3,800cc38 <__subdf3+0x2c0>
 800cb9c:	01000434 	movhi	r4,16
 800cba0:	213fffc4 	addi	r4,r4,-1
 800cba4:	80e0703a 	and	r16,r16,r3
 800cba8:	2908703a 	and	r4,r5,r4
 800cbac:	003fad06 	br	800ca64 <__alt_data_end+0xfc00ca64>
 800cbb0:	0080690e 	bge	zero,r2,800cd58 <__subdf3+0x3e0>
 800cbb4:	50002f26 	beq	r10,zero,800cc74 <__subdf3+0x2fc>
 800cbb8:	0101ffc4 	movi	r4,2047
 800cbbc:	813f9126 	beq	r16,r4,800ca04 <__alt_data_end+0xfc00ca04>
 800cbc0:	18c02034 	orhi	r3,r3,128
 800cbc4:	01000e04 	movi	r4,56
 800cbc8:	2080b00e 	bge	r4,r2,800ce8c <__subdf3+0x514>
 800cbcc:	198cb03a 	or	r6,r3,r6
 800cbd0:	300ec03a 	cmpne	r7,r6,zero
 800cbd4:	0005883a 	mov	r2,zero
 800cbd8:	3c4f883a 	add	r7,r7,r17
 800cbdc:	3c63803a 	cmpltu	r17,r7,r17
 800cbe0:	114b883a 	add	r5,r2,r5
 800cbe4:	2c4b883a 	add	r5,r5,r17
 800cbe8:	3823883a 	mov	r17,r7
 800cbec:	2880202c 	andhi	r2,r5,128
 800cbf0:	10002e26 	beq	r2,zero,800ccac <__subdf3+0x334>
 800cbf4:	84000044 	addi	r16,r16,1
 800cbf8:	0081ffc4 	movi	r2,2047
 800cbfc:	8080de26 	beq	r16,r2,800cf78 <__subdf3+0x600>
 800cc00:	00bfe034 	movhi	r2,65408
 800cc04:	10bfffc4 	addi	r2,r2,-1
 800cc08:	288a703a 	and	r5,r5,r2
 800cc0c:	880cd07a 	srli	r6,r17,1
 800cc10:	280897fa 	slli	r4,r5,31
 800cc14:	88c0004c 	andi	r3,r17,1
 800cc18:	30e2b03a 	or	r17,r6,r3
 800cc1c:	280ad07a 	srli	r5,r5,1
 800cc20:	8922b03a 	or	r17,r17,r4
 800cc24:	003f7706 	br	800ca04 <__alt_data_end+0xfc00ca04>
 800cc28:	1984b03a 	or	r2,r3,r6
 800cc2c:	103f6e26 	beq	r2,zero,800c9e8 <__alt_data_end+0xfc00c9e8>
 800cc30:	39c03fcc 	andi	r7,r7,255
 800cc34:	003f6d06 	br	800c9ec <__alt_data_end+0xfc00c9ec>
 800cc38:	1146b03a 	or	r3,r2,r5
 800cc3c:	18003f26 	beq	r3,zero,800cd3c <__subdf3+0x3c4>
 800cc40:	00c00434 	movhi	r3,16
 800cc44:	29000234 	orhi	r4,r5,8
 800cc48:	18ffffc4 	addi	r3,r3,-1
 800cc4c:	20c8703a 	and	r4,r4,r3
 800cc50:	003f8406 	br	800ca64 <__alt_data_end+0xfc00ca64>
 800cc54:	10bfffc4 	addi	r2,r2,-1
 800cc58:	1000501e 	bne	r2,zero,800cd9c <__subdf3+0x424>
 800cc5c:	898fc83a 	sub	r7,r17,r6
 800cc60:	89e3803a 	cmpltu	r17,r17,r7
 800cc64:	28cbc83a 	sub	r5,r5,r3
 800cc68:	2c4bc83a 	sub	r5,r5,r17
 800cc6c:	3823883a 	mov	r17,r7
 800cc70:	003fa106 	br	800caf8 <__alt_data_end+0xfc00caf8>
 800cc74:	1988b03a 	or	r4,r3,r6
 800cc78:	203f6226 	beq	r4,zero,800ca04 <__alt_data_end+0xfc00ca04>
 800cc7c:	10bfffc4 	addi	r2,r2,-1
 800cc80:	10009b1e 	bne	r2,zero,800cef0 <__subdf3+0x578>
 800cc84:	344d883a 	add	r6,r6,r17
 800cc88:	3463803a 	cmpltu	r17,r6,r17
 800cc8c:	194b883a 	add	r5,r3,r5
 800cc90:	2c4b883a 	add	r5,r5,r17
 800cc94:	3023883a 	mov	r17,r6
 800cc98:	003fd406 	br	800cbec <__alt_data_end+0xfc00cbec>
 800cc9c:	1106b03a 	or	r3,r2,r4
 800cca0:	1800b426 	beq	r3,zero,800cf74 <__subdf3+0x5fc>
 800cca4:	100b883a 	mov	r5,r2
 800cca8:	2023883a 	mov	r17,r4
 800ccac:	888001cc 	andi	r2,r17,7
 800ccb0:	103f561e 	bne	r2,zero,800ca0c <__alt_data_end+0xfc00ca0c>
 800ccb4:	9200004c 	andi	r8,r18,1
 800ccb8:	003fb206 	br	800cb84 <__alt_data_end+0xfc00cb84>
 800ccbc:	1000531e 	bne	r2,zero,800ce0c <__subdf3+0x494>
 800ccc0:	80800044 	addi	r2,r16,1
 800ccc4:	1081ffcc 	andi	r2,r2,2047
 800ccc8:	01000044 	movi	r4,1
 800cccc:	2080a00e 	bge	r4,r2,800cf50 <__subdf3+0x5d8>
 800ccd0:	8985c83a 	sub	r2,r17,r6
 800ccd4:	8889803a 	cmpltu	r4,r17,r2
 800ccd8:	28e7c83a 	sub	r19,r5,r3
 800ccdc:	9927c83a 	sub	r19,r19,r4
 800cce0:	9900202c 	andhi	r4,r19,128
 800cce4:	20006226 	beq	r4,zero,800ce70 <__subdf3+0x4f8>
 800cce8:	3463c83a 	sub	r17,r6,r17
 800ccec:	194bc83a 	sub	r5,r3,r5
 800ccf0:	344d803a 	cmpltu	r6,r6,r17
 800ccf4:	29a7c83a 	sub	r19,r5,r6
 800ccf8:	3825883a 	mov	r18,r7
 800ccfc:	983f841e 	bne	r19,zero,800cb10 <__alt_data_end+0xfc00cb10>
 800cd00:	8809883a 	mov	r4,r17
 800cd04:	800d6480 	call	800d648 <__clzsi2>
 800cd08:	10800804 	addi	r2,r2,32
 800cd0c:	10fffe04 	addi	r3,r2,-8
 800cd10:	010007c4 	movi	r4,31
 800cd14:	20ff830e 	bge	r4,r3,800cb24 <__alt_data_end+0xfc00cb24>
 800cd18:	14fff604 	addi	r19,r2,-40
 800cd1c:	8ce6983a 	sll	r19,r17,r19
 800cd20:	0023883a 	mov	r17,zero
 800cd24:	1c3f860e 	bge	r3,r16,800cb40 <__alt_data_end+0xfc00cb40>
 800cd28:	017fe034 	movhi	r5,65408
 800cd2c:	297fffc4 	addi	r5,r5,-1
 800cd30:	80e1c83a 	sub	r16,r16,r3
 800cd34:	994a703a 	and	r5,r19,r5
 800cd38:	003f3206 	br	800ca04 <__alt_data_end+0xfc00ca04>
 800cd3c:	0009883a 	mov	r4,zero
 800cd40:	0005883a 	mov	r2,zero
 800cd44:	003f4706 	br	800ca64 <__alt_data_end+0xfc00ca64>
 800cd48:	198cb03a 	or	r6,r3,r6
 800cd4c:	300cc03a 	cmpne	r6,r6,zero
 800cd50:	0005883a 	mov	r2,zero
 800cd54:	003f6306 	br	800cae4 <__alt_data_end+0xfc00cae4>
 800cd58:	10009d1e 	bne	r2,zero,800cfd0 <__subdf3+0x658>
 800cd5c:	81c00044 	addi	r7,r16,1
 800cd60:	3881ffcc 	andi	r2,r7,2047
 800cd64:	02400044 	movi	r9,1
 800cd68:	4880680e 	bge	r9,r2,800cf0c <__subdf3+0x594>
 800cd6c:	0081ffc4 	movi	r2,2047
 800cd70:	3880ae26 	beq	r7,r2,800d02c <__subdf3+0x6b4>
 800cd74:	344d883a 	add	r6,r6,r17
 800cd78:	3463803a 	cmpltu	r17,r6,r17
 800cd7c:	194b883a 	add	r5,r3,r5
 800cd80:	2c4b883a 	add	r5,r5,r17
 800cd84:	282297fa 	slli	r17,r5,31
 800cd88:	300cd07a 	srli	r6,r6,1
 800cd8c:	280ad07a 	srli	r5,r5,1
 800cd90:	3821883a 	mov	r16,r7
 800cd94:	89a2b03a 	or	r17,r17,r6
 800cd98:	003f1a06 	br	800ca04 <__alt_data_end+0xfc00ca04>
 800cd9c:	0101ffc4 	movi	r4,2047
 800cda0:	813f431e 	bne	r16,r4,800cab0 <__alt_data_end+0xfc00cab0>
 800cda4:	003f1706 	br	800ca04 <__alt_data_end+0xfc00ca04>
 800cda8:	80bff844 	addi	r2,r16,-31
 800cdac:	00c00804 	movi	r3,32
 800cdb0:	9884d83a 	srl	r2,r19,r2
 800cdb4:	28c05126 	beq	r5,r3,800cefc <__subdf3+0x584>
 800cdb8:	00c00fc4 	movi	r3,63
 800cdbc:	1c21c83a 	sub	r16,r3,r16
 800cdc0:	9c26983a 	sll	r19,r19,r16
 800cdc4:	9c62b03a 	or	r17,r19,r17
 800cdc8:	8822c03a 	cmpne	r17,r17,zero
 800cdcc:	88a2b03a 	or	r17,r17,r2
 800cdd0:	000b883a 	mov	r5,zero
 800cdd4:	0021883a 	mov	r16,zero
 800cdd8:	003fb406 	br	800ccac <__alt_data_end+0xfc00ccac>
 800cddc:	113ff804 	addi	r4,r2,-32
 800cde0:	01c00804 	movi	r7,32
 800cde4:	1908d83a 	srl	r4,r3,r4
 800cde8:	11c04626 	beq	r2,r7,800cf04 <__subdf3+0x58c>
 800cdec:	01c01004 	movi	r7,64
 800cdf0:	3885c83a 	sub	r2,r7,r2
 800cdf4:	1884983a 	sll	r2,r3,r2
 800cdf8:	118cb03a 	or	r6,r2,r6
 800cdfc:	300cc03a 	cmpne	r6,r6,zero
 800ce00:	310cb03a 	or	r6,r6,r4
 800ce04:	0005883a 	mov	r2,zero
 800ce08:	003f3606 	br	800cae4 <__alt_data_end+0xfc00cae4>
 800ce0c:	80002b26 	beq	r16,zero,800cebc <__subdf3+0x544>
 800ce10:	0101ffc4 	movi	r4,2047
 800ce14:	51006926 	beq	r10,r4,800cfbc <__subdf3+0x644>
 800ce18:	0085c83a 	sub	r2,zero,r2
 800ce1c:	29402034 	orhi	r5,r5,128
 800ce20:	01000e04 	movi	r4,56
 800ce24:	20807d16 	blt	r4,r2,800d01c <__subdf3+0x6a4>
 800ce28:	010007c4 	movi	r4,31
 800ce2c:	2080d916 	blt	r4,r2,800d194 <__subdf3+0x81c>
 800ce30:	01000804 	movi	r4,32
 800ce34:	2089c83a 	sub	r4,r4,r2
 800ce38:	2912983a 	sll	r9,r5,r4
 800ce3c:	8890d83a 	srl	r8,r17,r2
 800ce40:	8908983a 	sll	r4,r17,r4
 800ce44:	2884d83a 	srl	r2,r5,r2
 800ce48:	4a22b03a 	or	r17,r9,r8
 800ce4c:	2008c03a 	cmpne	r4,r4,zero
 800ce50:	8922b03a 	or	r17,r17,r4
 800ce54:	3463c83a 	sub	r17,r6,r17
 800ce58:	1885c83a 	sub	r2,r3,r2
 800ce5c:	344d803a 	cmpltu	r6,r6,r17
 800ce60:	118bc83a 	sub	r5,r2,r6
 800ce64:	5021883a 	mov	r16,r10
 800ce68:	3825883a 	mov	r18,r7
 800ce6c:	003f2206 	br	800caf8 <__alt_data_end+0xfc00caf8>
 800ce70:	9886b03a 	or	r3,r19,r2
 800ce74:	18001c1e 	bne	r3,zero,800cee8 <__subdf3+0x570>
 800ce78:	0011883a 	mov	r8,zero
 800ce7c:	000b883a 	mov	r5,zero
 800ce80:	0023883a 	mov	r17,zero
 800ce84:	0021883a 	mov	r16,zero
 800ce88:	003f3e06 	br	800cb84 <__alt_data_end+0xfc00cb84>
 800ce8c:	010007c4 	movi	r4,31
 800ce90:	20803c16 	blt	r4,r2,800cf84 <__subdf3+0x60c>
 800ce94:	01000804 	movi	r4,32
 800ce98:	2089c83a 	sub	r4,r4,r2
 800ce9c:	1912983a 	sll	r9,r3,r4
 800cea0:	308ed83a 	srl	r7,r6,r2
 800cea4:	3108983a 	sll	r4,r6,r4
 800cea8:	1884d83a 	srl	r2,r3,r2
 800ceac:	49ceb03a 	or	r7,r9,r7
 800ceb0:	2008c03a 	cmpne	r4,r4,zero
 800ceb4:	390eb03a 	or	r7,r7,r4
 800ceb8:	003f4706 	br	800cbd8 <__alt_data_end+0xfc00cbd8>
 800cebc:	2c48b03a 	or	r4,r5,r17
 800cec0:	20003e26 	beq	r4,zero,800cfbc <__subdf3+0x644>
 800cec4:	0084303a 	nor	r2,zero,r2
 800cec8:	10003a1e 	bne	r2,zero,800cfb4 <__subdf3+0x63c>
 800cecc:	3463c83a 	sub	r17,r6,r17
 800ced0:	194bc83a 	sub	r5,r3,r5
 800ced4:	344d803a 	cmpltu	r6,r6,r17
 800ced8:	298bc83a 	sub	r5,r5,r6
 800cedc:	5021883a 	mov	r16,r10
 800cee0:	3825883a 	mov	r18,r7
 800cee4:	003f0406 	br	800caf8 <__alt_data_end+0xfc00caf8>
 800cee8:	1023883a 	mov	r17,r2
 800ceec:	003f0706 	br	800cb0c <__alt_data_end+0xfc00cb0c>
 800cef0:	0101ffc4 	movi	r4,2047
 800cef4:	813f331e 	bne	r16,r4,800cbc4 <__alt_data_end+0xfc00cbc4>
 800cef8:	003ec206 	br	800ca04 <__alt_data_end+0xfc00ca04>
 800cefc:	0027883a 	mov	r19,zero
 800cf00:	003fb006 	br	800cdc4 <__alt_data_end+0xfc00cdc4>
 800cf04:	0005883a 	mov	r2,zero
 800cf08:	003fbb06 	br	800cdf8 <__alt_data_end+0xfc00cdf8>
 800cf0c:	2c44b03a 	or	r2,r5,r17
 800cf10:	80008b1e 	bne	r16,zero,800d140 <__subdf3+0x7c8>
 800cf14:	1000b526 	beq	r2,zero,800d1ec <__subdf3+0x874>
 800cf18:	1984b03a 	or	r2,r3,r6
 800cf1c:	103eb926 	beq	r2,zero,800ca04 <__alt_data_end+0xfc00ca04>
 800cf20:	3449883a 	add	r4,r6,r17
 800cf24:	2463803a 	cmpltu	r17,r4,r17
 800cf28:	194b883a 	add	r5,r3,r5
 800cf2c:	2c4b883a 	add	r5,r5,r17
 800cf30:	2880202c 	andhi	r2,r5,128
 800cf34:	2023883a 	mov	r17,r4
 800cf38:	103f5c26 	beq	r2,zero,800ccac <__alt_data_end+0xfc00ccac>
 800cf3c:	00bfe034 	movhi	r2,65408
 800cf40:	10bfffc4 	addi	r2,r2,-1
 800cf44:	4821883a 	mov	r16,r9
 800cf48:	288a703a 	and	r5,r5,r2
 800cf4c:	003ead06 	br	800ca04 <__alt_data_end+0xfc00ca04>
 800cf50:	2c44b03a 	or	r2,r5,r17
 800cf54:	8000291e 	bne	r16,zero,800cffc <__subdf3+0x684>
 800cf58:	10004f1e 	bne	r2,zero,800d098 <__subdf3+0x720>
 800cf5c:	1984b03a 	or	r2,r3,r6
 800cf60:	10000426 	beq	r2,zero,800cf74 <__subdf3+0x5fc>
 800cf64:	180b883a 	mov	r5,r3
 800cf68:	3023883a 	mov	r17,r6
 800cf6c:	3825883a 	mov	r18,r7
 800cf70:	003ea406 	br	800ca04 <__alt_data_end+0xfc00ca04>
 800cf74:	0011883a 	mov	r8,zero
 800cf78:	000b883a 	mov	r5,zero
 800cf7c:	0023883a 	mov	r17,zero
 800cf80:	003f0006 	br	800cb84 <__alt_data_end+0xfc00cb84>
 800cf84:	11fff804 	addi	r7,r2,-32
 800cf88:	19c8d83a 	srl	r4,r3,r7
 800cf8c:	01c00804 	movi	r7,32
 800cf90:	11c07e26 	beq	r2,r7,800d18c <__subdf3+0x814>
 800cf94:	01c01004 	movi	r7,64
 800cf98:	3885c83a 	sub	r2,r7,r2
 800cf9c:	1884983a 	sll	r2,r3,r2
 800cfa0:	118cb03a 	or	r6,r2,r6
 800cfa4:	300ec03a 	cmpne	r7,r6,zero
 800cfa8:	390eb03a 	or	r7,r7,r4
 800cfac:	0005883a 	mov	r2,zero
 800cfb0:	003f0906 	br	800cbd8 <__alt_data_end+0xfc00cbd8>
 800cfb4:	0101ffc4 	movi	r4,2047
 800cfb8:	513f991e 	bne	r10,r4,800ce20 <__alt_data_end+0xfc00ce20>
 800cfbc:	180b883a 	mov	r5,r3
 800cfc0:	3023883a 	mov	r17,r6
 800cfc4:	5021883a 	mov	r16,r10
 800cfc8:	3825883a 	mov	r18,r7
 800cfcc:	003e8d06 	br	800ca04 <__alt_data_end+0xfc00ca04>
 800cfd0:	80001a1e 	bne	r16,zero,800d03c <__subdf3+0x6c4>
 800cfd4:	2c48b03a 	or	r4,r5,r17
 800cfd8:	20005526 	beq	r4,zero,800d130 <__subdf3+0x7b8>
 800cfdc:	0084303a 	nor	r2,zero,r2
 800cfe0:	1000511e 	bne	r2,zero,800d128 <__subdf3+0x7b0>
 800cfe4:	89a3883a 	add	r17,r17,r6
 800cfe8:	194b883a 	add	r5,r3,r5
 800cfec:	898d803a 	cmpltu	r6,r17,r6
 800cff0:	298b883a 	add	r5,r5,r6
 800cff4:	5021883a 	mov	r16,r10
 800cff8:	003efc06 	br	800cbec <__alt_data_end+0xfc00cbec>
 800cffc:	1000341e 	bne	r2,zero,800d0d0 <__subdf3+0x758>
 800d000:	1984b03a 	or	r2,r3,r6
 800d004:	10006f26 	beq	r2,zero,800d1c4 <__subdf3+0x84c>
 800d008:	180b883a 	mov	r5,r3
 800d00c:	3023883a 	mov	r17,r6
 800d010:	3825883a 	mov	r18,r7
 800d014:	0401ffc4 	movi	r16,2047
 800d018:	003e7a06 	br	800ca04 <__alt_data_end+0xfc00ca04>
 800d01c:	2c62b03a 	or	r17,r5,r17
 800d020:	8822c03a 	cmpne	r17,r17,zero
 800d024:	0005883a 	mov	r2,zero
 800d028:	003f8a06 	br	800ce54 <__alt_data_end+0xfc00ce54>
 800d02c:	3821883a 	mov	r16,r7
 800d030:	000b883a 	mov	r5,zero
 800d034:	0023883a 	mov	r17,zero
 800d038:	003ed206 	br	800cb84 <__alt_data_end+0xfc00cb84>
 800d03c:	0101ffc4 	movi	r4,2047
 800d040:	51003b26 	beq	r10,r4,800d130 <__subdf3+0x7b8>
 800d044:	0085c83a 	sub	r2,zero,r2
 800d048:	29402034 	orhi	r5,r5,128
 800d04c:	01000e04 	movi	r4,56
 800d050:	20806216 	blt	r4,r2,800d1dc <__subdf3+0x864>
 800d054:	010007c4 	movi	r4,31
 800d058:	20806b16 	blt	r4,r2,800d208 <__subdf3+0x890>
 800d05c:	01000804 	movi	r4,32
 800d060:	2089c83a 	sub	r4,r4,r2
 800d064:	2912983a 	sll	r9,r5,r4
 800d068:	888ed83a 	srl	r7,r17,r2
 800d06c:	8908983a 	sll	r4,r17,r4
 800d070:	2884d83a 	srl	r2,r5,r2
 800d074:	49e2b03a 	or	r17,r9,r7
 800d078:	2008c03a 	cmpne	r4,r4,zero
 800d07c:	8922b03a 	or	r17,r17,r4
 800d080:	89a3883a 	add	r17,r17,r6
 800d084:	10c5883a 	add	r2,r2,r3
 800d088:	898d803a 	cmpltu	r6,r17,r6
 800d08c:	118b883a 	add	r5,r2,r6
 800d090:	5021883a 	mov	r16,r10
 800d094:	003ed506 	br	800cbec <__alt_data_end+0xfc00cbec>
 800d098:	1984b03a 	or	r2,r3,r6
 800d09c:	103e5926 	beq	r2,zero,800ca04 <__alt_data_end+0xfc00ca04>
 800d0a0:	8989c83a 	sub	r4,r17,r6
 800d0a4:	8911803a 	cmpltu	r8,r17,r4
 800d0a8:	28c5c83a 	sub	r2,r5,r3
 800d0ac:	1205c83a 	sub	r2,r2,r8
 800d0b0:	1200202c 	andhi	r8,r2,128
 800d0b4:	403ef926 	beq	r8,zero,800cc9c <__alt_data_end+0xfc00cc9c>
 800d0b8:	3463c83a 	sub	r17,r6,r17
 800d0bc:	194bc83a 	sub	r5,r3,r5
 800d0c0:	344d803a 	cmpltu	r6,r6,r17
 800d0c4:	298bc83a 	sub	r5,r5,r6
 800d0c8:	3825883a 	mov	r18,r7
 800d0cc:	003e4d06 	br	800ca04 <__alt_data_end+0xfc00ca04>
 800d0d0:	1984b03a 	or	r2,r3,r6
 800d0d4:	10002b26 	beq	r2,zero,800d184 <__subdf3+0x80c>
 800d0d8:	2808d0fa 	srli	r4,r5,3
 800d0dc:	8822d0fa 	srli	r17,r17,3
 800d0e0:	280a977a 	slli	r5,r5,29
 800d0e4:	2080022c 	andhi	r2,r4,8
 800d0e8:	2c62b03a 	or	r17,r5,r17
 800d0ec:	10000826 	beq	r2,zero,800d110 <__subdf3+0x798>
 800d0f0:	1810d0fa 	srli	r8,r3,3
 800d0f4:	4080022c 	andhi	r2,r8,8
 800d0f8:	1000051e 	bne	r2,zero,800d110 <__subdf3+0x798>
 800d0fc:	300cd0fa 	srli	r6,r6,3
 800d100:	1804977a 	slli	r2,r3,29
 800d104:	4009883a 	mov	r4,r8
 800d108:	3825883a 	mov	r18,r7
 800d10c:	11a2b03a 	or	r17,r2,r6
 800d110:	880ad77a 	srli	r5,r17,29
 800d114:	200890fa 	slli	r4,r4,3
 800d118:	882290fa 	slli	r17,r17,3
 800d11c:	0401ffc4 	movi	r16,2047
 800d120:	290ab03a 	or	r5,r5,r4
 800d124:	003e3706 	br	800ca04 <__alt_data_end+0xfc00ca04>
 800d128:	0101ffc4 	movi	r4,2047
 800d12c:	513fc71e 	bne	r10,r4,800d04c <__alt_data_end+0xfc00d04c>
 800d130:	180b883a 	mov	r5,r3
 800d134:	3023883a 	mov	r17,r6
 800d138:	5021883a 	mov	r16,r10
 800d13c:	003e3106 	br	800ca04 <__alt_data_end+0xfc00ca04>
 800d140:	10002d26 	beq	r2,zero,800d1f8 <__subdf3+0x880>
 800d144:	1984b03a 	or	r2,r3,r6
 800d148:	10000e26 	beq	r2,zero,800d184 <__subdf3+0x80c>
 800d14c:	2808d0fa 	srli	r4,r5,3
 800d150:	8822d0fa 	srli	r17,r17,3
 800d154:	280a977a 	slli	r5,r5,29
 800d158:	2080022c 	andhi	r2,r4,8
 800d15c:	2c62b03a 	or	r17,r5,r17
 800d160:	103feb26 	beq	r2,zero,800d110 <__alt_data_end+0xfc00d110>
 800d164:	180ed0fa 	srli	r7,r3,3
 800d168:	3880022c 	andhi	r2,r7,8
 800d16c:	103fe81e 	bne	r2,zero,800d110 <__alt_data_end+0xfc00d110>
 800d170:	300cd0fa 	srli	r6,r6,3
 800d174:	1804977a 	slli	r2,r3,29
 800d178:	3809883a 	mov	r4,r7
 800d17c:	11a2b03a 	or	r17,r2,r6
 800d180:	003fe306 	br	800d110 <__alt_data_end+0xfc00d110>
 800d184:	0401ffc4 	movi	r16,2047
 800d188:	003e1e06 	br	800ca04 <__alt_data_end+0xfc00ca04>
 800d18c:	0005883a 	mov	r2,zero
 800d190:	003f8306 	br	800cfa0 <__alt_data_end+0xfc00cfa0>
 800d194:	113ff804 	addi	r4,r2,-32
 800d198:	02000804 	movi	r8,32
 800d19c:	2908d83a 	srl	r4,r5,r4
 800d1a0:	12002526 	beq	r2,r8,800d238 <__subdf3+0x8c0>
 800d1a4:	02001004 	movi	r8,64
 800d1a8:	4085c83a 	sub	r2,r8,r2
 800d1ac:	288a983a 	sll	r5,r5,r2
 800d1b0:	2c62b03a 	or	r17,r5,r17
 800d1b4:	8822c03a 	cmpne	r17,r17,zero
 800d1b8:	8922b03a 	or	r17,r17,r4
 800d1bc:	0005883a 	mov	r2,zero
 800d1c0:	003f2406 	br	800ce54 <__alt_data_end+0xfc00ce54>
 800d1c4:	01402034 	movhi	r5,128
 800d1c8:	0011883a 	mov	r8,zero
 800d1cc:	297fffc4 	addi	r5,r5,-1
 800d1d0:	047ffe04 	movi	r17,-8
 800d1d4:	0401ffc4 	movi	r16,2047
 800d1d8:	003e6a06 	br	800cb84 <__alt_data_end+0xfc00cb84>
 800d1dc:	2c62b03a 	or	r17,r5,r17
 800d1e0:	8822c03a 	cmpne	r17,r17,zero
 800d1e4:	0005883a 	mov	r2,zero
 800d1e8:	003fa506 	br	800d080 <__alt_data_end+0xfc00d080>
 800d1ec:	180b883a 	mov	r5,r3
 800d1f0:	3023883a 	mov	r17,r6
 800d1f4:	003e0306 	br	800ca04 <__alt_data_end+0xfc00ca04>
 800d1f8:	180b883a 	mov	r5,r3
 800d1fc:	3023883a 	mov	r17,r6
 800d200:	0401ffc4 	movi	r16,2047
 800d204:	003dff06 	br	800ca04 <__alt_data_end+0xfc00ca04>
 800d208:	113ff804 	addi	r4,r2,-32
 800d20c:	01c00804 	movi	r7,32
 800d210:	2908d83a 	srl	r4,r5,r4
 800d214:	11c00a26 	beq	r2,r7,800d240 <__subdf3+0x8c8>
 800d218:	01c01004 	movi	r7,64
 800d21c:	3885c83a 	sub	r2,r7,r2
 800d220:	288a983a 	sll	r5,r5,r2
 800d224:	2c62b03a 	or	r17,r5,r17
 800d228:	8822c03a 	cmpne	r17,r17,zero
 800d22c:	8922b03a 	or	r17,r17,r4
 800d230:	0005883a 	mov	r2,zero
 800d234:	003f9206 	br	800d080 <__alt_data_end+0xfc00d080>
 800d238:	000b883a 	mov	r5,zero
 800d23c:	003fdc06 	br	800d1b0 <__alt_data_end+0xfc00d1b0>
 800d240:	000b883a 	mov	r5,zero
 800d244:	003ff706 	br	800d224 <__alt_data_end+0xfc00d224>

0800d248 <__fixdfsi>:
 800d248:	2806d53a 	srli	r3,r5,20
 800d24c:	00800434 	movhi	r2,16
 800d250:	10bfffc4 	addi	r2,r2,-1
 800d254:	18c1ffcc 	andi	r3,r3,2047
 800d258:	0180ff84 	movi	r6,1022
 800d25c:	2884703a 	and	r2,r5,r2
 800d260:	280ad7fa 	srli	r5,r5,31
 800d264:	30c0130e 	bge	r6,r3,800d2b4 <__fixdfsi+0x6c>
 800d268:	01810744 	movi	r6,1053
 800d26c:	30c00d16 	blt	r6,r3,800d2a4 <__fixdfsi+0x5c>
 800d270:	01810cc4 	movi	r6,1075
 800d274:	30cdc83a 	sub	r6,r6,r3
 800d278:	01c007c4 	movi	r7,31
 800d27c:	10800434 	orhi	r2,r2,16
 800d280:	39800e0e 	bge	r7,r6,800d2bc <__fixdfsi+0x74>
 800d284:	010104c4 	movi	r4,1043
 800d288:	20c7c83a 	sub	r3,r4,r3
 800d28c:	10c6d83a 	srl	r3,r2,r3
 800d290:	29403fcc 	andi	r5,r5,255
 800d294:	0145c83a 	sub	r2,zero,r5
 800d298:	1884f03a 	xor	r2,r3,r2
 800d29c:	1145883a 	add	r2,r2,r5
 800d2a0:	f800283a 	ret
 800d2a4:	00a00034 	movhi	r2,32768
 800d2a8:	10bfffc4 	addi	r2,r2,-1
 800d2ac:	2885883a 	add	r2,r5,r2
 800d2b0:	f800283a 	ret
 800d2b4:	0005883a 	mov	r2,zero
 800d2b8:	f800283a 	ret
 800d2bc:	18fefb44 	addi	r3,r3,-1043
 800d2c0:	2188d83a 	srl	r4,r4,r6
 800d2c4:	10c6983a 	sll	r3,r2,r3
 800d2c8:	20c6b03a 	or	r3,r4,r3
 800d2cc:	003ff006 	br	800d290 <__alt_data_end+0xfc00d290>

0800d2d0 <__floatsidf>:
 800d2d0:	defffd04 	addi	sp,sp,-12
 800d2d4:	dc400115 	stw	r17,4(sp)
 800d2d8:	dfc00215 	stw	ra,8(sp)
 800d2dc:	dc000015 	stw	r16,0(sp)
 800d2e0:	2023883a 	mov	r17,r4
 800d2e4:	20001426 	beq	r4,zero,800d338 <__floatsidf+0x68>
 800d2e8:	2020d7fa 	srli	r16,r4,31
 800d2ec:	80000126 	beq	r16,zero,800d2f4 <__floatsidf+0x24>
 800d2f0:	0123c83a 	sub	r17,zero,r4
 800d2f4:	8809883a 	mov	r4,r17
 800d2f8:	800d6480 	call	800d648 <__clzsi2>
 800d2fc:	01410784 	movi	r5,1054
 800d300:	00c00284 	movi	r3,10
 800d304:	288bc83a 	sub	r5,r5,r2
 800d308:	18801c16 	blt	r3,r2,800d37c <__floatsidf+0xac>
 800d30c:	00c002c4 	movi	r3,11
 800d310:	1887c83a 	sub	r3,r3,r2
 800d314:	88c8d83a 	srl	r4,r17,r3
 800d318:	00c00434 	movhi	r3,16
 800d31c:	18ffffc4 	addi	r3,r3,-1
 800d320:	10800544 	addi	r2,r2,21
 800d324:	20c8703a 	and	r4,r4,r3
 800d328:	8884983a 	sll	r2,r17,r2
 800d32c:	28c1ffcc 	andi	r3,r5,2047
 800d330:	800d883a 	mov	r6,r16
 800d334:	00000406 	br	800d348 <__floatsidf+0x78>
 800d338:	000d883a 	mov	r6,zero
 800d33c:	0007883a 	mov	r3,zero
 800d340:	0009883a 	mov	r4,zero
 800d344:	0005883a 	mov	r2,zero
 800d348:	180a953a 	slli	r5,r3,20
 800d34c:	31803fcc 	andi	r6,r6,255
 800d350:	00c00434 	movhi	r3,16
 800d354:	300c97fa 	slli	r6,r6,31
 800d358:	18ffffc4 	addi	r3,r3,-1
 800d35c:	20c6703a 	and	r3,r4,r3
 800d360:	1946b03a 	or	r3,r3,r5
 800d364:	1986b03a 	or	r3,r3,r6
 800d368:	dfc00217 	ldw	ra,8(sp)
 800d36c:	dc400117 	ldw	r17,4(sp)
 800d370:	dc000017 	ldw	r16,0(sp)
 800d374:	dec00304 	addi	sp,sp,12
 800d378:	f800283a 	ret
 800d37c:	10fffd44 	addi	r3,r2,-11
 800d380:	88c8983a 	sll	r4,r17,r3
 800d384:	00800434 	movhi	r2,16
 800d388:	10bfffc4 	addi	r2,r2,-1
 800d38c:	2088703a 	and	r4,r4,r2
 800d390:	28c1ffcc 	andi	r3,r5,2047
 800d394:	800d883a 	mov	r6,r16
 800d398:	0005883a 	mov	r2,zero
 800d39c:	003fea06 	br	800d348 <__alt_data_end+0xfc00d348>

0800d3a0 <__extendsfdf2>:
 800d3a0:	200ad5fa 	srli	r5,r4,23
 800d3a4:	defffd04 	addi	sp,sp,-12
 800d3a8:	dc400115 	stw	r17,4(sp)
 800d3ac:	29403fcc 	andi	r5,r5,255
 800d3b0:	29800044 	addi	r6,r5,1
 800d3b4:	04402034 	movhi	r17,128
 800d3b8:	dc000015 	stw	r16,0(sp)
 800d3bc:	8c7fffc4 	addi	r17,r17,-1
 800d3c0:	dfc00215 	stw	ra,8(sp)
 800d3c4:	31803fcc 	andi	r6,r6,255
 800d3c8:	00800044 	movi	r2,1
 800d3cc:	8922703a 	and	r17,r17,r4
 800d3d0:	2020d7fa 	srli	r16,r4,31
 800d3d4:	1180110e 	bge	r2,r6,800d41c <__extendsfdf2+0x7c>
 800d3d8:	880ed0fa 	srli	r7,r17,3
 800d3dc:	8822977a 	slli	r17,r17,29
 800d3e0:	2940e004 	addi	r5,r5,896
 800d3e4:	2941ffcc 	andi	r5,r5,2047
 800d3e8:	280c953a 	slli	r6,r5,20
 800d3ec:	01400434 	movhi	r5,16
 800d3f0:	800697fa 	slli	r3,r16,31
 800d3f4:	297fffc4 	addi	r5,r5,-1
 800d3f8:	394a703a 	and	r5,r7,r5
 800d3fc:	298ab03a 	or	r5,r5,r6
 800d400:	8805883a 	mov	r2,r17
 800d404:	28c6b03a 	or	r3,r5,r3
 800d408:	dfc00217 	ldw	ra,8(sp)
 800d40c:	dc400117 	ldw	r17,4(sp)
 800d410:	dc000017 	ldw	r16,0(sp)
 800d414:	dec00304 	addi	sp,sp,12
 800d418:	f800283a 	ret
 800d41c:	2800111e 	bne	r5,zero,800d464 <__extendsfdf2+0xc4>
 800d420:	88001c26 	beq	r17,zero,800d494 <__extendsfdf2+0xf4>
 800d424:	8809883a 	mov	r4,r17
 800d428:	800d6480 	call	800d648 <__clzsi2>
 800d42c:	00c00284 	movi	r3,10
 800d430:	18801b16 	blt	r3,r2,800d4a0 <__extendsfdf2+0x100>
 800d434:	01c002c4 	movi	r7,11
 800d438:	388fc83a 	sub	r7,r7,r2
 800d43c:	10c00544 	addi	r3,r2,21
 800d440:	89ced83a 	srl	r7,r17,r7
 800d444:	88e2983a 	sll	r17,r17,r3
 800d448:	0180e244 	movi	r6,905
 800d44c:	308bc83a 	sub	r5,r6,r2
 800d450:	01800434 	movhi	r6,16
 800d454:	31bfffc4 	addi	r6,r6,-1
 800d458:	398e703a 	and	r7,r7,r6
 800d45c:	2941ffcc 	andi	r5,r5,2047
 800d460:	003fe006 	br	800d3e4 <__alt_data_end+0xfc00d3e4>
 800d464:	88000826 	beq	r17,zero,800d488 <__extendsfdf2+0xe8>
 800d468:	880ed0fa 	srli	r7,r17,3
 800d46c:	00800434 	movhi	r2,16
 800d470:	10bfffc4 	addi	r2,r2,-1
 800d474:	39c00234 	orhi	r7,r7,8
 800d478:	8822977a 	slli	r17,r17,29
 800d47c:	388e703a 	and	r7,r7,r2
 800d480:	0141ffc4 	movi	r5,2047
 800d484:	003fd706 	br	800d3e4 <__alt_data_end+0xfc00d3e4>
 800d488:	0141ffc4 	movi	r5,2047
 800d48c:	000f883a 	mov	r7,zero
 800d490:	003fd406 	br	800d3e4 <__alt_data_end+0xfc00d3e4>
 800d494:	000b883a 	mov	r5,zero
 800d498:	000f883a 	mov	r7,zero
 800d49c:	003fd106 	br	800d3e4 <__alt_data_end+0xfc00d3e4>
 800d4a0:	11fffd44 	addi	r7,r2,-11
 800d4a4:	89ce983a 	sll	r7,r17,r7
 800d4a8:	0023883a 	mov	r17,zero
 800d4ac:	003fe606 	br	800d448 <__alt_data_end+0xfc00d448>

0800d4b0 <__truncdfsf2>:
 800d4b0:	2810d53a 	srli	r8,r5,20
 800d4b4:	01c00434 	movhi	r7,16
 800d4b8:	39ffffc4 	addi	r7,r7,-1
 800d4bc:	29ce703a 	and	r7,r5,r7
 800d4c0:	380e90fa 	slli	r7,r7,3
 800d4c4:	4201ffcc 	andi	r8,r8,2047
 800d4c8:	200cd77a 	srli	r6,r4,29
 800d4cc:	42400044 	addi	r9,r8,1
 800d4d0:	4a41ffcc 	andi	r9,r9,2047
 800d4d4:	00800044 	movi	r2,1
 800d4d8:	398cb03a 	or	r6,r7,r6
 800d4dc:	280ad7fa 	srli	r5,r5,31
 800d4e0:	200e90fa 	slli	r7,r4,3
 800d4e4:	1240230e 	bge	r2,r9,800d574 <__truncdfsf2+0xc4>
 800d4e8:	40ff2004 	addi	r3,r8,-896
 800d4ec:	00803f84 	movi	r2,254
 800d4f0:	10c01516 	blt	r2,r3,800d548 <__truncdfsf2+0x98>
 800d4f4:	00c02d0e 	bge	zero,r3,800d5ac <__truncdfsf2+0xfc>
 800d4f8:	200891ba 	slli	r4,r4,6
 800d4fc:	300c90fa 	slli	r6,r6,3
 800d500:	380ed77a 	srli	r7,r7,29
 800d504:	2008c03a 	cmpne	r4,r4,zero
 800d508:	310cb03a 	or	r6,r6,r4
 800d50c:	31ccb03a 	or	r6,r6,r7
 800d510:	308001cc 	andi	r2,r6,7
 800d514:	10000426 	beq	r2,zero,800d528 <__truncdfsf2+0x78>
 800d518:	310003cc 	andi	r4,r6,15
 800d51c:	00800104 	movi	r2,4
 800d520:	20800126 	beq	r4,r2,800d528 <__truncdfsf2+0x78>
 800d524:	31800104 	addi	r6,r6,4
 800d528:	3081002c 	andhi	r2,r6,1024
 800d52c:	10002326 	beq	r2,zero,800d5bc <__truncdfsf2+0x10c>
 800d530:	18c00044 	addi	r3,r3,1
 800d534:	00803fc4 	movi	r2,255
 800d538:	18800326 	beq	r3,r2,800d548 <__truncdfsf2+0x98>
 800d53c:	300c91ba 	slli	r6,r6,6
 800d540:	300cd27a 	srli	r6,r6,9
 800d544:	00000206 	br	800d550 <__truncdfsf2+0xa0>
 800d548:	00ffffc4 	movi	r3,-1
 800d54c:	000d883a 	mov	r6,zero
 800d550:	18c03fcc 	andi	r3,r3,255
 800d554:	180895fa 	slli	r4,r3,23
 800d558:	00c02034 	movhi	r3,128
 800d55c:	280a97fa 	slli	r5,r5,31
 800d560:	18ffffc4 	addi	r3,r3,-1
 800d564:	30c6703a 	and	r3,r6,r3
 800d568:	1906b03a 	or	r3,r3,r4
 800d56c:	1944b03a 	or	r2,r3,r5
 800d570:	f800283a 	ret
 800d574:	4000071e 	bne	r8,zero,800d594 <__truncdfsf2+0xe4>
 800d578:	31ccb03a 	or	r6,r6,r7
 800d57c:	30000d1e 	bne	r6,zero,800d5b4 <__truncdfsf2+0x104>
 800d580:	0007883a 	mov	r3,zero
 800d584:	00802034 	movhi	r2,128
 800d588:	10bfffc4 	addi	r2,r2,-1
 800d58c:	308c703a 	and	r6,r6,r2
 800d590:	003fef06 	br	800d550 <__alt_data_end+0xfc00d550>
 800d594:	31c8b03a 	or	r4,r6,r7
 800d598:	203feb26 	beq	r4,zero,800d548 <__alt_data_end+0xfc00d548>
 800d59c:	300c90fa 	slli	r6,r6,3
 800d5a0:	00c03fc4 	movi	r3,255
 800d5a4:	31808034 	orhi	r6,r6,512
 800d5a8:	003fd906 	br	800d510 <__alt_data_end+0xfc00d510>
 800d5ac:	00bffa44 	movi	r2,-23
 800d5b0:	1880090e 	bge	r3,r2,800d5d8 <__truncdfsf2+0x128>
 800d5b4:	01800144 	movi	r6,5
 800d5b8:	0007883a 	mov	r3,zero
 800d5bc:	00803fc4 	movi	r2,255
 800d5c0:	300cd0fa 	srli	r6,r6,3
 800d5c4:	18bfef1e 	bne	r3,r2,800d584 <__alt_data_end+0xfc00d584>
 800d5c8:	303fdf26 	beq	r6,zero,800d548 <__alt_data_end+0xfc00d548>
 800d5cc:	31801034 	orhi	r6,r6,64
 800d5d0:	00ffffc4 	movi	r3,-1
 800d5d4:	003feb06 	br	800d584 <__alt_data_end+0xfc00d584>
 800d5d8:	0080e784 	movi	r2,926
 800d5dc:	1205c83a 	sub	r2,r2,r8
 800d5e0:	00c007c4 	movi	r3,31
 800d5e4:	31802034 	orhi	r6,r6,128
 800d5e8:	18800916 	blt	r3,r2,800d610 <__truncdfsf2+0x160>
 800d5ec:	423f2084 	addi	r8,r8,-894
 800d5f0:	3a06983a 	sll	r3,r7,r8
 800d5f4:	3210983a 	sll	r8,r6,r8
 800d5f8:	388ed83a 	srl	r7,r7,r2
 800d5fc:	180cc03a 	cmpne	r6,r3,zero
 800d600:	418cb03a 	or	r6,r8,r6
 800d604:	31ccb03a 	or	r6,r6,r7
 800d608:	0007883a 	mov	r3,zero
 800d60c:	003fc006 	br	800d510 <__alt_data_end+0xfc00d510>
 800d610:	00c0df84 	movi	r3,894
 800d614:	1a07c83a 	sub	r3,r3,r8
 800d618:	01000804 	movi	r4,32
 800d61c:	30c6d83a 	srl	r3,r6,r3
 800d620:	11000726 	beq	r2,r4,800d640 <__truncdfsf2+0x190>
 800d624:	423f2884 	addi	r8,r8,-862
 800d628:	3210983a 	sll	r8,r6,r8
 800d62c:	41ceb03a 	or	r7,r8,r7
 800d630:	380ec03a 	cmpne	r7,r7,zero
 800d634:	38ccb03a 	or	r6,r7,r3
 800d638:	0007883a 	mov	r3,zero
 800d63c:	003fb406 	br	800d510 <__alt_data_end+0xfc00d510>
 800d640:	0011883a 	mov	r8,zero
 800d644:	003ff906 	br	800d62c <__alt_data_end+0xfc00d62c>

0800d648 <__clzsi2>:
 800d648:	00bfffd4 	movui	r2,65535
 800d64c:	11000b36 	bltu	r2,r4,800d67c <__clzsi2+0x34>
 800d650:	00803fc4 	movi	r2,255
 800d654:	1100122e 	bgeu	r2,r4,800d6a0 <__clzsi2+0x58>
 800d658:	00c00204 	movi	r3,8
 800d65c:	01400604 	movi	r5,24
 800d660:	20c8d83a 	srl	r4,r4,r3
 800d664:	008200f4 	movhi	r2,2051
 800d668:	10aabc04 	addi	r2,r2,-21776
 800d66c:	1109883a 	add	r4,r2,r4
 800d670:	20800003 	ldbu	r2,0(r4)
 800d674:	2885c83a 	sub	r2,r5,r2
 800d678:	f800283a 	ret
 800d67c:	00804034 	movhi	r2,256
 800d680:	10bfffc4 	addi	r2,r2,-1
 800d684:	11000336 	bltu	r2,r4,800d694 <__clzsi2+0x4c>
 800d688:	00c00404 	movi	r3,16
 800d68c:	180b883a 	mov	r5,r3
 800d690:	003ff306 	br	800d660 <__alt_data_end+0xfc00d660>
 800d694:	00c00604 	movi	r3,24
 800d698:	01400204 	movi	r5,8
 800d69c:	003ff006 	br	800d660 <__alt_data_end+0xfc00d660>
 800d6a0:	0007883a 	mov	r3,zero
 800d6a4:	01400804 	movi	r5,32
 800d6a8:	003fed06 	br	800d660 <__alt_data_end+0xfc00d660>

0800d6ac <atof>:
 800d6ac:	000b883a 	mov	r5,zero
 800d6b0:	800f99c1 	jmpi	800f99c <strtod>

0800d6b4 <atoi>:
 800d6b4:	000b883a 	mov	r5,zero
 800d6b8:	01800284 	movi	r6,10
 800d6bc:	800fdd41 	jmpi	800fdd4 <strtol>

0800d6c0 <_atoi_r>:
 800d6c0:	000d883a 	mov	r6,zero
 800d6c4:	01c00284 	movi	r7,10
 800d6c8:	800fb741 	jmpi	800fb74 <_strtol_r>

0800d6cc <__errno>:
 800d6cc:	008200f4 	movhi	r2,2051
 800d6d0:	10b31604 	addi	r2,r2,-13224
 800d6d4:	10800017 	ldw	r2,0(r2)
 800d6d8:	f800283a 	ret

0800d6dc <malloc>:
 800d6dc:	008200f4 	movhi	r2,2051
 800d6e0:	10b31604 	addi	r2,r2,-13224
 800d6e4:	200b883a 	mov	r5,r4
 800d6e8:	11000017 	ldw	r4,0(r2)
 800d6ec:	800d7041 	jmpi	800d704 <_malloc_r>

0800d6f0 <free>:
 800d6f0:	008200f4 	movhi	r2,2051
 800d6f4:	10b31604 	addi	r2,r2,-13224
 800d6f8:	200b883a 	mov	r5,r4
 800d6fc:	11000017 	ldw	r4,0(r2)
 800d700:	8015f6c1 	jmpi	8015f6c <_free_r>

0800d704 <_malloc_r>:
 800d704:	defff504 	addi	sp,sp,-44
 800d708:	dc800315 	stw	r18,12(sp)
 800d70c:	dfc00a15 	stw	ra,40(sp)
 800d710:	df000915 	stw	fp,36(sp)
 800d714:	ddc00815 	stw	r23,32(sp)
 800d718:	dd800715 	stw	r22,28(sp)
 800d71c:	dd400615 	stw	r21,24(sp)
 800d720:	dd000515 	stw	r20,20(sp)
 800d724:	dcc00415 	stw	r19,16(sp)
 800d728:	dc400215 	stw	r17,8(sp)
 800d72c:	dc000115 	stw	r16,4(sp)
 800d730:	288002c4 	addi	r2,r5,11
 800d734:	00c00584 	movi	r3,22
 800d738:	2025883a 	mov	r18,r4
 800d73c:	18802a2e 	bgeu	r3,r2,800d7e8 <_malloc_r+0xe4>
 800d740:	047ffe04 	movi	r17,-8
 800d744:	1462703a 	and	r17,r2,r17
 800d748:	88009e16 	blt	r17,zero,800d9c4 <_malloc_r+0x2c0>
 800d74c:	89409d36 	bltu	r17,r5,800d9c4 <_malloc_r+0x2c0>
 800d750:	801dac00 	call	801dac0 <__malloc_lock>
 800d754:	00807dc4 	movi	r2,503
 800d758:	14402736 	bltu	r2,r17,800d7f8 <_malloc_r+0xf4>
 800d75c:	8806d0fa 	srli	r3,r17,3
 800d760:	04c200f4 	movhi	r19,2051
 800d764:	9ced5904 	addi	r19,r19,-19100
 800d768:	18c5883a 	add	r2,r3,r3
 800d76c:	1085883a 	add	r2,r2,r2
 800d770:	1085883a 	add	r2,r2,r2
 800d774:	9885883a 	add	r2,r19,r2
 800d778:	14000317 	ldw	r16,12(r2)
 800d77c:	80814a26 	beq	r16,r2,800dca8 <_malloc_r+0x5a4>
 800d780:	80c00117 	ldw	r3,4(r16)
 800d784:	81000317 	ldw	r4,12(r16)
 800d788:	00bfff04 	movi	r2,-4
 800d78c:	1884703a 	and	r2,r3,r2
 800d790:	81400217 	ldw	r5,8(r16)
 800d794:	8085883a 	add	r2,r16,r2
 800d798:	10c00117 	ldw	r3,4(r2)
 800d79c:	29000315 	stw	r4,12(r5)
 800d7a0:	21400215 	stw	r5,8(r4)
 800d7a4:	18c00054 	ori	r3,r3,1
 800d7a8:	10c00115 	stw	r3,4(r2)
 800d7ac:	9009883a 	mov	r4,r18
 800d7b0:	801dae00 	call	801dae0 <__malloc_unlock>
 800d7b4:	80800204 	addi	r2,r16,8
 800d7b8:	dfc00a17 	ldw	ra,40(sp)
 800d7bc:	df000917 	ldw	fp,36(sp)
 800d7c0:	ddc00817 	ldw	r23,32(sp)
 800d7c4:	dd800717 	ldw	r22,28(sp)
 800d7c8:	dd400617 	ldw	r21,24(sp)
 800d7cc:	dd000517 	ldw	r20,20(sp)
 800d7d0:	dcc00417 	ldw	r19,16(sp)
 800d7d4:	dc800317 	ldw	r18,12(sp)
 800d7d8:	dc400217 	ldw	r17,8(sp)
 800d7dc:	dc000117 	ldw	r16,4(sp)
 800d7e0:	dec00b04 	addi	sp,sp,44
 800d7e4:	f800283a 	ret
 800d7e8:	04400404 	movi	r17,16
 800d7ec:	89407536 	bltu	r17,r5,800d9c4 <_malloc_r+0x2c0>
 800d7f0:	801dac00 	call	801dac0 <__malloc_lock>
 800d7f4:	003fd906 	br	800d75c <__alt_data_end+0xfc00d75c>
 800d7f8:	8806d27a 	srli	r3,r17,9
 800d7fc:	18007526 	beq	r3,zero,800d9d4 <_malloc_r+0x2d0>
 800d800:	00800104 	movi	r2,4
 800d804:	10c0ef36 	bltu	r2,r3,800dbc4 <_malloc_r+0x4c0>
 800d808:	8806d1ba 	srli	r3,r17,6
 800d80c:	19c00e04 	addi	r7,r3,56
 800d810:	39cb883a 	add	r5,r7,r7
 800d814:	04c200f4 	movhi	r19,2051
 800d818:	294b883a 	add	r5,r5,r5
 800d81c:	9ced5904 	addi	r19,r19,-19100
 800d820:	294b883a 	add	r5,r5,r5
 800d824:	994b883a 	add	r5,r19,r5
 800d828:	2c000317 	ldw	r16,12(r5)
 800d82c:	2c000e26 	beq	r5,r16,800d868 <_malloc_r+0x164>
 800d830:	80800117 	ldw	r2,4(r16)
 800d834:	01bfff04 	movi	r6,-4
 800d838:	010003c4 	movi	r4,15
 800d83c:	1184703a 	and	r2,r2,r6
 800d840:	1447c83a 	sub	r3,r2,r17
 800d844:	20c00716 	blt	r4,r3,800d864 <_malloc_r+0x160>
 800d848:	1800650e 	bge	r3,zero,800d9e0 <_malloc_r+0x2dc>
 800d84c:	84000317 	ldw	r16,12(r16)
 800d850:	2c000526 	beq	r5,r16,800d868 <_malloc_r+0x164>
 800d854:	80800117 	ldw	r2,4(r16)
 800d858:	1184703a 	and	r2,r2,r6
 800d85c:	1447c83a 	sub	r3,r2,r17
 800d860:	20fff90e 	bge	r4,r3,800d848 <__alt_data_end+0xfc00d848>
 800d864:	39ffffc4 	addi	r7,r7,-1
 800d868:	38c00044 	addi	r3,r7,1
 800d86c:	018200f4 	movhi	r6,2051
 800d870:	9c000417 	ldw	r16,16(r19)
 800d874:	31ad5904 	addi	r6,r6,-19100
 800d878:	32400204 	addi	r9,r6,8
 800d87c:	82410326 	beq	r16,r9,800dc8c <_malloc_r+0x588>
 800d880:	81000117 	ldw	r4,4(r16)
 800d884:	00bfff04 	movi	r2,-4
 800d888:	208e703a 	and	r7,r4,r2
 800d88c:	3c45c83a 	sub	r2,r7,r17
 800d890:	010003c4 	movi	r4,15
 800d894:	2080ee16 	blt	r4,r2,800dc50 <_malloc_r+0x54c>
 800d898:	32400515 	stw	r9,20(r6)
 800d89c:	32400415 	stw	r9,16(r6)
 800d8a0:	1000510e 	bge	r2,zero,800d9e8 <_malloc_r+0x2e4>
 800d8a4:	00807fc4 	movi	r2,511
 800d8a8:	11c0ce36 	bltu	r2,r7,800dbe4 <_malloc_r+0x4e0>
 800d8ac:	3808d0fa 	srli	r4,r7,3
 800d8b0:	01c00044 	movi	r7,1
 800d8b4:	30800117 	ldw	r2,4(r6)
 800d8b8:	210b883a 	add	r5,r4,r4
 800d8bc:	294b883a 	add	r5,r5,r5
 800d8c0:	2009d0ba 	srai	r4,r4,2
 800d8c4:	294b883a 	add	r5,r5,r5
 800d8c8:	298b883a 	add	r5,r5,r6
 800d8cc:	2a000217 	ldw	r8,8(r5)
 800d8d0:	3908983a 	sll	r4,r7,r4
 800d8d4:	81400315 	stw	r5,12(r16)
 800d8d8:	82000215 	stw	r8,8(r16)
 800d8dc:	2088b03a 	or	r4,r4,r2
 800d8e0:	2c000215 	stw	r16,8(r5)
 800d8e4:	31000115 	stw	r4,4(r6)
 800d8e8:	44000315 	stw	r16,12(r8)
 800d8ec:	1805d0ba 	srai	r2,r3,2
 800d8f0:	01400044 	movi	r5,1
 800d8f4:	288a983a 	sll	r5,r5,r2
 800d8f8:	21404336 	bltu	r4,r5,800da08 <_malloc_r+0x304>
 800d8fc:	2144703a 	and	r2,r4,r5
 800d900:	10000a1e 	bne	r2,zero,800d92c <_malloc_r+0x228>
 800d904:	00bfff04 	movi	r2,-4
 800d908:	294b883a 	add	r5,r5,r5
 800d90c:	1886703a 	and	r3,r3,r2
 800d910:	2144703a 	and	r2,r4,r5
 800d914:	18c00104 	addi	r3,r3,4
 800d918:	1000041e 	bne	r2,zero,800d92c <_malloc_r+0x228>
 800d91c:	294b883a 	add	r5,r5,r5
 800d920:	2144703a 	and	r2,r4,r5
 800d924:	18c00104 	addi	r3,r3,4
 800d928:	103ffc26 	beq	r2,zero,800d91c <__alt_data_end+0xfc00d91c>
 800d92c:	023fff04 	movi	r8,-4
 800d930:	01c003c4 	movi	r7,15
 800d934:	18c5883a 	add	r2,r3,r3
 800d938:	1085883a 	add	r2,r2,r2
 800d93c:	1085883a 	add	r2,r2,r2
 800d940:	9895883a 	add	r10,r19,r2
 800d944:	52c00304 	addi	r11,r10,12
 800d948:	1819883a 	mov	r12,r3
 800d94c:	5c000017 	ldw	r16,0(r11)
 800d950:	59bffd04 	addi	r6,r11,-12
 800d954:	8180041e 	bne	r16,r6,800d968 <_malloc_r+0x264>
 800d958:	0000ce06 	br	800dc94 <_malloc_r+0x590>
 800d95c:	2000d70e 	bge	r4,zero,800dcbc <_malloc_r+0x5b8>
 800d960:	84000317 	ldw	r16,12(r16)
 800d964:	8180cb26 	beq	r16,r6,800dc94 <_malloc_r+0x590>
 800d968:	80800117 	ldw	r2,4(r16)
 800d96c:	1204703a 	and	r2,r2,r8
 800d970:	1449c83a 	sub	r4,r2,r17
 800d974:	393ff90e 	bge	r7,r4,800d95c <__alt_data_end+0xfc00d95c>
 800d978:	80800317 	ldw	r2,12(r16)
 800d97c:	80c00217 	ldw	r3,8(r16)
 800d980:	89400054 	ori	r5,r17,1
 800d984:	81400115 	stw	r5,4(r16)
 800d988:	18800315 	stw	r2,12(r3)
 800d98c:	10c00215 	stw	r3,8(r2)
 800d990:	8463883a 	add	r17,r16,r17
 800d994:	9c400515 	stw	r17,20(r19)
 800d998:	9c400415 	stw	r17,16(r19)
 800d99c:	20800054 	ori	r2,r4,1
 800d9a0:	88800115 	stw	r2,4(r17)
 800d9a4:	8a400315 	stw	r9,12(r17)
 800d9a8:	8a400215 	stw	r9,8(r17)
 800d9ac:	8923883a 	add	r17,r17,r4
 800d9b0:	89000015 	stw	r4,0(r17)
 800d9b4:	9009883a 	mov	r4,r18
 800d9b8:	801dae00 	call	801dae0 <__malloc_unlock>
 800d9bc:	80800204 	addi	r2,r16,8
 800d9c0:	003f7d06 	br	800d7b8 <__alt_data_end+0xfc00d7b8>
 800d9c4:	00800304 	movi	r2,12
 800d9c8:	90800015 	stw	r2,0(r18)
 800d9cc:	0005883a 	mov	r2,zero
 800d9d0:	003f7906 	br	800d7b8 <__alt_data_end+0xfc00d7b8>
 800d9d4:	01401f84 	movi	r5,126
 800d9d8:	01c00fc4 	movi	r7,63
 800d9dc:	003f8d06 	br	800d814 <__alt_data_end+0xfc00d814>
 800d9e0:	81000317 	ldw	r4,12(r16)
 800d9e4:	003f6a06 	br	800d790 <__alt_data_end+0xfc00d790>
 800d9e8:	81c5883a 	add	r2,r16,r7
 800d9ec:	10c00117 	ldw	r3,4(r2)
 800d9f0:	9009883a 	mov	r4,r18
 800d9f4:	18c00054 	ori	r3,r3,1
 800d9f8:	10c00115 	stw	r3,4(r2)
 800d9fc:	801dae00 	call	801dae0 <__malloc_unlock>
 800da00:	80800204 	addi	r2,r16,8
 800da04:	003f6c06 	br	800d7b8 <__alt_data_end+0xfc00d7b8>
 800da08:	9c000217 	ldw	r16,8(r19)
 800da0c:	00bfff04 	movi	r2,-4
 800da10:	85800117 	ldw	r22,4(r16)
 800da14:	b0ac703a 	and	r22,r22,r2
 800da18:	b4400336 	bltu	r22,r17,800da28 <_malloc_r+0x324>
 800da1c:	b445c83a 	sub	r2,r22,r17
 800da20:	00c003c4 	movi	r3,15
 800da24:	18805d16 	blt	r3,r2,800db9c <_malloc_r+0x498>
 800da28:	05c200f4 	movhi	r23,2051
 800da2c:	008200f4 	movhi	r2,2051
 800da30:	bdf31704 	addi	r23,r23,-13220
 800da34:	10ba0d04 	addi	r2,r2,-6092
 800da38:	15400017 	ldw	r21,0(r2)
 800da3c:	b9000017 	ldw	r4,0(r23)
 800da40:	00ffffc4 	movi	r3,-1
 800da44:	858d883a 	add	r6,r16,r22
 800da48:	8d6b883a 	add	r21,r17,r21
 800da4c:	20c0e426 	beq	r4,r3,800dde0 <_malloc_r+0x6dc>
 800da50:	ad4403c4 	addi	r21,r21,4111
 800da54:	00fc0004 	movi	r3,-4096
 800da58:	a8ea703a 	and	r21,r21,r3
 800da5c:	9009883a 	mov	r4,r18
 800da60:	a80b883a 	mov	r5,r21
 800da64:	d9800015 	stw	r6,0(sp)
 800da68:	800df340 	call	800df34 <_sbrk_r>
 800da6c:	00ffffc4 	movi	r3,-1
 800da70:	1029883a 	mov	r20,r2
 800da74:	d9800017 	ldw	r6,0(sp)
 800da78:	10c0a426 	beq	r2,r3,800dd0c <_malloc_r+0x608>
 800da7c:	1180a236 	bltu	r2,r6,800dd08 <_malloc_r+0x604>
 800da80:	070200f4 	movhi	fp,2051
 800da84:	e73a1c04 	addi	fp,fp,-6032
 800da88:	e0c00017 	ldw	r3,0(fp)
 800da8c:	a8c7883a 	add	r3,r21,r3
 800da90:	e0c00015 	stw	r3,0(fp)
 800da94:	3500da26 	beq	r6,r20,800de00 <_malloc_r+0x6fc>
 800da98:	b9000017 	ldw	r4,0(r23)
 800da9c:	00bfffc4 	movi	r2,-1
 800daa0:	2080e426 	beq	r4,r2,800de34 <_malloc_r+0x730>
 800daa4:	a185c83a 	sub	r2,r20,r6
 800daa8:	1885883a 	add	r2,r3,r2
 800daac:	e0800015 	stw	r2,0(fp)
 800dab0:	a0c001cc 	andi	r3,r20,7
 800dab4:	1800b526 	beq	r3,zero,800dd8c <_malloc_r+0x688>
 800dab8:	a0e9c83a 	sub	r20,r20,r3
 800dabc:	00840204 	movi	r2,4104
 800dac0:	a5000204 	addi	r20,r20,8
 800dac4:	10c7c83a 	sub	r3,r2,r3
 800dac8:	a545883a 	add	r2,r20,r21
 800dacc:	1083ffcc 	andi	r2,r2,4095
 800dad0:	18abc83a 	sub	r21,r3,r2
 800dad4:	9009883a 	mov	r4,r18
 800dad8:	a80b883a 	mov	r5,r21
 800dadc:	800df340 	call	800df34 <_sbrk_r>
 800dae0:	00ffffc4 	movi	r3,-1
 800dae4:	10c0d026 	beq	r2,r3,800de28 <_malloc_r+0x724>
 800dae8:	1507c83a 	sub	r3,r2,r20
 800daec:	a8c7883a 	add	r3,r21,r3
 800daf0:	18c00054 	ori	r3,r3,1
 800daf4:	e0800017 	ldw	r2,0(fp)
 800daf8:	9d000215 	stw	r20,8(r19)
 800dafc:	a0c00115 	stw	r3,4(r20)
 800db00:	a887883a 	add	r3,r21,r2
 800db04:	e0c00015 	stw	r3,0(fp)
 800db08:	84c00e26 	beq	r16,r19,800db44 <_malloc_r+0x440>
 800db0c:	018003c4 	movi	r6,15
 800db10:	3580a02e 	bgeu	r6,r22,800dd94 <_malloc_r+0x690>
 800db14:	81400117 	ldw	r5,4(r16)
 800db18:	013ffe04 	movi	r4,-8
 800db1c:	b0bffd04 	addi	r2,r22,-12
 800db20:	1104703a 	and	r2,r2,r4
 800db24:	2900004c 	andi	r4,r5,1
 800db28:	1108b03a 	or	r4,r2,r4
 800db2c:	81000115 	stw	r4,4(r16)
 800db30:	01400144 	movi	r5,5
 800db34:	8089883a 	add	r4,r16,r2
 800db38:	21400115 	stw	r5,4(r4)
 800db3c:	21400215 	stw	r5,8(r4)
 800db40:	3080c036 	bltu	r6,r2,800de44 <_malloc_r+0x740>
 800db44:	008200f4 	movhi	r2,2051
 800db48:	10ba0c04 	addi	r2,r2,-6096
 800db4c:	11000017 	ldw	r4,0(r2)
 800db50:	20c0012e 	bgeu	r4,r3,800db58 <_malloc_r+0x454>
 800db54:	10c00015 	stw	r3,0(r2)
 800db58:	008200f4 	movhi	r2,2051
 800db5c:	10ba0b04 	addi	r2,r2,-6100
 800db60:	11000017 	ldw	r4,0(r2)
 800db64:	9c000217 	ldw	r16,8(r19)
 800db68:	20c0012e 	bgeu	r4,r3,800db70 <_malloc_r+0x46c>
 800db6c:	10c00015 	stw	r3,0(r2)
 800db70:	80c00117 	ldw	r3,4(r16)
 800db74:	00bfff04 	movi	r2,-4
 800db78:	1886703a 	and	r3,r3,r2
 800db7c:	1c45c83a 	sub	r2,r3,r17
 800db80:	1c400236 	bltu	r3,r17,800db8c <_malloc_r+0x488>
 800db84:	00c003c4 	movi	r3,15
 800db88:	18800416 	blt	r3,r2,800db9c <_malloc_r+0x498>
 800db8c:	9009883a 	mov	r4,r18
 800db90:	801dae00 	call	801dae0 <__malloc_unlock>
 800db94:	0005883a 	mov	r2,zero
 800db98:	003f0706 	br	800d7b8 <__alt_data_end+0xfc00d7b8>
 800db9c:	88c00054 	ori	r3,r17,1
 800dba0:	80c00115 	stw	r3,4(r16)
 800dba4:	8463883a 	add	r17,r16,r17
 800dba8:	10800054 	ori	r2,r2,1
 800dbac:	9c400215 	stw	r17,8(r19)
 800dbb0:	88800115 	stw	r2,4(r17)
 800dbb4:	9009883a 	mov	r4,r18
 800dbb8:	801dae00 	call	801dae0 <__malloc_unlock>
 800dbbc:	80800204 	addi	r2,r16,8
 800dbc0:	003efd06 	br	800d7b8 <__alt_data_end+0xfc00d7b8>
 800dbc4:	00800504 	movi	r2,20
 800dbc8:	10c0482e 	bgeu	r2,r3,800dcec <_malloc_r+0x5e8>
 800dbcc:	00801504 	movi	r2,84
 800dbd0:	10c06836 	bltu	r2,r3,800dd74 <_malloc_r+0x670>
 800dbd4:	8806d33a 	srli	r3,r17,12
 800dbd8:	19c01b84 	addi	r7,r3,110
 800dbdc:	39cb883a 	add	r5,r7,r7
 800dbe0:	003f0c06 	br	800d814 <__alt_data_end+0xfc00d814>
 800dbe4:	3804d27a 	srli	r2,r7,9
 800dbe8:	01000104 	movi	r4,4
 800dbec:	2080422e 	bgeu	r4,r2,800dcf8 <_malloc_r+0x5f4>
 800dbf0:	01000504 	movi	r4,20
 800dbf4:	20807c36 	bltu	r4,r2,800dde8 <_malloc_r+0x6e4>
 800dbf8:	110016c4 	addi	r4,r2,91
 800dbfc:	210b883a 	add	r5,r4,r4
 800dc00:	294b883a 	add	r5,r5,r5
 800dc04:	294b883a 	add	r5,r5,r5
 800dc08:	994b883a 	add	r5,r19,r5
 800dc0c:	28800217 	ldw	r2,8(r5)
 800dc10:	020200f4 	movhi	r8,2051
 800dc14:	422d5904 	addi	r8,r8,-19100
 800dc18:	11406326 	beq	r2,r5,800dda8 <_malloc_r+0x6a4>
 800dc1c:	01bfff04 	movi	r6,-4
 800dc20:	11000117 	ldw	r4,4(r2)
 800dc24:	2188703a 	and	r4,r4,r6
 800dc28:	3900022e 	bgeu	r7,r4,800dc34 <_malloc_r+0x530>
 800dc2c:	10800217 	ldw	r2,8(r2)
 800dc30:	28bffb1e 	bne	r5,r2,800dc20 <__alt_data_end+0xfc00dc20>
 800dc34:	11800317 	ldw	r6,12(r2)
 800dc38:	99000117 	ldw	r4,4(r19)
 800dc3c:	81800315 	stw	r6,12(r16)
 800dc40:	80800215 	stw	r2,8(r16)
 800dc44:	34000215 	stw	r16,8(r6)
 800dc48:	14000315 	stw	r16,12(r2)
 800dc4c:	003f2706 	br	800d8ec <__alt_data_end+0xfc00d8ec>
 800dc50:	88c00054 	ori	r3,r17,1
 800dc54:	80c00115 	stw	r3,4(r16)
 800dc58:	8463883a 	add	r17,r16,r17
 800dc5c:	34400515 	stw	r17,20(r6)
 800dc60:	34400415 	stw	r17,16(r6)
 800dc64:	10c00054 	ori	r3,r2,1
 800dc68:	8a400315 	stw	r9,12(r17)
 800dc6c:	8a400215 	stw	r9,8(r17)
 800dc70:	88c00115 	stw	r3,4(r17)
 800dc74:	88a3883a 	add	r17,r17,r2
 800dc78:	88800015 	stw	r2,0(r17)
 800dc7c:	9009883a 	mov	r4,r18
 800dc80:	801dae00 	call	801dae0 <__malloc_unlock>
 800dc84:	80800204 	addi	r2,r16,8
 800dc88:	003ecb06 	br	800d7b8 <__alt_data_end+0xfc00d7b8>
 800dc8c:	31000117 	ldw	r4,4(r6)
 800dc90:	003f1606 	br	800d8ec <__alt_data_end+0xfc00d8ec>
 800dc94:	63000044 	addi	r12,r12,1
 800dc98:	608000cc 	andi	r2,r12,3
 800dc9c:	5ac00204 	addi	r11,r11,8
 800dca0:	103f2a1e 	bne	r2,zero,800d94c <__alt_data_end+0xfc00d94c>
 800dca4:	00002106 	br	800dd2c <_malloc_r+0x628>
 800dca8:	80800204 	addi	r2,r16,8
 800dcac:	84000517 	ldw	r16,20(r16)
 800dcb0:	143eb31e 	bne	r2,r16,800d780 <__alt_data_end+0xfc00d780>
 800dcb4:	18c00084 	addi	r3,r3,2
 800dcb8:	003eec06 	br	800d86c <__alt_data_end+0xfc00d86c>
 800dcbc:	8085883a 	add	r2,r16,r2
 800dcc0:	10c00117 	ldw	r3,4(r2)
 800dcc4:	81000317 	ldw	r4,12(r16)
 800dcc8:	81400217 	ldw	r5,8(r16)
 800dccc:	18c00054 	ori	r3,r3,1
 800dcd0:	10c00115 	stw	r3,4(r2)
 800dcd4:	29000315 	stw	r4,12(r5)
 800dcd8:	21400215 	stw	r5,8(r4)
 800dcdc:	9009883a 	mov	r4,r18
 800dce0:	801dae00 	call	801dae0 <__malloc_unlock>
 800dce4:	80800204 	addi	r2,r16,8
 800dce8:	003eb306 	br	800d7b8 <__alt_data_end+0xfc00d7b8>
 800dcec:	19c016c4 	addi	r7,r3,91
 800dcf0:	39cb883a 	add	r5,r7,r7
 800dcf4:	003ec706 	br	800d814 <__alt_data_end+0xfc00d814>
 800dcf8:	3804d1ba 	srli	r2,r7,6
 800dcfc:	11000e04 	addi	r4,r2,56
 800dd00:	210b883a 	add	r5,r4,r4
 800dd04:	003fbe06 	br	800dc00 <__alt_data_end+0xfc00dc00>
 800dd08:	84ff5d26 	beq	r16,r19,800da80 <__alt_data_end+0xfc00da80>
 800dd0c:	9c000217 	ldw	r16,8(r19)
 800dd10:	00bfff04 	movi	r2,-4
 800dd14:	80c00117 	ldw	r3,4(r16)
 800dd18:	1886703a 	and	r3,r3,r2
 800dd1c:	003f9706 	br	800db7c <__alt_data_end+0xfc00db7c>
 800dd20:	52800017 	ldw	r10,0(r10)
 800dd24:	18ffffc4 	addi	r3,r3,-1
 800dd28:	50805c1e 	bne	r10,r2,800de9c <_malloc_r+0x798>
 800dd2c:	190000cc 	andi	r4,r3,3
 800dd30:	50bffe04 	addi	r2,r10,-8
 800dd34:	203ffa1e 	bne	r4,zero,800dd20 <__alt_data_end+0xfc00dd20>
 800dd38:	98800117 	ldw	r2,4(r19)
 800dd3c:	0146303a 	nor	r3,zero,r5
 800dd40:	1884703a 	and	r2,r3,r2
 800dd44:	98800115 	stw	r2,4(r19)
 800dd48:	294b883a 	add	r5,r5,r5
 800dd4c:	117f2e36 	bltu	r2,r5,800da08 <__alt_data_end+0xfc00da08>
 800dd50:	283f2d26 	beq	r5,zero,800da08 <__alt_data_end+0xfc00da08>
 800dd54:	1146703a 	and	r3,r2,r5
 800dd58:	1800521e 	bne	r3,zero,800dea4 <_malloc_r+0x7a0>
 800dd5c:	6007883a 	mov	r3,r12
 800dd60:	294b883a 	add	r5,r5,r5
 800dd64:	1148703a 	and	r4,r2,r5
 800dd68:	18c00104 	addi	r3,r3,4
 800dd6c:	203ffc26 	beq	r4,zero,800dd60 <__alt_data_end+0xfc00dd60>
 800dd70:	003ef006 	br	800d934 <__alt_data_end+0xfc00d934>
 800dd74:	00805504 	movi	r2,340
 800dd78:	10c01336 	bltu	r2,r3,800ddc8 <_malloc_r+0x6c4>
 800dd7c:	8806d3fa 	srli	r3,r17,15
 800dd80:	19c01dc4 	addi	r7,r3,119
 800dd84:	39cb883a 	add	r5,r7,r7
 800dd88:	003ea206 	br	800d814 <__alt_data_end+0xfc00d814>
 800dd8c:	00c40004 	movi	r3,4096
 800dd90:	003f4d06 	br	800dac8 <__alt_data_end+0xfc00dac8>
 800dd94:	00800044 	movi	r2,1
 800dd98:	a0800115 	stw	r2,4(r20)
 800dd9c:	a021883a 	mov	r16,r20
 800dda0:	0007883a 	mov	r3,zero
 800dda4:	003f7506 	br	800db7c <__alt_data_end+0xfc00db7c>
 800dda8:	200bd0ba 	srai	r5,r4,2
 800ddac:	01800044 	movi	r6,1
 800ddb0:	41000117 	ldw	r4,4(r8)
 800ddb4:	314a983a 	sll	r5,r6,r5
 800ddb8:	100d883a 	mov	r6,r2
 800ddbc:	2908b03a 	or	r4,r5,r4
 800ddc0:	41000115 	stw	r4,4(r8)
 800ddc4:	003f9d06 	br	800dc3c <__alt_data_end+0xfc00dc3c>
 800ddc8:	00815504 	movi	r2,1364
 800ddcc:	10c01336 	bltu	r2,r3,800de1c <_malloc_r+0x718>
 800ddd0:	8806d4ba 	srli	r3,r17,18
 800ddd4:	19c01f04 	addi	r7,r3,124
 800ddd8:	39cb883a 	add	r5,r7,r7
 800dddc:	003e8d06 	br	800d814 <__alt_data_end+0xfc00d814>
 800dde0:	ad400404 	addi	r21,r21,16
 800dde4:	003f1d06 	br	800da5c <__alt_data_end+0xfc00da5c>
 800dde8:	01001504 	movi	r4,84
 800ddec:	20801c36 	bltu	r4,r2,800de60 <_malloc_r+0x75c>
 800ddf0:	3804d33a 	srli	r2,r7,12
 800ddf4:	11001b84 	addi	r4,r2,110
 800ddf8:	210b883a 	add	r5,r4,r4
 800ddfc:	003f8006 	br	800dc00 <__alt_data_end+0xfc00dc00>
 800de00:	3083ffcc 	andi	r2,r6,4095
 800de04:	103f241e 	bne	r2,zero,800da98 <__alt_data_end+0xfc00da98>
 800de08:	99000217 	ldw	r4,8(r19)
 800de0c:	ad85883a 	add	r2,r21,r22
 800de10:	10800054 	ori	r2,r2,1
 800de14:	20800115 	stw	r2,4(r4)
 800de18:	003f4a06 	br	800db44 <__alt_data_end+0xfc00db44>
 800de1c:	01403f04 	movi	r5,252
 800de20:	01c01f84 	movi	r7,126
 800de24:	003e7b06 	br	800d814 <__alt_data_end+0xfc00d814>
 800de28:	00c00044 	movi	r3,1
 800de2c:	002b883a 	mov	r21,zero
 800de30:	003f3006 	br	800daf4 <__alt_data_end+0xfc00daf4>
 800de34:	008200f4 	movhi	r2,2051
 800de38:	10b31704 	addi	r2,r2,-13220
 800de3c:	15000015 	stw	r20,0(r2)
 800de40:	003f1b06 	br	800dab0 <__alt_data_end+0xfc00dab0>
 800de44:	9009883a 	mov	r4,r18
 800de48:	81400204 	addi	r5,r16,8
 800de4c:	8015f6c0 	call	8015f6c <_free_r>
 800de50:	008200f4 	movhi	r2,2051
 800de54:	10ba1c04 	addi	r2,r2,-6032
 800de58:	10c00017 	ldw	r3,0(r2)
 800de5c:	003f3906 	br	800db44 <__alt_data_end+0xfc00db44>
 800de60:	01005504 	movi	r4,340
 800de64:	20800436 	bltu	r4,r2,800de78 <_malloc_r+0x774>
 800de68:	3804d3fa 	srli	r2,r7,15
 800de6c:	11001dc4 	addi	r4,r2,119
 800de70:	210b883a 	add	r5,r4,r4
 800de74:	003f6206 	br	800dc00 <__alt_data_end+0xfc00dc00>
 800de78:	01015504 	movi	r4,1364
 800de7c:	20800436 	bltu	r4,r2,800de90 <_malloc_r+0x78c>
 800de80:	3804d4ba 	srli	r2,r7,18
 800de84:	11001f04 	addi	r4,r2,124
 800de88:	210b883a 	add	r5,r4,r4
 800de8c:	003f5c06 	br	800dc00 <__alt_data_end+0xfc00dc00>
 800de90:	01403f04 	movi	r5,252
 800de94:	01001f84 	movi	r4,126
 800de98:	003f5906 	br	800dc00 <__alt_data_end+0xfc00dc00>
 800de9c:	98800117 	ldw	r2,4(r19)
 800dea0:	003fa906 	br	800dd48 <__alt_data_end+0xfc00dd48>
 800dea4:	6007883a 	mov	r3,r12
 800dea8:	003ea206 	br	800d934 <__alt_data_end+0xfc00d934>

0800deac <_printf_r>:
 800deac:	defffd04 	addi	sp,sp,-12
 800deb0:	dfc00015 	stw	ra,0(sp)
 800deb4:	d9800115 	stw	r6,4(sp)
 800deb8:	d9c00215 	stw	r7,8(sp)
 800debc:	280d883a 	mov	r6,r5
 800dec0:	21400217 	ldw	r5,8(r4)
 800dec4:	d9c00104 	addi	r7,sp,4
 800dec8:	8011dd80 	call	8011dd8 <___vfprintf_internal_r>
 800decc:	dfc00017 	ldw	ra,0(sp)
 800ded0:	dec00304 	addi	sp,sp,12
 800ded4:	f800283a 	ret

0800ded8 <printf>:
 800ded8:	defffc04 	addi	sp,sp,-16
 800dedc:	dfc00015 	stw	ra,0(sp)
 800dee0:	d9400115 	stw	r5,4(sp)
 800dee4:	d9800215 	stw	r6,8(sp)
 800dee8:	d9c00315 	stw	r7,12(sp)
 800deec:	008200f4 	movhi	r2,2051
 800def0:	10b31604 	addi	r2,r2,-13224
 800def4:	10800017 	ldw	r2,0(r2)
 800def8:	200b883a 	mov	r5,r4
 800defc:	d9800104 	addi	r6,sp,4
 800df00:	11000217 	ldw	r4,8(r2)
 800df04:	8013dd40 	call	8013dd4 <__vfprintf_internal>
 800df08:	dfc00017 	ldw	ra,0(sp)
 800df0c:	dec00404 	addi	sp,sp,16
 800df10:	f800283a 	ret

0800df14 <_putchar_r>:
 800df14:	21800217 	ldw	r6,8(r4)
 800df18:	80185c01 	jmpi	80185c0 <_putc_r>

0800df1c <putchar>:
 800df1c:	008200f4 	movhi	r2,2051
 800df20:	10b31604 	addi	r2,r2,-13224
 800df24:	200b883a 	mov	r5,r4
 800df28:	11000017 	ldw	r4,0(r2)
 800df2c:	21800217 	ldw	r6,8(r4)
 800df30:	80185c01 	jmpi	80185c0 <_putc_r>

0800df34 <_sbrk_r>:
 800df34:	defffd04 	addi	sp,sp,-12
 800df38:	dc000015 	stw	r16,0(sp)
 800df3c:	040200f4 	movhi	r16,2051
 800df40:	dc400115 	stw	r17,4(sp)
 800df44:	843a0e04 	addi	r16,r16,-6088
 800df48:	2023883a 	mov	r17,r4
 800df4c:	2809883a 	mov	r4,r5
 800df50:	dfc00215 	stw	ra,8(sp)
 800df54:	80000015 	stw	zero,0(r16)
 800df58:	801dcac0 	call	801dcac <sbrk>
 800df5c:	00ffffc4 	movi	r3,-1
 800df60:	10c00526 	beq	r2,r3,800df78 <_sbrk_r+0x44>
 800df64:	dfc00217 	ldw	ra,8(sp)
 800df68:	dc400117 	ldw	r17,4(sp)
 800df6c:	dc000017 	ldw	r16,0(sp)
 800df70:	dec00304 	addi	sp,sp,12
 800df74:	f800283a 	ret
 800df78:	80c00017 	ldw	r3,0(r16)
 800df7c:	183ff926 	beq	r3,zero,800df64 <__alt_data_end+0xfc00df64>
 800df80:	88c00015 	stw	r3,0(r17)
 800df84:	003ff706 	br	800df64 <__alt_data_end+0xfc00df64>

0800df88 <_snprintf_r>:
 800df88:	3005883a 	mov	r2,r6
 800df8c:	30003016 	blt	r6,zero,800e050 <_snprintf_r+0xc8>
 800df90:	deffe404 	addi	sp,sp,-112
 800df94:	00c08204 	movi	r3,520
 800df98:	dc001a15 	stw	r16,104(sp)
 800df9c:	dfc01b15 	stw	ra,108(sp)
 800dfa0:	d8c0030d 	sth	r3,12(sp)
 800dfa4:	d9400015 	stw	r5,0(sp)
 800dfa8:	d9400415 	stw	r5,16(sp)
 800dfac:	380d883a 	mov	r6,r7
 800dfb0:	2021883a 	mov	r16,r4
 800dfb4:	10001026 	beq	r2,zero,800dff8 <_snprintf_r+0x70>
 800dfb8:	10bfffc4 	addi	r2,r2,-1
 800dfbc:	d8800215 	stw	r2,8(sp)
 800dfc0:	d8800515 	stw	r2,20(sp)
 800dfc4:	d80b883a 	mov	r5,sp
 800dfc8:	00bfffc4 	movi	r2,-1
 800dfcc:	d9c01c04 	addi	r7,sp,112
 800dfd0:	d880038d 	sth	r2,14(sp)
 800dfd4:	800fdf80 	call	800fdf8 <___svfprintf_internal_r>
 800dfd8:	00ffffc4 	movi	r3,-1
 800dfdc:	10c01916 	blt	r2,r3,800e044 <_snprintf_r+0xbc>
 800dfe0:	d8c00017 	ldw	r3,0(sp)
 800dfe4:	18000005 	stb	zero,0(r3)
 800dfe8:	dfc01b17 	ldw	ra,108(sp)
 800dfec:	dc001a17 	ldw	r16,104(sp)
 800dff0:	dec01c04 	addi	sp,sp,112
 800dff4:	f800283a 	ret
 800dff8:	00bfffc4 	movi	r2,-1
 800dffc:	d80b883a 	mov	r5,sp
 800e000:	d9c01c04 	addi	r7,sp,112
 800e004:	d8000215 	stw	zero,8(sp)
 800e008:	d8000515 	stw	zero,20(sp)
 800e00c:	d880038d 	sth	r2,14(sp)
 800e010:	800fdf80 	call	800fdf8 <___svfprintf_internal_r>
 800e014:	00ffffc4 	movi	r3,-1
 800e018:	10c00416 	blt	r2,r3,800e02c <_snprintf_r+0xa4>
 800e01c:	dfc01b17 	ldw	ra,108(sp)
 800e020:	dc001a17 	ldw	r16,104(sp)
 800e024:	dec01c04 	addi	sp,sp,112
 800e028:	f800283a 	ret
 800e02c:	00c022c4 	movi	r3,139
 800e030:	80c00015 	stw	r3,0(r16)
 800e034:	dfc01b17 	ldw	ra,108(sp)
 800e038:	dc001a17 	ldw	r16,104(sp)
 800e03c:	dec01c04 	addi	sp,sp,112
 800e040:	f800283a 	ret
 800e044:	00c022c4 	movi	r3,139
 800e048:	80c00015 	stw	r3,0(r16)
 800e04c:	003fe406 	br	800dfe0 <__alt_data_end+0xfc00dfe0>
 800e050:	008022c4 	movi	r2,139
 800e054:	20800015 	stw	r2,0(r4)
 800e058:	00bfffc4 	movi	r2,-1
 800e05c:	f800283a 	ret

0800e060 <snprintf>:
 800e060:	deffe304 	addi	sp,sp,-116
 800e064:	dfc01b15 	stw	ra,108(sp)
 800e068:	dc001a15 	stw	r16,104(sp)
 800e06c:	d9c01c15 	stw	r7,112(sp)
 800e070:	008200f4 	movhi	r2,2051
 800e074:	10b31604 	addi	r2,r2,-13224
 800e078:	14000017 	ldw	r16,0(r2)
 800e07c:	28002d16 	blt	r5,zero,800e134 <snprintf+0xd4>
 800e080:	00c08204 	movi	r3,520
 800e084:	d8c0030d 	sth	r3,12(sp)
 800e088:	d9000015 	stw	r4,0(sp)
 800e08c:	d9000415 	stw	r4,16(sp)
 800e090:	28001126 	beq	r5,zero,800e0d8 <snprintf+0x78>
 800e094:	28bfffc4 	addi	r2,r5,-1
 800e098:	d8800215 	stw	r2,8(sp)
 800e09c:	d8800515 	stw	r2,20(sp)
 800e0a0:	8009883a 	mov	r4,r16
 800e0a4:	00bfffc4 	movi	r2,-1
 800e0a8:	d80b883a 	mov	r5,sp
 800e0ac:	d9c01c04 	addi	r7,sp,112
 800e0b0:	d880038d 	sth	r2,14(sp)
 800e0b4:	800fdf80 	call	800fdf8 <___svfprintf_internal_r>
 800e0b8:	00ffffc4 	movi	r3,-1
 800e0bc:	10c01a16 	blt	r2,r3,800e128 <snprintf+0xc8>
 800e0c0:	d8c00017 	ldw	r3,0(sp)
 800e0c4:	18000005 	stb	zero,0(r3)
 800e0c8:	dfc01b17 	ldw	ra,108(sp)
 800e0cc:	dc001a17 	ldw	r16,104(sp)
 800e0d0:	dec01d04 	addi	sp,sp,116
 800e0d4:	f800283a 	ret
 800e0d8:	00bfffc4 	movi	r2,-1
 800e0dc:	8009883a 	mov	r4,r16
 800e0e0:	d80b883a 	mov	r5,sp
 800e0e4:	d9c01c04 	addi	r7,sp,112
 800e0e8:	d8000215 	stw	zero,8(sp)
 800e0ec:	d8000515 	stw	zero,20(sp)
 800e0f0:	d880038d 	sth	r2,14(sp)
 800e0f4:	800fdf80 	call	800fdf8 <___svfprintf_internal_r>
 800e0f8:	00ffffc4 	movi	r3,-1
 800e0fc:	10c00416 	blt	r2,r3,800e110 <snprintf+0xb0>
 800e100:	dfc01b17 	ldw	ra,108(sp)
 800e104:	dc001a17 	ldw	r16,104(sp)
 800e108:	dec01d04 	addi	sp,sp,116
 800e10c:	f800283a 	ret
 800e110:	00c022c4 	movi	r3,139
 800e114:	80c00015 	stw	r3,0(r16)
 800e118:	dfc01b17 	ldw	ra,108(sp)
 800e11c:	dc001a17 	ldw	r16,104(sp)
 800e120:	dec01d04 	addi	sp,sp,116
 800e124:	f800283a 	ret
 800e128:	00c022c4 	movi	r3,139
 800e12c:	80c00015 	stw	r3,0(r16)
 800e130:	003fe306 	br	800e0c0 <__alt_data_end+0xfc00e0c0>
 800e134:	008022c4 	movi	r2,139
 800e138:	80800015 	stw	r2,0(r16)
 800e13c:	00bfffc4 	movi	r2,-1
 800e140:	003fef06 	br	800e100 <__alt_data_end+0xfc00e100>

0800e144 <_sprintf_r>:
 800e144:	deffe404 	addi	sp,sp,-112
 800e148:	2807883a 	mov	r3,r5
 800e14c:	dfc01a15 	stw	ra,104(sp)
 800e150:	d9c01b15 	stw	r7,108(sp)
 800e154:	00a00034 	movhi	r2,32768
 800e158:	10bfffc4 	addi	r2,r2,-1
 800e15c:	02008204 	movi	r8,520
 800e160:	d8800215 	stw	r2,8(sp)
 800e164:	d8800515 	stw	r2,20(sp)
 800e168:	d80b883a 	mov	r5,sp
 800e16c:	d9c01b04 	addi	r7,sp,108
 800e170:	00bfffc4 	movi	r2,-1
 800e174:	d8c00015 	stw	r3,0(sp)
 800e178:	d8c00415 	stw	r3,16(sp)
 800e17c:	da00030d 	sth	r8,12(sp)
 800e180:	d880038d 	sth	r2,14(sp)
 800e184:	800fdf80 	call	800fdf8 <___svfprintf_internal_r>
 800e188:	d8c00017 	ldw	r3,0(sp)
 800e18c:	18000005 	stb	zero,0(r3)
 800e190:	dfc01a17 	ldw	ra,104(sp)
 800e194:	dec01c04 	addi	sp,sp,112
 800e198:	f800283a 	ret

0800e19c <sprintf>:
 800e19c:	deffe304 	addi	sp,sp,-116
 800e1a0:	2007883a 	mov	r3,r4
 800e1a4:	dfc01a15 	stw	ra,104(sp)
 800e1a8:	d9801b15 	stw	r6,108(sp)
 800e1ac:	d9c01c15 	stw	r7,112(sp)
 800e1b0:	010200f4 	movhi	r4,2051
 800e1b4:	21331604 	addi	r4,r4,-13224
 800e1b8:	21000017 	ldw	r4,0(r4)
 800e1bc:	00a00034 	movhi	r2,32768
 800e1c0:	10bfffc4 	addi	r2,r2,-1
 800e1c4:	280d883a 	mov	r6,r5
 800e1c8:	02008204 	movi	r8,520
 800e1cc:	d8800215 	stw	r2,8(sp)
 800e1d0:	d8800515 	stw	r2,20(sp)
 800e1d4:	d80b883a 	mov	r5,sp
 800e1d8:	d9c01b04 	addi	r7,sp,108
 800e1dc:	00bfffc4 	movi	r2,-1
 800e1e0:	d8c00015 	stw	r3,0(sp)
 800e1e4:	d8c00415 	stw	r3,16(sp)
 800e1e8:	da00030d 	sth	r8,12(sp)
 800e1ec:	d880038d 	sth	r2,14(sp)
 800e1f0:	800fdf80 	call	800fdf8 <___svfprintf_internal_r>
 800e1f4:	d8c00017 	ldw	r3,0(sp)
 800e1f8:	18000005 	stb	zero,0(r3)
 800e1fc:	dfc01a17 	ldw	ra,104(sp)
 800e200:	dec01d04 	addi	sp,sp,116
 800e204:	f800283a 	ret

0800e208 <strcat>:
 800e208:	defffe04 	addi	sp,sp,-8
 800e20c:	dc000015 	stw	r16,0(sp)
 800e210:	dfc00115 	stw	ra,4(sp)
 800e214:	208000cc 	andi	r2,r4,3
 800e218:	2021883a 	mov	r16,r4
 800e21c:	1000111e 	bne	r2,zero,800e264 <strcat+0x5c>
 800e220:	20800017 	ldw	r2,0(r4)
 800e224:	027fbff4 	movhi	r9,65279
 800e228:	4a7fbfc4 	addi	r9,r9,-257
 800e22c:	0086303a 	nor	r3,zero,r2
 800e230:	02202074 	movhi	r8,32897
 800e234:	1245883a 	add	r2,r2,r9
 800e238:	42202004 	addi	r8,r8,-32640
 800e23c:	10c4703a 	and	r2,r2,r3
 800e240:	1204703a 	and	r2,r2,r8
 800e244:	1000071e 	bne	r2,zero,800e264 <strcat+0x5c>
 800e248:	21000104 	addi	r4,r4,4
 800e24c:	21800017 	ldw	r6,0(r4)
 800e250:	324f883a 	add	r7,r6,r9
 800e254:	018c303a 	nor	r6,zero,r6
 800e258:	398c703a 	and	r6,r7,r6
 800e25c:	320c703a 	and	r6,r6,r8
 800e260:	303ff926 	beq	r6,zero,800e248 <__alt_data_end+0xfc00e248>
 800e264:	20800007 	ldb	r2,0(r4)
 800e268:	10000326 	beq	r2,zero,800e278 <strcat+0x70>
 800e26c:	21000044 	addi	r4,r4,1
 800e270:	21800007 	ldb	r6,0(r4)
 800e274:	303ffd1e 	bne	r6,zero,800e26c <__alt_data_end+0xfc00e26c>
 800e278:	800e3340 	call	800e334 <strcpy>
 800e27c:	8005883a 	mov	r2,r16
 800e280:	dfc00117 	ldw	ra,4(sp)
 800e284:	dc000017 	ldw	r16,0(sp)
 800e288:	dec00204 	addi	sp,sp,8
 800e28c:	f800283a 	ret

0800e290 <strcmp>:
 800e290:	2144b03a 	or	r2,r4,r5
 800e294:	108000cc 	andi	r2,r2,3
 800e298:	1000171e 	bne	r2,zero,800e2f8 <strcmp+0x68>
 800e29c:	20800017 	ldw	r2,0(r4)
 800e2a0:	28c00017 	ldw	r3,0(r5)
 800e2a4:	10c0141e 	bne	r2,r3,800e2f8 <strcmp+0x68>
 800e2a8:	027fbff4 	movhi	r9,65279
 800e2ac:	4a7fbfc4 	addi	r9,r9,-257
 800e2b0:	0086303a 	nor	r3,zero,r2
 800e2b4:	02202074 	movhi	r8,32897
 800e2b8:	1245883a 	add	r2,r2,r9
 800e2bc:	42202004 	addi	r8,r8,-32640
 800e2c0:	10c4703a 	and	r2,r2,r3
 800e2c4:	1204703a 	and	r2,r2,r8
 800e2c8:	10000226 	beq	r2,zero,800e2d4 <strcmp+0x44>
 800e2cc:	00001706 	br	800e32c <strcmp+0x9c>
 800e2d0:	1000161e 	bne	r2,zero,800e32c <strcmp+0x9c>
 800e2d4:	21000104 	addi	r4,r4,4
 800e2d8:	20c00017 	ldw	r3,0(r4)
 800e2dc:	29400104 	addi	r5,r5,4
 800e2e0:	29800017 	ldw	r6,0(r5)
 800e2e4:	1a4f883a 	add	r7,r3,r9
 800e2e8:	00c4303a 	nor	r2,zero,r3
 800e2ec:	3884703a 	and	r2,r7,r2
 800e2f0:	1204703a 	and	r2,r2,r8
 800e2f4:	19bff626 	beq	r3,r6,800e2d0 <__alt_data_end+0xfc00e2d0>
 800e2f8:	20800007 	ldb	r2,0(r4)
 800e2fc:	1000051e 	bne	r2,zero,800e314 <strcmp+0x84>
 800e300:	00000606 	br	800e31c <strcmp+0x8c>
 800e304:	21000044 	addi	r4,r4,1
 800e308:	20800007 	ldb	r2,0(r4)
 800e30c:	29400044 	addi	r5,r5,1
 800e310:	10000226 	beq	r2,zero,800e31c <strcmp+0x8c>
 800e314:	28c00007 	ldb	r3,0(r5)
 800e318:	10fffa26 	beq	r2,r3,800e304 <__alt_data_end+0xfc00e304>
 800e31c:	20800003 	ldbu	r2,0(r4)
 800e320:	28c00003 	ldbu	r3,0(r5)
 800e324:	10c5c83a 	sub	r2,r2,r3
 800e328:	f800283a 	ret
 800e32c:	0005883a 	mov	r2,zero
 800e330:	f800283a 	ret

0800e334 <strcpy>:
 800e334:	2906b03a 	or	r3,r5,r4
 800e338:	18c000cc 	andi	r3,r3,3
 800e33c:	2005883a 	mov	r2,r4
 800e340:	1800161e 	bne	r3,zero,800e39c <strcpy+0x68>
 800e344:	29c00017 	ldw	r7,0(r5)
 800e348:	02ffbff4 	movhi	r11,65279
 800e34c:	5affbfc4 	addi	r11,r11,-257
 800e350:	02a02074 	movhi	r10,32897
 800e354:	01c8303a 	nor	r4,zero,r7
 800e358:	3ac7883a 	add	r3,r7,r11
 800e35c:	52a02004 	addi	r10,r10,-32640
 800e360:	20c6703a 	and	r3,r4,r3
 800e364:	1a86703a 	and	r3,r3,r10
 800e368:	18000c1e 	bne	r3,zero,800e39c <strcpy+0x68>
 800e36c:	1011883a 	mov	r8,r2
 800e370:	41c00015 	stw	r7,0(r8)
 800e374:	29400104 	addi	r5,r5,4
 800e378:	29c00017 	ldw	r7,0(r5)
 800e37c:	41800104 	addi	r6,r8,4
 800e380:	3011883a 	mov	r8,r6
 800e384:	01d2303a 	nor	r9,zero,r7
 800e388:	3ac7883a 	add	r3,r7,r11
 800e38c:	48c6703a 	and	r3,r9,r3
 800e390:	1a86703a 	and	r3,r3,r10
 800e394:	183ff626 	beq	r3,zero,800e370 <__alt_data_end+0xfc00e370>
 800e398:	00000106 	br	800e3a0 <strcpy+0x6c>
 800e39c:	100d883a 	mov	r6,r2
 800e3a0:	28c00003 	ldbu	r3,0(r5)
 800e3a4:	31800044 	addi	r6,r6,1
 800e3a8:	29400044 	addi	r5,r5,1
 800e3ac:	30ffffc5 	stb	r3,-1(r6)
 800e3b0:	18c03fcc 	andi	r3,r3,255
 800e3b4:	18c0201c 	xori	r3,r3,128
 800e3b8:	18ffe004 	addi	r3,r3,-128
 800e3bc:	183ff81e 	bne	r3,zero,800e3a0 <__alt_data_end+0xfc00e3a0>
 800e3c0:	f800283a 	ret

0800e3c4 <strlen>:
 800e3c4:	208000cc 	andi	r2,r4,3
 800e3c8:	10002026 	beq	r2,zero,800e44c <strlen+0x88>
 800e3cc:	20800007 	ldb	r2,0(r4)
 800e3d0:	10002026 	beq	r2,zero,800e454 <strlen+0x90>
 800e3d4:	2005883a 	mov	r2,r4
 800e3d8:	00000206 	br	800e3e4 <strlen+0x20>
 800e3dc:	10c00007 	ldb	r3,0(r2)
 800e3e0:	18001826 	beq	r3,zero,800e444 <strlen+0x80>
 800e3e4:	10800044 	addi	r2,r2,1
 800e3e8:	10c000cc 	andi	r3,r2,3
 800e3ec:	183ffb1e 	bne	r3,zero,800e3dc <__alt_data_end+0xfc00e3dc>
 800e3f0:	10c00017 	ldw	r3,0(r2)
 800e3f4:	01ffbff4 	movhi	r7,65279
 800e3f8:	39ffbfc4 	addi	r7,r7,-257
 800e3fc:	00ca303a 	nor	r5,zero,r3
 800e400:	01a02074 	movhi	r6,32897
 800e404:	19c7883a 	add	r3,r3,r7
 800e408:	31a02004 	addi	r6,r6,-32640
 800e40c:	1946703a 	and	r3,r3,r5
 800e410:	1986703a 	and	r3,r3,r6
 800e414:	1800091e 	bne	r3,zero,800e43c <strlen+0x78>
 800e418:	10800104 	addi	r2,r2,4
 800e41c:	10c00017 	ldw	r3,0(r2)
 800e420:	19cb883a 	add	r5,r3,r7
 800e424:	00c6303a 	nor	r3,zero,r3
 800e428:	28c6703a 	and	r3,r5,r3
 800e42c:	1986703a 	and	r3,r3,r6
 800e430:	183ff926 	beq	r3,zero,800e418 <__alt_data_end+0xfc00e418>
 800e434:	00000106 	br	800e43c <strlen+0x78>
 800e438:	10800044 	addi	r2,r2,1
 800e43c:	10c00007 	ldb	r3,0(r2)
 800e440:	183ffd1e 	bne	r3,zero,800e438 <__alt_data_end+0xfc00e438>
 800e444:	1105c83a 	sub	r2,r2,r4
 800e448:	f800283a 	ret
 800e44c:	2005883a 	mov	r2,r4
 800e450:	003fe706 	br	800e3f0 <__alt_data_end+0xfc00e3f0>
 800e454:	0005883a 	mov	r2,zero
 800e458:	f800283a 	ret

0800e45c <_strtod_r>:
 800e45c:	deffe104 	addi	sp,sp,-124
 800e460:	dd801b15 	stw	r22,108(sp)
 800e464:	dc001515 	stw	r16,84(sp)
 800e468:	d9400615 	stw	r5,24(sp)
 800e46c:	dfc01e15 	stw	ra,120(sp)
 800e470:	df001d15 	stw	fp,116(sp)
 800e474:	ddc01c15 	stw	r23,112(sp)
 800e478:	dd401a15 	stw	r21,104(sp)
 800e47c:	dd001915 	stw	r20,100(sp)
 800e480:	dcc01815 	stw	r19,96(sp)
 800e484:	dc801715 	stw	r18,92(sp)
 800e488:	dc401615 	stw	r17,88(sp)
 800e48c:	2021883a 	mov	r16,r4
 800e490:	2809883a 	mov	r4,r5
 800e494:	20800003 	ldbu	r2,0(r4)
 800e498:	01c20074 	movhi	r7,2049
 800e49c:	282d883a 	mov	r22,r5
 800e4a0:	d9800c15 	stw	r6,48(sp)
 800e4a4:	d8000815 	stw	zero,32(sp)
 800e4a8:	d8000715 	stw	zero,28(sp)
 800e4ac:	01400b44 	movi	r5,45
 800e4b0:	10c03fcc 	andi	r3,r2,255
 800e4b4:	39f93304 	addi	r7,r7,-6964
 800e4b8:	28c0bc36 	bltu	r5,r3,800e7ac <_strtod_r+0x350>
 800e4bc:	180690ba 	slli	r3,r3,2
 800e4c0:	19c7883a 	add	r3,r3,r7
 800e4c4:	18c00017 	ldw	r3,0(r3)
 800e4c8:	1800683a 	jmp	r3
 800e4cc:	0800e58c 	andi	zero,at,918
 800e4d0:	0800e7ac 	andhi	zero,at,926
 800e4d4:	0800e7ac 	andhi	zero,at,926
 800e4d8:	0800e7ac 	andhi	zero,at,926
 800e4dc:	0800e7ac 	andhi	zero,at,926
 800e4e0:	0800e7ac 	andhi	zero,at,926
 800e4e4:	0800e7ac 	andhi	zero,at,926
 800e4e8:	0800e7ac 	andhi	zero,at,926
 800e4ec:	0800e7ac 	andhi	zero,at,926
 800e4f0:	0800e798 	cmpnei	zero,at,926
 800e4f4:	0800e798 	cmpnei	zero,at,926
 800e4f8:	0800e798 	cmpnei	zero,at,926
 800e4fc:	0800e798 	cmpnei	zero,at,926
 800e500:	0800e798 	cmpnei	zero,at,926
 800e504:	0800e7ac 	andhi	zero,at,926
 800e508:	0800e7ac 	andhi	zero,at,926
 800e50c:	0800e7ac 	andhi	zero,at,926
 800e510:	0800e7ac 	andhi	zero,at,926
 800e514:	0800e7ac 	andhi	zero,at,926
 800e518:	0800e7ac 	andhi	zero,at,926
 800e51c:	0800e7ac 	andhi	zero,at,926
 800e520:	0800e7ac 	andhi	zero,at,926
 800e524:	0800e7ac 	andhi	zero,at,926
 800e528:	0800e7ac 	andhi	zero,at,926
 800e52c:	0800e7ac 	andhi	zero,at,926
 800e530:	0800e7ac 	andhi	zero,at,926
 800e534:	0800e7ac 	andhi	zero,at,926
 800e538:	0800e7ac 	andhi	zero,at,926
 800e53c:	0800e7ac 	andhi	zero,at,926
 800e540:	0800e7ac 	andhi	zero,at,926
 800e544:	0800e7ac 	andhi	zero,at,926
 800e548:	0800e7ac 	andhi	zero,at,926
 800e54c:	0800e798 	cmpnei	zero,at,926
 800e550:	0800e7ac 	andhi	zero,at,926
 800e554:	0800e7ac 	andhi	zero,at,926
 800e558:	0800e7ac 	andhi	zero,at,926
 800e55c:	0800e7ac 	andhi	zero,at,926
 800e560:	0800e7ac 	andhi	zero,at,926
 800e564:	0800e7ac 	andhi	zero,at,926
 800e568:	0800e7ac 	andhi	zero,at,926
 800e56c:	0800e7ac 	andhi	zero,at,926
 800e570:	0800e7ac 	andhi	zero,at,926
 800e574:	0800e7ac 	andhi	zero,at,926
 800e578:	0800e5ec 	andhi	zero,at,919
 800e57c:	0800e7ac 	andhi	zero,at,926
 800e580:	0800e78c 	andi	zero,at,926
 800e584:	00801244 	movi	r2,73
 800e588:	98849c26 	beq	r19,r2,800f7fc <_strtod_r+0x13a0>
 800e58c:	002b883a 	mov	r21,zero
 800e590:	0023883a 	mov	r17,zero
 800e594:	d8800c17 	ldw	r2,48(sp)
 800e598:	10000626 	beq	r2,zero,800e5b4 <_strtod_r+0x158>
 800e59c:	d8001015 	stw	zero,64(sp)
 800e5a0:	d8800c17 	ldw	r2,48(sp)
 800e5a4:	15800015 	stw	r22,0(r2)
 800e5a8:	d8c01017 	ldw	r3,64(sp)
 800e5ac:	18000126 	beq	r3,zero,800e5b4 <_strtod_r+0x158>
 800e5b0:	8c60003c 	xorhi	r17,r17,32768
 800e5b4:	a805883a 	mov	r2,r21
 800e5b8:	8807883a 	mov	r3,r17
 800e5bc:	dfc01e17 	ldw	ra,120(sp)
 800e5c0:	df001d17 	ldw	fp,116(sp)
 800e5c4:	ddc01c17 	ldw	r23,112(sp)
 800e5c8:	dd801b17 	ldw	r22,108(sp)
 800e5cc:	dd401a17 	ldw	r21,104(sp)
 800e5d0:	dd001917 	ldw	r20,100(sp)
 800e5d4:	dcc01817 	ldw	r19,96(sp)
 800e5d8:	dc801717 	ldw	r18,92(sp)
 800e5dc:	dc401617 	ldw	r17,88(sp)
 800e5e0:	dc001517 	ldw	r16,84(sp)
 800e5e4:	dec01f04 	addi	sp,sp,124
 800e5e8:	f800283a 	ret
 800e5ec:	d8001015 	stw	zero,64(sp)
 800e5f0:	24800044 	addi	r18,r4,1
 800e5f4:	dc800615 	stw	r18,24(sp)
 800e5f8:	20800043 	ldbu	r2,1(r4)
 800e5fc:	10c03fcc 	andi	r3,r2,255
 800e600:	18c0201c 	xori	r3,r3,128
 800e604:	18ffe004 	addi	r3,r3,-128
 800e608:	183fe026 	beq	r3,zero,800e58c <__alt_data_end+0xfc00e58c>
 800e60c:	11403fcc 	andi	r5,r2,255
 800e610:	2940201c 	xori	r5,r5,128
 800e614:	297fe004 	addi	r5,r5,-128
 800e618:	00c00c04 	movi	r3,48
 800e61c:	28c0f226 	beq	r5,r3,800e9e8 <_strtod_r+0x58c>
 800e620:	0023883a 	mov	r17,zero
 800e624:	10fff404 	addi	r3,r2,-48
 800e628:	18c03fcc 	andi	r3,r3,255
 800e62c:	01800244 	movi	r6,9
 800e630:	30c3d336 	bltu	r6,r3,800f580 <_strtod_r+0x1124>
 800e634:	91000044 	addi	r4,r18,1
 800e638:	002b883a 	mov	r21,zero
 800e63c:	002f883a 	mov	r23,zero
 800e640:	0029883a 	mov	r20,zero
 800e644:	02000204 	movi	r8,8
 800e648:	024003c4 	movi	r9,15
 800e64c:	45005a16 	blt	r8,r20,800e7b8 <_strtod_r+0x35c>
 800e650:	bdc002a4 	muli	r23,r23,10
 800e654:	10803fcc 	andi	r2,r2,255
 800e658:	1080201c 	xori	r2,r2,128
 800e65c:	10bfe004 	addi	r2,r2,-128
 800e660:	b885883a 	add	r2,r23,r2
 800e664:	15fff404 	addi	r23,r2,-48
 800e668:	d9000615 	stw	r4,24(sp)
 800e66c:	20800003 	ldbu	r2,0(r4)
 800e670:	2039883a 	mov	fp,r4
 800e674:	a5000044 	addi	r20,r20,1
 800e678:	10fff404 	addi	r3,r2,-48
 800e67c:	18c03fcc 	andi	r3,r3,255
 800e680:	21000044 	addi	r4,r4,1
 800e684:	30fff12e 	bgeu	r6,r3,800e64c <__alt_data_end+0xfc00e64c>
 800e688:	14c03fcc 	andi	r19,r2,255
 800e68c:	9cc0201c 	xori	r19,r19,128
 800e690:	9cffe004 	addi	r19,r19,-128
 800e694:	8009883a 	mov	r4,r16
 800e698:	80171040 	call	8017104 <_localeconv_r>
 800e69c:	11400017 	ldw	r5,0(r2)
 800e6a0:	8009883a 	mov	r4,r16
 800e6a4:	d9401315 	stw	r5,76(sp)
 800e6a8:	80171040 	call	8017104 <_localeconv_r>
 800e6ac:	11000017 	ldw	r4,0(r2)
 800e6b0:	800e3c40 	call	800e3c4 <strlen>
 800e6b4:	d9401317 	ldw	r5,76(sp)
 800e6b8:	e009883a 	mov	r4,fp
 800e6bc:	100d883a 	mov	r6,r2
 800e6c0:	80188640 	call	8018864 <strncmp>
 800e6c4:	1000d926 	beq	r2,zero,800ea2c <_strtod_r+0x5d0>
 800e6c8:	a039883a 	mov	fp,r20
 800e6cc:	000b883a 	mov	r5,zero
 800e6d0:	0011883a 	mov	r8,zero
 800e6d4:	0013883a 	mov	r9,zero
 800e6d8:	00801944 	movi	r2,101
 800e6dc:	98804426 	beq	r19,r2,800e7f0 <_strtod_r+0x394>
 800e6e0:	00801144 	movi	r2,69
 800e6e4:	98804226 	beq	r19,r2,800e7f0 <_strtod_r+0x394>
 800e6e8:	000f883a 	mov	r7,zero
 800e6ec:	e0007f1e 	bne	fp,zero,800e8ec <_strtod_r+0x490>
 800e6f0:	2800391e 	bne	r5,zero,800e7d8 <_strtod_r+0x37c>
 800e6f4:	8800381e 	bne	r17,zero,800e7d8 <_strtod_r+0x37c>
 800e6f8:	4800b71e 	bne	r9,zero,800e9d8 <_strtod_r+0x57c>
 800e6fc:	00801384 	movi	r2,78
 800e700:	98800526 	beq	r19,r2,800e718 <_strtod_r+0x2bc>
 800e704:	14ff9f0e 	bge	r2,r19,800e584 <__alt_data_end+0xfc00e584>
 800e708:	00801a44 	movi	r2,105
 800e70c:	98843b26 	beq	r19,r2,800f7fc <_strtod_r+0x13a0>
 800e710:	00801b84 	movi	r2,110
 800e714:	98bf9d1e 	bne	r19,r2,800e58c <__alt_data_end+0xfc00e58c>
 800e718:	014200f4 	movhi	r5,2051
 800e71c:	d9000617 	ldw	r4,24(sp)
 800e720:	296b0004 	addi	r5,r5,-21504
 800e724:	01c00644 	movi	r7,25
 800e728:	00000b06 	br	800e758 <_strtod_r+0x2fc>
 800e72c:	21000044 	addi	r4,r4,1
 800e730:	20800003 	ldbu	r2,0(r4)
 800e734:	10ffefc4 	addi	r3,r2,-65
 800e738:	10803fcc 	andi	r2,r2,255
 800e73c:	1080201c 	xori	r2,r2,128
 800e740:	18c03fcc 	andi	r3,r3,255
 800e744:	10bfe004 	addi	r2,r2,-128
 800e748:	38c00136 	bltu	r7,r3,800e750 <_strtod_r+0x2f4>
 800e74c:	10800804 	addi	r2,r2,32
 800e750:	29400044 	addi	r5,r5,1
 800e754:	11bf8d1e 	bne	r2,r6,800e58c <__alt_data_end+0xfc00e58c>
 800e758:	29800007 	ldb	r6,0(r5)
 800e75c:	303ff31e 	bne	r6,zero,800e72c <__alt_data_end+0xfc00e72c>
 800e760:	20800044 	addi	r2,r4,1
 800e764:	d8800615 	stw	r2,24(sp)
 800e768:	20c00047 	ldb	r3,1(r4)
 800e76c:	00800a04 	movi	r2,40
 800e770:	18846d26 	beq	r3,r2,800f928 <_strtod_r+0x14cc>
 800e774:	013ffe34 	movhi	r4,65528
 800e778:	d9000715 	stw	r4,28(sp)
 800e77c:	d8000815 	stw	zero,32(sp)
 800e780:	dd400817 	ldw	r21,32(sp)
 800e784:	dc400717 	ldw	r17,28(sp)
 800e788:	00001506 	br	800e7e0 <_strtod_r+0x384>
 800e78c:	00800044 	movi	r2,1
 800e790:	d8801015 	stw	r2,64(sp)
 800e794:	003f9606 	br	800e5f0 <__alt_data_end+0xfc00e5f0>
 800e798:	21000044 	addi	r4,r4,1
 800e79c:	d9000615 	stw	r4,24(sp)
 800e7a0:	20800003 	ldbu	r2,0(r4)
 800e7a4:	10c03fcc 	andi	r3,r2,255
 800e7a8:	28ff442e 	bgeu	r5,r3,800e4bc <__alt_data_end+0xfc00e4bc>
 800e7ac:	2025883a 	mov	r18,r4
 800e7b0:	d8001015 	stw	zero,64(sp)
 800e7b4:	003f9506 	br	800e60c <__alt_data_end+0xfc00e60c>
 800e7b8:	4d3fab16 	blt	r9,r20,800e668 <__alt_data_end+0xfc00e668>
 800e7bc:	ad4002a4 	muli	r21,r21,10
 800e7c0:	10c03fcc 	andi	r3,r2,255
 800e7c4:	18c0201c 	xori	r3,r3,128
 800e7c8:	18ffe004 	addi	r3,r3,-128
 800e7cc:	a8eb883a 	add	r21,r21,r3
 800e7d0:	ad7ff404 	addi	r21,r21,-48
 800e7d4:	003fa406 	br	800e668 <__alt_data_end+0xfc00e668>
 800e7d8:	002b883a 	mov	r21,zero
 800e7dc:	0023883a 	mov	r17,zero
 800e7e0:	d9000c17 	ldw	r4,48(sp)
 800e7e4:	203f7026 	beq	r4,zero,800e5a8 <__alt_data_end+0xfc00e5a8>
 800e7e8:	dd800617 	ldw	r22,24(sp)
 800e7ec:	003f6c06 	br	800e5a0 <__alt_data_end+0xfc00e5a0>
 800e7f0:	e0007726 	beq	fp,zero,800e9d0 <_strtod_r+0x574>
 800e7f4:	dd800617 	ldw	r22,24(sp)
 800e7f8:	00c00ac4 	movi	r3,43
 800e7fc:	b0800044 	addi	r2,r22,1
 800e800:	d8800615 	stw	r2,24(sp)
 800e804:	b0800047 	ldb	r2,1(r22)
 800e808:	10c25726 	beq	r2,r3,800f168 <_strtod_r+0xd0c>
 800e80c:	00c00b44 	movi	r3,45
 800e810:	10c25026 	beq	r2,r3,800f154 <_strtod_r+0xcf8>
 800e814:	1027883a 	mov	r19,r2
 800e818:	000f883a 	mov	r7,zero
 800e81c:	98fff404 	addi	r3,r19,-48
 800e820:	01000244 	movi	r4,9
 800e824:	9805883a 	mov	r2,r19
 800e828:	20c23836 	bltu	r4,r3,800f10c <_strtod_r+0xcb0>
 800e82c:	00c00c04 	movi	r3,48
 800e830:	98c0071e 	bne	r19,r3,800e850 <_strtod_r+0x3f4>
 800e834:	d8c00617 	ldw	r3,24(sp)
 800e838:	18c00044 	addi	r3,r3,1
 800e83c:	d8c00615 	stw	r3,24(sp)
 800e840:	18800007 	ldb	r2,0(r3)
 800e844:	18c00044 	addi	r3,r3,1
 800e848:	14fffc26 	beq	r2,r19,800e83c <__alt_data_end+0xfc00e83c>
 800e84c:	1027883a 	mov	r19,r2
 800e850:	10bff3c4 	addi	r2,r2,-49
 800e854:	00c00204 	movi	r3,8
 800e858:	18bfa336 	bltu	r3,r2,800e6e8 <__alt_data_end+0xfc00e6e8>
 800e85c:	db000617 	ldw	r12,24(sp)
 800e860:	98bff404 	addi	r2,r19,-48
 800e864:	02c00244 	movi	r11,9
 800e868:	62800044 	addi	r10,r12,1
 800e86c:	da800615 	stw	r10,24(sp)
 800e870:	64c00043 	ldbu	r19,1(r12)
 800e874:	98fff404 	addi	r3,r19,-48
 800e878:	9cc03fcc 	andi	r19,r19,255
 800e87c:	9cc0201c 	xori	r19,r19,128
 800e880:	18c03fcc 	andi	r3,r3,255
 800e884:	9cffe004 	addi	r19,r19,-128
 800e888:	58c00e36 	bltu	r11,r3,800e8c4 <_strtod_r+0x468>
 800e88c:	61000084 	addi	r4,r12,2
 800e890:	d9000615 	stw	r4,24(sp)
 800e894:	108002a4 	muli	r2,r2,10
 800e898:	21800003 	ldbu	r6,0(r4)
 800e89c:	2015883a 	mov	r10,r4
 800e8a0:	14e7883a 	add	r19,r2,r19
 800e8a4:	30fff404 	addi	r3,r6,-48
 800e8a8:	98bff404 	addi	r2,r19,-48
 800e8ac:	34c03fcc 	andi	r19,r6,255
 800e8b0:	9cc0201c 	xori	r19,r19,128
 800e8b4:	18c03fcc 	andi	r3,r3,255
 800e8b8:	9cffe004 	addi	r19,r19,-128
 800e8bc:	21000044 	addi	r4,r4,1
 800e8c0:	58fff32e 	bgeu	r11,r3,800e890 <__alt_data_end+0xfc00e890>
 800e8c4:	5315c83a 	sub	r10,r10,r12
 800e8c8:	00c00204 	movi	r3,8
 800e8cc:	1a832a16 	blt	r3,r10,800f578 <_strtod_r+0x111c>
 800e8d0:	00d387c4 	movi	r3,19999
 800e8d4:	1880010e 	bge	r3,r2,800e8dc <_strtod_r+0x480>
 800e8d8:	1805883a 	mov	r2,r3
 800e8dc:	01c7c83a 	sub	r3,zero,r7
 800e8e0:	10c4f03a 	xor	r2,r2,r3
 800e8e4:	11cf883a 	add	r7,r2,r7
 800e8e8:	e03f8126 	beq	fp,zero,800e6f0 <__alt_data_end+0xfc00e6f0>
 800e8ec:	3a11c83a 	sub	r8,r7,r8
 800e8f0:	da000e15 	stw	r8,56(sp)
 800e8f4:	a000011e 	bne	r20,zero,800e8fc <_strtod_r+0x4a0>
 800e8f8:	e029883a 	mov	r20,fp
 800e8fc:	00800404 	movi	r2,16
 800e900:	e023883a 	mov	r17,fp
 800e904:	1700010e 	bge	r2,fp,800e90c <_strtod_r+0x4b0>
 800e908:	1023883a 	mov	r17,r2
 800e90c:	b809883a 	mov	r4,r23
 800e910:	801d2680 	call	801d268 <__floatunsidf>
 800e914:	d8800815 	stw	r2,32(sp)
 800e918:	d8c00715 	stw	r3,28(sp)
 800e91c:	00800244 	movi	r2,9
 800e920:	1440150e 	bge	r2,r17,800e978 <_strtod_r+0x51c>
 800e924:	88bffdc4 	addi	r2,r17,-9
 800e928:	100490fa 	slli	r2,r2,3
 800e92c:	180b883a 	mov	r5,r3
 800e930:	00c200f4 	movhi	r3,2051
 800e934:	18ebf104 	addi	r3,r3,-20540
 800e938:	1885883a 	add	r2,r3,r2
 800e93c:	d9000817 	ldw	r4,32(sp)
 800e940:	11800017 	ldw	r6,0(r2)
 800e944:	11c00117 	ldw	r7,4(r2)
 800e948:	800c2540 	call	800c254 <__muldf3>
 800e94c:	a809883a 	mov	r4,r21
 800e950:	102d883a 	mov	r22,r2
 800e954:	1827883a 	mov	r19,r3
 800e958:	801d2680 	call	801d268 <__floatunsidf>
 800e95c:	b009883a 	mov	r4,r22
 800e960:	980b883a 	mov	r5,r19
 800e964:	100d883a 	mov	r6,r2
 800e968:	180f883a 	mov	r7,r3
 800e96c:	800aea80 	call	800aea8 <__adddf3>
 800e970:	d8800815 	stw	r2,32(sp)
 800e974:	d8c00715 	stw	r3,28(sp)
 800e978:	008003c4 	movi	r2,15
 800e97c:	17004916 	blt	r2,fp,800eaa4 <_strtod_r+0x648>
 800e980:	d8c00e17 	ldw	r3,56(sp)
 800e984:	183f7e26 	beq	r3,zero,800e780 <__alt_data_end+0xfc00e780>
 800e988:	d9000e17 	ldw	r4,56(sp)
 800e98c:	0103730e 	bge	zero,r4,800f75c <_strtod_r+0x1300>
 800e990:	00c00584 	movi	r3,22
 800e994:	19030216 	blt	r3,r4,800f5a0 <_strtod_r+0x1144>
 800e998:	200490fa 	slli	r2,r4,3
 800e99c:	00c200f4 	movhi	r3,2051
 800e9a0:	18ebf104 	addi	r3,r3,-20540
 800e9a4:	1885883a 	add	r2,r3,r2
 800e9a8:	d9800817 	ldw	r6,32(sp)
 800e9ac:	d9c00717 	ldw	r7,28(sp)
 800e9b0:	11000017 	ldw	r4,0(r2)
 800e9b4:	11400117 	ldw	r5,4(r2)
 800e9b8:	800c2540 	call	800c254 <__muldf3>
 800e9bc:	102b883a 	mov	r21,r2
 800e9c0:	1823883a 	mov	r17,r3
 800e9c4:	003f8606 	br	800e7e0 <__alt_data_end+0xfc00e7e0>
 800e9c8:	0011883a 	mov	r8,zero
 800e9cc:	02400044 	movi	r9,1
 800e9d0:	2800031e 	bne	r5,zero,800e9e0 <_strtod_r+0x584>
 800e9d4:	8800021e 	bne	r17,zero,800e9e0 <_strtod_r+0x584>
 800e9d8:	002b883a 	mov	r21,zero
 800e9dc:	003eed06 	br	800e594 <__alt_data_end+0xfc00e594>
 800e9e0:	0039883a 	mov	fp,zero
 800e9e4:	003f8306 	br	800e7f4 <__alt_data_end+0xfc00e7f4>
 800e9e8:	90800047 	ldb	r2,1(r18)
 800e9ec:	00c01604 	movi	r3,88
 800e9f0:	10c21d26 	beq	r2,r3,800f268 <_strtod_r+0xe0c>
 800e9f4:	00c01e04 	movi	r3,120
 800e9f8:	10c21b26 	beq	r2,r3,800f268 <_strtod_r+0xe0c>
 800e9fc:	90c00044 	addi	r3,r18,1
 800ea00:	1825883a 	mov	r18,r3
 800ea04:	d8c00615 	stw	r3,24(sp)
 800ea08:	18c00044 	addi	r3,r3,1
 800ea0c:	18bfffc3 	ldbu	r2,-1(r3)
 800ea10:	11003fcc 	andi	r4,r2,255
 800ea14:	2100201c 	xori	r4,r4,128
 800ea18:	213fe004 	addi	r4,r4,-128
 800ea1c:	217ff826 	beq	r4,r5,800ea00 <__alt_data_end+0xfc00ea00>
 800ea20:	203f6d26 	beq	r4,zero,800e7d8 <__alt_data_end+0xfc00e7d8>
 800ea24:	04400044 	movi	r17,1
 800ea28:	003efe06 	br	800e624 <__alt_data_end+0xfc00e624>
 800ea2c:	8009883a 	mov	r4,r16
 800ea30:	80171040 	call	8017104 <_localeconv_r>
 800ea34:	11000017 	ldw	r4,0(r2)
 800ea38:	800e3c40 	call	800e3c4 <strlen>
 800ea3c:	d9000617 	ldw	r4,24(sp)
 800ea40:	2085883a 	add	r2,r4,r2
 800ea44:	d8800615 	stw	r2,24(sp)
 800ea48:	14c00007 	ldb	r19,0(r2)
 800ea4c:	a001b21e 	bne	r20,zero,800f118 <_strtod_r+0xcbc>
 800ea50:	00c00c04 	movi	r3,48
 800ea54:	98c3931e 	bne	r19,r3,800f8a4 <_strtod_r+0x1448>
 800ea58:	10c00044 	addi	r3,r2,1
 800ea5c:	9809883a 	mov	r4,r19
 800ea60:	d8c00615 	stw	r3,24(sp)
 800ea64:	1cc00007 	ldb	r19,0(r3)
 800ea68:	188bc83a 	sub	r5,r3,r2
 800ea6c:	18c00044 	addi	r3,r3,1
 800ea70:	993ffb26 	beq	r19,r4,800ea60 <__alt_data_end+0xfc00ea60>
 800ea74:	98bff3c4 	addi	r2,r19,-49
 800ea78:	00c00204 	movi	r3,8
 800ea7c:	1881ee36 	bltu	r3,r2,800f238 <_strtod_r+0xddc>
 800ea80:	dc800617 	ldw	r18,24(sp)
 800ea84:	9cfff404 	addi	r19,r19,-48
 800ea88:	2a000044 	addi	r8,r5,1
 800ea8c:	9009883a 	mov	r4,r18
 800ea90:	07000044 	movi	fp,1
 800ea94:	b88002a4 	muli	r2,r23,10
 800ea98:	000b883a 	mov	r5,zero
 800ea9c:	98af883a 	add	r23,r19,r2
 800eaa0:	0001a806 	br	800f144 <_strtod_r+0xce8>
 800eaa4:	d9000e17 	ldw	r4,56(sp)
 800eaa8:	e463c83a 	sub	r17,fp,r17
 800eaac:	2463883a 	add	r17,r4,r17
 800eab0:	0442670e 	bge	zero,r17,800f450 <_strtod_r+0xff4>
 800eab4:	888003cc 	andi	r2,r17,15
 800eab8:	10000b26 	beq	r2,zero,800eae8 <_strtod_r+0x68c>
 800eabc:	100490fa 	slli	r2,r2,3
 800eac0:	00c200f4 	movhi	r3,2051
 800eac4:	18ebf104 	addi	r3,r3,-20540
 800eac8:	1885883a 	add	r2,r3,r2
 800eacc:	d9800817 	ldw	r6,32(sp)
 800ead0:	d9c00717 	ldw	r7,28(sp)
 800ead4:	11000017 	ldw	r4,0(r2)
 800ead8:	11400117 	ldw	r5,4(r2)
 800eadc:	800c2540 	call	800c254 <__muldf3>
 800eae0:	d8800815 	stw	r2,32(sp)
 800eae4:	d8c00715 	stw	r3,28(sp)
 800eae8:	04fffc04 	movi	r19,-16
 800eaec:	8ce2703a 	and	r17,r17,r19
 800eaf0:	8801a11e 	bne	r17,zero,800f178 <_strtod_r+0xd1c>
 800eaf4:	dd400817 	ldw	r21,32(sp)
 800eaf8:	dc400717 	ldw	r17,28(sp)
 800eafc:	d8001215 	stw	zero,72(sp)
 800eb00:	8009883a 	mov	r4,r16
 800eb04:	ddc00015 	stw	r23,0(sp)
 800eb08:	900b883a 	mov	r5,r18
 800eb0c:	a00d883a 	mov	r6,r20
 800eb10:	e00f883a 	mov	r7,fp
 800eb14:	80178180 	call	8017818 <__s2b>
 800eb18:	d8800d15 	stw	r2,52(sp)
 800eb1c:	d8800e17 	ldw	r2,56(sp)
 800eb20:	d9000d17 	ldw	r4,52(sp)
 800eb24:	dd801217 	ldw	r22,72(sp)
 800eb28:	1007d7fa 	srai	r3,r2,31
 800eb2c:	0085c83a 	sub	r2,zero,r2
 800eb30:	21000304 	addi	r4,r4,12
 800eb34:	1886703a 	and	r3,r3,r2
 800eb38:	d9001115 	stw	r4,68(sp)
 800eb3c:	d8c00915 	stw	r3,36(sp)
 800eb40:	d8800d17 	ldw	r2,52(sp)
 800eb44:	8009883a 	mov	r4,r16
 800eb48:	0029883a 	mov	r20,zero
 800eb4c:	11400117 	ldw	r5,4(r2)
 800eb50:	80176340 	call	8017634 <_Balloc>
 800eb54:	d8c00d17 	ldw	r3,52(sp)
 800eb58:	d9401117 	ldw	r5,68(sp)
 800eb5c:	11000304 	addi	r4,r2,12
 800eb60:	19800417 	ldw	r6,16(r3)
 800eb64:	1027883a 	mov	r19,r2
 800eb68:	31800084 	addi	r6,r6,2
 800eb6c:	318d883a 	add	r6,r6,r6
 800eb70:	318d883a 	add	r6,r6,r6
 800eb74:	80173d80 	call	80173d8 <memcpy>
 800eb78:	d8800204 	addi	r2,sp,8
 800eb7c:	8009883a 	mov	r4,r16
 800eb80:	a80b883a 	mov	r5,r21
 800eb84:	880d883a 	mov	r6,r17
 800eb88:	d9c00404 	addi	r7,sp,16
 800eb8c:	d8800015 	stw	r2,0(sp)
 800eb90:	80182680 	call	8018268 <__d2b>
 800eb94:	8009883a 	mov	r4,r16
 800eb98:	01400044 	movi	r5,1
 800eb9c:	d8800515 	stw	r2,20(sp)
 800eba0:	8017a340 	call	8017a34 <__i2b>
 800eba4:	d8c00e17 	ldw	r3,56(sp)
 800eba8:	1025883a 	mov	r18,r2
 800ebac:	00c0010e 	bge	zero,r3,800ebb4 <_strtod_r+0x758>
 800ebb0:	1829883a 	mov	r20,r3
 800ebb4:	d8800417 	ldw	r2,16(sp)
 800ebb8:	1000dc16 	blt	r2,zero,800ef2c <_strtod_r+0xad0>
 800ebbc:	d9000917 	ldw	r4,36(sp)
 800ebc0:	a02f883a 	mov	r23,r20
 800ebc4:	20b9883a 	add	fp,r4,r2
 800ebc8:	d9000217 	ldw	r4,8(sp)
 800ebcc:	1585c83a 	sub	r2,r2,r22
 800ebd0:	00ff00c4 	movi	r3,-1021
 800ebd4:	110b883a 	add	r5,r2,r4
 800ebd8:	28c09e0e 	bge	r5,r3,800ee54 <_strtod_r+0x9f8>
 800ebdc:	10810cc4 	addi	r2,r2,1075
 800ebe0:	e087883a 	add	r3,fp,r2
 800ebe4:	b885883a 	add	r2,r23,r2
 800ebe8:	15af883a 	add	r23,r2,r22
 800ebec:	1805883a 	mov	r2,r3
 800ebf0:	e0c0010e 	bge	fp,r3,800ebf8 <_strtod_r+0x79c>
 800ebf4:	e005883a 	mov	r2,fp
 800ebf8:	b880010e 	bge	r23,r2,800ec00 <_strtod_r+0x7a4>
 800ebfc:	b805883a 	mov	r2,r23
 800ec00:	0080030e 	bge	zero,r2,800ec10 <_strtod_r+0x7b4>
 800ec04:	1887c83a 	sub	r3,r3,r2
 800ec08:	b8afc83a 	sub	r23,r23,r2
 800ec0c:	e0b9c83a 	sub	fp,fp,r2
 800ec10:	d8800917 	ldw	r2,36(sp)
 800ec14:	10001126 	beq	r2,zero,800ec5c <_strtod_r+0x800>
 800ec18:	900b883a 	mov	r5,r18
 800ec1c:	100d883a 	mov	r6,r2
 800ec20:	8009883a 	mov	r4,r16
 800ec24:	d8c01415 	stw	r3,80(sp)
 800ec28:	8017c6c0 	call	8017c6c <__pow5mult>
 800ec2c:	d9800517 	ldw	r6,20(sp)
 800ec30:	8009883a 	mov	r4,r16
 800ec34:	100b883a 	mov	r5,r2
 800ec38:	1025883a 	mov	r18,r2
 800ec3c:	8017a700 	call	8017a70 <__multiply>
 800ec40:	d9400517 	ldw	r5,20(sp)
 800ec44:	8009883a 	mov	r4,r16
 800ec48:	d8801315 	stw	r2,76(sp)
 800ec4c:	80176dc0 	call	80176dc <_Bfree>
 800ec50:	d8801317 	ldw	r2,76(sp)
 800ec54:	d8c01417 	ldw	r3,80(sp)
 800ec58:	d8800515 	stw	r2,20(sp)
 800ec5c:	00c0050e 	bge	zero,r3,800ec74 <_strtod_r+0x818>
 800ec60:	d9400517 	ldw	r5,20(sp)
 800ec64:	8009883a 	mov	r4,r16
 800ec68:	180d883a 	mov	r6,r3
 800ec6c:	8017dac0 	call	8017dac <__lshift>
 800ec70:	d8800515 	stw	r2,20(sp)
 800ec74:	a0000526 	beq	r20,zero,800ec8c <_strtod_r+0x830>
 800ec78:	980b883a 	mov	r5,r19
 800ec7c:	8009883a 	mov	r4,r16
 800ec80:	a00d883a 	mov	r6,r20
 800ec84:	8017c6c0 	call	8017c6c <__pow5mult>
 800ec88:	1027883a 	mov	r19,r2
 800ec8c:	05c0050e 	bge	zero,r23,800eca4 <_strtod_r+0x848>
 800ec90:	980b883a 	mov	r5,r19
 800ec94:	8009883a 	mov	r4,r16
 800ec98:	b80d883a 	mov	r6,r23
 800ec9c:	8017dac0 	call	8017dac <__lshift>
 800eca0:	1027883a 	mov	r19,r2
 800eca4:	0700050e 	bge	zero,fp,800ecbc <_strtod_r+0x860>
 800eca8:	900b883a 	mov	r5,r18
 800ecac:	8009883a 	mov	r4,r16
 800ecb0:	e00d883a 	mov	r6,fp
 800ecb4:	8017dac0 	call	8017dac <__lshift>
 800ecb8:	1025883a 	mov	r18,r2
 800ecbc:	d9400517 	ldw	r5,20(sp)
 800ecc0:	8009883a 	mov	r4,r16
 800ecc4:	980d883a 	mov	r6,r19
 800ecc8:	8017f540 	call	8017f54 <__mdiff>
 800eccc:	10c00317 	ldw	r3,12(r2)
 800ecd0:	1009883a 	mov	r4,r2
 800ecd4:	10000315 	stw	zero,12(r2)
 800ecd8:	900b883a 	mov	r5,r18
 800ecdc:	1029883a 	mov	r20,r2
 800ece0:	d8c00b15 	stw	r3,44(sp)
 800ece4:	8017ef40 	call	8017ef4 <__mcmp>
 800ece8:	10017316 	blt	r2,zero,800f2b8 <_strtod_r+0xe5c>
 800ecec:	1001b526 	beq	r2,zero,800f3c4 <_strtod_r+0xf68>
 800ecf0:	a009883a 	mov	r4,r20
 800ecf4:	900b883a 	mov	r5,r18
 800ecf8:	80183a40 	call	80183a4 <__ratio>
 800ecfc:	1009883a 	mov	r4,r2
 800ed00:	180b883a 	mov	r5,r3
 800ed04:	000d883a 	mov	r6,zero
 800ed08:	01d00034 	movhi	r7,16384
 800ed0c:	182f883a 	mov	r23,r3
 800ed10:	d8801315 	stw	r2,76(sp)
 800ed14:	800c1740 	call	800c174 <__ledf2>
 800ed18:	da001317 	ldw	r8,76(sp)
 800ed1c:	00805016 	blt	zero,r2,800ee60 <_strtod_r+0xa04>
 800ed20:	d9000b17 	ldw	r4,44(sp)
 800ed24:	20008426 	beq	r4,zero,800ef38 <_strtod_r+0xadc>
 800ed28:	05cffc34 	movhi	r23,16368
 800ed2c:	0039883a 	mov	fp,zero
 800ed30:	d8000f15 	stw	zero,60(sp)
 800ed34:	ddc00a15 	stw	r23,40(sp)
 800ed38:	d8800717 	ldw	r2,28(sp)
 800ed3c:	125ffc2c 	andhi	r9,r2,32752
 800ed40:	009ff834 	movhi	r2,32736
 800ed44:	48805626 	beq	r9,r2,800eea0 <_strtod_r+0xa44>
 800ed48:	b0001e26 	beq	r22,zero,800edc4 <_strtod_r+0x968>
 800ed4c:	0081a834 	movhi	r2,1696
 800ed50:	12401c36 	bltu	r2,r9,800edc4 <_strtod_r+0x968>
 800ed54:	d9000f17 	ldw	r4,60(sp)
 800ed58:	d9400a17 	ldw	r5,40(sp)
 800ed5c:	01d07834 	movhi	r7,16864
 800ed60:	39ffffc4 	addi	r7,r7,-1
 800ed64:	01bff034 	movhi	r6,65472
 800ed68:	da401315 	stw	r9,76(sp)
 800ed6c:	800c1740 	call	800c174 <__ledf2>
 800ed70:	da401317 	ldw	r9,76(sp)
 800ed74:	00801016 	blt	zero,r2,800edb8 <_strtod_r+0x95c>
 800ed78:	d9000f17 	ldw	r4,60(sp)
 800ed7c:	d9400a17 	ldw	r5,40(sp)
 800ed80:	801c4c00 	call	801c4c0 <__fixunsdfsi>
 800ed84:	da401317 	ldw	r9,76(sp)
 800ed88:	1000dc26 	beq	r2,zero,800f0fc <_strtod_r+0xca0>
 800ed8c:	1009883a 	mov	r4,r2
 800ed90:	801d2680 	call	801d268 <__floatunsidf>
 800ed94:	da401317 	ldw	r9,76(sp)
 800ed98:	d8800f15 	stw	r2,60(sp)
 800ed9c:	d8c00a15 	stw	r3,40(sp)
 800eda0:	d8c00b17 	ldw	r3,44(sp)
 800eda4:	1800d31e 	bne	r3,zero,800f0f4 <_strtod_r+0xc98>
 800eda8:	d9000a17 	ldw	r4,40(sp)
 800edac:	2220003c 	xorhi	r8,r4,32768
 800edb0:	df000f17 	ldw	fp,60(sp)
 800edb4:	402f883a 	mov	r23,r8
 800edb8:	0081ac34 	movhi	r2,1712
 800edbc:	b891883a 	add	r8,r23,r2
 800edc0:	426fc83a 	sub	r23,r8,r9
 800edc4:	a809883a 	mov	r4,r21
 800edc8:	880b883a 	mov	r5,r17
 800edcc:	da401315 	stw	r9,76(sp)
 800edd0:	80180ec0 	call	80180ec <__ulp>
 800edd4:	b80b883a 	mov	r5,r23
 800edd8:	e009883a 	mov	r4,fp
 800eddc:	100d883a 	mov	r6,r2
 800ede0:	180f883a 	mov	r7,r3
 800ede4:	800c2540 	call	800c254 <__muldf3>
 800ede8:	a809883a 	mov	r4,r21
 800edec:	880b883a 	mov	r5,r17
 800edf0:	100d883a 	mov	r6,r2
 800edf4:	180f883a 	mov	r7,r3
 800edf8:	800aea80 	call	800aea8 <__adddf3>
 800edfc:	da401317 	ldw	r9,76(sp)
 800ee00:	102b883a 	mov	r21,r2
 800ee04:	1823883a 	mov	r17,r3
 800ee08:	d8800815 	stw	r2,32(sp)
 800ee0c:	d8c00715 	stw	r3,28(sp)
 800ee10:	182f883a 	mov	r23,r3
 800ee14:	b000021e 	bne	r22,zero,800ee20 <_strtod_r+0x9c4>
 800ee18:	b89ffc2c 	andhi	r2,r23,32752
 800ee1c:	48806e26 	beq	r9,r2,800efd8 <_strtod_r+0xb7c>
 800ee20:	d9400517 	ldw	r5,20(sp)
 800ee24:	8009883a 	mov	r4,r16
 800ee28:	80176dc0 	call	80176dc <_Bfree>
 800ee2c:	8009883a 	mov	r4,r16
 800ee30:	980b883a 	mov	r5,r19
 800ee34:	80176dc0 	call	80176dc <_Bfree>
 800ee38:	8009883a 	mov	r4,r16
 800ee3c:	900b883a 	mov	r5,r18
 800ee40:	80176dc0 	call	80176dc <_Bfree>
 800ee44:	8009883a 	mov	r4,r16
 800ee48:	a00b883a 	mov	r5,r20
 800ee4c:	80176dc0 	call	80176dc <_Bfree>
 800ee50:	003f3b06 	br	800eb40 <__alt_data_end+0xfc00eb40>
 800ee54:	00c00d84 	movi	r3,54
 800ee58:	1905c83a 	sub	r2,r3,r4
 800ee5c:	003f6006 	br	800ebe0 <__alt_data_end+0xfc00ebe0>
 800ee60:	4009883a 	mov	r4,r8
 800ee64:	b80b883a 	mov	r5,r23
 800ee68:	000d883a 	mov	r6,zero
 800ee6c:	01cff834 	movhi	r7,16352
 800ee70:	800c2540 	call	800c254 <__muldf3>
 800ee74:	d9000b17 	ldw	r4,44(sp)
 800ee78:	d8800f15 	stw	r2,60(sp)
 800ee7c:	d8c00a15 	stw	r3,40(sp)
 800ee80:	2000481e 	bne	r4,zero,800efa4 <_strtod_r+0xb48>
 800ee84:	1a20003c 	xorhi	r8,r3,32768
 800ee88:	1039883a 	mov	fp,r2
 800ee8c:	d8800717 	ldw	r2,28(sp)
 800ee90:	402f883a 	mov	r23,r8
 800ee94:	125ffc2c 	andhi	r9,r2,32752
 800ee98:	009ff834 	movhi	r2,32736
 800ee9c:	48bfaa1e 	bne	r9,r2,800ed48 <__alt_data_end+0xfc00ed48>
 800eea0:	d8c00717 	ldw	r3,28(sp)
 800eea4:	00bf2c34 	movhi	r2,64688
 800eea8:	d9000817 	ldw	r4,32(sp)
 800eeac:	1887883a 	add	r3,r3,r2
 800eeb0:	180b883a 	mov	r5,r3
 800eeb4:	da401315 	stw	r9,76(sp)
 800eeb8:	d8c00715 	stw	r3,28(sp)
 800eebc:	80180ec0 	call	80180ec <__ulp>
 800eec0:	e009883a 	mov	r4,fp
 800eec4:	b80b883a 	mov	r5,r23
 800eec8:	100d883a 	mov	r6,r2
 800eecc:	180f883a 	mov	r7,r3
 800eed0:	800c2540 	call	800c254 <__muldf3>
 800eed4:	d9000817 	ldw	r4,32(sp)
 800eed8:	d9400717 	ldw	r5,28(sp)
 800eedc:	100d883a 	mov	r6,r2
 800eee0:	180f883a 	mov	r7,r3
 800eee4:	800aea80 	call	800aea8 <__adddf3>
 800eee8:	011f2834 	movhi	r4,31904
 800eeec:	d8800815 	stw	r2,32(sp)
 800eef0:	213fffc4 	addi	r4,r4,-1
 800eef4:	189ffc2c 	andhi	r2,r3,32752
 800eef8:	da401317 	ldw	r9,76(sp)
 800eefc:	2080762e 	bgeu	r4,r2,800f0d8 <_strtod_r+0xc7c>
 800ef00:	009ffc34 	movhi	r2,32752
 800ef04:	10bfffc4 	addi	r2,r2,-1
 800ef08:	88814426 	beq	r17,r2,800f41c <_strtod_r+0xfc0>
 800ef0c:	00dffc34 	movhi	r3,32752
 800ef10:	18ffffc4 	addi	r3,r3,-1
 800ef14:	013fffc4 	movi	r4,-1
 800ef18:	d8c00715 	stw	r3,28(sp)
 800ef1c:	d9000815 	stw	r4,32(sp)
 800ef20:	202b883a 	mov	r21,r4
 800ef24:	1823883a 	mov	r17,r3
 800ef28:	003fbd06 	br	800ee20 <__alt_data_end+0xfc00ee20>
 800ef2c:	a0afc83a 	sub	r23,r20,r2
 800ef30:	df000917 	ldw	fp,36(sp)
 800ef34:	003f2406 	br	800ebc8 <__alt_data_end+0xfc00ebc8>
 800ef38:	d8800817 	ldw	r2,32(sp)
 800ef3c:	10001b1e 	bne	r2,zero,800efac <_strtod_r+0xb50>
 800ef40:	d8c00717 	ldw	r3,28(sp)
 800ef44:	01000434 	movhi	r4,16
 800ef48:	213fffc4 	addi	r4,r4,-1
 800ef4c:	1904703a 	and	r2,r3,r4
 800ef50:	10001b1e 	bne	r2,zero,800efc0 <_strtod_r+0xb64>
 800ef54:	4009883a 	mov	r4,r8
 800ef58:	b80b883a 	mov	r5,r23
 800ef5c:	000d883a 	mov	r6,zero
 800ef60:	01cffc34 	movhi	r7,16368
 800ef64:	da001315 	stw	r8,76(sp)
 800ef68:	800c1740 	call	800c174 <__ledf2>
 800ef6c:	da001317 	ldw	r8,76(sp)
 800ef70:	10017b16 	blt	r2,zero,800f560 <_strtod_r+0x1104>
 800ef74:	4009883a 	mov	r4,r8
 800ef78:	b80b883a 	mov	r5,r23
 800ef7c:	000d883a 	mov	r6,zero
 800ef80:	01cff834 	movhi	r7,16352
 800ef84:	800c2540 	call	800c254 <__muldf3>
 800ef88:	d8800f15 	stw	r2,60(sp)
 800ef8c:	d8c00a15 	stw	r3,40(sp)
 800ef90:	102f883a 	mov	r23,r2
 800ef94:	1a20003c 	xorhi	r8,r3,32768
 800ef98:	b839883a 	mov	fp,r23
 800ef9c:	402f883a 	mov	r23,r8
 800efa0:	003f6506 	br	800ed38 <__alt_data_end+0xfc00ed38>
 800efa4:	da000a17 	ldw	r8,40(sp)
 800efa8:	003fb706 	br	800ee88 <__alt_data_end+0xfc00ee88>
 800efac:	d8c00817 	ldw	r3,32(sp)
 800efb0:	00800044 	movi	r2,1
 800efb4:	1880021e 	bne	r3,r2,800efc0 <_strtod_r+0xb64>
 800efb8:	d9000717 	ldw	r4,28(sp)
 800efbc:	2000a426 	beq	r4,zero,800f250 <_strtod_r+0xdf4>
 800efc0:	008ffc34 	movhi	r2,16368
 800efc4:	0039883a 	mov	fp,zero
 800efc8:	05effc34 	movhi	r23,49136
 800efcc:	d8000f15 	stw	zero,60(sp)
 800efd0:	d8800a15 	stw	r2,40(sp)
 800efd4:	003f5806 	br	800ed38 <__alt_data_end+0xfc00ed38>
 800efd8:	d9400a17 	ldw	r5,40(sp)
 800efdc:	d9000f17 	ldw	r4,60(sp)
 800efe0:	800d2480 	call	800d248 <__fixdfsi>
 800efe4:	1009883a 	mov	r4,r2
 800efe8:	800d2d00 	call	800d2d0 <__floatsidf>
 800efec:	d9000f17 	ldw	r4,60(sp)
 800eff0:	d9400a17 	ldw	r5,40(sp)
 800eff4:	100d883a 	mov	r6,r2
 800eff8:	180f883a 	mov	r7,r3
 800effc:	800c9780 	call	800c978 <__subdf3>
 800f000:	1011883a 	mov	r8,r2
 800f004:	d8800b17 	ldw	r2,44(sp)
 800f008:	10001f1e 	bne	r2,zero,800f088 <_strtod_r+0xc2c>
 800f00c:	d9000817 	ldw	r4,32(sp)
 800f010:	20001d1e 	bne	r4,zero,800f088 <_strtod_r+0xc2c>
 800f014:	00800434 	movhi	r2,16
 800f018:	10bfffc4 	addi	r2,r2,-1
 800f01c:	b8ae703a 	and	r23,r23,r2
 800f020:	b800191e 	bne	r23,zero,800f088 <_strtod_r+0xc2c>
 800f024:	01a52834 	movhi	r6,38048
 800f028:	01cff434 	movhi	r7,16336
 800f02c:	318d6544 	addi	r6,r6,13717
 800f030:	39ffffc4 	addi	r7,r7,-1
 800f034:	4009883a 	mov	r4,r8
 800f038:	180b883a 	mov	r5,r3
 800f03c:	800c1740 	call	800c174 <__ledf2>
 800f040:	103f770e 	bge	r2,zero,800ee20 <__alt_data_end+0xfc00ee20>
 800f044:	a02d883a 	mov	r22,r20
 800f048:	d9400517 	ldw	r5,20(sp)
 800f04c:	8009883a 	mov	r4,r16
 800f050:	80176dc0 	call	80176dc <_Bfree>
 800f054:	8009883a 	mov	r4,r16
 800f058:	980b883a 	mov	r5,r19
 800f05c:	80176dc0 	call	80176dc <_Bfree>
 800f060:	8009883a 	mov	r4,r16
 800f064:	900b883a 	mov	r5,r18
 800f068:	80176dc0 	call	80176dc <_Bfree>
 800f06c:	d9400d17 	ldw	r5,52(sp)
 800f070:	8009883a 	mov	r4,r16
 800f074:	80176dc0 	call	80176dc <_Bfree>
 800f078:	8009883a 	mov	r4,r16
 800f07c:	b00b883a 	mov	r5,r22
 800f080:	80176dc0 	call	80176dc <_Bfree>
 800f084:	003dd606 	br	800e7e0 <__alt_data_end+0xfc00e7e0>
 800f088:	01a52834 	movhi	r6,38048
 800f08c:	01cff834 	movhi	r7,16352
 800f090:	4009883a 	mov	r4,r8
 800f094:	180b883a 	mov	r5,r3
 800f098:	318d6544 	addi	r6,r6,13717
 800f09c:	39ffffc4 	addi	r7,r7,-1
 800f0a0:	d8c01415 	stw	r3,80(sp)
 800f0a4:	da001315 	stw	r8,76(sp)
 800f0a8:	800c1740 	call	800c174 <__ledf2>
 800f0ac:	d8c01417 	ldw	r3,80(sp)
 800f0b0:	da001317 	ldw	r8,76(sp)
 800f0b4:	103fe316 	blt	r2,zero,800f044 <__alt_data_end+0xfc00f044>
 800f0b8:	018d6c34 	movhi	r6,13744
 800f0bc:	31b94d44 	addi	r6,r6,-6859
 800f0c0:	4009883a 	mov	r4,r8
 800f0c4:	180b883a 	mov	r5,r3
 800f0c8:	01cff834 	movhi	r7,16352
 800f0cc:	800c0940 	call	800c094 <__gedf2>
 800f0d0:	00bf530e 	bge	zero,r2,800ee20 <__alt_data_end+0xfc00ee20>
 800f0d4:	003fdb06 	br	800f044 <__alt_data_end+0xfc00f044>
 800f0d8:	0080d434 	movhi	r2,848
 800f0dc:	1887883a 	add	r3,r3,r2
 800f0e0:	d8c00715 	stw	r3,28(sp)
 800f0e4:	182f883a 	mov	r23,r3
 800f0e8:	dd400817 	ldw	r21,32(sp)
 800f0ec:	1823883a 	mov	r17,r3
 800f0f0:	003f4806 	br	800ee14 <__alt_data_end+0xfc00ee14>
 800f0f4:	da000a17 	ldw	r8,40(sp)
 800f0f8:	003f2d06 	br	800edb0 <__alt_data_end+0xfc00edb0>
 800f0fc:	008ffc34 	movhi	r2,16368
 800f100:	d8000f15 	stw	zero,60(sp)
 800f104:	d8800a15 	stw	r2,40(sp)
 800f108:	003f2506 	br	800eda0 <__alt_data_end+0xfc00eda0>
 800f10c:	dd800615 	stw	r22,24(sp)
 800f110:	000f883a 	mov	r7,zero
 800f114:	003d7506 	br	800e6ec <__alt_data_end+0xfc00e6ec>
 800f118:	a039883a 	mov	fp,r20
 800f11c:	000b883a 	mov	r5,zero
 800f120:	0011883a 	mov	r8,zero
 800f124:	99bff404 	addi	r6,r19,-48
 800f128:	00800244 	movi	r2,9
 800f12c:	11801036 	bltu	r2,r6,800f170 <_strtod_r+0xd14>
 800f130:	28c00044 	addi	r3,r5,1
 800f134:	3027883a 	mov	r19,r6
 800f138:	3001331e 	bne	r6,zero,800f608 <_strtod_r+0x11ac>
 800f13c:	d9000617 	ldw	r4,24(sp)
 800f140:	180b883a 	mov	r5,r3
 800f144:	20800044 	addi	r2,r4,1
 800f148:	d8800615 	stw	r2,24(sp)
 800f14c:	24c00047 	ldb	r19,1(r4)
 800f150:	003ff406 	br	800f124 <__alt_data_end+0xfc00f124>
 800f154:	01c00044 	movi	r7,1
 800f158:	b0800084 	addi	r2,r22,2
 800f15c:	d8800615 	stw	r2,24(sp)
 800f160:	b4c00087 	ldb	r19,2(r22)
 800f164:	003dad06 	br	800e81c <__alt_data_end+0xfc00e81c>
 800f168:	000f883a 	mov	r7,zero
 800f16c:	003ffa06 	br	800f158 <__alt_data_end+0xfc00f158>
 800f170:	02400044 	movi	r9,1
 800f174:	003d5806 	br	800e6d8 <__alt_data_end+0xfc00e6d8>
 800f178:	00804d04 	movi	r2,308
 800f17c:	1440af16 	blt	r2,r17,800f43c <_strtod_r+0xfe0>
 800f180:	8827d13a 	srai	r19,r17,4
 800f184:	05800044 	movi	r22,1
 800f188:	044200f4 	movhi	r17,2051
 800f18c:	8c6be704 	addi	r17,r17,-20580
 800f190:	b4c1db0e 	bge	r22,r19,800f900 <_strtod_r+0x14a4>
 800f194:	d8800817 	ldw	r2,32(sp)
 800f198:	d8c00717 	ldw	r3,28(sp)
 800f19c:	002b883a 	mov	r21,zero
 800f1a0:	9980004c 	andi	r6,r19,1
 800f1a4:	30000726 	beq	r6,zero,800f1c4 <_strtod_r+0xd68>
 800f1a8:	a80c90fa 	slli	r6,r21,3
 800f1ac:	1009883a 	mov	r4,r2
 800f1b0:	180b883a 	mov	r5,r3
 800f1b4:	8985883a 	add	r2,r17,r6
 800f1b8:	11800017 	ldw	r6,0(r2)
 800f1bc:	11c00117 	ldw	r7,4(r2)
 800f1c0:	800c2540 	call	800c254 <__muldf3>
 800f1c4:	9827d07a 	srai	r19,r19,1
 800f1c8:	ad400044 	addi	r21,r21,1
 800f1cc:	9dbff41e 	bne	r19,r22,800f1a0 <__alt_data_end+0xfc00f1a0>
 800f1d0:	d8800815 	stw	r2,32(sp)
 800f1d4:	d8c00715 	stw	r3,28(sp)
 800f1d8:	a82a90fa 	slli	r21,r21,3
 800f1dc:	d8800717 	ldw	r2,28(sp)
 800f1e0:	d9800817 	ldw	r6,32(sp)
 800f1e4:	8d63883a 	add	r17,r17,r21
 800f1e8:	89000017 	ldw	r4,0(r17)
 800f1ec:	89400117 	ldw	r5,4(r17)
 800f1f0:	01ff2c34 	movhi	r7,64688
 800f1f4:	11cf883a 	add	r7,r2,r7
 800f1f8:	800c2540 	call	800c254 <__muldf3>
 800f1fc:	d8800815 	stw	r2,32(sp)
 800f200:	011f2834 	movhi	r4,31904
 800f204:	189ffc2c 	andhi	r2,r3,32752
 800f208:	20808c36 	bltu	r4,r2,800f43c <_strtod_r+0xfe0>
 800f20c:	011f2434 	movhi	r4,31888
 800f210:	2081a62e 	bgeu	r4,r2,800f8ac <_strtod_r+0x1450>
 800f214:	00dffc34 	movhi	r3,32752
 800f218:	18ffffc4 	addi	r3,r3,-1
 800f21c:	013fffc4 	movi	r4,-1
 800f220:	d8c00715 	stw	r3,28(sp)
 800f224:	d9000815 	stw	r4,32(sp)
 800f228:	202b883a 	mov	r21,r4
 800f22c:	1823883a 	mov	r17,r3
 800f230:	d8001215 	stw	zero,72(sp)
 800f234:	003e3206 	br	800eb00 <__alt_data_end+0xfc00eb00>
 800f238:	00801944 	movi	r2,101
 800f23c:	98bde226 	beq	r19,r2,800e9c8 <__alt_data_end+0xfc00e9c8>
 800f240:	0039883a 	mov	fp,zero
 800f244:	0011883a 	mov	r8,zero
 800f248:	02400044 	movi	r9,1
 800f24c:	003d2406 	br	800e6e0 <__alt_data_end+0xfc00e6e0>
 800f250:	a02d883a 	mov	r22,r20
 800f254:	00800884 	movi	r2,34
 800f258:	80800015 	stw	r2,0(r16)
 800f25c:	002b883a 	mov	r21,zero
 800f260:	0023883a 	mov	r17,zero
 800f264:	003f7806 	br	800f048 <__alt_data_end+0xfc00f048>
 800f268:	d8c01017 	ldw	r3,64(sp)
 800f26c:	04c200f4 	movhi	r19,2051
 800f270:	d8800504 	addi	r2,sp,20
 800f274:	9cee6004 	addi	r19,r19,-18048
 800f278:	d8800015 	stw	r2,0(sp)
 800f27c:	d8c00115 	stw	r3,4(sp)
 800f280:	8009883a 	mov	r4,r16
 800f284:	d9400604 	addi	r5,sp,24
 800f288:	980d883a 	mov	r6,r19
 800f28c:	d9c00404 	addi	r7,sp,16
 800f290:	80165500 	call	8016550 <__gethex>
 800f294:	144001cc 	andi	r17,r2,7
 800f298:	883d4f26 	beq	r17,zero,800e7d8 <__alt_data_end+0xfc00e7d8>
 800f29c:	00c00184 	movi	r3,6
 800f2a0:	88c0f21e 	bne	r17,r3,800f66c <_strtod_r+0x1210>
 800f2a4:	94800044 	addi	r18,r18,1
 800f2a8:	dc800615 	stw	r18,24(sp)
 800f2ac:	002b883a 	mov	r21,zero
 800f2b0:	0023883a 	mov	r17,zero
 800f2b4:	003d4a06 	br	800e7e0 <__alt_data_end+0xfc00e7e0>
 800f2b8:	df000b17 	ldw	fp,44(sp)
 800f2bc:	a02d883a 	mov	r22,r20
 800f2c0:	e0003d1e 	bne	fp,zero,800f3b8 <_strtod_r+0xf5c>
 800f2c4:	d9000817 	ldw	r4,32(sp)
 800f2c8:	20003b1e 	bne	r4,zero,800f3b8 <_strtod_r+0xf5c>
 800f2cc:	d8c00717 	ldw	r3,28(sp)
 800f2d0:	00800434 	movhi	r2,16
 800f2d4:	10bfffc4 	addi	r2,r2,-1
 800f2d8:	1884703a 	and	r2,r3,r2
 800f2dc:	1000361e 	bne	r2,zero,800f3b8 <_strtod_r+0xf5c>
 800f2e0:	18dffc2c 	andhi	r3,r3,32752
 800f2e4:	0081ac34 	movhi	r2,1712
 800f2e8:	10c0332e 	bgeu	r2,r3,800f3b8 <_strtod_r+0xf5c>
 800f2ec:	a0800517 	ldw	r2,20(r20)
 800f2f0:	1000031e 	bne	r2,zero,800f300 <_strtod_r+0xea4>
 800f2f4:	a0800417 	ldw	r2,16(r20)
 800f2f8:	01000044 	movi	r4,1
 800f2fc:	20802e0e 	bge	r4,r2,800f3b8 <_strtod_r+0xf5c>
 800f300:	8009883a 	mov	r4,r16
 800f304:	a00b883a 	mov	r5,r20
 800f308:	01800044 	movi	r6,1
 800f30c:	d8c01415 	stw	r3,80(sp)
 800f310:	8017dac0 	call	8017dac <__lshift>
 800f314:	1009883a 	mov	r4,r2
 800f318:	900b883a 	mov	r5,r18
 800f31c:	102d883a 	mov	r22,r2
 800f320:	8017ef40 	call	8017ef4 <__mcmp>
 800f324:	d8c01417 	ldw	r3,80(sp)
 800f328:	0080230e 	bge	zero,r2,800f3b8 <_strtod_r+0xf5c>
 800f32c:	d8801217 	ldw	r2,72(sp)
 800f330:	10016a26 	beq	r2,zero,800f8dc <_strtod_r+0x1480>
 800f334:	0081ac34 	movhi	r2,1712
 800f338:	10c16816 	blt	r2,r3,800f8dc <_strtod_r+0x1480>
 800f33c:	0080dc34 	movhi	r2,880
 800f340:	10ffc40e 	bge	r2,r3,800f254 <__alt_data_end+0xfc00f254>
 800f344:	a809883a 	mov	r4,r21
 800f348:	880b883a 	mov	r5,r17
 800f34c:	000d883a 	mov	r6,zero
 800f350:	01ce5434 	movhi	r7,14672
 800f354:	800c2540 	call	800c254 <__muldf3>
 800f358:	102b883a 	mov	r21,r2
 800f35c:	1823883a 	mov	r17,r3
 800f360:	183f391e 	bne	r3,zero,800f048 <__alt_data_end+0xfc00f048>
 800f364:	103f381e 	bne	r2,zero,800f048 <__alt_data_end+0xfc00f048>
 800f368:	00800884 	movi	r2,34
 800f36c:	80800015 	stw	r2,0(r16)
 800f370:	003f3506 	br	800f048 <__alt_data_end+0xfc00f048>
 800f374:	d8801217 	ldw	r2,72(sp)
 800f378:	10015f26 	beq	r2,zero,800f8f8 <_strtod_r+0x149c>
 800f37c:	209ffc2c 	andhi	r2,r4,32752
 800f380:	00c1a834 	movhi	r3,1696
 800f384:	18815c36 	bltu	r3,r2,800f8f8 <_strtod_r+0x149c>
 800f388:	1004d53a 	srli	r2,r2,20
 800f38c:	00c01ac4 	movi	r3,107
 800f390:	1887c83a 	sub	r3,r3,r2
 800f394:	00bfffc4 	movi	r2,-1
 800f398:	10c4983a 	sll	r2,r2,r3
 800f39c:	d8c00817 	ldw	r3,32(sp)
 800f3a0:	1880101e 	bne	r3,r2,800f3e4 <_strtod_r+0xf88>
 800f3a4:	d9000717 	ldw	r4,28(sp)
 800f3a8:	00800434 	movhi	r2,16
 800f3ac:	002b883a 	mov	r21,zero
 800f3b0:	245ffc2c 	andhi	r17,r4,32752
 800f3b4:	88a3883a 	add	r17,r17,r2
 800f3b8:	d8c01217 	ldw	r3,72(sp)
 800f3bc:	183fe11e 	bne	r3,zero,800f344 <__alt_data_end+0xfc00f344>
 800f3c0:	003f2106 	br	800f048 <__alt_data_end+0xfc00f048>
 800f3c4:	df000b17 	ldw	fp,44(sp)
 800f3c8:	00800434 	movhi	r2,16
 800f3cc:	a02d883a 	mov	r22,r20
 800f3d0:	10bfffc4 	addi	r2,r2,-1
 800f3d4:	e0009e26 	beq	fp,zero,800f650 <_strtod_r+0x11f4>
 800f3d8:	d9000717 	ldw	r4,28(sp)
 800f3dc:	2086703a 	and	r3,r4,r2
 800f3e0:	18bfe426 	beq	r3,r2,800f374 <__alt_data_end+0xfc00f374>
 800f3e4:	d8c00817 	ldw	r3,32(sp)
 800f3e8:	1880004c 	andi	r2,r3,1
 800f3ec:	103ff226 	beq	r2,zero,800f3b8 <__alt_data_end+0xfc00f3b8>
 800f3f0:	a809883a 	mov	r4,r21
 800f3f4:	880b883a 	mov	r5,r17
 800f3f8:	80180ec0 	call	80180ec <__ulp>
 800f3fc:	a809883a 	mov	r4,r21
 800f400:	880b883a 	mov	r5,r17
 800f404:	100d883a 	mov	r6,r2
 800f408:	180f883a 	mov	r7,r3
 800f40c:	800aea80 	call	800aea8 <__adddf3>
 800f410:	102b883a 	mov	r21,r2
 800f414:	1823883a 	mov	r17,r3
 800f418:	003fe706 	br	800f3b8 <__alt_data_end+0xfc00f3b8>
 800f41c:	00bfffc4 	movi	r2,-1
 800f420:	a8beba1e 	bne	r21,r2,800ef0c <__alt_data_end+0xfc00ef0c>
 800f424:	00800884 	movi	r2,34
 800f428:	80800015 	stw	r2,0(r16)
 800f42c:	002b883a 	mov	r21,zero
 800f430:	045ffc34 	movhi	r17,32752
 800f434:	a02d883a 	mov	r22,r20
 800f438:	003f0306 	br	800f048 <__alt_data_end+0xfc00f048>
 800f43c:	00800884 	movi	r2,34
 800f440:	80800015 	stw	r2,0(r16)
 800f444:	002b883a 	mov	r21,zero
 800f448:	045ffc34 	movhi	r17,32752
 800f44c:	003ce406 	br	800e7e0 <__alt_data_end+0xfc00e7e0>
 800f450:	883da826 	beq	r17,zero,800eaf4 <__alt_data_end+0xfc00eaf4>
 800f454:	0463c83a 	sub	r17,zero,r17
 800f458:	888003cc 	andi	r2,r17,15
 800f45c:	10000b26 	beq	r2,zero,800f48c <_strtod_r+0x1030>
 800f460:	100490fa 	slli	r2,r2,3
 800f464:	00c200f4 	movhi	r3,2051
 800f468:	18ebf104 	addi	r3,r3,-20540
 800f46c:	1885883a 	add	r2,r3,r2
 800f470:	d9000817 	ldw	r4,32(sp)
 800f474:	d9400717 	ldw	r5,28(sp)
 800f478:	11800017 	ldw	r6,0(r2)
 800f47c:	11c00117 	ldw	r7,4(r2)
 800f480:	800b7440 	call	800b744 <__divdf3>
 800f484:	d8800815 	stw	r2,32(sp)
 800f488:	d8c00715 	stw	r3,28(sp)
 800f48c:	8823d13a 	srai	r17,r17,4
 800f490:	883d9826 	beq	r17,zero,800eaf4 <__alt_data_end+0xfc00eaf4>
 800f494:	008007c4 	movi	r2,31
 800f498:	14402c16 	blt	r2,r17,800f54c <_strtod_r+0x10f0>
 800f49c:	8880040c 	andi	r2,r17,16
 800f4a0:	10011e26 	beq	r2,zero,800f91c <_strtod_r+0x14c0>
 800f4a4:	0441330e 	bge	zero,r17,800f974 <_strtod_r+0x1518>
 800f4a8:	00801a84 	movi	r2,106
 800f4ac:	d8801215 	stw	r2,72(sp)
 800f4b0:	d8800817 	ldw	r2,32(sp)
 800f4b4:	d8c00717 	ldw	r3,28(sp)
 800f4b8:	04c200f4 	movhi	r19,2051
 800f4bc:	9ceb0104 	addi	r19,r19,-21500
 800f4c0:	8980004c 	andi	r6,r17,1
 800f4c4:	30000526 	beq	r6,zero,800f4dc <_strtod_r+0x1080>
 800f4c8:	99800017 	ldw	r6,0(r19)
 800f4cc:	99c00117 	ldw	r7,4(r19)
 800f4d0:	1009883a 	mov	r4,r2
 800f4d4:	180b883a 	mov	r5,r3
 800f4d8:	800c2540 	call	800c254 <__muldf3>
 800f4dc:	8823d07a 	srai	r17,r17,1
 800f4e0:	9cc00204 	addi	r19,r19,8
 800f4e4:	047ff616 	blt	zero,r17,800f4c0 <__alt_data_end+0xfc00f4c0>
 800f4e8:	d8c00715 	stw	r3,28(sp)
 800f4ec:	d8c01217 	ldw	r3,72(sp)
 800f4f0:	d8800815 	stw	r2,32(sp)
 800f4f4:	18000d26 	beq	r3,zero,800f52c <_strtod_r+0x10d0>
 800f4f8:	d9000717 	ldw	r4,28(sp)
 800f4fc:	00801ac4 	movi	r2,107
 800f500:	20dffc2c 	andhi	r3,r4,32752
 800f504:	1806d53a 	srli	r3,r3,20
 800f508:	10c5c83a 	sub	r2,r2,r3
 800f50c:	0080070e 	bge	zero,r2,800f52c <_strtod_r+0x10d0>
 800f510:	00c007c4 	movi	r3,31
 800f514:	1881110e 	bge	r3,r2,800f95c <_strtod_r+0x1500>
 800f518:	d8000815 	stw	zero,32(sp)
 800f51c:	00c00d04 	movi	r3,52
 800f520:	1881170e 	bge	r3,r2,800f980 <_strtod_r+0x1524>
 800f524:	0080dc34 	movhi	r2,880
 800f528:	d8800715 	stw	r2,28(sp)
 800f52c:	d9000817 	ldw	r4,32(sp)
 800f530:	d9400717 	ldw	r5,28(sp)
 800f534:	000d883a 	mov	r6,zero
 800f538:	000f883a 	mov	r7,zero
 800f53c:	202b883a 	mov	r21,r4
 800f540:	2823883a 	mov	r17,r5
 800f544:	800c0100 	call	800c010 <__eqdf2>
 800f548:	103d6d1e 	bne	r2,zero,800eb00 <__alt_data_end+0xfc00eb00>
 800f54c:	00800884 	movi	r2,34
 800f550:	80800015 	stw	r2,0(r16)
 800f554:	002b883a 	mov	r21,zero
 800f558:	0023883a 	mov	r17,zero
 800f55c:	003ca006 	br	800e7e0 <__alt_data_end+0xfc00e7e0>
 800f560:	00cff834 	movhi	r3,16352
 800f564:	002f883a 	mov	r23,zero
 800f568:	022ff834 	movhi	r8,49120
 800f56c:	d8000f15 	stw	zero,60(sp)
 800f570:	d8c00a15 	stw	r3,40(sp)
 800f574:	003e8806 	br	800ef98 <__alt_data_end+0xfc00ef98>
 800f578:	009387c4 	movi	r2,19999
 800f57c:	003cd706 	br	800e8dc <__alt_data_end+0xfc00e8dc>
 800f580:	14c03fcc 	andi	r19,r2,255
 800f584:	9cc0201c 	xori	r19,r19,128
 800f588:	9cffe004 	addi	r19,r19,-128
 800f58c:	9039883a 	mov	fp,r18
 800f590:	002b883a 	mov	r21,zero
 800f594:	002f883a 	mov	r23,zero
 800f598:	0029883a 	mov	r20,zero
 800f59c:	003c3d06 	br	800e694 <__alt_data_end+0xfc00e694>
 800f5a0:	d9000e17 	ldw	r4,56(sp)
 800f5a4:	00c00944 	movi	r3,37
 800f5a8:	1f07c83a 	sub	r3,r3,fp
 800f5ac:	193d3d16 	blt	r3,r4,800eaa4 <__alt_data_end+0xfc00eaa4>
 800f5b0:	1739c83a 	sub	fp,r2,fp
 800f5b4:	e00690fa 	slli	r3,fp,3
 800f5b8:	040200f4 	movhi	r16,2051
 800f5bc:	842bf104 	addi	r16,r16,-20540
 800f5c0:	80c7883a 	add	r3,r16,r3
 800f5c4:	d9800817 	ldw	r6,32(sp)
 800f5c8:	d9c00717 	ldw	r7,28(sp)
 800f5cc:	19000017 	ldw	r4,0(r3)
 800f5d0:	19400117 	ldw	r5,4(r3)
 800f5d4:	800c2540 	call	800c254 <__muldf3>
 800f5d8:	d9000e17 	ldw	r4,56(sp)
 800f5dc:	180b883a 	mov	r5,r3
 800f5e0:	2739c83a 	sub	fp,r4,fp
 800f5e4:	e00c90fa 	slli	r6,fp,3
 800f5e8:	1009883a 	mov	r4,r2
 800f5ec:	8185883a 	add	r2,r16,r6
 800f5f0:	11800017 	ldw	r6,0(r2)
 800f5f4:	11c00117 	ldw	r7,4(r2)
 800f5f8:	800c2540 	call	800c254 <__muldf3>
 800f5fc:	102b883a 	mov	r21,r2
 800f600:	1823883a 	mov	r17,r3
 800f604:	003c7606 	br	800e7e0 <__alt_data_end+0xfc00e7e0>
 800f608:	40d1883a 	add	r8,r8,r3
 800f60c:	2800c126 	beq	r5,zero,800f914 <_strtod_r+0x14b8>
 800f610:	2f0b883a 	add	r5,r5,fp
 800f614:	01000204 	movi	r4,8
 800f618:	01c00404 	movi	r7,16
 800f61c:	e7000044 	addi	fp,fp,1
 800f620:	e0bfffc4 	addi	r2,fp,-1
 800f624:	20800716 	blt	r4,r2,800f644 <_strtod_r+0x11e8>
 800f628:	bdc002a4 	muli	r23,r23,10
 800f62c:	e17ffb1e 	bne	fp,r5,800f61c <__alt_data_end+0xfc00f61c>
 800f630:	00800204 	movi	r2,8
 800f634:	2f000044 	addi	fp,r5,1
 800f638:	11406b16 	blt	r2,r5,800f7e8 <_strtod_r+0x138c>
 800f63c:	d9000617 	ldw	r4,24(sp)
 800f640:	003d1406 	br	800ea94 <__alt_data_end+0xfc00ea94>
 800f644:	3f3ff916 	blt	r7,fp,800f62c <__alt_data_end+0xfc00f62c>
 800f648:	ad4002a4 	muli	r21,r21,10
 800f64c:	003ff706 	br	800f62c <__alt_data_end+0xfc00f62c>
 800f650:	d8c00717 	ldw	r3,28(sp)
 800f654:	1884703a 	and	r2,r3,r2
 800f658:	10004f1e 	bne	r2,zero,800f798 <_strtod_r+0x133c>
 800f65c:	d9000817 	ldw	r4,32(sp)
 800f660:	20004d1e 	bne	r4,zero,800f798 <_strtod_r+0x133c>
 800f664:	18dffc2c 	andhi	r3,r3,32752
 800f668:	003f3006 	br	800f32c <__alt_data_end+0xfc00f32c>
 800f66c:	d9800517 	ldw	r6,20(sp)
 800f670:	30000826 	beq	r6,zero,800f694 <_strtod_r+0x1238>
 800f674:	99400017 	ldw	r5,0(r19)
 800f678:	d9000204 	addi	r4,sp,8
 800f67c:	d8801315 	stw	r2,76(sp)
 800f680:	80184bc0 	call	80184bc <__copybits>
 800f684:	d9400517 	ldw	r5,20(sp)
 800f688:	8009883a 	mov	r4,r16
 800f68c:	80176dc0 	call	80176dc <_Bfree>
 800f690:	d8801317 	ldw	r2,76(sp)
 800f694:	00c00184 	movi	r3,6
 800f698:	d9000417 	ldw	r4,16(sp)
 800f69c:	1c401036 	bltu	r3,r17,800f6e0 <_strtod_r+0x1284>
 800f6a0:	882290ba 	slli	r17,r17,2
 800f6a4:	00c20074 	movhi	r3,2049
 800f6a8:	18fdae04 	addi	r3,r3,-2376
 800f6ac:	88e3883a 	add	r17,r17,r3
 800f6b0:	88c00017 	ldw	r3,0(r17)
 800f6b4:	1800683a 	jmp	r3
 800f6b8:	0800f6f8 	rdprs	zero,at,987
 800f6bc:	0800f730 	cmpltui	zero,at,988
 800f6c0:	0800f71c 	xori	zero,at,988
 800f6c4:	0800f6d4 	ori	zero,at,987
 800f6c8:	0800f704 	addi	zero,at,988
 800f6cc:	0800f730 	cmpltui	zero,at,988
 800f6d0:	0800f6f8 	rdprs	zero,at,987
 800f6d4:	00dffc34 	movhi	r3,32752
 800f6d8:	d8c00715 	stw	r3,28(sp)
 800f6dc:	d8000815 	stw	zero,32(sp)
 800f6e0:	1080020c 	andi	r2,r2,8
 800f6e4:	dd400817 	ldw	r21,32(sp)
 800f6e8:	103c2626 	beq	r2,zero,800e784 <__alt_data_end+0xfc00e784>
 800f6ec:	d9000717 	ldw	r4,28(sp)
 800f6f0:	24600034 	orhi	r17,r4,32768
 800f6f4:	003c3a06 	br	800e7e0 <__alt_data_end+0xfc00e7e0>
 800f6f8:	d8000715 	stw	zero,28(sp)
 800f6fc:	d8000815 	stw	zero,32(sp)
 800f700:	003ff706 	br	800f6e0 <__alt_data_end+0xfc00f6e0>
 800f704:	01200034 	movhi	r4,32768
 800f708:	213fffc4 	addi	r4,r4,-1
 800f70c:	00ffffc4 	movi	r3,-1
 800f710:	d9000715 	stw	r4,28(sp)
 800f714:	d8c00815 	stw	r3,32(sp)
 800f718:	003ff106 	br	800f6e0 <__alt_data_end+0xfc00f6e0>
 800f71c:	d9000217 	ldw	r4,8(sp)
 800f720:	d8c00317 	ldw	r3,12(sp)
 800f724:	d9000815 	stw	r4,32(sp)
 800f728:	d8c00715 	stw	r3,28(sp)
 800f72c:	003fec06 	br	800f6e0 <__alt_data_end+0xfc00f6e0>
 800f730:	20c10cc4 	addi	r3,r4,1075
 800f734:	d9000217 	ldw	r4,8(sp)
 800f738:	d9400317 	ldw	r5,12(sp)
 800f73c:	1806953a 	slli	r3,r3,20
 800f740:	d9000815 	stw	r4,32(sp)
 800f744:	013ffc34 	movhi	r4,65520
 800f748:	213fffc4 	addi	r4,r4,-1
 800f74c:	2908703a 	and	r4,r5,r4
 800f750:	1908b03a 	or	r4,r3,r4
 800f754:	d9000715 	stw	r4,28(sp)
 800f758:	003fe106 	br	800f6e0 <__alt_data_end+0xfc00f6e0>
 800f75c:	d8c00e17 	ldw	r3,56(sp)
 800f760:	00bffa84 	movi	r2,-22
 800f764:	18bccf16 	blt	r3,r2,800eaa4 <__alt_data_end+0xfc00eaa4>
 800f768:	180690fa 	slli	r3,r3,3
 800f76c:	008200f4 	movhi	r2,2051
 800f770:	10abf104 	addi	r2,r2,-20540
 800f774:	10c5c83a 	sub	r2,r2,r3
 800f778:	d9000817 	ldw	r4,32(sp)
 800f77c:	d9400717 	ldw	r5,28(sp)
 800f780:	11800017 	ldw	r6,0(r2)
 800f784:	11c00117 	ldw	r7,4(r2)
 800f788:	800b7440 	call	800b744 <__divdf3>
 800f78c:	102b883a 	mov	r21,r2
 800f790:	1823883a 	mov	r17,r3
 800f794:	003c1206 	br	800e7e0 <__alt_data_end+0xfc00e7e0>
 800f798:	d8c00817 	ldw	r3,32(sp)
 800f79c:	1880004c 	andi	r2,r3,1
 800f7a0:	103f0526 	beq	r2,zero,800f3b8 <__alt_data_end+0xfc00f3b8>
 800f7a4:	a809883a 	mov	r4,r21
 800f7a8:	880b883a 	mov	r5,r17
 800f7ac:	80180ec0 	call	80180ec <__ulp>
 800f7b0:	a809883a 	mov	r4,r21
 800f7b4:	880b883a 	mov	r5,r17
 800f7b8:	100d883a 	mov	r6,r2
 800f7bc:	180f883a 	mov	r7,r3
 800f7c0:	800c9780 	call	800c978 <__subdf3>
 800f7c4:	1009883a 	mov	r4,r2
 800f7c8:	180b883a 	mov	r5,r3
 800f7cc:	000d883a 	mov	r6,zero
 800f7d0:	000f883a 	mov	r7,zero
 800f7d4:	102b883a 	mov	r21,r2
 800f7d8:	1823883a 	mov	r17,r3
 800f7dc:	800c0100 	call	800c010 <__eqdf2>
 800f7e0:	103e9c26 	beq	r2,zero,800f254 <__alt_data_end+0xfc00f254>
 800f7e4:	003ef406 	br	800f3b8 <__alt_data_end+0xfc00f3b8>
 800f7e8:	00800404 	movi	r2,16
 800f7ec:	1700360e 	bge	r2,fp,800f8c8 <_strtod_r+0x146c>
 800f7f0:	d9000617 	ldw	r4,24(sp)
 800f7f4:	000b883a 	mov	r5,zero
 800f7f8:	003e5206 	br	800f144 <__alt_data_end+0xfc00f144>
 800f7fc:	014200f4 	movhi	r5,2051
 800f800:	d9000617 	ldw	r4,24(sp)
 800f804:	296afd04 	addi	r5,r5,-21516
 800f808:	01c00644 	movi	r7,25
 800f80c:	00000b06 	br	800f83c <_strtod_r+0x13e0>
 800f810:	21000044 	addi	r4,r4,1
 800f814:	20800003 	ldbu	r2,0(r4)
 800f818:	10ffefc4 	addi	r3,r2,-65
 800f81c:	10803fcc 	andi	r2,r2,255
 800f820:	1080201c 	xori	r2,r2,128
 800f824:	18c03fcc 	andi	r3,r3,255
 800f828:	10bfe004 	addi	r2,r2,-128
 800f82c:	38c00136 	bltu	r7,r3,800f834 <_strtod_r+0x13d8>
 800f830:	10800804 	addi	r2,r2,32
 800f834:	29400044 	addi	r5,r5,1
 800f838:	11bb541e 	bne	r2,r6,800e58c <__alt_data_end+0xfc00e58c>
 800f83c:	29800007 	ldb	r6,0(r5)
 800f840:	303ff31e 	bne	r6,zero,800f810 <__alt_data_end+0xfc00f810>
 800f844:	018200f4 	movhi	r6,2051
 800f848:	200b883a 	mov	r5,r4
 800f84c:	d9000615 	stw	r4,24(sp)
 800f850:	31aafe04 	addi	r6,r6,-21512
 800f854:	02000644 	movi	r8,25
 800f858:	00000a06 	br	800f884 <_strtod_r+0x1428>
 800f85c:	28800003 	ldbu	r2,0(r5)
 800f860:	10ffefc4 	addi	r3,r2,-65
 800f864:	10803fcc 	andi	r2,r2,255
 800f868:	1080201c 	xori	r2,r2,128
 800f86c:	18c03fcc 	andi	r3,r3,255
 800f870:	10bfe004 	addi	r2,r2,-128
 800f874:	40c00136 	bltu	r8,r3,800f87c <_strtod_r+0x1420>
 800f878:	10800804 	addi	r2,r2,32
 800f87c:	31800044 	addi	r6,r6,1
 800f880:	11c0211e 	bne	r2,r7,800f908 <_strtod_r+0x14ac>
 800f884:	31c00007 	ldb	r7,0(r6)
 800f888:	29400044 	addi	r5,r5,1
 800f88c:	383ff31e 	bne	r7,zero,800f85c <__alt_data_end+0xfc00f85c>
 800f890:	d9400615 	stw	r5,24(sp)
 800f894:	009ffc34 	movhi	r2,32752
 800f898:	d8800715 	stw	r2,28(sp)
 800f89c:	d8000815 	stw	zero,32(sp)
 800f8a0:	003bb706 	br	800e780 <__alt_data_end+0xfc00e780>
 800f8a4:	000b883a 	mov	r5,zero
 800f8a8:	003c7206 	br	800ea74 <__alt_data_end+0xfc00ea74>
 800f8ac:	0080d434 	movhi	r2,848
 800f8b0:	1887883a 	add	r3,r3,r2
 800f8b4:	d8c00715 	stw	r3,28(sp)
 800f8b8:	dd400817 	ldw	r21,32(sp)
 800f8bc:	1823883a 	mov	r17,r3
 800f8c0:	d8001215 	stw	zero,72(sp)
 800f8c4:	003c8e06 	br	800eb00 <__alt_data_end+0xfc00eb00>
 800f8c8:	a9c002a4 	muli	r7,r21,10
 800f8cc:	d9000617 	ldw	r4,24(sp)
 800f8d0:	000b883a 	mov	r5,zero
 800f8d4:	31eb883a 	add	r21,r6,r7
 800f8d8:	003e1a06 	br	800f144 <__alt_data_end+0xfc00f144>
 800f8dc:	047ffc34 	movhi	r17,65520
 800f8e0:	1c47883a 	add	r3,r3,r17
 800f8e4:	057fffc4 	movi	r21,-1
 800f8e8:	04400434 	movhi	r17,16
 800f8ec:	8d63883a 	add	r17,r17,r21
 800f8f0:	1c62b03a 	or	r17,r3,r17
 800f8f4:	003eb006 	br	800f3b8 <__alt_data_end+0xfc00f3b8>
 800f8f8:	00bfffc4 	movi	r2,-1
 800f8fc:	003ea706 	br	800f39c <__alt_data_end+0xfc00f39c>
 800f900:	002b883a 	mov	r21,zero
 800f904:	003e3406 	br	800f1d8 <__alt_data_end+0xfc00f1d8>
 800f908:	21000044 	addi	r4,r4,1
 800f90c:	d9000615 	stw	r4,24(sp)
 800f910:	003fe006 	br	800f894 <__alt_data_end+0xfc00f894>
 800f914:	e00b883a 	mov	r5,fp
 800f918:	003f4506 	br	800f630 <__alt_data_end+0xfc00f630>
 800f91c:	d8001215 	stw	zero,72(sp)
 800f920:	047ee316 	blt	zero,r17,800f4b0 <__alt_data_end+0xfc00f4b0>
 800f924:	003f0106 	br	800f52c <__alt_data_end+0xfc00f52c>
 800f928:	014200f4 	movhi	r5,2051
 800f92c:	296e5b04 	addi	r5,r5,-18068
 800f930:	d9000604 	addi	r4,sp,24
 800f934:	d9800204 	addi	r6,sp,8
 800f938:	8016d6c0 	call	8016d6c <__hexnan>
 800f93c:	00c00144 	movi	r3,5
 800f940:	10fb8c1e 	bne	r2,r3,800e774 <__alt_data_end+0xfc00e774>
 800f944:	d8800317 	ldw	r2,12(sp)
 800f948:	d8c00217 	ldw	r3,8(sp)
 800f94c:	109ffc34 	orhi	r2,r2,32752
 800f950:	d8c00815 	stw	r3,32(sp)
 800f954:	d8800715 	stw	r2,28(sp)
 800f958:	003b8906 	br	800e780 <__alt_data_end+0xfc00e780>
 800f95c:	00ffffc4 	movi	r3,-1
 800f960:	d9000817 	ldw	r4,32(sp)
 800f964:	1884983a 	sll	r2,r3,r2
 800f968:	1108703a 	and	r4,r2,r4
 800f96c:	d9000815 	stw	r4,32(sp)
 800f970:	003eee06 	br	800f52c <__alt_data_end+0xfc00f52c>
 800f974:	01001a84 	movi	r4,106
 800f978:	d9001215 	stw	r4,72(sp)
 800f97c:	003ede06 	br	800f4f8 <__alt_data_end+0xfc00f4f8>
 800f980:	00ffffc4 	movi	r3,-1
 800f984:	10bff804 	addi	r2,r2,-32
 800f988:	1884983a 	sll	r2,r3,r2
 800f98c:	d8c00717 	ldw	r3,28(sp)
 800f990:	10c6703a 	and	r3,r2,r3
 800f994:	d8c00715 	stw	r3,28(sp)
 800f998:	003ee406 	br	800f52c <__alt_data_end+0xfc00f52c>

0800f99c <strtod>:
 800f99c:	00c200f4 	movhi	r3,2051
 800f9a0:	18f31604 	addi	r3,r3,-13224
 800f9a4:	2005883a 	mov	r2,r4
 800f9a8:	19000017 	ldw	r4,0(r3)
 800f9ac:	280d883a 	mov	r6,r5
 800f9b0:	100b883a 	mov	r5,r2
 800f9b4:	800e45c1 	jmpi	800e45c <_strtod_r>

0800f9b8 <strtof>:
 800f9b8:	defffb04 	addi	sp,sp,-20
 800f9bc:	dcc00315 	stw	r19,12(sp)
 800f9c0:	04c200f4 	movhi	r19,2051
 800f9c4:	9cf31604 	addi	r19,r19,-13224
 800f9c8:	2005883a 	mov	r2,r4
 800f9cc:	99000017 	ldw	r4,0(r19)
 800f9d0:	280d883a 	mov	r6,r5
 800f9d4:	100b883a 	mov	r5,r2
 800f9d8:	dfc00415 	stw	ra,16(sp)
 800f9dc:	dc800215 	stw	r18,8(sp)
 800f9e0:	dc400115 	stw	r17,4(sp)
 800f9e4:	dc000015 	stw	r16,0(sp)
 800f9e8:	800e45c0 	call	800e45c <_strtod_r>
 800f9ec:	1009883a 	mov	r4,r2
 800f9f0:	180b883a 	mov	r5,r3
 800f9f4:	1025883a 	mov	r18,r2
 800f9f8:	1823883a 	mov	r17,r3
 800f9fc:	800d4b00 	call	800d4b0 <__truncdfsf2>
 800fa00:	1009883a 	mov	r4,r2
 800fa04:	000b883a 	mov	r5,zero
 800fa08:	1021883a 	mov	r16,r2
 800fa0c:	801d0840 	call	801d084 <__eqsf2>
 800fa10:	1000111e 	bne	r2,zero,800fa58 <strtof+0xa0>
 800fa14:	9009883a 	mov	r4,r18
 800fa18:	880b883a 	mov	r5,r17
 800fa1c:	000d883a 	mov	r6,zero
 800fa20:	000f883a 	mov	r7,zero
 800fa24:	800c0100 	call	800c010 <__eqdf2>
 800fa28:	10000b26 	beq	r2,zero,800fa58 <strtof+0xa0>
 800fa2c:	98800017 	ldw	r2,0(r19)
 800fa30:	00c00884 	movi	r3,34
 800fa34:	10c00015 	stw	r3,0(r2)
 800fa38:	8005883a 	mov	r2,r16
 800fa3c:	dfc00417 	ldw	ra,16(sp)
 800fa40:	dcc00317 	ldw	r19,12(sp)
 800fa44:	dc800217 	ldw	r18,8(sp)
 800fa48:	dc400117 	ldw	r17,4(sp)
 800fa4c:	dc000017 	ldw	r16,0(sp)
 800fa50:	dec00504 	addi	sp,sp,20
 800fa54:	f800283a 	ret
 800fa58:	015fe034 	movhi	r5,32640
 800fa5c:	297fffc4 	addi	r5,r5,-1
 800fa60:	8009883a 	mov	r4,r16
 800fa64:	801d0f80 	call	801d0f8 <__gesf2>
 800fa68:	0080070e 	bge	zero,r2,800fa88 <strtof+0xd0>
 800fa6c:	01dffc34 	movhi	r7,32752
 800fa70:	39ffffc4 	addi	r7,r7,-1
 800fa74:	9009883a 	mov	r4,r18
 800fa78:	880b883a 	mov	r5,r17
 800fa7c:	01bfffc4 	movi	r6,-1
 800fa80:	800c0940 	call	800c094 <__gedf2>
 800fa84:	00bfe90e 	bge	zero,r2,800fa2c <__alt_data_end+0xfc00fa2c>
 800fa88:	017fe034 	movhi	r5,65408
 800fa8c:	297fffc4 	addi	r5,r5,-1
 800fa90:	8009883a 	mov	r4,r16
 800fa94:	801d1b00 	call	801d1b0 <__lesf2>
 800fa98:	103fe70e 	bge	r2,zero,800fa38 <__alt_data_end+0xfc00fa38>
 800fa9c:	01fffc34 	movhi	r7,65520
 800faa0:	39ffffc4 	addi	r7,r7,-1
 800faa4:	9009883a 	mov	r4,r18
 800faa8:	880b883a 	mov	r5,r17
 800faac:	01bfffc4 	movi	r6,-1
 800fab0:	800c1740 	call	800c174 <__ledf2>
 800fab4:	103fdd0e 	bge	r2,zero,800fa2c <__alt_data_end+0xfc00fa2c>
 800fab8:	003fdf06 	br	800fa38 <__alt_data_end+0xfc00fa38>

0800fabc <strtok>:
 800fabc:	008200f4 	movhi	r2,2051
 800fac0:	10b31604 	addi	r2,r2,-13224
 800fac4:	11800017 	ldw	r6,0(r2)
 800fac8:	01c00044 	movi	r7,1
 800facc:	31801704 	addi	r6,r6,92
 800fad0:	800fad41 	jmpi	800fad4 <__strtok_r>

0800fad4 <__strtok_r>:
 800fad4:	20001e26 	beq	r4,zero,800fb50 <__strtok_r+0x7c>
 800fad8:	2005883a 	mov	r2,r4
 800fadc:	22400007 	ldb	r9,0(r4)
 800fae0:	2807883a 	mov	r3,r5
 800fae4:	21000044 	addi	r4,r4,1
 800fae8:	00000106 	br	800faf0 <__strtok_r+0x1c>
 800faec:	4a001126 	beq	r9,r8,800fb34 <__strtok_r+0x60>
 800faf0:	1a000007 	ldb	r8,0(r3)
 800faf4:	18c00044 	addi	r3,r3,1
 800faf8:	403ffc1e 	bne	r8,zero,800faec <__alt_data_end+0xfc00faec>
 800fafc:	48001826 	beq	r9,zero,800fb60 <__strtok_r+0x8c>
 800fb00:	2013883a 	mov	r9,r4
 800fb04:	22000007 	ldb	r8,0(r4)
 800fb08:	2807883a 	mov	r3,r5
 800fb0c:	21000044 	addi	r4,r4,1
 800fb10:	00000106 	br	800fb18 <__strtok_r+0x44>
 800fb14:	383ffa26 	beq	r7,zero,800fb00 <__alt_data_end+0xfc00fb00>
 800fb18:	19c00007 	ldb	r7,0(r3)
 800fb1c:	18c00044 	addi	r3,r3,1
 800fb20:	3a3ffc1e 	bne	r7,r8,800fb14 <__alt_data_end+0xfc00fb14>
 800fb24:	40000726 	beq	r8,zero,800fb44 <__strtok_r+0x70>
 800fb28:	48000005 	stb	zero,0(r9)
 800fb2c:	31000015 	stw	r4,0(r6)
 800fb30:	f800283a 	ret
 800fb34:	383fe81e 	bne	r7,zero,800fad8 <__alt_data_end+0xfc00fad8>
 800fb38:	31000015 	stw	r4,0(r6)
 800fb3c:	10000005 	stb	zero,0(r2)
 800fb40:	f800283a 	ret
 800fb44:	0009883a 	mov	r4,zero
 800fb48:	31000015 	stw	r4,0(r6)
 800fb4c:	f800283a 	ret
 800fb50:	31000017 	ldw	r4,0(r6)
 800fb54:	203fe01e 	bne	r4,zero,800fad8 <__alt_data_end+0xfc00fad8>
 800fb58:	0005883a 	mov	r2,zero
 800fb5c:	f800283a 	ret
 800fb60:	30000015 	stw	zero,0(r6)
 800fb64:	0005883a 	mov	r2,zero
 800fb68:	f800283a 	ret

0800fb6c <strtok_r>:
 800fb6c:	01c00044 	movi	r7,1
 800fb70:	800fad41 	jmpi	800fad4 <__strtok_r>

0800fb74 <_strtol_r>:
 800fb74:	008200f4 	movhi	r2,2051
 800fb78:	defff404 	addi	sp,sp,-48
 800fb7c:	10b31904 	addi	r2,r2,-13212
 800fb80:	dcc00515 	stw	r19,20(sp)
 800fb84:	14c00017 	ldw	r19,0(r2)
 800fb88:	dd800815 	stw	r22,32(sp)
 800fb8c:	dd400715 	stw	r21,28(sp)
 800fb90:	dd000615 	stw	r20,24(sp)
 800fb94:	dfc00b15 	stw	ra,44(sp)
 800fb98:	df000a15 	stw	fp,40(sp)
 800fb9c:	ddc00915 	stw	r23,36(sp)
 800fba0:	dc800415 	stw	r18,16(sp)
 800fba4:	dc400315 	stw	r17,12(sp)
 800fba8:	dc000215 	stw	r16,8(sp)
 800fbac:	282b883a 	mov	r21,r5
 800fbb0:	d9000015 	stw	r4,0(sp)
 800fbb4:	3029883a 	mov	r20,r6
 800fbb8:	382d883a 	mov	r22,r7
 800fbbc:	2813883a 	mov	r9,r5
 800fbc0:	4a000007 	ldb	r8,0(r9)
 800fbc4:	4807883a 	mov	r3,r9
 800fbc8:	4a400044 	addi	r9,r9,1
 800fbcc:	9a05883a 	add	r2,r19,r8
 800fbd0:	10800043 	ldbu	r2,1(r2)
 800fbd4:	1080020c 	andi	r2,r2,8
 800fbd8:	103ff91e 	bne	r2,zero,800fbc0 <__alt_data_end+0xfc00fbc0>
 800fbdc:	00800b44 	movi	r2,45
 800fbe0:	4025883a 	mov	r18,r8
 800fbe4:	4823883a 	mov	r17,r9
 800fbe8:	40805826 	beq	r8,r2,800fd4c <_strtol_r+0x1d8>
 800fbec:	00800ac4 	movi	r2,43
 800fbf0:	40805a26 	beq	r8,r2,800fd5c <_strtol_r+0x1e8>
 800fbf4:	0039883a 	mov	fp,zero
 800fbf8:	b0000426 	beq	r22,zero,800fc0c <_strtol_r+0x98>
 800fbfc:	00800404 	movi	r2,16
 800fc00:	b0805a26 	beq	r22,r2,800fd6c <_strtol_r+0x1f8>
 800fc04:	b02f883a 	mov	r23,r22
 800fc08:	00000406 	br	800fc1c <_strtol_r+0xa8>
 800fc0c:	00800c04 	movi	r2,48
 800fc10:	90806526 	beq	r18,r2,800fda8 <_strtol_r+0x234>
 800fc14:	05800284 	movi	r22,10
 800fc18:	b02f883a 	mov	r23,r22
 800fc1c:	00e00034 	movhi	r3,32768
 800fc20:	18ffffc4 	addi	r3,r3,-1
 800fc24:	e0e1883a 	add	r16,fp,r3
 800fc28:	b80b883a 	mov	r5,r23
 800fc2c:	8009883a 	mov	r4,r16
 800fc30:	800a9c00 	call	800a9c0 <__umodsi3>
 800fc34:	8009883a 	mov	r4,r16
 800fc38:	b80b883a 	mov	r5,r23
 800fc3c:	d8800115 	stw	r2,4(sp)
 800fc40:	800a9b80 	call	800a9b8 <__udivsi3>
 800fc44:	9c91883a 	add	r8,r19,r18
 800fc48:	42000043 	ldbu	r8,1(r8)
 800fc4c:	8807883a 	mov	r3,r17
 800fc50:	000d883a 	mov	r6,zero
 800fc54:	4240010c 	andi	r9,r8,4
 800fc58:	0009883a 	mov	r4,zero
 800fc5c:	02800044 	movi	r10,1
 800fc60:	017fffc4 	movi	r5,-1
 800fc64:	d9c00117 	ldw	r7,4(sp)
 800fc68:	48000e26 	beq	r9,zero,800fca4 <_strtol_r+0x130>
 800fc6c:	923ff404 	addi	r8,r18,-48
 800fc70:	4580120e 	bge	r8,r22,800fcbc <_strtol_r+0x148>
 800fc74:	31400526 	beq	r6,r5,800fc8c <_strtol_r+0x118>
 800fc78:	11002736 	bltu	r2,r4,800fd18 <_strtol_r+0x1a4>
 800fc7c:	20802526 	beq	r4,r2,800fd14 <_strtol_r+0x1a0>
 800fc80:	25c9383a 	mul	r4,r4,r23
 800fc84:	01800044 	movi	r6,1
 800fc88:	4109883a 	add	r4,r8,r4
 800fc8c:	1c800007 	ldb	r18,0(r3)
 800fc90:	18c00044 	addi	r3,r3,1
 800fc94:	9c91883a 	add	r8,r19,r18
 800fc98:	42000043 	ldbu	r8,1(r8)
 800fc9c:	4240010c 	andi	r9,r8,4
 800fca0:	483ff21e 	bne	r9,zero,800fc6c <__alt_data_end+0xfc00fc6c>
 800fca4:	420000cc 	andi	r8,r8,3
 800fca8:	40000426 	beq	r8,zero,800fcbc <_strtol_r+0x148>
 800fcac:	42801c26 	beq	r8,r10,800fd20 <_strtol_r+0x1ac>
 800fcb0:	024015c4 	movi	r9,87
 800fcb4:	9251c83a 	sub	r8,r18,r9
 800fcb8:	45bfee16 	blt	r8,r22,800fc74 <__alt_data_end+0xfc00fc74>
 800fcbc:	00bfffc4 	movi	r2,-1
 800fcc0:	30801926 	beq	r6,r2,800fd28 <_strtol_r+0x1b4>
 800fcc4:	0705c83a 	sub	r2,zero,fp
 800fcc8:	2084f03a 	xor	r2,r4,r2
 800fccc:	1739883a 	add	fp,r2,fp
 800fcd0:	e005883a 	mov	r2,fp
 800fcd4:	a0000326 	beq	r20,zero,800fce4 <_strtol_r+0x170>
 800fcd8:	30001a1e 	bne	r6,zero,800fd44 <_strtol_r+0x1d0>
 800fcdc:	a80b883a 	mov	r5,r21
 800fce0:	a1400015 	stw	r5,0(r20)
 800fce4:	dfc00b17 	ldw	ra,44(sp)
 800fce8:	df000a17 	ldw	fp,40(sp)
 800fcec:	ddc00917 	ldw	r23,36(sp)
 800fcf0:	dd800817 	ldw	r22,32(sp)
 800fcf4:	dd400717 	ldw	r21,28(sp)
 800fcf8:	dd000617 	ldw	r20,24(sp)
 800fcfc:	dcc00517 	ldw	r19,20(sp)
 800fd00:	dc800417 	ldw	r18,16(sp)
 800fd04:	dc400317 	ldw	r17,12(sp)
 800fd08:	dc000217 	ldw	r16,8(sp)
 800fd0c:	dec00c04 	addi	sp,sp,48
 800fd10:	f800283a 	ret
 800fd14:	3a3fda0e 	bge	r7,r8,800fc80 <__alt_data_end+0xfc00fc80>
 800fd18:	01bfffc4 	movi	r6,-1
 800fd1c:	003fdb06 	br	800fc8c <__alt_data_end+0xfc00fc8c>
 800fd20:	02400dc4 	movi	r9,55
 800fd24:	003fe306 	br	800fcb4 <__alt_data_end+0xfc00fcb4>
 800fd28:	d9000017 	ldw	r4,0(sp)
 800fd2c:	00800884 	movi	r2,34
 800fd30:	20800015 	stw	r2,0(r4)
 800fd34:	00a00034 	movhi	r2,32768
 800fd38:	10bfffc4 	addi	r2,r2,-1
 800fd3c:	e085883a 	add	r2,fp,r2
 800fd40:	a03fe826 	beq	r20,zero,800fce4 <__alt_data_end+0xfc00fce4>
 800fd44:	197fffc4 	addi	r5,r3,-1
 800fd48:	003fe506 	br	800fce0 <__alt_data_end+0xfc00fce0>
 800fd4c:	1c400084 	addi	r17,r3,2
 800fd50:	1c800047 	ldb	r18,1(r3)
 800fd54:	07000044 	movi	fp,1
 800fd58:	003fa706 	br	800fbf8 <__alt_data_end+0xfc00fbf8>
 800fd5c:	1c400084 	addi	r17,r3,2
 800fd60:	1c800047 	ldb	r18,1(r3)
 800fd64:	0039883a 	mov	fp,zero
 800fd68:	003fa306 	br	800fbf8 <__alt_data_end+0xfc00fbf8>
 800fd6c:	00800c04 	movi	r2,48
 800fd70:	90bfa41e 	bne	r18,r2,800fc04 <__alt_data_end+0xfc00fc04>
 800fd74:	88c00003 	ldbu	r3,0(r17)
 800fd78:	00bff7c4 	movi	r2,-33
 800fd7c:	1884703a 	and	r2,r3,r2
 800fd80:	10803fcc 	andi	r2,r2,255
 800fd84:	1080201c 	xori	r2,r2,128
 800fd88:	10bfe004 	addi	r2,r2,-128
 800fd8c:	00c01604 	movi	r3,88
 800fd90:	10ff9c1e 	bne	r2,r3,800fc04 <__alt_data_end+0xfc00fc04>
 800fd94:	05c00404 	movi	r23,16
 800fd98:	8c800047 	ldb	r18,1(r17)
 800fd9c:	b82d883a 	mov	r22,r23
 800fda0:	8c400084 	addi	r17,r17,2
 800fda4:	003f9d06 	br	800fc1c <__alt_data_end+0xfc00fc1c>
 800fda8:	88c00003 	ldbu	r3,0(r17)
 800fdac:	00bff7c4 	movi	r2,-33
 800fdb0:	1884703a 	and	r2,r3,r2
 800fdb4:	10803fcc 	andi	r2,r2,255
 800fdb8:	1080201c 	xori	r2,r2,128
 800fdbc:	10bfe004 	addi	r2,r2,-128
 800fdc0:	00c01604 	movi	r3,88
 800fdc4:	10fff326 	beq	r2,r3,800fd94 <__alt_data_end+0xfc00fd94>
 800fdc8:	05800204 	movi	r22,8
 800fdcc:	b02f883a 	mov	r23,r22
 800fdd0:	003f9206 	br	800fc1c <__alt_data_end+0xfc00fc1c>

0800fdd4 <strtol>:
 800fdd4:	2007883a 	mov	r3,r4
 800fdd8:	010200f4 	movhi	r4,2051
 800fddc:	21331604 	addi	r4,r4,-13224
 800fde0:	21000017 	ldw	r4,0(r4)
 800fde4:	2805883a 	mov	r2,r5
 800fde8:	300f883a 	mov	r7,r6
 800fdec:	180b883a 	mov	r5,r3
 800fdf0:	100d883a 	mov	r6,r2
 800fdf4:	800fb741 	jmpi	800fb74 <_strtol_r>

0800fdf8 <___svfprintf_internal_r>:
 800fdf8:	deffb504 	addi	sp,sp,-300
 800fdfc:	dfc04a15 	stw	ra,296(sp)
 800fe00:	ddc04815 	stw	r23,288(sp)
 800fe04:	d9002f15 	stw	r4,188(sp)
 800fe08:	282f883a 	mov	r23,r5
 800fe0c:	d9802915 	stw	r6,164(sp)
 800fe10:	d9c02d15 	stw	r7,180(sp)
 800fe14:	df004915 	stw	fp,292(sp)
 800fe18:	dd804715 	stw	r22,284(sp)
 800fe1c:	dd404615 	stw	r21,280(sp)
 800fe20:	dd004515 	stw	r20,276(sp)
 800fe24:	dcc04415 	stw	r19,272(sp)
 800fe28:	dc804315 	stw	r18,268(sp)
 800fe2c:	dc404215 	stw	r17,264(sp)
 800fe30:	dc004115 	stw	r16,260(sp)
 800fe34:	80171040 	call	8017104 <_localeconv_r>
 800fe38:	10800017 	ldw	r2,0(r2)
 800fe3c:	1009883a 	mov	r4,r2
 800fe40:	d8803515 	stw	r2,212(sp)
 800fe44:	800e3c40 	call	800e3c4 <strlen>
 800fe48:	d8803915 	stw	r2,228(sp)
 800fe4c:	b880030b 	ldhu	r2,12(r23)
 800fe50:	1080200c 	andi	r2,r2,128
 800fe54:	10000226 	beq	r2,zero,800fe60 <___svfprintf_internal_r+0x68>
 800fe58:	b8800417 	ldw	r2,16(r23)
 800fe5c:	10065d26 	beq	r2,zero,80117d4 <___svfprintf_internal_r+0x19dc>
 800fe60:	db001dc4 	addi	r12,sp,119
 800fe64:	dd801e04 	addi	r22,sp,120
 800fe68:	d8800404 	addi	r2,sp,16
 800fe6c:	050200f4 	movhi	r20,2051
 800fe70:	b317c83a 	sub	r11,r22,r12
 800fe74:	a52b1b84 	addi	r20,r20,-21394
 800fe78:	db002815 	stw	r12,160(sp)
 800fe7c:	d8801e15 	stw	r2,120(sp)
 800fe80:	d8002015 	stw	zero,128(sp)
 800fe84:	d8001f15 	stw	zero,124(sp)
 800fe88:	d8003315 	stw	zero,204(sp)
 800fe8c:	d8003715 	stw	zero,220(sp)
 800fe90:	d8003815 	stw	zero,224(sp)
 800fe94:	d8003b15 	stw	zero,236(sp)
 800fe98:	d8003a15 	stw	zero,232(sp)
 800fe9c:	d8003015 	stw	zero,192(sp)
 800fea0:	1011883a 	mov	r8,r2
 800fea4:	dac03d15 	stw	r11,244(sp)
 800fea8:	db002917 	ldw	r12,164(sp)
 800feac:	60800007 	ldb	r2,0(r12)
 800feb0:	1000ab26 	beq	r2,zero,8010160 <___svfprintf_internal_r+0x368>
 800feb4:	00c00944 	movi	r3,37
 800feb8:	10c0a926 	beq	r2,r3,8010160 <___svfprintf_internal_r+0x368>
 800febc:	6021883a 	mov	r16,r12
 800fec0:	00000106 	br	800fec8 <___svfprintf_internal_r+0xd0>
 800fec4:	10c08426 	beq	r2,r3,80100d8 <___svfprintf_internal_r+0x2e0>
 800fec8:	84000044 	addi	r16,r16,1
 800fecc:	80800007 	ldb	r2,0(r16)
 800fed0:	103ffc1e 	bne	r2,zero,800fec4 <__alt_data_end+0xfc00fec4>
 800fed4:	dac02917 	ldw	r11,164(sp)
 800fed8:	82e3c83a 	sub	r17,r16,r11
 800fedc:	88000f26 	beq	r17,zero,800ff1c <___svfprintf_internal_r+0x124>
 800fee0:	d8c02017 	ldw	r3,128(sp)
 800fee4:	d8801f17 	ldw	r2,124(sp)
 800fee8:	dac02917 	ldw	r11,164(sp)
 800feec:	1c47883a 	add	r3,r3,r17
 800fef0:	10800044 	addi	r2,r2,1
 800fef4:	d8c02015 	stw	r3,128(sp)
 800fef8:	42c00015 	stw	r11,0(r8)
 800fefc:	44400115 	stw	r17,4(r8)
 800ff00:	d8801f15 	stw	r2,124(sp)
 800ff04:	00c001c4 	movi	r3,7
 800ff08:	18807616 	blt	r3,r2,80100e4 <___svfprintf_internal_r+0x2ec>
 800ff0c:	42000204 	addi	r8,r8,8
 800ff10:	db003017 	ldw	r12,192(sp)
 800ff14:	6459883a 	add	r12,r12,r17
 800ff18:	db003015 	stw	r12,192(sp)
 800ff1c:	80800007 	ldb	r2,0(r16)
 800ff20:	10007726 	beq	r2,zero,8010100 <___svfprintf_internal_r+0x308>
 800ff24:	80800044 	addi	r2,r16,1
 800ff28:	84000047 	ldb	r16,1(r16)
 800ff2c:	d8002785 	stb	zero,158(sp)
 800ff30:	000d883a 	mov	r6,zero
 800ff34:	027fffc4 	movi	r9,-1
 800ff38:	d8002e15 	stw	zero,184(sp)
 800ff3c:	0023883a 	mov	r17,zero
 800ff40:	01001604 	movi	r4,88
 800ff44:	01400244 	movi	r5,9
 800ff48:	02800a84 	movi	r10,42
 800ff4c:	01c01b04 	movi	r7,108
 800ff50:	10c00044 	addi	r3,r2,1
 800ff54:	80bff804 	addi	r2,r16,-32
 800ff58:	2082e436 	bltu	r4,r2,8010aec <___svfprintf_internal_r+0xcf4>
 800ff5c:	100490ba 	slli	r2,r2,2
 800ff60:	02c20074 	movhi	r11,2049
 800ff64:	5affdd04 	addi	r11,r11,-140
 800ff68:	12c5883a 	add	r2,r2,r11
 800ff6c:	10800017 	ldw	r2,0(r2)
 800ff70:	1000683a 	jmp	r2
 800ff74:	080108a4 	muli	zero,at,1058
 800ff78:	08010aec 	andhi	zero,at,1067
 800ff7c:	08010aec 	andhi	zero,at,1067
 800ff80:	08010a24 	muli	zero,at,1064
 800ff84:	08010aec 	andhi	zero,at,1067
 800ff88:	08010aec 	andhi	zero,at,1067
 800ff8c:	08010aec 	andhi	zero,at,1067
 800ff90:	08010aec 	andhi	zero,at,1067
 800ff94:	08010aec 	andhi	zero,at,1067
 800ff98:	08010aec 	andhi	zero,at,1067
 800ff9c:	080109e8 	cmpgeui	zero,at,1063
 800ffa0:	08010a14 	ori	zero,at,1064
 800ffa4:	08010aec 	andhi	zero,at,1067
 800ffa8:	08010168 	cmpgeui	zero,at,1029
 800ffac:	08010178 	rdprs	zero,at,1029
 800ffb0:	08010aec 	andhi	zero,at,1067
 800ffb4:	080101b8 	rdprs	zero,at,1030
 800ffb8:	080101c8 	cmpgei	zero,at,1031
 800ffbc:	080101c8 	cmpgei	zero,at,1031
 800ffc0:	080101c8 	cmpgei	zero,at,1031
 800ffc4:	080101c8 	cmpgei	zero,at,1031
 800ffc8:	080101c8 	cmpgei	zero,at,1031
 800ffcc:	080101c8 	cmpgei	zero,at,1031
 800ffd0:	080101c8 	cmpgei	zero,at,1031
 800ffd4:	080101c8 	cmpgei	zero,at,1031
 800ffd8:	080101c8 	cmpgei	zero,at,1031
 800ffdc:	08010aec 	andhi	zero,at,1067
 800ffe0:	08010aec 	andhi	zero,at,1067
 800ffe4:	08010aec 	andhi	zero,at,1067
 800ffe8:	08010aec 	andhi	zero,at,1067
 800ffec:	08010aec 	andhi	zero,at,1067
 800fff0:	08010aec 	andhi	zero,at,1067
 800fff4:	08010aec 	andhi	zero,at,1067
 800fff8:	08010aec 	andhi	zero,at,1067
 800fffc:	08010aec 	andhi	zero,at,1067
 8010000:	08010aec 	andhi	zero,at,1067
 8010004:	080101fc 	xorhi	zero,at,1031
 8010008:	080106e8 	cmpgeui	zero,at,1051
 801000c:	08010aec 	andhi	zero,at,1067
 8010010:	080106e8 	cmpgeui	zero,at,1051
 8010014:	08010aec 	andhi	zero,at,1067
 8010018:	08010aec 	andhi	zero,at,1067
 801001c:	08010aec 	andhi	zero,at,1067
 8010020:	08010aec 	andhi	zero,at,1067
 8010024:	080107d4 	ori	zero,at,1055
 8010028:	08010aec 	andhi	zero,at,1067
 801002c:	08010aec 	andhi	zero,at,1067
 8010030:	0801067c 	xorhi	zero,at,1049
 8010034:	08010aec 	andhi	zero,at,1067
 8010038:	08010aec 	andhi	zero,at,1067
 801003c:	08010aec 	andhi	zero,at,1067
 8010040:	08010aec 	andhi	zero,at,1067
 8010044:	08010aec 	andhi	zero,at,1067
 8010048:	080106b8 	rdprs	zero,at,1050
 801004c:	08010aec 	andhi	zero,at,1067
 8010050:	08010aec 	andhi	zero,at,1067
 8010054:	080108c4 	addi	zero,at,1059
 8010058:	08010aec 	andhi	zero,at,1067
 801005c:	08010aec 	andhi	zero,at,1067
 8010060:	08010aec 	andhi	zero,at,1067
 8010064:	08010aec 	andhi	zero,at,1067
 8010068:	08010aec 	andhi	zero,at,1067
 801006c:	08010aec 	andhi	zero,at,1067
 8010070:	08010aec 	andhi	zero,at,1067
 8010074:	08010aec 	andhi	zero,at,1067
 8010078:	08010aec 	andhi	zero,at,1067
 801007c:	08010aec 	andhi	zero,at,1067
 8010080:	080109a8 	cmpgeui	zero,at,1062
 8010084:	080107e4 	muli	zero,at,1055
 8010088:	080106e8 	cmpgeui	zero,at,1051
 801008c:	080106e8 	cmpgeui	zero,at,1051
 8010090:	080106e8 	cmpgeui	zero,at,1051
 8010094:	0801084c 	andi	zero,at,1057
 8010098:	080107e4 	muli	zero,at,1055
 801009c:	08010aec 	andhi	zero,at,1067
 80100a0:	08010aec 	andhi	zero,at,1067
 80100a4:	0801085c 	xori	zero,at,1057
 80100a8:	08010aec 	andhi	zero,at,1067
 80100ac:	08010870 	cmpltui	zero,at,1057
 80100b0:	08010ab0 	cmpltui	zero,at,1066
 80100b4:	0801078c 	andi	zero,at,1054
 80100b8:	08010998 	cmpnei	zero,at,1062
 80100bc:	08010aec 	andhi	zero,at,1067
 80100c0:	08010920 	cmpeqi	zero,at,1060
 80100c4:	08010aec 	andhi	zero,at,1067
 80100c8:	08010a74 	orhi	zero,at,1065
 80100cc:	08010aec 	andhi	zero,at,1067
 80100d0:	08010aec 	andhi	zero,at,1067
 80100d4:	08010a34 	orhi	zero,at,1064
 80100d8:	db002917 	ldw	r12,164(sp)
 80100dc:	8323c83a 	sub	r17,r16,r12
 80100e0:	003f7e06 	br	800fedc <__alt_data_end+0xfc00fedc>
 80100e4:	d9002f17 	ldw	r4,188(sp)
 80100e8:	b80b883a 	mov	r5,r23
 80100ec:	b00d883a 	mov	r6,r22
 80100f0:	80189240 	call	8018924 <__ssprint_r>
 80100f4:	1000081e 	bne	r2,zero,8010118 <___svfprintf_internal_r+0x320>
 80100f8:	da000404 	addi	r8,sp,16
 80100fc:	003f8406 	br	800ff10 <__alt_data_end+0xfc00ff10>
 8010100:	d8802017 	ldw	r2,128(sp)
 8010104:	10000426 	beq	r2,zero,8010118 <___svfprintf_internal_r+0x320>
 8010108:	d9002f17 	ldw	r4,188(sp)
 801010c:	b80b883a 	mov	r5,r23
 8010110:	d9801e04 	addi	r6,sp,120
 8010114:	80189240 	call	8018924 <__ssprint_r>
 8010118:	b880030b 	ldhu	r2,12(r23)
 801011c:	1080100c 	andi	r2,r2,64
 8010120:	10000d1e 	bne	r2,zero,8010158 <___svfprintf_internal_r+0x360>
 8010124:	d8803017 	ldw	r2,192(sp)
 8010128:	dfc04a17 	ldw	ra,296(sp)
 801012c:	df004917 	ldw	fp,292(sp)
 8010130:	ddc04817 	ldw	r23,288(sp)
 8010134:	dd804717 	ldw	r22,284(sp)
 8010138:	dd404617 	ldw	r21,280(sp)
 801013c:	dd004517 	ldw	r20,276(sp)
 8010140:	dcc04417 	ldw	r19,272(sp)
 8010144:	dc804317 	ldw	r18,268(sp)
 8010148:	dc404217 	ldw	r17,264(sp)
 801014c:	dc004117 	ldw	r16,260(sp)
 8010150:	dec04b04 	addi	sp,sp,300
 8010154:	f800283a 	ret
 8010158:	00bfffc4 	movi	r2,-1
 801015c:	003ff206 	br	8010128 <__alt_data_end+0xfc010128>
 8010160:	dc002917 	ldw	r16,164(sp)
 8010164:	003f6d06 	br	800ff1c <__alt_data_end+0xfc00ff1c>
 8010168:	1805883a 	mov	r2,r3
 801016c:	8c400114 	ori	r17,r17,4
 8010170:	1c000007 	ldb	r16,0(r3)
 8010174:	003f7606 	br	800ff50 <__alt_data_end+0xfc00ff50>
 8010178:	1c000007 	ldb	r16,0(r3)
 801017c:	18800044 	addi	r2,r3,1
 8010180:	8286e726 	beq	r16,r10,8011d20 <___svfprintf_internal_r+0x1f28>
 8010184:	82fff404 	addi	r11,r16,-48
 8010188:	1007883a 	mov	r3,r2
 801018c:	0013883a 	mov	r9,zero
 8010190:	2aff7036 	bltu	r5,r11,800ff54 <__alt_data_end+0xfc00ff54>
 8010194:	1c000007 	ldb	r16,0(r3)
 8010198:	4a4002a4 	muli	r9,r9,10
 801019c:	18c00044 	addi	r3,r3,1
 80101a0:	5a53883a 	add	r9,r11,r9
 80101a4:	82fff404 	addi	r11,r16,-48
 80101a8:	2afffa2e 	bgeu	r5,r11,8010194 <__alt_data_end+0xfc010194>
 80101ac:	483f690e 	bge	r9,zero,800ff54 <__alt_data_end+0xfc00ff54>
 80101b0:	027fffc4 	movi	r9,-1
 80101b4:	003f6706 	br	800ff54 <__alt_data_end+0xfc00ff54>
 80101b8:	8c402014 	ori	r17,r17,128
 80101bc:	1805883a 	mov	r2,r3
 80101c0:	1c000007 	ldb	r16,0(r3)
 80101c4:	003f6206 	br	800ff50 <__alt_data_end+0xfc00ff50>
 80101c8:	1805883a 	mov	r2,r3
 80101cc:	d8002e15 	stw	zero,184(sp)
 80101d0:	82fff404 	addi	r11,r16,-48
 80101d4:	0019883a 	mov	r12,zero
 80101d8:	14000007 	ldb	r16,0(r2)
 80101dc:	630002a4 	muli	r12,r12,10
 80101e0:	18c00044 	addi	r3,r3,1
 80101e4:	1805883a 	mov	r2,r3
 80101e8:	62d9883a 	add	r12,r12,r11
 80101ec:	82fff404 	addi	r11,r16,-48
 80101f0:	2afff92e 	bgeu	r5,r11,80101d8 <__alt_data_end+0xfc0101d8>
 80101f4:	db002e15 	stw	r12,184(sp)
 80101f8:	003f5606 	br	800ff54 <__alt_data_end+0xfc00ff54>
 80101fc:	8c400414 	ori	r17,r17,16
 8010200:	d8c02915 	stw	r3,164(sp)
 8010204:	d9802785 	stb	r6,158(sp)
 8010208:	8880080c 	andi	r2,r17,32
 801020c:	d8c02d17 	ldw	r3,180(sp)
 8010210:	10017926 	beq	r2,zero,80107f8 <___svfprintf_internal_r+0xa00>
 8010214:	db002d17 	ldw	r12,180(sp)
 8010218:	18800117 	ldw	r2,4(r3)
 801021c:	1cc00017 	ldw	r19,0(r3)
 8010220:	63000204 	addi	r12,r12,8
 8010224:	db002d15 	stw	r12,180(sp)
 8010228:	1039883a 	mov	fp,r2
 801022c:	10017d16 	blt	r2,zero,8010824 <___svfprintf_internal_r+0xa2c>
 8010230:	dd402783 	ldbu	r21,158(sp)
 8010234:	da403215 	stw	r9,200(sp)
 8010238:	00800044 	movi	r2,1
 801023c:	9f06b03a 	or	r3,r19,fp
 8010240:	48000216 	blt	r9,zero,801024c <___svfprintf_internal_r+0x454>
 8010244:	013fdfc4 	movi	r4,-129
 8010248:	8922703a 	and	r17,r17,r4
 801024c:	1802371e 	bne	r3,zero,8010b2c <___svfprintf_internal_r+0xd34>
 8010250:	48034526 	beq	r9,zero,8010f68 <___svfprintf_internal_r+0x1170>
 8010254:	10803fcc 	andi	r2,r2,255
 8010258:	00c00044 	movi	r3,1
 801025c:	10c25826 	beq	r2,r3,8010bc0 <___svfprintf_internal_r+0xdc8>
 8010260:	00c00084 	movi	r3,2
 8010264:	10c2db26 	beq	r2,r3,8010dd4 <___svfprintf_internal_r+0xfdc>
 8010268:	b007883a 	mov	r3,r22
 801026c:	9808d0fa 	srli	r4,r19,3
 8010270:	e00a977a 	slli	r5,fp,29
 8010274:	e038d0fa 	srli	fp,fp,3
 8010278:	9cc001cc 	andi	r19,r19,7
 801027c:	98800c04 	addi	r2,r19,48
 8010280:	18ffffc4 	addi	r3,r3,-1
 8010284:	2926b03a 	or	r19,r5,r4
 8010288:	18800005 	stb	r2,0(r3)
 801028c:	9f08b03a 	or	r4,r19,fp
 8010290:	203ff61e 	bne	r4,zero,801026c <__alt_data_end+0xfc01026c>
 8010294:	8900004c 	andi	r4,r17,1
 8010298:	d8c03115 	stw	r3,196(sp)
 801029c:	2002db26 	beq	r4,zero,8010e0c <___svfprintf_internal_r+0x1014>
 80102a0:	10803fcc 	andi	r2,r2,255
 80102a4:	1080201c 	xori	r2,r2,128
 80102a8:	10bfe004 	addi	r2,r2,-128
 80102ac:	01000c04 	movi	r4,48
 80102b0:	11056626 	beq	r2,r4,801184c <___svfprintf_internal_r+0x1a54>
 80102b4:	dac03117 	ldw	r11,196(sp)
 80102b8:	193fffc5 	stb	r4,-1(r3)
 80102bc:	5affffc4 	addi	r11,r11,-1
 80102c0:	dac03115 	stw	r11,196(sp)
 80102c4:	b2e5c83a 	sub	r18,r22,r11
 80102c8:	9005883a 	mov	r2,r18
 80102cc:	9240010e 	bge	r18,r9,80102d4 <___svfprintf_internal_r+0x4dc>
 80102d0:	4805883a 	mov	r2,r9
 80102d4:	d8802a15 	stw	r2,168(sp)
 80102d8:	d8003415 	stw	zero,208(sp)
 80102dc:	a8803fcc 	andi	r2,r21,255
 80102e0:	1080201c 	xori	r2,r2,128
 80102e4:	10bfe004 	addi	r2,r2,-128
 80102e8:	10000326 	beq	r2,zero,80102f8 <___svfprintf_internal_r+0x500>
 80102ec:	d8c02a17 	ldw	r3,168(sp)
 80102f0:	18c00044 	addi	r3,r3,1
 80102f4:	d8c02a15 	stw	r3,168(sp)
 80102f8:	8ac0008c 	andi	r11,r17,2
 80102fc:	dac02b15 	stw	r11,172(sp)
 8010300:	58000326 	beq	r11,zero,8010310 <___svfprintf_internal_r+0x518>
 8010304:	db002a17 	ldw	r12,168(sp)
 8010308:	63000084 	addi	r12,r12,2
 801030c:	db002a15 	stw	r12,168(sp)
 8010310:	88c0210c 	andi	r3,r17,132
 8010314:	d8c02c15 	stw	r3,176(sp)
 8010318:	1802021e 	bne	r3,zero,8010b24 <___svfprintf_internal_r+0xd2c>
 801031c:	dac02e17 	ldw	r11,184(sp)
 8010320:	db002a17 	ldw	r12,168(sp)
 8010324:	5b39c83a 	sub	fp,r11,r12
 8010328:	0701fe0e 	bge	zero,fp,8010b24 <___svfprintf_internal_r+0xd2c>
 801032c:	02400404 	movi	r9,16
 8010330:	d8c02017 	ldw	r3,128(sp)
 8010334:	d8801f17 	ldw	r2,124(sp)
 8010338:	4f057d0e 	bge	r9,fp,8011930 <___svfprintf_internal_r+0x1b38>
 801033c:	014200f4 	movhi	r5,2051
 8010340:	e009883a 	mov	r4,fp
 8010344:	296b1f84 	addi	r5,r5,-21378
 8010348:	dc003c15 	stw	r16,240(sp)
 801034c:	9039883a 	mov	fp,r18
 8010350:	d9403615 	stw	r5,216(sp)
 8010354:	8825883a 	mov	r18,r17
 8010358:	482b883a 	mov	r21,r9
 801035c:	04c001c4 	movi	r19,7
 8010360:	dc002f17 	ldw	r16,188(sp)
 8010364:	2023883a 	mov	r17,r4
 8010368:	00000306 	br	8010378 <___svfprintf_internal_r+0x580>
 801036c:	8c7ffc04 	addi	r17,r17,-16
 8010370:	42000204 	addi	r8,r8,8
 8010374:	ac40130e 	bge	r21,r17,80103c4 <___svfprintf_internal_r+0x5cc>
 8010378:	02c200f4 	movhi	r11,2051
 801037c:	18c00404 	addi	r3,r3,16
 8010380:	10800044 	addi	r2,r2,1
 8010384:	5aeb1f84 	addi	r11,r11,-21378
 8010388:	42c00015 	stw	r11,0(r8)
 801038c:	45400115 	stw	r21,4(r8)
 8010390:	d8c02015 	stw	r3,128(sp)
 8010394:	d8801f15 	stw	r2,124(sp)
 8010398:	98bff40e 	bge	r19,r2,801036c <__alt_data_end+0xfc01036c>
 801039c:	8009883a 	mov	r4,r16
 80103a0:	b80b883a 	mov	r5,r23
 80103a4:	b00d883a 	mov	r6,r22
 80103a8:	80189240 	call	8018924 <__ssprint_r>
 80103ac:	103f5a1e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 80103b0:	8c7ffc04 	addi	r17,r17,-16
 80103b4:	d8c02017 	ldw	r3,128(sp)
 80103b8:	d8801f17 	ldw	r2,124(sp)
 80103bc:	da000404 	addi	r8,sp,16
 80103c0:	ac7fed16 	blt	r21,r17,8010378 <__alt_data_end+0xfc010378>
 80103c4:	dc003c17 	ldw	r16,240(sp)
 80103c8:	8809883a 	mov	r4,r17
 80103cc:	9023883a 	mov	r17,r18
 80103d0:	e025883a 	mov	r18,fp
 80103d4:	2039883a 	mov	fp,r4
 80103d8:	db003617 	ldw	r12,216(sp)
 80103dc:	e0c7883a 	add	r3,fp,r3
 80103e0:	10800044 	addi	r2,r2,1
 80103e4:	43000015 	stw	r12,0(r8)
 80103e8:	47000115 	stw	fp,4(r8)
 80103ec:	d8c02015 	stw	r3,128(sp)
 80103f0:	d8801f15 	stw	r2,124(sp)
 80103f4:	010001c4 	movi	r4,7
 80103f8:	20833516 	blt	r4,r2,80110d0 <___svfprintf_internal_r+0x12d8>
 80103fc:	d8802787 	ldb	r2,158(sp)
 8010400:	42000204 	addi	r8,r8,8
 8010404:	10000c26 	beq	r2,zero,8010438 <___svfprintf_internal_r+0x640>
 8010408:	d8801f17 	ldw	r2,124(sp)
 801040c:	d9002784 	addi	r4,sp,158
 8010410:	18c00044 	addi	r3,r3,1
 8010414:	10800044 	addi	r2,r2,1
 8010418:	41000015 	stw	r4,0(r8)
 801041c:	01000044 	movi	r4,1
 8010420:	41000115 	stw	r4,4(r8)
 8010424:	d8c02015 	stw	r3,128(sp)
 8010428:	d8801f15 	stw	r2,124(sp)
 801042c:	010001c4 	movi	r4,7
 8010430:	2082df16 	blt	r4,r2,8010fb0 <___svfprintf_internal_r+0x11b8>
 8010434:	42000204 	addi	r8,r8,8
 8010438:	dac02b17 	ldw	r11,172(sp)
 801043c:	58000c26 	beq	r11,zero,8010470 <___svfprintf_internal_r+0x678>
 8010440:	d8801f17 	ldw	r2,124(sp)
 8010444:	d9002704 	addi	r4,sp,156
 8010448:	18c00084 	addi	r3,r3,2
 801044c:	10800044 	addi	r2,r2,1
 8010450:	41000015 	stw	r4,0(r8)
 8010454:	01000084 	movi	r4,2
 8010458:	41000115 	stw	r4,4(r8)
 801045c:	d8c02015 	stw	r3,128(sp)
 8010460:	d8801f15 	stw	r2,124(sp)
 8010464:	010001c4 	movi	r4,7
 8010468:	2082d916 	blt	r4,r2,8010fd0 <___svfprintf_internal_r+0x11d8>
 801046c:	42000204 	addi	r8,r8,8
 8010470:	db002c17 	ldw	r12,176(sp)
 8010474:	00802004 	movi	r2,128
 8010478:	60822026 	beq	r12,r2,8010cfc <___svfprintf_internal_r+0xf04>
 801047c:	db003217 	ldw	r12,200(sp)
 8010480:	64abc83a 	sub	r21,r12,r18
 8010484:	0540310e 	bge	zero,r21,801054c <___svfprintf_internal_r+0x754>
 8010488:	07000404 	movi	fp,16
 801048c:	d8801f17 	ldw	r2,124(sp)
 8010490:	e544180e 	bge	fp,r21,80114f4 <___svfprintf_internal_r+0x16fc>
 8010494:	014200f4 	movhi	r5,2051
 8010498:	a809883a 	mov	r4,r21
 801049c:	296b1b84 	addi	r5,r5,-21394
 80104a0:	dc002c15 	stw	r16,176(sp)
 80104a4:	902b883a 	mov	r21,r18
 80104a8:	d9402b15 	stw	r5,172(sp)
 80104ac:	8825883a 	mov	r18,r17
 80104b0:	04c001c4 	movi	r19,7
 80104b4:	dc002f17 	ldw	r16,188(sp)
 80104b8:	2023883a 	mov	r17,r4
 80104bc:	00000306 	br	80104cc <___svfprintf_internal_r+0x6d4>
 80104c0:	8c7ffc04 	addi	r17,r17,-16
 80104c4:	42000204 	addi	r8,r8,8
 80104c8:	e440110e 	bge	fp,r17,8010510 <___svfprintf_internal_r+0x718>
 80104cc:	18c00404 	addi	r3,r3,16
 80104d0:	10800044 	addi	r2,r2,1
 80104d4:	45000015 	stw	r20,0(r8)
 80104d8:	47000115 	stw	fp,4(r8)
 80104dc:	d8c02015 	stw	r3,128(sp)
 80104e0:	d8801f15 	stw	r2,124(sp)
 80104e4:	98bff60e 	bge	r19,r2,80104c0 <__alt_data_end+0xfc0104c0>
 80104e8:	8009883a 	mov	r4,r16
 80104ec:	b80b883a 	mov	r5,r23
 80104f0:	b00d883a 	mov	r6,r22
 80104f4:	80189240 	call	8018924 <__ssprint_r>
 80104f8:	103f071e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 80104fc:	8c7ffc04 	addi	r17,r17,-16
 8010500:	d8c02017 	ldw	r3,128(sp)
 8010504:	d8801f17 	ldw	r2,124(sp)
 8010508:	da000404 	addi	r8,sp,16
 801050c:	e47fef16 	blt	fp,r17,80104cc <__alt_data_end+0xfc0104cc>
 8010510:	dc002c17 	ldw	r16,176(sp)
 8010514:	8809883a 	mov	r4,r17
 8010518:	9023883a 	mov	r17,r18
 801051c:	a825883a 	mov	r18,r21
 8010520:	202b883a 	mov	r21,r4
 8010524:	dac02b17 	ldw	r11,172(sp)
 8010528:	1d47883a 	add	r3,r3,r21
 801052c:	10800044 	addi	r2,r2,1
 8010530:	42c00015 	stw	r11,0(r8)
 8010534:	45400115 	stw	r21,4(r8)
 8010538:	d8c02015 	stw	r3,128(sp)
 801053c:	d8801f15 	stw	r2,124(sp)
 8010540:	010001c4 	movi	r4,7
 8010544:	20829216 	blt	r4,r2,8010f90 <___svfprintf_internal_r+0x1198>
 8010548:	42000204 	addi	r8,r8,8
 801054c:	8880400c 	andi	r2,r17,256
 8010550:	1001a11e 	bne	r2,zero,8010bd8 <___svfprintf_internal_r+0xde0>
 8010554:	d8801f17 	ldw	r2,124(sp)
 8010558:	db003117 	ldw	r12,196(sp)
 801055c:	1c87883a 	add	r3,r3,r18
 8010560:	10800044 	addi	r2,r2,1
 8010564:	43000015 	stw	r12,0(r8)
 8010568:	44800115 	stw	r18,4(r8)
 801056c:	d8c02015 	stw	r3,128(sp)
 8010570:	d8801f15 	stw	r2,124(sp)
 8010574:	010001c4 	movi	r4,7
 8010578:	20826d16 	blt	r4,r2,8010f30 <___svfprintf_internal_r+0x1138>
 801057c:	42000204 	addi	r8,r8,8
 8010580:	8c40010c 	andi	r17,r17,4
 8010584:	88003226 	beq	r17,zero,8010650 <___svfprintf_internal_r+0x858>
 8010588:	db002e17 	ldw	r12,184(sp)
 801058c:	dac02a17 	ldw	r11,168(sp)
 8010590:	62e1c83a 	sub	r16,r12,r11
 8010594:	04002e0e 	bge	zero,r16,8010650 <___svfprintf_internal_r+0x858>
 8010598:	04400404 	movi	r17,16
 801059c:	d8801f17 	ldw	r2,124(sp)
 80105a0:	8c05240e 	bge	r17,r16,8011a34 <___svfprintf_internal_r+0x1c3c>
 80105a4:	010200f4 	movhi	r4,2051
 80105a8:	212b1f84 	addi	r4,r4,-21378
 80105ac:	d9003615 	stw	r4,216(sp)
 80105b0:	048001c4 	movi	r18,7
 80105b4:	dcc02f17 	ldw	r19,188(sp)
 80105b8:	00000306 	br	80105c8 <___svfprintf_internal_r+0x7d0>
 80105bc:	843ffc04 	addi	r16,r16,-16
 80105c0:	42000204 	addi	r8,r8,8
 80105c4:	8c00130e 	bge	r17,r16,8010614 <___svfprintf_internal_r+0x81c>
 80105c8:	014200f4 	movhi	r5,2051
 80105cc:	18c00404 	addi	r3,r3,16
 80105d0:	10800044 	addi	r2,r2,1
 80105d4:	296b1f84 	addi	r5,r5,-21378
 80105d8:	41400015 	stw	r5,0(r8)
 80105dc:	44400115 	stw	r17,4(r8)
 80105e0:	d8c02015 	stw	r3,128(sp)
 80105e4:	d8801f15 	stw	r2,124(sp)
 80105e8:	90bff40e 	bge	r18,r2,80105bc <__alt_data_end+0xfc0105bc>
 80105ec:	9809883a 	mov	r4,r19
 80105f0:	b80b883a 	mov	r5,r23
 80105f4:	b00d883a 	mov	r6,r22
 80105f8:	80189240 	call	8018924 <__ssprint_r>
 80105fc:	103ec61e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 8010600:	843ffc04 	addi	r16,r16,-16
 8010604:	d8c02017 	ldw	r3,128(sp)
 8010608:	d8801f17 	ldw	r2,124(sp)
 801060c:	da000404 	addi	r8,sp,16
 8010610:	8c3fed16 	blt	r17,r16,80105c8 <__alt_data_end+0xfc0105c8>
 8010614:	dac03617 	ldw	r11,216(sp)
 8010618:	1c07883a 	add	r3,r3,r16
 801061c:	10800044 	addi	r2,r2,1
 8010620:	42c00015 	stw	r11,0(r8)
 8010624:	44000115 	stw	r16,4(r8)
 8010628:	d8c02015 	stw	r3,128(sp)
 801062c:	d8801f15 	stw	r2,124(sp)
 8010630:	010001c4 	movi	r4,7
 8010634:	2080060e 	bge	r4,r2,8010650 <___svfprintf_internal_r+0x858>
 8010638:	d9002f17 	ldw	r4,188(sp)
 801063c:	b80b883a 	mov	r5,r23
 8010640:	b00d883a 	mov	r6,r22
 8010644:	80189240 	call	8018924 <__ssprint_r>
 8010648:	103eb31e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 801064c:	d8c02017 	ldw	r3,128(sp)
 8010650:	d8802a17 	ldw	r2,168(sp)
 8010654:	db002e17 	ldw	r12,184(sp)
 8010658:	1300010e 	bge	r2,r12,8010660 <___svfprintf_internal_r+0x868>
 801065c:	6005883a 	mov	r2,r12
 8010660:	dac03017 	ldw	r11,192(sp)
 8010664:	5897883a 	add	r11,r11,r2
 8010668:	dac03015 	stw	r11,192(sp)
 801066c:	1802381e 	bne	r3,zero,8010f50 <___svfprintf_internal_r+0x1158>
 8010670:	d8001f15 	stw	zero,124(sp)
 8010674:	da000404 	addi	r8,sp,16
 8010678:	003e0b06 	br	800fea8 <__alt_data_end+0xfc00fea8>
 801067c:	8c400414 	ori	r17,r17,16
 8010680:	d8c02915 	stw	r3,164(sp)
 8010684:	8880080c 	andi	r2,r17,32
 8010688:	10010c26 	beq	r2,zero,8010abc <___svfprintf_internal_r+0xcc4>
 801068c:	db002d17 	ldw	r12,180(sp)
 8010690:	0005883a 	mov	r2,zero
 8010694:	64c00017 	ldw	r19,0(r12)
 8010698:	67000117 	ldw	fp,4(r12)
 801069c:	63000204 	addi	r12,r12,8
 80106a0:	db002d15 	stw	r12,180(sp)
 80106a4:	9f06b03a 	or	r3,r19,fp
 80106a8:	d8002785 	stb	zero,158(sp)
 80106ac:	da403215 	stw	r9,200(sp)
 80106b0:	002b883a 	mov	r21,zero
 80106b4:	003ee206 	br	8010240 <__alt_data_end+0xfc010240>
 80106b8:	8c400414 	ori	r17,r17,16
 80106bc:	d8c02915 	stw	r3,164(sp)
 80106c0:	8880080c 	andi	r2,r17,32
 80106c4:	1000ee26 	beq	r2,zero,8010a80 <___svfprintf_internal_r+0xc88>
 80106c8:	dac02d17 	ldw	r11,180(sp)
 80106cc:	00800044 	movi	r2,1
 80106d0:	5cc00017 	ldw	r19,0(r11)
 80106d4:	5f000117 	ldw	fp,4(r11)
 80106d8:	5ac00204 	addi	r11,r11,8
 80106dc:	dac02d15 	stw	r11,180(sp)
 80106e0:	9f06b03a 	or	r3,r19,fp
 80106e4:	003ff006 	br	80106a8 <__alt_data_end+0xfc0106a8>
 80106e8:	db002d17 	ldw	r12,180(sp)
 80106ec:	dac02d17 	ldw	r11,180(sp)
 80106f0:	d8c02915 	stw	r3,164(sp)
 80106f4:	63000017 	ldw	r12,0(r12)
 80106f8:	5ac00117 	ldw	r11,4(r11)
 80106fc:	d9802785 	stb	r6,158(sp)
 8010700:	6009883a 	mov	r4,r12
 8010704:	580b883a 	mov	r5,r11
 8010708:	db003715 	stw	r12,220(sp)
 801070c:	da004015 	stw	r8,256(sp)
 8010710:	da403f15 	stw	r9,252(sp)
 8010714:	dac03815 	stw	r11,224(sp)
 8010718:	800a4480 	call	800a448 <__fpclassifyd>
 801071c:	db002d17 	ldw	r12,180(sp)
 8010720:	04800044 	movi	r18,1
 8010724:	da004017 	ldw	r8,256(sp)
 8010728:	64c00204 	addi	r19,r12,8
 801072c:	da403f17 	ldw	r9,252(sp)
 8010730:	d9003717 	ldw	r4,220(sp)
 8010734:	d9403817 	ldw	r5,224(sp)
 8010738:	14832c1e 	bne	r2,r18,80113ec <___svfprintf_internal_r+0x15f4>
 801073c:	000d883a 	mov	r6,zero
 8010740:	000f883a 	mov	r7,zero
 8010744:	800c1740 	call	800c174 <__ledf2>
 8010748:	da004017 	ldw	r8,256(sp)
 801074c:	1004c416 	blt	r2,zero,8011a60 <___svfprintf_internal_r+0x1c68>
 8010750:	dd402783 	ldbu	r21,158(sp)
 8010754:	008011c4 	movi	r2,71
 8010758:	14041a0e 	bge	r2,r16,80117c4 <___svfprintf_internal_r+0x19cc>
 801075c:	00c200f4 	movhi	r3,2051
 8010760:	18eb0c04 	addi	r3,r3,-21456
 8010764:	d8c03115 	stw	r3,196(sp)
 8010768:	02c000c4 	movi	r11,3
 801076c:	00bfdfc4 	movi	r2,-129
 8010770:	dac02a15 	stw	r11,168(sp)
 8010774:	88a2703a 	and	r17,r17,r2
 8010778:	dcc02d15 	stw	r19,180(sp)
 801077c:	5825883a 	mov	r18,r11
 8010780:	d8003215 	stw	zero,200(sp)
 8010784:	d8003415 	stw	zero,208(sp)
 8010788:	003ed406 	br	80102dc <__alt_data_end+0xfc0102dc>
 801078c:	db002d17 	ldw	r12,180(sp)
 8010790:	00800c04 	movi	r2,48
 8010794:	d8802705 	stb	r2,156(sp)
 8010798:	64c00017 	ldw	r19,0(r12)
 801079c:	00801e04 	movi	r2,120
 80107a0:	d8802745 	stb	r2,157(sp)
 80107a4:	008200f4 	movhi	r2,2051
 80107a8:	10ab1404 	addi	r2,r2,-21424
 80107ac:	63000104 	addi	r12,r12,4
 80107b0:	d8c02915 	stw	r3,164(sp)
 80107b4:	d8803b15 	stw	r2,236(sp)
 80107b8:	0039883a 	mov	fp,zero
 80107bc:	8c400094 	ori	r17,r17,2
 80107c0:	db002d15 	stw	r12,180(sp)
 80107c4:	00800084 	movi	r2,2
 80107c8:	04001e04 	movi	r16,120
 80107cc:	9807883a 	mov	r3,r19
 80107d0:	003fb506 	br	80106a8 <__alt_data_end+0xfc0106a8>
 80107d4:	8c400214 	ori	r17,r17,8
 80107d8:	1805883a 	mov	r2,r3
 80107dc:	1c000007 	ldb	r16,0(r3)
 80107e0:	003ddb06 	br	800ff50 <__alt_data_end+0xfc00ff50>
 80107e4:	d8c02915 	stw	r3,164(sp)
 80107e8:	d9802785 	stb	r6,158(sp)
 80107ec:	8880080c 	andi	r2,r17,32
 80107f0:	d8c02d17 	ldw	r3,180(sp)
 80107f4:	103e871e 	bne	r2,zero,8010214 <__alt_data_end+0xfc010214>
 80107f8:	8880040c 	andi	r2,r17,16
 80107fc:	10027a1e 	bne	r2,zero,80111e8 <___svfprintf_internal_r+0x13f0>
 8010800:	8880100c 	andi	r2,r17,64
 8010804:	10027826 	beq	r2,zero,80111e8 <___svfprintf_internal_r+0x13f0>
 8010808:	1cc0000f 	ldh	r19,0(r3)
 801080c:	db002d17 	ldw	r12,180(sp)
 8010810:	9839d7fa 	srai	fp,r19,31
 8010814:	63000104 	addi	r12,r12,4
 8010818:	db002d15 	stw	r12,180(sp)
 801081c:	e005883a 	mov	r2,fp
 8010820:	103e830e 	bge	r2,zero,8010230 <__alt_data_end+0xfc010230>
 8010824:	04e7c83a 	sub	r19,zero,r19
 8010828:	9804c03a 	cmpne	r2,r19,zero
 801082c:	0739c83a 	sub	fp,zero,fp
 8010830:	e0b9c83a 	sub	fp,fp,r2
 8010834:	05400b44 	movi	r21,45
 8010838:	dd402785 	stb	r21,158(sp)
 801083c:	da403215 	stw	r9,200(sp)
 8010840:	00800044 	movi	r2,1
 8010844:	9f06b03a 	or	r3,r19,fp
 8010848:	003e7d06 	br	8010240 <__alt_data_end+0xfc010240>
 801084c:	8c401014 	ori	r17,r17,64
 8010850:	1805883a 	mov	r2,r3
 8010854:	1c000007 	ldb	r16,0(r3)
 8010858:	003dbd06 	br	800ff50 <__alt_data_end+0xfc00ff50>
 801085c:	1c000007 	ldb	r16,0(r3)
 8010860:	81c37126 	beq	r16,r7,8011628 <___svfprintf_internal_r+0x1830>
 8010864:	8c400414 	ori	r17,r17,16
 8010868:	1805883a 	mov	r2,r3
 801086c:	003db806 	br	800ff50 <__alt_data_end+0xfc00ff50>
 8010870:	d8c02915 	stw	r3,164(sp)
 8010874:	d9802785 	stb	r6,158(sp)
 8010878:	8880080c 	andi	r2,r17,32
 801087c:	1002f026 	beq	r2,zero,8011440 <___svfprintf_internal_r+0x1648>
 8010880:	db002d17 	ldw	r12,180(sp)
 8010884:	dac03017 	ldw	r11,192(sp)
 8010888:	60800017 	ldw	r2,0(r12)
 801088c:	5807d7fa 	srai	r3,r11,31
 8010890:	63000104 	addi	r12,r12,4
 8010894:	db002d15 	stw	r12,180(sp)
 8010898:	12c00015 	stw	r11,0(r2)
 801089c:	10c00115 	stw	r3,4(r2)
 80108a0:	003d8106 	br	800fea8 <__alt_data_end+0xfc00fea8>
 80108a4:	30803fcc 	andi	r2,r6,255
 80108a8:	1080201c 	xori	r2,r2,128
 80108ac:	10bfe004 	addi	r2,r2,-128
 80108b0:	1002fd1e 	bne	r2,zero,80114a8 <___svfprintf_internal_r+0x16b0>
 80108b4:	1805883a 	mov	r2,r3
 80108b8:	01800804 	movi	r6,32
 80108bc:	1c000007 	ldb	r16,0(r3)
 80108c0:	003da306 	br	800ff50 <__alt_data_end+0xfc00ff50>
 80108c4:	030200f4 	movhi	r12,2051
 80108c8:	632b0f04 	addi	r12,r12,-21444
 80108cc:	d8c02915 	stw	r3,164(sp)
 80108d0:	d9802785 	stb	r6,158(sp)
 80108d4:	db003b15 	stw	r12,236(sp)
 80108d8:	88c0080c 	andi	r3,r17,32
 80108dc:	d8802d17 	ldw	r2,180(sp)
 80108e0:	18005c26 	beq	r3,zero,8010a54 <___svfprintf_internal_r+0xc5c>
 80108e4:	dac02d17 	ldw	r11,180(sp)
 80108e8:	14c00017 	ldw	r19,0(r2)
 80108ec:	17000117 	ldw	fp,4(r2)
 80108f0:	5ac00204 	addi	r11,r11,8
 80108f4:	dac02d15 	stw	r11,180(sp)
 80108f8:	8880004c 	andi	r2,r17,1
 80108fc:	10022f26 	beq	r2,zero,80111bc <___svfprintf_internal_r+0x13c4>
 8010900:	9f06b03a 	or	r3,r19,fp
 8010904:	1802eb26 	beq	r3,zero,80114b4 <___svfprintf_internal_r+0x16bc>
 8010908:	00800c04 	movi	r2,48
 801090c:	d8802705 	stb	r2,156(sp)
 8010910:	dc002745 	stb	r16,157(sp)
 8010914:	8c400094 	ori	r17,r17,2
 8010918:	00800084 	movi	r2,2
 801091c:	003f6206 	br	80106a8 <__alt_data_end+0xfc0106a8>
 8010920:	dac02d17 	ldw	r11,180(sp)
 8010924:	db002d17 	ldw	r12,180(sp)
 8010928:	d8c02915 	stw	r3,164(sp)
 801092c:	5ac00017 	ldw	r11,0(r11)
 8010930:	d8002785 	stb	zero,158(sp)
 8010934:	64c00104 	addi	r19,r12,4
 8010938:	dac03115 	stw	r11,196(sp)
 801093c:	58042e26 	beq	r11,zero,80119f8 <___svfprintf_internal_r+0x1c00>
 8010940:	d9003117 	ldw	r4,196(sp)
 8010944:	4803c416 	blt	r9,zero,8011858 <___svfprintf_internal_r+0x1a60>
 8010948:	480d883a 	mov	r6,r9
 801094c:	000b883a 	mov	r5,zero
 8010950:	da004015 	stw	r8,256(sp)
 8010954:	da403f15 	stw	r9,252(sp)
 8010958:	80172f00 	call	80172f0 <memchr>
 801095c:	da004017 	ldw	r8,256(sp)
 8010960:	da403f17 	ldw	r9,252(sp)
 8010964:	10048a26 	beq	r2,zero,8011b90 <___svfprintf_internal_r+0x1d98>
 8010968:	d8c03117 	ldw	r3,196(sp)
 801096c:	10e5c83a 	sub	r18,r2,r3
 8010970:	4c80010e 	bge	r9,r18,8010978 <___svfprintf_internal_r+0xb80>
 8010974:	4825883a 	mov	r18,r9
 8010978:	9005883a 	mov	r2,r18
 801097c:	9003bb16 	blt	r18,zero,801186c <___svfprintf_internal_r+0x1a74>
 8010980:	dd402783 	ldbu	r21,158(sp)
 8010984:	d8802a15 	stw	r2,168(sp)
 8010988:	dcc02d15 	stw	r19,180(sp)
 801098c:	d8003215 	stw	zero,200(sp)
 8010990:	d8003415 	stw	zero,208(sp)
 8010994:	003e5106 	br	80102dc <__alt_data_end+0xfc0102dc>
 8010998:	8c400814 	ori	r17,r17,32
 801099c:	1805883a 	mov	r2,r3
 80109a0:	1c000007 	ldb	r16,0(r3)
 80109a4:	003d6a06 	br	800ff50 <__alt_data_end+0xfc00ff50>
 80109a8:	db002d17 	ldw	r12,180(sp)
 80109ac:	d8c02915 	stw	r3,164(sp)
 80109b0:	dac01404 	addi	r11,sp,80
 80109b4:	60800017 	ldw	r2,0(r12)
 80109b8:	00c00044 	movi	r3,1
 80109bc:	63000104 	addi	r12,r12,4
 80109c0:	d8801405 	stb	r2,80(sp)
 80109c4:	d8c02a15 	stw	r3,168(sp)
 80109c8:	d8002785 	stb	zero,158(sp)
 80109cc:	db002d15 	stw	r12,180(sp)
 80109d0:	1825883a 	mov	r18,r3
 80109d4:	d8003215 	stw	zero,200(sp)
 80109d8:	d8003415 	stw	zero,208(sp)
 80109dc:	dac03115 	stw	r11,196(sp)
 80109e0:	0005883a 	mov	r2,zero
 80109e4:	003e4406 	br	80102f8 <__alt_data_end+0xfc0102f8>
 80109e8:	dac02d17 	ldw	r11,180(sp)
 80109ec:	db002d17 	ldw	r12,180(sp)
 80109f0:	5ac00017 	ldw	r11,0(r11)
 80109f4:	dac02e15 	stw	r11,184(sp)
 80109f8:	62c00104 	addi	r11,r12,4
 80109fc:	db002e17 	ldw	r12,184(sp)
 8010a00:	60030316 	blt	r12,zero,8011610 <___svfprintf_internal_r+0x1818>
 8010a04:	dac02d15 	stw	r11,180(sp)
 8010a08:	1805883a 	mov	r2,r3
 8010a0c:	1c000007 	ldb	r16,0(r3)
 8010a10:	003d4f06 	br	800ff50 <__alt_data_end+0xfc00ff50>
 8010a14:	1805883a 	mov	r2,r3
 8010a18:	01800ac4 	movi	r6,43
 8010a1c:	1c000007 	ldb	r16,0(r3)
 8010a20:	003d4b06 	br	800ff50 <__alt_data_end+0xfc00ff50>
 8010a24:	8c400054 	ori	r17,r17,1
 8010a28:	1805883a 	mov	r2,r3
 8010a2c:	1c000007 	ldb	r16,0(r3)
 8010a30:	003d4706 	br	800ff50 <__alt_data_end+0xfc00ff50>
 8010a34:	008200f4 	movhi	r2,2051
 8010a38:	10ab1404 	addi	r2,r2,-21424
 8010a3c:	d8c02915 	stw	r3,164(sp)
 8010a40:	d8803b15 	stw	r2,236(sp)
 8010a44:	d9802785 	stb	r6,158(sp)
 8010a48:	88c0080c 	andi	r3,r17,32
 8010a4c:	d8802d17 	ldw	r2,180(sp)
 8010a50:	183fa41e 	bne	r3,zero,80108e4 <__alt_data_end+0xfc0108e4>
 8010a54:	88c0040c 	andi	r3,r17,16
 8010a58:	18028b26 	beq	r3,zero,8011488 <___svfprintf_internal_r+0x1690>
 8010a5c:	db002d17 	ldw	r12,180(sp)
 8010a60:	14c00017 	ldw	r19,0(r2)
 8010a64:	0039883a 	mov	fp,zero
 8010a68:	63000104 	addi	r12,r12,4
 8010a6c:	db002d15 	stw	r12,180(sp)
 8010a70:	003fa106 	br	80108f8 <__alt_data_end+0xfc0108f8>
 8010a74:	d8c02915 	stw	r3,164(sp)
 8010a78:	8880080c 	andi	r2,r17,32
 8010a7c:	103f121e 	bne	r2,zero,80106c8 <__alt_data_end+0xfc0106c8>
 8010a80:	8880040c 	andi	r2,r17,16
 8010a84:	1001df1e 	bne	r2,zero,8011204 <___svfprintf_internal_r+0x140c>
 8010a88:	8880100c 	andi	r2,r17,64
 8010a8c:	1001dd26 	beq	r2,zero,8011204 <___svfprintf_internal_r+0x140c>
 8010a90:	dac02d17 	ldw	r11,180(sp)
 8010a94:	0039883a 	mov	fp,zero
 8010a98:	00800044 	movi	r2,1
 8010a9c:	5cc0000b 	ldhu	r19,0(r11)
 8010aa0:	5ac00104 	addi	r11,r11,4
 8010aa4:	dac02d15 	stw	r11,180(sp)
 8010aa8:	9807883a 	mov	r3,r19
 8010aac:	003efe06 	br	80106a8 <__alt_data_end+0xfc0106a8>
 8010ab0:	d8c02915 	stw	r3,164(sp)
 8010ab4:	8880080c 	andi	r2,r17,32
 8010ab8:	103ef41e 	bne	r2,zero,801068c <__alt_data_end+0xfc01068c>
 8010abc:	8880040c 	andi	r2,r17,16
 8010ac0:	1001c11e 	bne	r2,zero,80111c8 <___svfprintf_internal_r+0x13d0>
 8010ac4:	8880100c 	andi	r2,r17,64
 8010ac8:	1001bf26 	beq	r2,zero,80111c8 <___svfprintf_internal_r+0x13d0>
 8010acc:	db002d17 	ldw	r12,180(sp)
 8010ad0:	0039883a 	mov	fp,zero
 8010ad4:	0005883a 	mov	r2,zero
 8010ad8:	64c0000b 	ldhu	r19,0(r12)
 8010adc:	63000104 	addi	r12,r12,4
 8010ae0:	db002d15 	stw	r12,180(sp)
 8010ae4:	9807883a 	mov	r3,r19
 8010ae8:	003eef06 	br	80106a8 <__alt_data_end+0xfc0106a8>
 8010aec:	d8c02915 	stw	r3,164(sp)
 8010af0:	d9802785 	stb	r6,158(sp)
 8010af4:	803d8226 	beq	r16,zero,8010100 <__alt_data_end+0xfc010100>
 8010af8:	02c00044 	movi	r11,1
 8010afc:	db001404 	addi	r12,sp,80
 8010b00:	dac02a15 	stw	r11,168(sp)
 8010b04:	dc001405 	stb	r16,80(sp)
 8010b08:	d8002785 	stb	zero,158(sp)
 8010b0c:	5825883a 	mov	r18,r11
 8010b10:	d8003215 	stw	zero,200(sp)
 8010b14:	d8003415 	stw	zero,208(sp)
 8010b18:	db003115 	stw	r12,196(sp)
 8010b1c:	0005883a 	mov	r2,zero
 8010b20:	003df506 	br	80102f8 <__alt_data_end+0xfc0102f8>
 8010b24:	d8c02017 	ldw	r3,128(sp)
 8010b28:	003e3606 	br	8010404 <__alt_data_end+0xfc010404>
 8010b2c:	10803fcc 	andi	r2,r2,255
 8010b30:	00c00044 	movi	r3,1
 8010b34:	10fdca1e 	bne	r2,r3,8010260 <__alt_data_end+0xfc010260>
 8010b38:	e000021e 	bne	fp,zero,8010b44 <___svfprintf_internal_r+0xd4c>
 8010b3c:	00800244 	movi	r2,9
 8010b40:	14c01f2e 	bgeu	r2,r19,8010bc0 <___svfprintf_internal_r+0xdc8>
 8010b44:	dc002a15 	stw	r16,168(sp)
 8010b48:	dc402b15 	stw	r17,172(sp)
 8010b4c:	9821883a 	mov	r16,r19
 8010b50:	e023883a 	mov	r17,fp
 8010b54:	b025883a 	mov	r18,r22
 8010b58:	4027883a 	mov	r19,r8
 8010b5c:	4839883a 	mov	fp,r9
 8010b60:	8009883a 	mov	r4,r16
 8010b64:	880b883a 	mov	r5,r17
 8010b68:	01800284 	movi	r6,10
 8010b6c:	000f883a 	mov	r7,zero
 8010b70:	801caf40 	call	801caf4 <__umoddi3>
 8010b74:	10800c04 	addi	r2,r2,48
 8010b78:	94bfffc4 	addi	r18,r18,-1
 8010b7c:	8009883a 	mov	r4,r16
 8010b80:	880b883a 	mov	r5,r17
 8010b84:	01800284 	movi	r6,10
 8010b88:	000f883a 	mov	r7,zero
 8010b8c:	90800005 	stb	r2,0(r18)
 8010b90:	801c5340 	call	801c534 <__udivdi3>
 8010b94:	1021883a 	mov	r16,r2
 8010b98:	10c4b03a 	or	r2,r2,r3
 8010b9c:	1823883a 	mov	r17,r3
 8010ba0:	103fef1e 	bne	r2,zero,8010b60 <__alt_data_end+0xfc010b60>
 8010ba4:	dc803115 	stw	r18,196(sp)
 8010ba8:	dc002a17 	ldw	r16,168(sp)
 8010bac:	9811883a 	mov	r8,r19
 8010bb0:	dc402b17 	ldw	r17,172(sp)
 8010bb4:	e013883a 	mov	r9,fp
 8010bb8:	b4a5c83a 	sub	r18,r22,r18
 8010bbc:	003dc206 	br	80102c8 <__alt_data_end+0xfc0102c8>
 8010bc0:	9cc00c04 	addi	r19,r19,48
 8010bc4:	db001dc4 	addi	r12,sp,119
 8010bc8:	dcc01dc5 	stb	r19,119(sp)
 8010bcc:	dc803d17 	ldw	r18,244(sp)
 8010bd0:	db003115 	stw	r12,196(sp)
 8010bd4:	003dbc06 	br	80102c8 <__alt_data_end+0xfc0102c8>
 8010bd8:	00801944 	movi	r2,101
 8010bdc:	14008d0e 	bge	r2,r16,8010e14 <___svfprintf_internal_r+0x101c>
 8010be0:	d9003717 	ldw	r4,220(sp)
 8010be4:	d9403817 	ldw	r5,224(sp)
 8010be8:	000d883a 	mov	r6,zero
 8010bec:	000f883a 	mov	r7,zero
 8010bf0:	d8c03e15 	stw	r3,248(sp)
 8010bf4:	da004015 	stw	r8,256(sp)
 8010bf8:	800c0100 	call	800c010 <__eqdf2>
 8010bfc:	d8c03e17 	ldw	r3,248(sp)
 8010c00:	da004017 	ldw	r8,256(sp)
 8010c04:	1000fd1e 	bne	r2,zero,8010ffc <___svfprintf_internal_r+0x1204>
 8010c08:	d8801f17 	ldw	r2,124(sp)
 8010c0c:	010200f4 	movhi	r4,2051
 8010c10:	212b1b04 	addi	r4,r4,-21396
 8010c14:	18c00044 	addi	r3,r3,1
 8010c18:	10800044 	addi	r2,r2,1
 8010c1c:	41000015 	stw	r4,0(r8)
 8010c20:	01000044 	movi	r4,1
 8010c24:	41000115 	stw	r4,4(r8)
 8010c28:	d8c02015 	stw	r3,128(sp)
 8010c2c:	d8801f15 	stw	r2,124(sp)
 8010c30:	010001c4 	movi	r4,7
 8010c34:	20823316 	blt	r4,r2,8011504 <___svfprintf_internal_r+0x170c>
 8010c38:	42000204 	addi	r8,r8,8
 8010c3c:	d8802617 	ldw	r2,152(sp)
 8010c40:	dac03317 	ldw	r11,204(sp)
 8010c44:	12c00216 	blt	r2,r11,8010c50 <___svfprintf_internal_r+0xe58>
 8010c48:	8880004c 	andi	r2,r17,1
 8010c4c:	103e4c26 	beq	r2,zero,8010580 <__alt_data_end+0xfc010580>
 8010c50:	db003917 	ldw	r12,228(sp)
 8010c54:	d8801f17 	ldw	r2,124(sp)
 8010c58:	dac03517 	ldw	r11,212(sp)
 8010c5c:	1b07883a 	add	r3,r3,r12
 8010c60:	10800044 	addi	r2,r2,1
 8010c64:	42c00015 	stw	r11,0(r8)
 8010c68:	43000115 	stw	r12,4(r8)
 8010c6c:	d8c02015 	stw	r3,128(sp)
 8010c70:	d8801f15 	stw	r2,124(sp)
 8010c74:	010001c4 	movi	r4,7
 8010c78:	20826f16 	blt	r4,r2,8011638 <___svfprintf_internal_r+0x1840>
 8010c7c:	42000204 	addi	r8,r8,8
 8010c80:	db003317 	ldw	r12,204(sp)
 8010c84:	643fffc4 	addi	r16,r12,-1
 8010c88:	043e3d0e 	bge	zero,r16,8010580 <__alt_data_end+0xfc010580>
 8010c8c:	04800404 	movi	r18,16
 8010c90:	d8801f17 	ldw	r2,124(sp)
 8010c94:	94009a0e 	bge	r18,r16,8010f00 <___svfprintf_internal_r+0x1108>
 8010c98:	014200f4 	movhi	r5,2051
 8010c9c:	296b1b84 	addi	r5,r5,-21394
 8010ca0:	d9402b15 	stw	r5,172(sp)
 8010ca4:	054001c4 	movi	r21,7
 8010ca8:	dcc02f17 	ldw	r19,188(sp)
 8010cac:	00000306 	br	8010cbc <___svfprintf_internal_r+0xec4>
 8010cb0:	42000204 	addi	r8,r8,8
 8010cb4:	843ffc04 	addi	r16,r16,-16
 8010cb8:	9400940e 	bge	r18,r16,8010f0c <___svfprintf_internal_r+0x1114>
 8010cbc:	18c00404 	addi	r3,r3,16
 8010cc0:	10800044 	addi	r2,r2,1
 8010cc4:	45000015 	stw	r20,0(r8)
 8010cc8:	44800115 	stw	r18,4(r8)
 8010ccc:	d8c02015 	stw	r3,128(sp)
 8010cd0:	d8801f15 	stw	r2,124(sp)
 8010cd4:	a8bff60e 	bge	r21,r2,8010cb0 <__alt_data_end+0xfc010cb0>
 8010cd8:	9809883a 	mov	r4,r19
 8010cdc:	b80b883a 	mov	r5,r23
 8010ce0:	b00d883a 	mov	r6,r22
 8010ce4:	80189240 	call	8018924 <__ssprint_r>
 8010ce8:	103d0b1e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 8010cec:	d8c02017 	ldw	r3,128(sp)
 8010cf0:	d8801f17 	ldw	r2,124(sp)
 8010cf4:	da000404 	addi	r8,sp,16
 8010cf8:	003fee06 	br	8010cb4 <__alt_data_end+0xfc010cb4>
 8010cfc:	dac02e17 	ldw	r11,184(sp)
 8010d00:	db002a17 	ldw	r12,168(sp)
 8010d04:	5b2bc83a 	sub	r21,r11,r12
 8010d08:	057ddc0e 	bge	zero,r21,801047c <__alt_data_end+0xfc01047c>
 8010d0c:	07000404 	movi	fp,16
 8010d10:	d8801f17 	ldw	r2,124(sp)
 8010d14:	e5435d0e 	bge	fp,r21,8011a8c <___svfprintf_internal_r+0x1c94>
 8010d18:	014200f4 	movhi	r5,2051
 8010d1c:	a809883a 	mov	r4,r21
 8010d20:	296b1b84 	addi	r5,r5,-21394
 8010d24:	dc002c15 	stw	r16,176(sp)
 8010d28:	902b883a 	mov	r21,r18
 8010d2c:	d9402b15 	stw	r5,172(sp)
 8010d30:	8825883a 	mov	r18,r17
 8010d34:	04c001c4 	movi	r19,7
 8010d38:	dc002f17 	ldw	r16,188(sp)
 8010d3c:	2023883a 	mov	r17,r4
 8010d40:	00000306 	br	8010d50 <___svfprintf_internal_r+0xf58>
 8010d44:	8c7ffc04 	addi	r17,r17,-16
 8010d48:	42000204 	addi	r8,r8,8
 8010d4c:	e440110e 	bge	fp,r17,8010d94 <___svfprintf_internal_r+0xf9c>
 8010d50:	18c00404 	addi	r3,r3,16
 8010d54:	10800044 	addi	r2,r2,1
 8010d58:	45000015 	stw	r20,0(r8)
 8010d5c:	47000115 	stw	fp,4(r8)
 8010d60:	d8c02015 	stw	r3,128(sp)
 8010d64:	d8801f15 	stw	r2,124(sp)
 8010d68:	98bff60e 	bge	r19,r2,8010d44 <__alt_data_end+0xfc010d44>
 8010d6c:	8009883a 	mov	r4,r16
 8010d70:	b80b883a 	mov	r5,r23
 8010d74:	b00d883a 	mov	r6,r22
 8010d78:	80189240 	call	8018924 <__ssprint_r>
 8010d7c:	103ce61e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 8010d80:	8c7ffc04 	addi	r17,r17,-16
 8010d84:	d8c02017 	ldw	r3,128(sp)
 8010d88:	d8801f17 	ldw	r2,124(sp)
 8010d8c:	da000404 	addi	r8,sp,16
 8010d90:	e47fef16 	blt	fp,r17,8010d50 <__alt_data_end+0xfc010d50>
 8010d94:	dc002c17 	ldw	r16,176(sp)
 8010d98:	8809883a 	mov	r4,r17
 8010d9c:	9023883a 	mov	r17,r18
 8010da0:	a825883a 	mov	r18,r21
 8010da4:	202b883a 	mov	r21,r4
 8010da8:	dac02b17 	ldw	r11,172(sp)
 8010dac:	1d47883a 	add	r3,r3,r21
 8010db0:	10800044 	addi	r2,r2,1
 8010db4:	42c00015 	stw	r11,0(r8)
 8010db8:	45400115 	stw	r21,4(r8)
 8010dbc:	d8c02015 	stw	r3,128(sp)
 8010dc0:	d8801f15 	stw	r2,124(sp)
 8010dc4:	010001c4 	movi	r4,7
 8010dc8:	20818016 	blt	r4,r2,80113cc <___svfprintf_internal_r+0x15d4>
 8010dcc:	42000204 	addi	r8,r8,8
 8010dd0:	003daa06 	br	801047c <__alt_data_end+0xfc01047c>
 8010dd4:	d9403b17 	ldw	r5,236(sp)
 8010dd8:	b007883a 	mov	r3,r22
 8010ddc:	988003cc 	andi	r2,r19,15
 8010de0:	e008973a 	slli	r4,fp,28
 8010de4:	2885883a 	add	r2,r5,r2
 8010de8:	9826d13a 	srli	r19,r19,4
 8010dec:	10800003 	ldbu	r2,0(r2)
 8010df0:	e038d13a 	srli	fp,fp,4
 8010df4:	18ffffc4 	addi	r3,r3,-1
 8010df8:	24e6b03a 	or	r19,r4,r19
 8010dfc:	18800005 	stb	r2,0(r3)
 8010e00:	9f04b03a 	or	r2,r19,fp
 8010e04:	103ff51e 	bne	r2,zero,8010ddc <__alt_data_end+0xfc010ddc>
 8010e08:	d8c03115 	stw	r3,196(sp)
 8010e0c:	b0e5c83a 	sub	r18,r22,r3
 8010e10:	003d2d06 	br	80102c8 <__alt_data_end+0xfc0102c8>
 8010e14:	db003317 	ldw	r12,204(sp)
 8010e18:	00800044 	movi	r2,1
 8010e1c:	18c00044 	addi	r3,r3,1
 8010e20:	13014b0e 	bge	r2,r12,8011350 <___svfprintf_internal_r+0x1558>
 8010e24:	dc001f17 	ldw	r16,124(sp)
 8010e28:	dac03117 	ldw	r11,196(sp)
 8010e2c:	00800044 	movi	r2,1
 8010e30:	84000044 	addi	r16,r16,1
 8010e34:	40800115 	stw	r2,4(r8)
 8010e38:	42c00015 	stw	r11,0(r8)
 8010e3c:	d8c02015 	stw	r3,128(sp)
 8010e40:	dc001f15 	stw	r16,124(sp)
 8010e44:	008001c4 	movi	r2,7
 8010e48:	14014e16 	blt	r2,r16,8011384 <___svfprintf_internal_r+0x158c>
 8010e4c:	42000204 	addi	r8,r8,8
 8010e50:	db003917 	ldw	r12,228(sp)
 8010e54:	dac03517 	ldw	r11,212(sp)
 8010e58:	84000044 	addi	r16,r16,1
 8010e5c:	1b07883a 	add	r3,r3,r12
 8010e60:	42c00015 	stw	r11,0(r8)
 8010e64:	43000115 	stw	r12,4(r8)
 8010e68:	d8c02015 	stw	r3,128(sp)
 8010e6c:	dc001f15 	stw	r16,124(sp)
 8010e70:	008001c4 	movi	r2,7
 8010e74:	14014c16 	blt	r2,r16,80113a8 <___svfprintf_internal_r+0x15b0>
 8010e78:	44800204 	addi	r18,r8,8
 8010e7c:	d9003717 	ldw	r4,220(sp)
 8010e80:	d9403817 	ldw	r5,224(sp)
 8010e84:	000d883a 	mov	r6,zero
 8010e88:	000f883a 	mov	r7,zero
 8010e8c:	d8c03e15 	stw	r3,248(sp)
 8010e90:	800c0100 	call	800c010 <__eqdf2>
 8010e94:	d8c03e17 	ldw	r3,248(sp)
 8010e98:	db003317 	ldw	r12,204(sp)
 8010e9c:	10009526 	beq	r2,zero,80110f4 <___svfprintf_internal_r+0x12fc>
 8010ea0:	dac03117 	ldw	r11,196(sp)
 8010ea4:	60bfffc4 	addi	r2,r12,-1
 8010ea8:	1887883a 	add	r3,r3,r2
 8010eac:	59000044 	addi	r4,r11,1
 8010eb0:	84000044 	addi	r16,r16,1
 8010eb4:	90800115 	stw	r2,4(r18)
 8010eb8:	91000015 	stw	r4,0(r18)
 8010ebc:	d8c02015 	stw	r3,128(sp)
 8010ec0:	dc001f15 	stw	r16,124(sp)
 8010ec4:	008001c4 	movi	r2,7
 8010ec8:	1400b316 	blt	r2,r16,8011198 <___svfprintf_internal_r+0x13a0>
 8010ecc:	94800204 	addi	r18,r18,8
 8010ed0:	dac03a17 	ldw	r11,232(sp)
 8010ed4:	dd4022c4 	addi	r21,sp,139
 8010ed8:	84000044 	addi	r16,r16,1
 8010edc:	58c7883a 	add	r3,r11,r3
 8010ee0:	95400015 	stw	r21,0(r18)
 8010ee4:	92c00115 	stw	r11,4(r18)
 8010ee8:	d8c02015 	stw	r3,128(sp)
 8010eec:	dc001f15 	stw	r16,124(sp)
 8010ef0:	008001c4 	movi	r2,7
 8010ef4:	14000e16 	blt	r2,r16,8010f30 <___svfprintf_internal_r+0x1138>
 8010ef8:	92000204 	addi	r8,r18,8
 8010efc:	003da006 	br	8010580 <__alt_data_end+0xfc010580>
 8010f00:	010200f4 	movhi	r4,2051
 8010f04:	212b1b84 	addi	r4,r4,-21394
 8010f08:	d9002b15 	stw	r4,172(sp)
 8010f0c:	dac02b17 	ldw	r11,172(sp)
 8010f10:	1c07883a 	add	r3,r3,r16
 8010f14:	44000115 	stw	r16,4(r8)
 8010f18:	42c00015 	stw	r11,0(r8)
 8010f1c:	10800044 	addi	r2,r2,1
 8010f20:	d8c02015 	stw	r3,128(sp)
 8010f24:	d8801f15 	stw	r2,124(sp)
 8010f28:	010001c4 	movi	r4,7
 8010f2c:	20bd930e 	bge	r4,r2,801057c <__alt_data_end+0xfc01057c>
 8010f30:	d9002f17 	ldw	r4,188(sp)
 8010f34:	b80b883a 	mov	r5,r23
 8010f38:	b00d883a 	mov	r6,r22
 8010f3c:	80189240 	call	8018924 <__ssprint_r>
 8010f40:	103c751e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 8010f44:	d8c02017 	ldw	r3,128(sp)
 8010f48:	da000404 	addi	r8,sp,16
 8010f4c:	003d8c06 	br	8010580 <__alt_data_end+0xfc010580>
 8010f50:	d9002f17 	ldw	r4,188(sp)
 8010f54:	b80b883a 	mov	r5,r23
 8010f58:	b00d883a 	mov	r6,r22
 8010f5c:	80189240 	call	8018924 <__ssprint_r>
 8010f60:	103dc326 	beq	r2,zero,8010670 <__alt_data_end+0xfc010670>
 8010f64:	003c6c06 	br	8010118 <__alt_data_end+0xfc010118>
 8010f68:	10803fcc 	andi	r2,r2,255
 8010f6c:	1000201e 	bne	r2,zero,8010ff0 <___svfprintf_internal_r+0x11f8>
 8010f70:	8880004c 	andi	r2,r17,1
 8010f74:	10001e26 	beq	r2,zero,8010ff0 <___svfprintf_internal_r+0x11f8>
 8010f78:	00800c04 	movi	r2,48
 8010f7c:	d8c01dc4 	addi	r3,sp,119
 8010f80:	d8801dc5 	stb	r2,119(sp)
 8010f84:	dc803d17 	ldw	r18,244(sp)
 8010f88:	d8c03115 	stw	r3,196(sp)
 8010f8c:	003cce06 	br	80102c8 <__alt_data_end+0xfc0102c8>
 8010f90:	d9002f17 	ldw	r4,188(sp)
 8010f94:	b80b883a 	mov	r5,r23
 8010f98:	b00d883a 	mov	r6,r22
 8010f9c:	80189240 	call	8018924 <__ssprint_r>
 8010fa0:	103c5d1e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 8010fa4:	d8c02017 	ldw	r3,128(sp)
 8010fa8:	da000404 	addi	r8,sp,16
 8010fac:	003d6706 	br	801054c <__alt_data_end+0xfc01054c>
 8010fb0:	d9002f17 	ldw	r4,188(sp)
 8010fb4:	b80b883a 	mov	r5,r23
 8010fb8:	b00d883a 	mov	r6,r22
 8010fbc:	80189240 	call	8018924 <__ssprint_r>
 8010fc0:	103c551e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 8010fc4:	d8c02017 	ldw	r3,128(sp)
 8010fc8:	da000404 	addi	r8,sp,16
 8010fcc:	003d1a06 	br	8010438 <__alt_data_end+0xfc010438>
 8010fd0:	d9002f17 	ldw	r4,188(sp)
 8010fd4:	b80b883a 	mov	r5,r23
 8010fd8:	b00d883a 	mov	r6,r22
 8010fdc:	80189240 	call	8018924 <__ssprint_r>
 8010fe0:	103c4d1e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 8010fe4:	d8c02017 	ldw	r3,128(sp)
 8010fe8:	da000404 	addi	r8,sp,16
 8010fec:	003d2006 	br	8010470 <__alt_data_end+0xfc010470>
 8010ff0:	0025883a 	mov	r18,zero
 8010ff4:	dd803115 	stw	r22,196(sp)
 8010ff8:	003cb306 	br	80102c8 <__alt_data_end+0xfc0102c8>
 8010ffc:	dc002617 	ldw	r16,152(sp)
 8011000:	0401480e 	bge	zero,r16,8011524 <___svfprintf_internal_r+0x172c>
 8011004:	db003117 	ldw	r12,196(sp)
 8011008:	dac03317 	ldw	r11,204(sp)
 801100c:	62e1883a 	add	r16,r12,r11
 8011010:	db003417 	ldw	r12,208(sp)
 8011014:	5825883a 	mov	r18,r11
 8011018:	62c0010e 	bge	r12,r11,8011020 <___svfprintf_internal_r+0x1228>
 801101c:	6025883a 	mov	r18,r12
 8011020:	04800b0e 	bge	zero,r18,8011050 <___svfprintf_internal_r+0x1258>
 8011024:	d8801f17 	ldw	r2,124(sp)
 8011028:	dac03117 	ldw	r11,196(sp)
 801102c:	1c87883a 	add	r3,r3,r18
 8011030:	10800044 	addi	r2,r2,1
 8011034:	42c00015 	stw	r11,0(r8)
 8011038:	44800115 	stw	r18,4(r8)
 801103c:	d8c02015 	stw	r3,128(sp)
 8011040:	d8801f15 	stw	r2,124(sp)
 8011044:	010001c4 	movi	r4,7
 8011048:	20823f16 	blt	r4,r2,8011948 <___svfprintf_internal_r+0x1b50>
 801104c:	42000204 	addi	r8,r8,8
 8011050:	90023b16 	blt	r18,zero,8011940 <___svfprintf_internal_r+0x1b48>
 8011054:	db003417 	ldw	r12,208(sp)
 8011058:	64a5c83a 	sub	r18,r12,r18
 801105c:	0480780e 	bge	zero,r18,8011240 <___svfprintf_internal_r+0x1448>
 8011060:	05400404 	movi	r21,16
 8011064:	d8801f17 	ldw	r2,124(sp)
 8011068:	ac81140e 	bge	r21,r18,80114bc <___svfprintf_internal_r+0x16c4>
 801106c:	014200f4 	movhi	r5,2051
 8011070:	296b1b84 	addi	r5,r5,-21394
 8011074:	d9402b15 	stw	r5,172(sp)
 8011078:	070001c4 	movi	fp,7
 801107c:	dcc02f17 	ldw	r19,188(sp)
 8011080:	00000306 	br	8011090 <___svfprintf_internal_r+0x1298>
 8011084:	42000204 	addi	r8,r8,8
 8011088:	94bffc04 	addi	r18,r18,-16
 801108c:	ac810e0e 	bge	r21,r18,80114c8 <___svfprintf_internal_r+0x16d0>
 8011090:	18c00404 	addi	r3,r3,16
 8011094:	10800044 	addi	r2,r2,1
 8011098:	45000015 	stw	r20,0(r8)
 801109c:	45400115 	stw	r21,4(r8)
 80110a0:	d8c02015 	stw	r3,128(sp)
 80110a4:	d8801f15 	stw	r2,124(sp)
 80110a8:	e0bff60e 	bge	fp,r2,8011084 <__alt_data_end+0xfc011084>
 80110ac:	9809883a 	mov	r4,r19
 80110b0:	b80b883a 	mov	r5,r23
 80110b4:	b00d883a 	mov	r6,r22
 80110b8:	80189240 	call	8018924 <__ssprint_r>
 80110bc:	103c161e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 80110c0:	d8c02017 	ldw	r3,128(sp)
 80110c4:	d8801f17 	ldw	r2,124(sp)
 80110c8:	da000404 	addi	r8,sp,16
 80110cc:	003fee06 	br	8011088 <__alt_data_end+0xfc011088>
 80110d0:	d9002f17 	ldw	r4,188(sp)
 80110d4:	b80b883a 	mov	r5,r23
 80110d8:	b00d883a 	mov	r6,r22
 80110dc:	80189240 	call	8018924 <__ssprint_r>
 80110e0:	103c0d1e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 80110e4:	d8c02017 	ldw	r3,128(sp)
 80110e8:	d8802787 	ldb	r2,158(sp)
 80110ec:	da000404 	addi	r8,sp,16
 80110f0:	003cc406 	br	8010404 <__alt_data_end+0xfc010404>
 80110f4:	657fffc4 	addi	r21,r12,-1
 80110f8:	057f750e 	bge	zero,r21,8010ed0 <__alt_data_end+0xfc010ed0>
 80110fc:	07000404 	movi	fp,16
 8011100:	e542ef0e 	bge	fp,r21,8011cc0 <___svfprintf_internal_r+0x1ec8>
 8011104:	010200f4 	movhi	r4,2051
 8011108:	212b1b84 	addi	r4,r4,-21394
 801110c:	d9002b15 	stw	r4,172(sp)
 8011110:	01c001c4 	movi	r7,7
 8011114:	dcc02f17 	ldw	r19,188(sp)
 8011118:	00000306 	br	8011128 <___svfprintf_internal_r+0x1330>
 801111c:	ad7ffc04 	addi	r21,r21,-16
 8011120:	94800204 	addi	r18,r18,8
 8011124:	e540130e 	bge	fp,r21,8011174 <___svfprintf_internal_r+0x137c>
 8011128:	18c00404 	addi	r3,r3,16
 801112c:	84000044 	addi	r16,r16,1
 8011130:	95000015 	stw	r20,0(r18)
 8011134:	97000115 	stw	fp,4(r18)
 8011138:	d8c02015 	stw	r3,128(sp)
 801113c:	dc001f15 	stw	r16,124(sp)
 8011140:	3c3ff60e 	bge	r7,r16,801111c <__alt_data_end+0xfc01111c>
 8011144:	9809883a 	mov	r4,r19
 8011148:	b80b883a 	mov	r5,r23
 801114c:	b00d883a 	mov	r6,r22
 8011150:	d9c03e15 	stw	r7,248(sp)
 8011154:	80189240 	call	8018924 <__ssprint_r>
 8011158:	d9c03e17 	ldw	r7,248(sp)
 801115c:	103bee1e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 8011160:	ad7ffc04 	addi	r21,r21,-16
 8011164:	d8c02017 	ldw	r3,128(sp)
 8011168:	dc001f17 	ldw	r16,124(sp)
 801116c:	dc800404 	addi	r18,sp,16
 8011170:	e57fed16 	blt	fp,r21,8011128 <__alt_data_end+0xfc011128>
 8011174:	dac02b17 	ldw	r11,172(sp)
 8011178:	1d47883a 	add	r3,r3,r21
 801117c:	84000044 	addi	r16,r16,1
 8011180:	92c00015 	stw	r11,0(r18)
 8011184:	95400115 	stw	r21,4(r18)
 8011188:	d8c02015 	stw	r3,128(sp)
 801118c:	dc001f15 	stw	r16,124(sp)
 8011190:	008001c4 	movi	r2,7
 8011194:	143f4d0e 	bge	r2,r16,8010ecc <__alt_data_end+0xfc010ecc>
 8011198:	d9002f17 	ldw	r4,188(sp)
 801119c:	b80b883a 	mov	r5,r23
 80111a0:	b00d883a 	mov	r6,r22
 80111a4:	80189240 	call	8018924 <__ssprint_r>
 80111a8:	103bdb1e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 80111ac:	d8c02017 	ldw	r3,128(sp)
 80111b0:	dc001f17 	ldw	r16,124(sp)
 80111b4:	dc800404 	addi	r18,sp,16
 80111b8:	003f4506 	br	8010ed0 <__alt_data_end+0xfc010ed0>
 80111bc:	00800084 	movi	r2,2
 80111c0:	9f06b03a 	or	r3,r19,fp
 80111c4:	003d3806 	br	80106a8 <__alt_data_end+0xfc0106a8>
 80111c8:	dac02d17 	ldw	r11,180(sp)
 80111cc:	0039883a 	mov	fp,zero
 80111d0:	0005883a 	mov	r2,zero
 80111d4:	5cc00017 	ldw	r19,0(r11)
 80111d8:	5ac00104 	addi	r11,r11,4
 80111dc:	dac02d15 	stw	r11,180(sp)
 80111e0:	9807883a 	mov	r3,r19
 80111e4:	003d3006 	br	80106a8 <__alt_data_end+0xfc0106a8>
 80111e8:	1cc00017 	ldw	r19,0(r3)
 80111ec:	dac02d17 	ldw	r11,180(sp)
 80111f0:	9839d7fa 	srai	fp,r19,31
 80111f4:	5ac00104 	addi	r11,r11,4
 80111f8:	dac02d15 	stw	r11,180(sp)
 80111fc:	e005883a 	mov	r2,fp
 8011200:	003c0a06 	br	801022c <__alt_data_end+0xfc01022c>
 8011204:	db002d17 	ldw	r12,180(sp)
 8011208:	0039883a 	mov	fp,zero
 801120c:	00800044 	movi	r2,1
 8011210:	64c00017 	ldw	r19,0(r12)
 8011214:	63000104 	addi	r12,r12,4
 8011218:	db002d15 	stw	r12,180(sp)
 801121c:	9807883a 	mov	r3,r19
 8011220:	003d2106 	br	80106a8 <__alt_data_end+0xfc0106a8>
 8011224:	d9002f17 	ldw	r4,188(sp)
 8011228:	b80b883a 	mov	r5,r23
 801122c:	b00d883a 	mov	r6,r22
 8011230:	80189240 	call	8018924 <__ssprint_r>
 8011234:	103bb81e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 8011238:	d8c02017 	ldw	r3,128(sp)
 801123c:	da000404 	addi	r8,sp,16
 8011240:	db003117 	ldw	r12,196(sp)
 8011244:	dac03417 	ldw	r11,208(sp)
 8011248:	d8802617 	ldw	r2,152(sp)
 801124c:	62e5883a 	add	r18,r12,r11
 8011250:	db003317 	ldw	r12,204(sp)
 8011254:	13000216 	blt	r2,r12,8011260 <___svfprintf_internal_r+0x1468>
 8011258:	8900004c 	andi	r4,r17,1
 801125c:	20000c26 	beq	r4,zero,8011290 <___svfprintf_internal_r+0x1498>
 8011260:	dac03917 	ldw	r11,228(sp)
 8011264:	d9001f17 	ldw	r4,124(sp)
 8011268:	db003517 	ldw	r12,212(sp)
 801126c:	1ac7883a 	add	r3,r3,r11
 8011270:	21000044 	addi	r4,r4,1
 8011274:	43000015 	stw	r12,0(r8)
 8011278:	42c00115 	stw	r11,4(r8)
 801127c:	d8c02015 	stw	r3,128(sp)
 8011280:	d9001f15 	stw	r4,124(sp)
 8011284:	014001c4 	movi	r5,7
 8011288:	2901b716 	blt	r5,r4,8011968 <___svfprintf_internal_r+0x1b70>
 801128c:	42000204 	addi	r8,r8,8
 8011290:	dac03317 	ldw	r11,204(sp)
 8011294:	8489c83a 	sub	r4,r16,r18
 8011298:	5885c83a 	sub	r2,r11,r2
 801129c:	1021883a 	mov	r16,r2
 80112a0:	2080010e 	bge	r4,r2,80112a8 <___svfprintf_internal_r+0x14b0>
 80112a4:	2021883a 	mov	r16,r4
 80112a8:	04000a0e 	bge	zero,r16,80112d4 <___svfprintf_internal_r+0x14dc>
 80112ac:	d9001f17 	ldw	r4,124(sp)
 80112b0:	1c07883a 	add	r3,r3,r16
 80112b4:	44800015 	stw	r18,0(r8)
 80112b8:	21000044 	addi	r4,r4,1
 80112bc:	44000115 	stw	r16,4(r8)
 80112c0:	d8c02015 	stw	r3,128(sp)
 80112c4:	d9001f15 	stw	r4,124(sp)
 80112c8:	014001c4 	movi	r5,7
 80112cc:	2901bf16 	blt	r5,r4,80119cc <___svfprintf_internal_r+0x1bd4>
 80112d0:	42000204 	addi	r8,r8,8
 80112d4:	8001bb16 	blt	r16,zero,80119c4 <___svfprintf_internal_r+0x1bcc>
 80112d8:	1421c83a 	sub	r16,r2,r16
 80112dc:	043ca80e 	bge	zero,r16,8010580 <__alt_data_end+0xfc010580>
 80112e0:	04800404 	movi	r18,16
 80112e4:	d8801f17 	ldw	r2,124(sp)
 80112e8:	943f050e 	bge	r18,r16,8010f00 <__alt_data_end+0xfc010f00>
 80112ec:	014200f4 	movhi	r5,2051
 80112f0:	296b1b84 	addi	r5,r5,-21394
 80112f4:	d9402b15 	stw	r5,172(sp)
 80112f8:	054001c4 	movi	r21,7
 80112fc:	dcc02f17 	ldw	r19,188(sp)
 8011300:	00000306 	br	8011310 <___svfprintf_internal_r+0x1518>
 8011304:	42000204 	addi	r8,r8,8
 8011308:	843ffc04 	addi	r16,r16,-16
 801130c:	943eff0e 	bge	r18,r16,8010f0c <__alt_data_end+0xfc010f0c>
 8011310:	18c00404 	addi	r3,r3,16
 8011314:	10800044 	addi	r2,r2,1
 8011318:	45000015 	stw	r20,0(r8)
 801131c:	44800115 	stw	r18,4(r8)
 8011320:	d8c02015 	stw	r3,128(sp)
 8011324:	d8801f15 	stw	r2,124(sp)
 8011328:	a8bff60e 	bge	r21,r2,8011304 <__alt_data_end+0xfc011304>
 801132c:	9809883a 	mov	r4,r19
 8011330:	b80b883a 	mov	r5,r23
 8011334:	b00d883a 	mov	r6,r22
 8011338:	80189240 	call	8018924 <__ssprint_r>
 801133c:	103b761e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 8011340:	d8c02017 	ldw	r3,128(sp)
 8011344:	d8801f17 	ldw	r2,124(sp)
 8011348:	da000404 	addi	r8,sp,16
 801134c:	003fee06 	br	8011308 <__alt_data_end+0xfc011308>
 8011350:	8888703a 	and	r4,r17,r2
 8011354:	203eb31e 	bne	r4,zero,8010e24 <__alt_data_end+0xfc010e24>
 8011358:	dc001f17 	ldw	r16,124(sp)
 801135c:	db003117 	ldw	r12,196(sp)
 8011360:	40800115 	stw	r2,4(r8)
 8011364:	84000044 	addi	r16,r16,1
 8011368:	43000015 	stw	r12,0(r8)
 801136c:	d8c02015 	stw	r3,128(sp)
 8011370:	dc001f15 	stw	r16,124(sp)
 8011374:	008001c4 	movi	r2,7
 8011378:	143f8716 	blt	r2,r16,8011198 <__alt_data_end+0xfc011198>
 801137c:	44800204 	addi	r18,r8,8
 8011380:	003ed306 	br	8010ed0 <__alt_data_end+0xfc010ed0>
 8011384:	d9002f17 	ldw	r4,188(sp)
 8011388:	b80b883a 	mov	r5,r23
 801138c:	b00d883a 	mov	r6,r22
 8011390:	80189240 	call	8018924 <__ssprint_r>
 8011394:	103b601e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 8011398:	d8c02017 	ldw	r3,128(sp)
 801139c:	dc001f17 	ldw	r16,124(sp)
 80113a0:	da000404 	addi	r8,sp,16
 80113a4:	003eaa06 	br	8010e50 <__alt_data_end+0xfc010e50>
 80113a8:	d9002f17 	ldw	r4,188(sp)
 80113ac:	b80b883a 	mov	r5,r23
 80113b0:	b00d883a 	mov	r6,r22
 80113b4:	80189240 	call	8018924 <__ssprint_r>
 80113b8:	103b571e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 80113bc:	d8c02017 	ldw	r3,128(sp)
 80113c0:	dc001f17 	ldw	r16,124(sp)
 80113c4:	dc800404 	addi	r18,sp,16
 80113c8:	003eac06 	br	8010e7c <__alt_data_end+0xfc010e7c>
 80113cc:	d9002f17 	ldw	r4,188(sp)
 80113d0:	b80b883a 	mov	r5,r23
 80113d4:	b00d883a 	mov	r6,r22
 80113d8:	80189240 	call	8018924 <__ssprint_r>
 80113dc:	103b4e1e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 80113e0:	d8c02017 	ldw	r3,128(sp)
 80113e4:	da000404 	addi	r8,sp,16
 80113e8:	003c2406 	br	801047c <__alt_data_end+0xfc01047c>
 80113ec:	da004015 	stw	r8,256(sp)
 80113f0:	da403f15 	stw	r9,252(sp)
 80113f4:	800a4480 	call	800a448 <__fpclassifyd>
 80113f8:	da004017 	ldw	r8,256(sp)
 80113fc:	da403f17 	ldw	r9,252(sp)
 8011400:	1000951e 	bne	r2,zero,8011658 <___svfprintf_internal_r+0x1860>
 8011404:	008011c4 	movi	r2,71
 8011408:	1400fb16 	blt	r2,r16,80117f8 <___svfprintf_internal_r+0x1a00>
 801140c:	030200f4 	movhi	r12,2051
 8011410:	632b0d04 	addi	r12,r12,-21452
 8011414:	db003115 	stw	r12,196(sp)
 8011418:	00c000c4 	movi	r3,3
 801141c:	00bfdfc4 	movi	r2,-129
 8011420:	d8c02a15 	stw	r3,168(sp)
 8011424:	88a2703a 	and	r17,r17,r2
 8011428:	dd402783 	ldbu	r21,158(sp)
 801142c:	dcc02d15 	stw	r19,180(sp)
 8011430:	1825883a 	mov	r18,r3
 8011434:	d8003215 	stw	zero,200(sp)
 8011438:	d8003415 	stw	zero,208(sp)
 801143c:	003ba706 	br	80102dc <__alt_data_end+0xfc0102dc>
 8011440:	8880040c 	andi	r2,r17,16
 8011444:	1000091e 	bne	r2,zero,801146c <___svfprintf_internal_r+0x1674>
 8011448:	8c40100c 	andi	r17,r17,64
 801144c:	88000726 	beq	r17,zero,801146c <___svfprintf_internal_r+0x1674>
 8011450:	db002d17 	ldw	r12,180(sp)
 8011454:	dac03017 	ldw	r11,192(sp)
 8011458:	60800017 	ldw	r2,0(r12)
 801145c:	63000104 	addi	r12,r12,4
 8011460:	db002d15 	stw	r12,180(sp)
 8011464:	12c0000d 	sth	r11,0(r2)
 8011468:	003a8f06 	br	800fea8 <__alt_data_end+0xfc00fea8>
 801146c:	db002d17 	ldw	r12,180(sp)
 8011470:	dac03017 	ldw	r11,192(sp)
 8011474:	60800017 	ldw	r2,0(r12)
 8011478:	63000104 	addi	r12,r12,4
 801147c:	db002d15 	stw	r12,180(sp)
 8011480:	12c00015 	stw	r11,0(r2)
 8011484:	003a8806 	br	800fea8 <__alt_data_end+0xfc00fea8>
 8011488:	88c0100c 	andi	r3,r17,64
 801148c:	1800e926 	beq	r3,zero,8011834 <___svfprintf_internal_r+0x1a3c>
 8011490:	dac02d17 	ldw	r11,180(sp)
 8011494:	14c0000b 	ldhu	r19,0(r2)
 8011498:	0039883a 	mov	fp,zero
 801149c:	5ac00104 	addi	r11,r11,4
 80114a0:	dac02d15 	stw	r11,180(sp)
 80114a4:	003d1406 	br	80108f8 <__alt_data_end+0xfc0108f8>
 80114a8:	1c000007 	ldb	r16,0(r3)
 80114ac:	1805883a 	mov	r2,r3
 80114b0:	003aa706 	br	800ff50 <__alt_data_end+0xfc00ff50>
 80114b4:	00800084 	movi	r2,2
 80114b8:	003c7b06 	br	80106a8 <__alt_data_end+0xfc0106a8>
 80114bc:	010200f4 	movhi	r4,2051
 80114c0:	212b1b84 	addi	r4,r4,-21394
 80114c4:	d9002b15 	stw	r4,172(sp)
 80114c8:	dac02b17 	ldw	r11,172(sp)
 80114cc:	1c87883a 	add	r3,r3,r18
 80114d0:	10800044 	addi	r2,r2,1
 80114d4:	42c00015 	stw	r11,0(r8)
 80114d8:	44800115 	stw	r18,4(r8)
 80114dc:	d8c02015 	stw	r3,128(sp)
 80114e0:	d8801f15 	stw	r2,124(sp)
 80114e4:	010001c4 	movi	r4,7
 80114e8:	20bf4e16 	blt	r4,r2,8011224 <__alt_data_end+0xfc011224>
 80114ec:	42000204 	addi	r8,r8,8
 80114f0:	003f5306 	br	8011240 <__alt_data_end+0xfc011240>
 80114f4:	010200f4 	movhi	r4,2051
 80114f8:	212b1b84 	addi	r4,r4,-21394
 80114fc:	d9002b15 	stw	r4,172(sp)
 8011500:	003c0806 	br	8010524 <__alt_data_end+0xfc010524>
 8011504:	d9002f17 	ldw	r4,188(sp)
 8011508:	b80b883a 	mov	r5,r23
 801150c:	b00d883a 	mov	r6,r22
 8011510:	80189240 	call	8018924 <__ssprint_r>
 8011514:	103b001e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 8011518:	d8c02017 	ldw	r3,128(sp)
 801151c:	da000404 	addi	r8,sp,16
 8011520:	003dc606 	br	8010c3c <__alt_data_end+0xfc010c3c>
 8011524:	d8801f17 	ldw	r2,124(sp)
 8011528:	030200f4 	movhi	r12,2051
 801152c:	01000044 	movi	r4,1
 8011530:	18c00044 	addi	r3,r3,1
 8011534:	10800044 	addi	r2,r2,1
 8011538:	632b1b04 	addi	r12,r12,-21396
 801153c:	41000115 	stw	r4,4(r8)
 8011540:	43000015 	stw	r12,0(r8)
 8011544:	d8c02015 	stw	r3,128(sp)
 8011548:	d8801f15 	stw	r2,124(sp)
 801154c:	010001c4 	movi	r4,7
 8011550:	2080ad16 	blt	r4,r2,8011808 <___svfprintf_internal_r+0x1a10>
 8011554:	42000204 	addi	r8,r8,8
 8011558:	8000041e 	bne	r16,zero,801156c <___svfprintf_internal_r+0x1774>
 801155c:	dac03317 	ldw	r11,204(sp)
 8011560:	5800021e 	bne	r11,zero,801156c <___svfprintf_internal_r+0x1774>
 8011564:	8880004c 	andi	r2,r17,1
 8011568:	103c0526 	beq	r2,zero,8010580 <__alt_data_end+0xfc010580>
 801156c:	db003917 	ldw	r12,228(sp)
 8011570:	d8801f17 	ldw	r2,124(sp)
 8011574:	dac03517 	ldw	r11,212(sp)
 8011578:	1b07883a 	add	r3,r3,r12
 801157c:	10800044 	addi	r2,r2,1
 8011580:	42c00015 	stw	r11,0(r8)
 8011584:	43000115 	stw	r12,4(r8)
 8011588:	d8c02015 	stw	r3,128(sp)
 801158c:	d8801f15 	stw	r2,124(sp)
 8011590:	010001c4 	movi	r4,7
 8011594:	20818816 	blt	r4,r2,8011bb8 <___svfprintf_internal_r+0x1dc0>
 8011598:	42000204 	addi	r8,r8,8
 801159c:	0421c83a 	sub	r16,zero,r16
 80115a0:	0400bc0e 	bge	zero,r16,8011894 <___svfprintf_internal_r+0x1a9c>
 80115a4:	04800404 	movi	r18,16
 80115a8:	9400f80e 	bge	r18,r16,801198c <___svfprintf_internal_r+0x1b94>
 80115ac:	010200f4 	movhi	r4,2051
 80115b0:	212b1b84 	addi	r4,r4,-21394
 80115b4:	d9002b15 	stw	r4,172(sp)
 80115b8:	054001c4 	movi	r21,7
 80115bc:	dcc02f17 	ldw	r19,188(sp)
 80115c0:	00000306 	br	80115d0 <___svfprintf_internal_r+0x17d8>
 80115c4:	42000204 	addi	r8,r8,8
 80115c8:	843ffc04 	addi	r16,r16,-16
 80115cc:	9400f20e 	bge	r18,r16,8011998 <___svfprintf_internal_r+0x1ba0>
 80115d0:	18c00404 	addi	r3,r3,16
 80115d4:	10800044 	addi	r2,r2,1
 80115d8:	45000015 	stw	r20,0(r8)
 80115dc:	44800115 	stw	r18,4(r8)
 80115e0:	d8c02015 	stw	r3,128(sp)
 80115e4:	d8801f15 	stw	r2,124(sp)
 80115e8:	a8bff60e 	bge	r21,r2,80115c4 <__alt_data_end+0xfc0115c4>
 80115ec:	9809883a 	mov	r4,r19
 80115f0:	b80b883a 	mov	r5,r23
 80115f4:	b00d883a 	mov	r6,r22
 80115f8:	80189240 	call	8018924 <__ssprint_r>
 80115fc:	103ac61e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 8011600:	d8c02017 	ldw	r3,128(sp)
 8011604:	d8801f17 	ldw	r2,124(sp)
 8011608:	da000404 	addi	r8,sp,16
 801160c:	003fee06 	br	80115c8 <__alt_data_end+0xfc0115c8>
 8011610:	db002e17 	ldw	r12,184(sp)
 8011614:	1805883a 	mov	r2,r3
 8011618:	dac02d15 	stw	r11,180(sp)
 801161c:	0319c83a 	sub	r12,zero,r12
 8011620:	db002e15 	stw	r12,184(sp)
 8011624:	003ad106 	br	801016c <__alt_data_end+0xfc01016c>
 8011628:	18800044 	addi	r2,r3,1
 801162c:	8c400814 	ori	r17,r17,32
 8011630:	1c000047 	ldb	r16,1(r3)
 8011634:	003a4606 	br	800ff50 <__alt_data_end+0xfc00ff50>
 8011638:	d9002f17 	ldw	r4,188(sp)
 801163c:	b80b883a 	mov	r5,r23
 8011640:	b00d883a 	mov	r6,r22
 8011644:	80189240 	call	8018924 <__ssprint_r>
 8011648:	103ab31e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 801164c:	d8c02017 	ldw	r3,128(sp)
 8011650:	da000404 	addi	r8,sp,16
 8011654:	003d8a06 	br	8010c80 <__alt_data_end+0xfc010c80>
 8011658:	057ff7c4 	movi	r21,-33
 801165c:	00bfffc4 	movi	r2,-1
 8011660:	856a703a 	and	r21,r16,r21
 8011664:	48807126 	beq	r9,r2,801182c <___svfprintf_internal_r+0x1a34>
 8011668:	008011c4 	movi	r2,71
 801166c:	a8814f26 	beq	r21,r2,8011bac <___svfprintf_internal_r+0x1db4>
 8011670:	db003817 	ldw	r12,224(sp)
 8011674:	8ac04014 	ori	r11,r17,256
 8011678:	dac02d15 	stw	r11,180(sp)
 801167c:	60015816 	blt	r12,zero,8011be0 <___svfprintf_internal_r+0x1de8>
 8011680:	dc803817 	ldw	r18,224(sp)
 8011684:	d8002a05 	stb	zero,168(sp)
 8011688:	00801984 	movi	r2,102
 801168c:	80808c26 	beq	r16,r2,80118c0 <___svfprintf_internal_r+0x1ac8>
 8011690:	00801184 	movi	r2,70
 8011694:	80808a26 	beq	r16,r2,80118c0 <___svfprintf_internal_r+0x1ac8>
 8011698:	00801144 	movi	r2,69
 801169c:	a8815426 	beq	r21,r2,8011bf0 <___svfprintf_internal_r+0x1df8>
 80116a0:	4839883a 	mov	fp,r9
 80116a4:	d8802604 	addi	r2,sp,152
 80116a8:	d8800115 	stw	r2,4(sp)
 80116ac:	d9002f17 	ldw	r4,188(sp)
 80116b0:	d8802504 	addi	r2,sp,148
 80116b4:	d9403717 	ldw	r5,220(sp)
 80116b8:	d8800215 	stw	r2,8(sp)
 80116bc:	d8802104 	addi	r2,sp,132
 80116c0:	df000015 	stw	fp,0(sp)
 80116c4:	d8800315 	stw	r2,12(sp)
 80116c8:	900d883a 	mov	r6,r18
 80116cc:	01c00084 	movi	r7,2
 80116d0:	da004015 	stw	r8,256(sp)
 80116d4:	da403f15 	stw	r9,252(sp)
 80116d8:	80141280 	call	8014128 <_dtoa_r>
 80116dc:	d8803115 	stw	r2,196(sp)
 80116e0:	008019c4 	movi	r2,103
 80116e4:	da004017 	ldw	r8,256(sp)
 80116e8:	da403f17 	ldw	r9,252(sp)
 80116ec:	80800226 	beq	r16,r2,80116f8 <___svfprintf_internal_r+0x1900>
 80116f0:	008011c4 	movi	r2,71
 80116f4:	8080841e 	bne	r16,r2,8011908 <___svfprintf_internal_r+0x1b10>
 80116f8:	8880004c 	andi	r2,r17,1
 80116fc:	10015126 	beq	r2,zero,8011c44 <___svfprintf_internal_r+0x1e4c>
 8011700:	db003117 	ldw	r12,196(sp)
 8011704:	6715883a 	add	r10,r12,fp
 8011708:	d9003717 	ldw	r4,220(sp)
 801170c:	900b883a 	mov	r5,r18
 8011710:	000d883a 	mov	r6,zero
 8011714:	000f883a 	mov	r7,zero
 8011718:	da004015 	stw	r8,256(sp)
 801171c:	da403f15 	stw	r9,252(sp)
 8011720:	da803e15 	stw	r10,248(sp)
 8011724:	800c0100 	call	800c010 <__eqdf2>
 8011728:	da004017 	ldw	r8,256(sp)
 801172c:	da403f17 	ldw	r9,252(sp)
 8011730:	da803e17 	ldw	r10,248(sp)
 8011734:	1000d926 	beq	r2,zero,8011a9c <___svfprintf_internal_r+0x1ca4>
 8011738:	d8802117 	ldw	r2,132(sp)
 801173c:	1280062e 	bgeu	r2,r10,8011758 <___svfprintf_internal_r+0x1960>
 8011740:	01000c04 	movi	r4,48
 8011744:	10c00044 	addi	r3,r2,1
 8011748:	d8c02115 	stw	r3,132(sp)
 801174c:	11000005 	stb	r4,0(r2)
 8011750:	d8802117 	ldw	r2,132(sp)
 8011754:	12bffb36 	bltu	r2,r10,8011744 <__alt_data_end+0xfc011744>
 8011758:	db003117 	ldw	r12,196(sp)
 801175c:	1305c83a 	sub	r2,r2,r12
 8011760:	d8803315 	stw	r2,204(sp)
 8011764:	008011c4 	movi	r2,71
 8011768:	a880b626 	beq	r21,r2,8011a44 <___svfprintf_internal_r+0x1c4c>
 801176c:	00801944 	movi	r2,101
 8011770:	14017e0e 	bge	r2,r16,8011d6c <___svfprintf_internal_r+0x1f74>
 8011774:	00801984 	movi	r2,102
 8011778:	80812826 	beq	r16,r2,8011c1c <___svfprintf_internal_r+0x1e24>
 801177c:	db002617 	ldw	r12,152(sp)
 8011780:	db003415 	stw	r12,208(sp)
 8011784:	db003417 	ldw	r12,208(sp)
 8011788:	dac03317 	ldw	r11,204(sp)
 801178c:	62c11a16 	blt	r12,r11,8011bf8 <___svfprintf_internal_r+0x1e00>
 8011790:	8c40004c 	andi	r17,r17,1
 8011794:	88013d1e 	bne	r17,zero,8011c8c <___svfprintf_internal_r+0x1e94>
 8011798:	6005883a 	mov	r2,r12
 801179c:	60012716 	blt	r12,zero,8011c3c <___svfprintf_internal_r+0x1e44>
 80117a0:	dc803417 	ldw	r18,208(sp)
 80117a4:	df002a07 	ldb	fp,168(sp)
 80117a8:	e000b01e 	bne	fp,zero,8011a6c <___svfprintf_internal_r+0x1c74>
 80117ac:	dc402d17 	ldw	r17,180(sp)
 80117b0:	dd402783 	ldbu	r21,158(sp)
 80117b4:	d8802a15 	stw	r2,168(sp)
 80117b8:	dcc02d15 	stw	r19,180(sp)
 80117bc:	d8003215 	stw	zero,200(sp)
 80117c0:	003ac606 	br	80102dc <__alt_data_end+0xfc0102dc>
 80117c4:	008200f4 	movhi	r2,2051
 80117c8:	10ab0b04 	addi	r2,r2,-21460
 80117cc:	d8803115 	stw	r2,196(sp)
 80117d0:	003be506 	br	8010768 <__alt_data_end+0xfc010768>
 80117d4:	d9002f17 	ldw	r4,188(sp)
 80117d8:	04001004 	movi	r16,64
 80117dc:	800b883a 	mov	r5,r16
 80117e0:	800d7040 	call	800d704 <_malloc_r>
 80117e4:	b8800015 	stw	r2,0(r23)
 80117e8:	b8800415 	stw	r2,16(r23)
 80117ec:	10016126 	beq	r2,zero,8011d74 <___svfprintf_internal_r+0x1f7c>
 80117f0:	bc000515 	stw	r16,20(r23)
 80117f4:	00399a06 	br	800fe60 <__alt_data_end+0xfc00fe60>
 80117f8:	008200f4 	movhi	r2,2051
 80117fc:	10ab0e04 	addi	r2,r2,-21448
 8011800:	d8803115 	stw	r2,196(sp)
 8011804:	003f0406 	br	8011418 <__alt_data_end+0xfc011418>
 8011808:	d9002f17 	ldw	r4,188(sp)
 801180c:	b80b883a 	mov	r5,r23
 8011810:	b00d883a 	mov	r6,r22
 8011814:	80189240 	call	8018924 <__ssprint_r>
 8011818:	103a3f1e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 801181c:	dc002617 	ldw	r16,152(sp)
 8011820:	d8c02017 	ldw	r3,128(sp)
 8011824:	da000404 	addi	r8,sp,16
 8011828:	003f4b06 	br	8011558 <__alt_data_end+0xfc011558>
 801182c:	02400184 	movi	r9,6
 8011830:	003f8f06 	br	8011670 <__alt_data_end+0xfc011670>
 8011834:	db002d17 	ldw	r12,180(sp)
 8011838:	14c00017 	ldw	r19,0(r2)
 801183c:	0039883a 	mov	fp,zero
 8011840:	63000104 	addi	r12,r12,4
 8011844:	db002d15 	stw	r12,180(sp)
 8011848:	003c2b06 	br	80108f8 <__alt_data_end+0xfc0108f8>
 801184c:	d8c03117 	ldw	r3,196(sp)
 8011850:	b0e5c83a 	sub	r18,r22,r3
 8011854:	003a9c06 	br	80102c8 <__alt_data_end+0xfc0102c8>
 8011858:	da004015 	stw	r8,256(sp)
 801185c:	800e3c40 	call	800e3c4 <strlen>
 8011860:	1025883a 	mov	r18,r2
 8011864:	da004017 	ldw	r8,256(sp)
 8011868:	903c450e 	bge	r18,zero,8010980 <__alt_data_end+0xfc010980>
 801186c:	0005883a 	mov	r2,zero
 8011870:	003c4306 	br	8010980 <__alt_data_end+0xfc010980>
 8011874:	d9002f17 	ldw	r4,188(sp)
 8011878:	b80b883a 	mov	r5,r23
 801187c:	b00d883a 	mov	r6,r22
 8011880:	80189240 	call	8018924 <__ssprint_r>
 8011884:	103a241e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 8011888:	d8c02017 	ldw	r3,128(sp)
 801188c:	d8801f17 	ldw	r2,124(sp)
 8011890:	da000404 	addi	r8,sp,16
 8011894:	db003317 	ldw	r12,204(sp)
 8011898:	dac03117 	ldw	r11,196(sp)
 801189c:	10800044 	addi	r2,r2,1
 80118a0:	60c7883a 	add	r3,r12,r3
 80118a4:	42c00015 	stw	r11,0(r8)
 80118a8:	43000115 	stw	r12,4(r8)
 80118ac:	d8c02015 	stw	r3,128(sp)
 80118b0:	d8801f15 	stw	r2,124(sp)
 80118b4:	010001c4 	movi	r4,7
 80118b8:	20bb300e 	bge	r4,r2,801057c <__alt_data_end+0xfc01057c>
 80118bc:	003d9c06 	br	8010f30 <__alt_data_end+0xfc010f30>
 80118c0:	d8802604 	addi	r2,sp,152
 80118c4:	d8800115 	stw	r2,4(sp)
 80118c8:	d9002f17 	ldw	r4,188(sp)
 80118cc:	d8802504 	addi	r2,sp,148
 80118d0:	d9403717 	ldw	r5,220(sp)
 80118d4:	d8800215 	stw	r2,8(sp)
 80118d8:	d8802104 	addi	r2,sp,132
 80118dc:	da400015 	stw	r9,0(sp)
 80118e0:	d8800315 	stw	r2,12(sp)
 80118e4:	900d883a 	mov	r6,r18
 80118e8:	01c000c4 	movi	r7,3
 80118ec:	da004015 	stw	r8,256(sp)
 80118f0:	da403f15 	stw	r9,252(sp)
 80118f4:	80141280 	call	8014128 <_dtoa_r>
 80118f8:	da403f17 	ldw	r9,252(sp)
 80118fc:	da004017 	ldw	r8,256(sp)
 8011900:	d8803115 	stw	r2,196(sp)
 8011904:	4839883a 	mov	fp,r9
 8011908:	dac03117 	ldw	r11,196(sp)
 801190c:	00801184 	movi	r2,70
 8011910:	5f15883a 	add	r10,r11,fp
 8011914:	a8bf7c1e 	bne	r21,r2,8011708 <__alt_data_end+0xfc011708>
 8011918:	59000007 	ldb	r4,0(r11)
 801191c:	00800c04 	movi	r2,48
 8011920:	2080ca26 	beq	r4,r2,8011c4c <___svfprintf_internal_r+0x1e54>
 8011924:	d8c02617 	ldw	r3,152(sp)
 8011928:	50d5883a 	add	r10,r10,r3
 801192c:	003f7606 	br	8011708 <__alt_data_end+0xfc011708>
 8011930:	010200f4 	movhi	r4,2051
 8011934:	212b1f84 	addi	r4,r4,-21378
 8011938:	d9003615 	stw	r4,216(sp)
 801193c:	003aa606 	br	80103d8 <__alt_data_end+0xfc0103d8>
 8011940:	0025883a 	mov	r18,zero
 8011944:	003dc306 	br	8011054 <__alt_data_end+0xfc011054>
 8011948:	d9002f17 	ldw	r4,188(sp)
 801194c:	b80b883a 	mov	r5,r23
 8011950:	b00d883a 	mov	r6,r22
 8011954:	80189240 	call	8018924 <__ssprint_r>
 8011958:	1039ef1e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 801195c:	d8c02017 	ldw	r3,128(sp)
 8011960:	da000404 	addi	r8,sp,16
 8011964:	003dba06 	br	8011050 <__alt_data_end+0xfc011050>
 8011968:	d9002f17 	ldw	r4,188(sp)
 801196c:	b80b883a 	mov	r5,r23
 8011970:	b00d883a 	mov	r6,r22
 8011974:	80189240 	call	8018924 <__ssprint_r>
 8011978:	1039e71e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 801197c:	d8802617 	ldw	r2,152(sp)
 8011980:	d8c02017 	ldw	r3,128(sp)
 8011984:	da000404 	addi	r8,sp,16
 8011988:	003e4106 	br	8011290 <__alt_data_end+0xfc011290>
 801198c:	030200f4 	movhi	r12,2051
 8011990:	632b1b84 	addi	r12,r12,-21394
 8011994:	db002b15 	stw	r12,172(sp)
 8011998:	dac02b17 	ldw	r11,172(sp)
 801199c:	1c07883a 	add	r3,r3,r16
 80119a0:	10800044 	addi	r2,r2,1
 80119a4:	42c00015 	stw	r11,0(r8)
 80119a8:	44000115 	stw	r16,4(r8)
 80119ac:	d8c02015 	stw	r3,128(sp)
 80119b0:	d8801f15 	stw	r2,124(sp)
 80119b4:	010001c4 	movi	r4,7
 80119b8:	20bfae16 	blt	r4,r2,8011874 <__alt_data_end+0xfc011874>
 80119bc:	42000204 	addi	r8,r8,8
 80119c0:	003fb406 	br	8011894 <__alt_data_end+0xfc011894>
 80119c4:	0021883a 	mov	r16,zero
 80119c8:	003e4306 	br	80112d8 <__alt_data_end+0xfc0112d8>
 80119cc:	d9002f17 	ldw	r4,188(sp)
 80119d0:	b80b883a 	mov	r5,r23
 80119d4:	b00d883a 	mov	r6,r22
 80119d8:	80189240 	call	8018924 <__ssprint_r>
 80119dc:	1039ce1e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 80119e0:	d8802617 	ldw	r2,152(sp)
 80119e4:	db003317 	ldw	r12,204(sp)
 80119e8:	d8c02017 	ldw	r3,128(sp)
 80119ec:	da000404 	addi	r8,sp,16
 80119f0:	6085c83a 	sub	r2,r12,r2
 80119f4:	003e3706 	br	80112d4 <__alt_data_end+0xfc0112d4>
 80119f8:	00800184 	movi	r2,6
 80119fc:	1240012e 	bgeu	r2,r9,8011a04 <___svfprintf_internal_r+0x1c0c>
 8011a00:	1013883a 	mov	r9,r2
 8011a04:	4825883a 	mov	r18,r9
 8011a08:	4805883a 	mov	r2,r9
 8011a0c:	4800a416 	blt	r9,zero,8011ca0 <___svfprintf_internal_r+0x1ea8>
 8011a10:	d8802a15 	stw	r2,168(sp)
 8011a14:	008200f4 	movhi	r2,2051
 8011a18:	10ab1904 	addi	r2,r2,-21404
 8011a1c:	d8803115 	stw	r2,196(sp)
 8011a20:	dcc02d15 	stw	r19,180(sp)
 8011a24:	d8003215 	stw	zero,200(sp)
 8011a28:	d8003415 	stw	zero,208(sp)
 8011a2c:	0005883a 	mov	r2,zero
 8011a30:	003a3106 	br	80102f8 <__alt_data_end+0xfc0102f8>
 8011a34:	030200f4 	movhi	r12,2051
 8011a38:	632b1f84 	addi	r12,r12,-21378
 8011a3c:	db003615 	stw	r12,216(sp)
 8011a40:	003af406 	br	8010614 <__alt_data_end+0xfc010614>
 8011a44:	d8c02617 	ldw	r3,152(sp)
 8011a48:	00bfff44 	movi	r2,-3
 8011a4c:	18801516 	blt	r3,r2,8011aa4 <___svfprintf_internal_r+0x1cac>
 8011a50:	48c01416 	blt	r9,r3,8011aa4 <___svfprintf_internal_r+0x1cac>
 8011a54:	d8c03415 	stw	r3,208(sp)
 8011a58:	040019c4 	movi	r16,103
 8011a5c:	003f4906 	br	8011784 <__alt_data_end+0xfc011784>
 8011a60:	05400b44 	movi	r21,45
 8011a64:	dd402785 	stb	r21,158(sp)
 8011a68:	003b3a06 	br	8010754 <__alt_data_end+0xfc010754>
 8011a6c:	00c00b44 	movi	r3,45
 8011a70:	d8802a15 	stw	r2,168(sp)
 8011a74:	dc402d17 	ldw	r17,180(sp)
 8011a78:	d8c02785 	stb	r3,158(sp)
 8011a7c:	dcc02d15 	stw	r19,180(sp)
 8011a80:	d8003215 	stw	zero,200(sp)
 8011a84:	00800b44 	movi	r2,45
 8011a88:	003a1806 	br	80102ec <__alt_data_end+0xfc0102ec>
 8011a8c:	010200f4 	movhi	r4,2051
 8011a90:	212b1b84 	addi	r4,r4,-21394
 8011a94:	d9002b15 	stw	r4,172(sp)
 8011a98:	003cc306 	br	8010da8 <__alt_data_end+0xfc010da8>
 8011a9c:	5005883a 	mov	r2,r10
 8011aa0:	003f2d06 	br	8011758 <__alt_data_end+0xfc011758>
 8011aa4:	843fff84 	addi	r16,r16,-2
 8011aa8:	1f3fffc4 	addi	fp,r3,-1
 8011aac:	df002615 	stw	fp,152(sp)
 8011ab0:	dc0022c5 	stb	r16,139(sp)
 8011ab4:	e000a216 	blt	fp,zero,8011d40 <___svfprintf_internal_r+0x1f48>
 8011ab8:	00800ac4 	movi	r2,43
 8011abc:	d8802305 	stb	r2,140(sp)
 8011ac0:	00800244 	movi	r2,9
 8011ac4:	1700820e 	bge	r2,fp,8011cd0 <___svfprintf_internal_r+0x1ed8>
 8011ac8:	dd4022c4 	addi	r21,sp,139
 8011acc:	dc002b15 	stw	r16,172(sp)
 8011ad0:	8825883a 	mov	r18,r17
 8011ad4:	a821883a 	mov	r16,r21
 8011ad8:	4023883a 	mov	r17,r8
 8011adc:	e009883a 	mov	r4,fp
 8011ae0:	01400284 	movi	r5,10
 8011ae4:	800a95c0 	call	800a95c <__modsi3>
 8011ae8:	10800c04 	addi	r2,r2,48
 8011aec:	843fffc4 	addi	r16,r16,-1
 8011af0:	e009883a 	mov	r4,fp
 8011af4:	01400284 	movi	r5,10
 8011af8:	80800005 	stb	r2,0(r16)
 8011afc:	800a9080 	call	800a908 <__divsi3>
 8011b00:	1039883a 	mov	fp,r2
 8011b04:	00800244 	movi	r2,9
 8011b08:	173ff416 	blt	r2,fp,8011adc <__alt_data_end+0xfc011adc>
 8011b0c:	8811883a 	mov	r8,r17
 8011b10:	e0800c04 	addi	r2,fp,48
 8011b14:	9023883a 	mov	r17,r18
 8011b18:	8025883a 	mov	r18,r16
 8011b1c:	913fffc4 	addi	r4,r18,-1
 8011b20:	90bfffc5 	stb	r2,-1(r18)
 8011b24:	dc002b17 	ldw	r16,172(sp)
 8011b28:	25408e2e 	bgeu	r4,r21,8011d64 <___svfprintf_internal_r+0x1f6c>
 8011b2c:	d9402384 	addi	r5,sp,142
 8011b30:	2c8bc83a 	sub	r5,r5,r18
 8011b34:	d8c02344 	addi	r3,sp,141
 8011b38:	a94b883a 	add	r5,r21,r5
 8011b3c:	00000106 	br	8011b44 <___svfprintf_internal_r+0x1d4c>
 8011b40:	20800003 	ldbu	r2,0(r4)
 8011b44:	18800005 	stb	r2,0(r3)
 8011b48:	18c00044 	addi	r3,r3,1
 8011b4c:	21000044 	addi	r4,r4,1
 8011b50:	197ffb1e 	bne	r3,r5,8011b40 <__alt_data_end+0xfc011b40>
 8011b54:	d8802304 	addi	r2,sp,140
 8011b58:	1485c83a 	sub	r2,r2,r18
 8011b5c:	d8c02344 	addi	r3,sp,141
 8011b60:	1885883a 	add	r2,r3,r2
 8011b64:	dac03317 	ldw	r11,204(sp)
 8011b68:	156bc83a 	sub	r21,r2,r21
 8011b6c:	dd403a15 	stw	r21,232(sp)
 8011b70:	00800044 	movi	r2,1
 8011b74:	5d65883a 	add	r18,r11,r21
 8011b78:	12c0770e 	bge	r2,r11,8011d58 <___svfprintf_internal_r+0x1f60>
 8011b7c:	94800044 	addi	r18,r18,1
 8011b80:	9005883a 	mov	r2,r18
 8011b84:	90007216 	blt	r18,zero,8011d50 <___svfprintf_internal_r+0x1f58>
 8011b88:	d8003415 	stw	zero,208(sp)
 8011b8c:	003f0506 	br	80117a4 <__alt_data_end+0xfc0117a4>
 8011b90:	da402a15 	stw	r9,168(sp)
 8011b94:	dd402783 	ldbu	r21,158(sp)
 8011b98:	4825883a 	mov	r18,r9
 8011b9c:	dcc02d15 	stw	r19,180(sp)
 8011ba0:	d8003215 	stw	zero,200(sp)
 8011ba4:	d8003415 	stw	zero,208(sp)
 8011ba8:	0039cc06 	br	80102dc <__alt_data_end+0xfc0102dc>
 8011bac:	483eb01e 	bne	r9,zero,8011670 <__alt_data_end+0xfc011670>
 8011bb0:	9013883a 	mov	r9,r18
 8011bb4:	003eae06 	br	8011670 <__alt_data_end+0xfc011670>
 8011bb8:	d9002f17 	ldw	r4,188(sp)
 8011bbc:	b80b883a 	mov	r5,r23
 8011bc0:	b00d883a 	mov	r6,r22
 8011bc4:	80189240 	call	8018924 <__ssprint_r>
 8011bc8:	1039531e 	bne	r2,zero,8010118 <__alt_data_end+0xfc010118>
 8011bcc:	dc002617 	ldw	r16,152(sp)
 8011bd0:	d8c02017 	ldw	r3,128(sp)
 8011bd4:	d8801f17 	ldw	r2,124(sp)
 8011bd8:	da000404 	addi	r8,sp,16
 8011bdc:	003e6f06 	br	801159c <__alt_data_end+0xfc01159c>
 8011be0:	00c00b44 	movi	r3,45
 8011be4:	64a0003c 	xorhi	r18,r12,32768
 8011be8:	d8c02a05 	stb	r3,168(sp)
 8011bec:	003ea606 	br	8011688 <__alt_data_end+0xfc011688>
 8011bf0:	4f000044 	addi	fp,r9,1
 8011bf4:	003eab06 	br	80116a4 <__alt_data_end+0xfc0116a4>
 8011bf8:	d8c03417 	ldw	r3,208(sp)
 8011bfc:	00c0410e 	bge	zero,r3,8011d04 <___svfprintf_internal_r+0x1f0c>
 8011c00:	04800044 	movi	r18,1
 8011c04:	dac03317 	ldw	r11,204(sp)
 8011c08:	92e5883a 	add	r18,r18,r11
 8011c0c:	9005883a 	mov	r2,r18
 8011c10:	903ee40e 	bge	r18,zero,80117a4 <__alt_data_end+0xfc0117a4>
 8011c14:	0005883a 	mov	r2,zero
 8011c18:	003ee206 	br	80117a4 <__alt_data_end+0xfc0117a4>
 8011c1c:	d8c02617 	ldw	r3,152(sp)
 8011c20:	d8c03415 	stw	r3,208(sp)
 8011c24:	00c0310e 	bge	zero,r3,8011cec <___svfprintf_internal_r+0x1ef4>
 8011c28:	48001f1e 	bne	r9,zero,8011ca8 <___svfprintf_internal_r+0x1eb0>
 8011c2c:	8c40004c 	andi	r17,r17,1
 8011c30:	88001d1e 	bne	r17,zero,8011ca8 <___svfprintf_internal_r+0x1eb0>
 8011c34:	1805883a 	mov	r2,r3
 8011c38:	183ed90e 	bge	r3,zero,80117a0 <__alt_data_end+0xfc0117a0>
 8011c3c:	0005883a 	mov	r2,zero
 8011c40:	003ed706 	br	80117a0 <__alt_data_end+0xfc0117a0>
 8011c44:	d8802117 	ldw	r2,132(sp)
 8011c48:	003ec306 	br	8011758 <__alt_data_end+0xfc011758>
 8011c4c:	d9003717 	ldw	r4,220(sp)
 8011c50:	900b883a 	mov	r5,r18
 8011c54:	000d883a 	mov	r6,zero
 8011c58:	000f883a 	mov	r7,zero
 8011c5c:	da004015 	stw	r8,256(sp)
 8011c60:	da403f15 	stw	r9,252(sp)
 8011c64:	da803e15 	stw	r10,248(sp)
 8011c68:	800c0100 	call	800c010 <__eqdf2>
 8011c6c:	da004017 	ldw	r8,256(sp)
 8011c70:	da403f17 	ldw	r9,252(sp)
 8011c74:	da803e17 	ldw	r10,248(sp)
 8011c78:	103f2a26 	beq	r2,zero,8011924 <__alt_data_end+0xfc011924>
 8011c7c:	00800044 	movi	r2,1
 8011c80:	1707c83a 	sub	r3,r2,fp
 8011c84:	d8c02615 	stw	r3,152(sp)
 8011c88:	003f2706 	br	8011928 <__alt_data_end+0xfc011928>
 8011c8c:	db003417 	ldw	r12,208(sp)
 8011c90:	64800044 	addi	r18,r12,1
 8011c94:	9005883a 	mov	r2,r18
 8011c98:	903ec20e 	bge	r18,zero,80117a4 <__alt_data_end+0xfc0117a4>
 8011c9c:	003fdd06 	br	8011c14 <__alt_data_end+0xfc011c14>
 8011ca0:	0005883a 	mov	r2,zero
 8011ca4:	003f5a06 	br	8011a10 <__alt_data_end+0xfc011a10>
 8011ca8:	dac03417 	ldw	r11,208(sp)
 8011cac:	4a400044 	addi	r9,r9,1
 8011cb0:	5a65883a 	add	r18,r11,r9
 8011cb4:	9005883a 	mov	r2,r18
 8011cb8:	903eba0e 	bge	r18,zero,80117a4 <__alt_data_end+0xfc0117a4>
 8011cbc:	003fd506 	br	8011c14 <__alt_data_end+0xfc011c14>
 8011cc0:	008200f4 	movhi	r2,2051
 8011cc4:	10ab1b84 	addi	r2,r2,-21394
 8011cc8:	d8802b15 	stw	r2,172(sp)
 8011ccc:	003d2906 	br	8011174 <__alt_data_end+0xfc011174>
 8011cd0:	00800c04 	movi	r2,48
 8011cd4:	e0c00c04 	addi	r3,fp,48
 8011cd8:	d8802345 	stb	r2,141(sp)
 8011cdc:	d8c02385 	stb	r3,142(sp)
 8011ce0:	d88023c4 	addi	r2,sp,143
 8011ce4:	dd4022c4 	addi	r21,sp,139
 8011ce8:	003f9e06 	br	8011b64 <__alt_data_end+0xfc011b64>
 8011cec:	4800081e 	bne	r9,zero,8011d10 <___svfprintf_internal_r+0x1f18>
 8011cf0:	8c40004c 	andi	r17,r17,1
 8011cf4:	8800061e 	bne	r17,zero,8011d10 <___svfprintf_internal_r+0x1f18>
 8011cf8:	00800044 	movi	r2,1
 8011cfc:	1025883a 	mov	r18,r2
 8011d00:	003ea806 	br	80117a4 <__alt_data_end+0xfc0117a4>
 8011d04:	04800084 	movi	r18,2
 8011d08:	90e5c83a 	sub	r18,r18,r3
 8011d0c:	003fbd06 	br	8011c04 <__alt_data_end+0xfc011c04>
 8011d10:	4c800084 	addi	r18,r9,2
 8011d14:	9005883a 	mov	r2,r18
 8011d18:	903ea20e 	bge	r18,zero,80117a4 <__alt_data_end+0xfc0117a4>
 8011d1c:	003fbd06 	br	8011c14 <__alt_data_end+0xfc011c14>
 8011d20:	dac02d17 	ldw	r11,180(sp)
 8011d24:	5a400017 	ldw	r9,0(r11)
 8011d28:	5ac00104 	addi	r11,r11,4
 8011d2c:	dac02d15 	stw	r11,180(sp)
 8011d30:	483e3f0e 	bge	r9,zero,8011630 <__alt_data_end+0xfc011630>
 8011d34:	027fffc4 	movi	r9,-1
 8011d38:	1c000047 	ldb	r16,1(r3)
 8011d3c:	00388406 	br	800ff50 <__alt_data_end+0xfc00ff50>
 8011d40:	00800b44 	movi	r2,45
 8011d44:	0739c83a 	sub	fp,zero,fp
 8011d48:	d8802305 	stb	r2,140(sp)
 8011d4c:	003f5c06 	br	8011ac0 <__alt_data_end+0xfc011ac0>
 8011d50:	0005883a 	mov	r2,zero
 8011d54:	003f8c06 	br	8011b88 <__alt_data_end+0xfc011b88>
 8011d58:	88a2703a 	and	r17,r17,r2
 8011d5c:	883f8826 	beq	r17,zero,8011b80 <__alt_data_end+0xfc011b80>
 8011d60:	003f8606 	br	8011b7c <__alt_data_end+0xfc011b7c>
 8011d64:	d8802344 	addi	r2,sp,141
 8011d68:	003f7e06 	br	8011b64 <__alt_data_end+0xfc011b64>
 8011d6c:	d8c02617 	ldw	r3,152(sp)
 8011d70:	003f4d06 	br	8011aa8 <__alt_data_end+0xfc011aa8>
 8011d74:	dac02f17 	ldw	r11,188(sp)
 8011d78:	00800304 	movi	r2,12
 8011d7c:	58800015 	stw	r2,0(r11)
 8011d80:	00bfffc4 	movi	r2,-1
 8011d84:	0038e806 	br	8010128 <__alt_data_end+0xfc010128>

08011d88 <time>:
 8011d88:	008200f4 	movhi	r2,2051
 8011d8c:	defffc04 	addi	sp,sp,-16
 8011d90:	10b31604 	addi	r2,r2,-13224
 8011d94:	dc000215 	stw	r16,8(sp)
 8011d98:	2021883a 	mov	r16,r4
 8011d9c:	11000017 	ldw	r4,0(r2)
 8011da0:	d80b883a 	mov	r5,sp
 8011da4:	000d883a 	mov	r6,zero
 8011da8:	dfc00315 	stw	ra,12(sp)
 8011dac:	80170000 	call	8017000 <_gettimeofday_r>
 8011db0:	10000716 	blt	r2,zero,8011dd0 <time+0x48>
 8011db4:	d8800017 	ldw	r2,0(sp)
 8011db8:	80000126 	beq	r16,zero,8011dc0 <time+0x38>
 8011dbc:	80800015 	stw	r2,0(r16)
 8011dc0:	dfc00317 	ldw	ra,12(sp)
 8011dc4:	dc000217 	ldw	r16,8(sp)
 8011dc8:	dec00404 	addi	sp,sp,16
 8011dcc:	f800283a 	ret
 8011dd0:	00bfffc4 	movi	r2,-1
 8011dd4:	003ffa06 	br	8011dc0 <__alt_data_end+0xfc011dc0>

08011dd8 <___vfprintf_internal_r>:
 8011dd8:	defeb604 	addi	sp,sp,-1320
 8011ddc:	dfc14915 	stw	ra,1316(sp)
 8011de0:	ddc14715 	stw	r23,1308(sp)
 8011de4:	dd814615 	stw	r22,1304(sp)
 8011de8:	282f883a 	mov	r23,r5
 8011dec:	202d883a 	mov	r22,r4
 8011df0:	d9812a15 	stw	r6,1192(sp)
 8011df4:	d9c12d15 	stw	r7,1204(sp)
 8011df8:	df014815 	stw	fp,1312(sp)
 8011dfc:	dd414515 	stw	r21,1300(sp)
 8011e00:	dd014415 	stw	r20,1296(sp)
 8011e04:	dcc14315 	stw	r19,1292(sp)
 8011e08:	dc814215 	stw	r18,1288(sp)
 8011e0c:	dc414115 	stw	r17,1284(sp)
 8011e10:	dc014015 	stw	r16,1280(sp)
 8011e14:	80171040 	call	8017104 <_localeconv_r>
 8011e18:	10800017 	ldw	r2,0(r2)
 8011e1c:	1009883a 	mov	r4,r2
 8011e20:	d8813515 	stw	r2,1236(sp)
 8011e24:	800e3c40 	call	800e3c4 <strlen>
 8011e28:	d8813815 	stw	r2,1248(sp)
 8011e2c:	b0000226 	beq	r22,zero,8011e38 <___vfprintf_internal_r+0x60>
 8011e30:	b0800e17 	ldw	r2,56(r22)
 8011e34:	10010426 	beq	r2,zero,8012248 <___vfprintf_internal_r+0x470>
 8011e38:	b8c0030b 	ldhu	r3,12(r23)
 8011e3c:	1908000c 	andi	r4,r3,8192
 8011e40:	1805883a 	mov	r2,r3
 8011e44:	2000071e 	bne	r4,zero,8011e64 <___vfprintf_internal_r+0x8c>
 8011e48:	b9001917 	ldw	r4,100(r23)
 8011e4c:	18880014 	ori	r2,r3,8192
 8011e50:	00f7ffc4 	movi	r3,-8193
 8011e54:	20c8703a 	and	r4,r4,r3
 8011e58:	b880030d 	sth	r2,12(r23)
 8011e5c:	1007883a 	mov	r3,r2
 8011e60:	b9001915 	stw	r4,100(r23)
 8011e64:	1100020c 	andi	r4,r2,8
 8011e68:	2000a726 	beq	r4,zero,8012108 <___vfprintf_internal_r+0x330>
 8011e6c:	b9000417 	ldw	r4,16(r23)
 8011e70:	2000a526 	beq	r4,zero,8012108 <___vfprintf_internal_r+0x330>
 8011e74:	1080068c 	andi	r2,r2,26
 8011e78:	01000284 	movi	r4,10
 8011e7c:	1100ab26 	beq	r2,r4,801212c <___vfprintf_internal_r+0x354>
 8011e80:	dac10e04 	addi	r11,sp,1080
 8011e84:	db010dc4 	addi	r12,sp,1079
 8011e88:	d8800404 	addi	r2,sp,16
 8011e8c:	050200f4 	movhi	r20,2051
 8011e90:	dac12815 	stw	r11,1184(sp)
 8011e94:	5b17c83a 	sub	r11,r11,r12
 8011e98:	a52b2384 	addi	r20,r20,-21362
 8011e9c:	db012915 	stw	r12,1188(sp)
 8011ea0:	d8811e15 	stw	r2,1144(sp)
 8011ea4:	d8012015 	stw	zero,1152(sp)
 8011ea8:	d8011f15 	stw	zero,1148(sp)
 8011eac:	d8013315 	stw	zero,1228(sp)
 8011eb0:	d8013715 	stw	zero,1244(sp)
 8011eb4:	d8013915 	stw	zero,1252(sp)
 8011eb8:	d8013b15 	stw	zero,1260(sp)
 8011ebc:	d8013a15 	stw	zero,1256(sp)
 8011ec0:	d8012f15 	stw	zero,1212(sp)
 8011ec4:	1011883a 	mov	r8,r2
 8011ec8:	dac13c15 	stw	r11,1264(sp)
 8011ecc:	db012a17 	ldw	r12,1192(sp)
 8011ed0:	60800007 	ldb	r2,0(r12)
 8011ed4:	1000df26 	beq	r2,zero,8012254 <___vfprintf_internal_r+0x47c>
 8011ed8:	00c00944 	movi	r3,37
 8011edc:	10c0dd26 	beq	r2,r3,8012254 <___vfprintf_internal_r+0x47c>
 8011ee0:	6021883a 	mov	r16,r12
 8011ee4:	00000106 	br	8011eec <___vfprintf_internal_r+0x114>
 8011ee8:	10c08426 	beq	r2,r3,80120fc <___vfprintf_internal_r+0x324>
 8011eec:	84000044 	addi	r16,r16,1
 8011ef0:	80800007 	ldb	r2,0(r16)
 8011ef4:	103ffc1e 	bne	r2,zero,8011ee8 <__alt_data_end+0xfc011ee8>
 8011ef8:	dac12a17 	ldw	r11,1192(sp)
 8011efc:	82e3c83a 	sub	r17,r16,r11
 8011f00:	88000f26 	beq	r17,zero,8011f40 <___vfprintf_internal_r+0x168>
 8011f04:	d8c12017 	ldw	r3,1152(sp)
 8011f08:	d8811f17 	ldw	r2,1148(sp)
 8011f0c:	dac12a17 	ldw	r11,1192(sp)
 8011f10:	1c47883a 	add	r3,r3,r17
 8011f14:	10800044 	addi	r2,r2,1
 8011f18:	d8c12015 	stw	r3,1152(sp)
 8011f1c:	42c00015 	stw	r11,0(r8)
 8011f20:	44400115 	stw	r17,4(r8)
 8011f24:	d8811f15 	stw	r2,1148(sp)
 8011f28:	00c001c4 	movi	r3,7
 8011f2c:	1880b416 	blt	r3,r2,8012200 <___vfprintf_internal_r+0x428>
 8011f30:	42000204 	addi	r8,r8,8
 8011f34:	db012f17 	ldw	r12,1212(sp)
 8011f38:	6459883a 	add	r12,r12,r17
 8011f3c:	db012f15 	stw	r12,1212(sp)
 8011f40:	80800007 	ldb	r2,0(r16)
 8011f44:	1000b526 	beq	r2,zero,801221c <___vfprintf_internal_r+0x444>
 8011f48:	80800044 	addi	r2,r16,1
 8011f4c:	84000047 	ldb	r16,1(r16)
 8011f50:	d8012785 	stb	zero,1182(sp)
 8011f54:	000d883a 	mov	r6,zero
 8011f58:	027fffc4 	movi	r9,-1
 8011f5c:	d8012e15 	stw	zero,1208(sp)
 8011f60:	0023883a 	mov	r17,zero
 8011f64:	01001604 	movi	r4,88
 8011f68:	01400244 	movi	r5,9
 8011f6c:	02800a84 	movi	r10,42
 8011f70:	01c01b04 	movi	r7,108
 8011f74:	10c00044 	addi	r3,r2,1
 8011f78:	80bff804 	addi	r2,r16,-32
 8011f7c:	2082f236 	bltu	r4,r2,8012b48 <___vfprintf_internal_r+0xd70>
 8011f80:	100490ba 	slli	r2,r2,2
 8011f84:	02c20074 	movhi	r11,2049
 8011f88:	5ac7e604 	addi	r11,r11,8088
 8011f8c:	12c5883a 	add	r2,r2,r11
 8011f90:	10800017 	ldw	r2,0(r2)
 8011f94:	1000683a 	jmp	r2
 8011f98:	08012990 	cmplti	zero,at,1190
 8011f9c:	08012b48 	cmpgei	zero,at,1197
 8011fa0:	08012b48 	cmpgei	zero,at,1197
 8011fa4:	080129b0 	cmpltui	zero,at,1190
 8011fa8:	08012b48 	cmpgei	zero,at,1197
 8011fac:	08012b48 	cmpgei	zero,at,1197
 8011fb0:	08012b48 	cmpgei	zero,at,1197
 8011fb4:	08012b48 	cmpgei	zero,at,1197
 8011fb8:	08012b48 	cmpgei	zero,at,1197
 8011fbc:	08012b48 	cmpgei	zero,at,1197
 8011fc0:	08012b0c 	andi	zero,at,1196
 8011fc4:	08012b38 	rdprs	zero,at,1196
 8011fc8:	08012b48 	cmpgei	zero,at,1197
 8011fcc:	0801225c 	xori	zero,at,1161
 8011fd0:	0801226c 	andhi	zero,at,1161
 8011fd4:	08012b48 	cmpgei	zero,at,1197
 8011fd8:	080122ac 	andhi	zero,at,1162
 8011fdc:	080127a0 	cmpeqi	zero,at,1182
 8011fe0:	080127a0 	cmpeqi	zero,at,1182
 8011fe4:	080127a0 	cmpeqi	zero,at,1182
 8011fe8:	080127a0 	cmpeqi	zero,at,1182
 8011fec:	080127a0 	cmpeqi	zero,at,1182
 8011ff0:	080127a0 	cmpeqi	zero,at,1182
 8011ff4:	080127a0 	cmpeqi	zero,at,1182
 8011ff8:	080127a0 	cmpeqi	zero,at,1182
 8011ffc:	080127a0 	cmpeqi	zero,at,1182
 8012000:	08012b48 	cmpgei	zero,at,1197
 8012004:	08012b48 	cmpgei	zero,at,1197
 8012008:	08012b48 	cmpgei	zero,at,1197
 801200c:	08012b48 	cmpgei	zero,at,1197
 8012010:	08012b48 	cmpgei	zero,at,1197
 8012014:	08012b48 	cmpgei	zero,at,1197
 8012018:	08012b48 	cmpgei	zero,at,1197
 801201c:	08012b48 	cmpgei	zero,at,1197
 8012020:	08012b48 	cmpgei	zero,at,1197
 8012024:	08012b48 	cmpgei	zero,at,1197
 8012028:	080127d4 	ori	zero,at,1183
 801202c:	080122bc 	xorhi	zero,at,1162
 8012030:	08012b48 	cmpgei	zero,at,1197
 8012034:	080122bc 	xorhi	zero,at,1162
 8012038:	08012b48 	cmpgei	zero,at,1197
 801203c:	08012b48 	cmpgei	zero,at,1197
 8012040:	08012b48 	cmpgei	zero,at,1197
 8012044:	08012b48 	cmpgei	zero,at,1197
 8012048:	08012360 	cmpeqi	zero,at,1165
 801204c:	08012b48 	cmpgei	zero,at,1197
 8012050:	08012b48 	cmpgei	zero,at,1197
 8012054:	08012370 	cmpltui	zero,at,1165
 8012058:	08012b48 	cmpgei	zero,at,1197
 801205c:	08012b48 	cmpgei	zero,at,1197
 8012060:	08012b48 	cmpgei	zero,at,1197
 8012064:	08012b48 	cmpgei	zero,at,1197
 8012068:	08012b48 	cmpgei	zero,at,1197
 801206c:	0801276c 	andhi	zero,at,1181
 8012070:	08012b48 	cmpgei	zero,at,1197
 8012074:	08012b48 	cmpgei	zero,at,1197
 8012078:	0801281c 	xori	zero,at,1184
 801207c:	08012b48 	cmpgei	zero,at,1197
 8012080:	08012b48 	cmpgei	zero,at,1197
 8012084:	08012b48 	cmpgei	zero,at,1197
 8012088:	08012b48 	cmpgei	zero,at,1197
 801208c:	08012b48 	cmpgei	zero,at,1197
 8012090:	08012b48 	cmpgei	zero,at,1197
 8012094:	08012b48 	cmpgei	zero,at,1197
 8012098:	08012b48 	cmpgei	zero,at,1197
 801209c:	08012b48 	cmpgei	zero,at,1197
 80120a0:	08012b48 	cmpgei	zero,at,1197
 80120a4:	08012a10 	cmplti	zero,at,1192
 80120a8:	080129c0 	call	80129c <__alt_mem_sdram-0x77fed64>
 80120ac:	080122bc 	xorhi	zero,at,1162
 80120b0:	080122bc 	xorhi	zero,at,1162
 80120b4:	080122bc 	xorhi	zero,at,1162
 80120b8:	08012a00 	call	8012a0 <__alt_mem_sdram-0x77fed60>
 80120bc:	080129c0 	call	80129c <__alt_mem_sdram-0x77fed64>
 80120c0:	08012b48 	cmpgei	zero,at,1197
 80120c4:	08012b48 	cmpgei	zero,at,1197
 80120c8:	08012908 	cmpgei	zero,at,1188
 80120cc:	08012b48 	cmpgei	zero,at,1197
 80120d0:	0801291c 	xori	zero,at,1188
 80120d4:	08012950 	cmplti	zero,at,1189
 80120d8:	08012a50 	cmplti	zero,at,1193
 80120dc:	08012878 	rdprs	zero,at,1185
 80120e0:	08012b48 	cmpgei	zero,at,1197
 80120e4:	08012a98 	cmpnei	zero,at,1194
 80120e8:	08012b48 	cmpgei	zero,at,1197
 80120ec:	08012888 	cmpgei	zero,at,1186
 80120f0:	08012b48 	cmpgei	zero,at,1197
 80120f4:	08012b48 	cmpgei	zero,at,1197
 80120f8:	080128c8 	cmpgei	zero,at,1187
 80120fc:	db012a17 	ldw	r12,1192(sp)
 8012100:	8323c83a 	sub	r17,r16,r12
 8012104:	003f7e06 	br	8011f00 <__alt_data_end+0xfc011f00>
 8012108:	b009883a 	mov	r4,r22
 801210c:	b80b883a 	mov	r5,r23
 8012110:	8013df80 	call	8013df8 <__swsetup_r>
 8012114:	10002d1e 	bne	r2,zero,80121cc <___vfprintf_internal_r+0x3f4>
 8012118:	b8c0030b 	ldhu	r3,12(r23)
 801211c:	01000284 	movi	r4,10
 8012120:	1805883a 	mov	r2,r3
 8012124:	1080068c 	andi	r2,r2,26
 8012128:	113f551e 	bne	r2,r4,8011e80 <__alt_data_end+0xfc011e80>
 801212c:	b880038b 	ldhu	r2,14(r23)
 8012130:	113fffcc 	andi	r4,r2,65535
 8012134:	2120001c 	xori	r4,r4,32768
 8012138:	21200004 	addi	r4,r4,-32768
 801213c:	203f5016 	blt	r4,zero,8011e80 <__alt_data_end+0xfc011e80>
 8012140:	bac01917 	ldw	r11,100(r23)
 8012144:	ba800717 	ldw	r10,28(r23)
 8012148:	ba400917 	ldw	r9,36(r23)
 801214c:	d9812a17 	ldw	r6,1192(sp)
 8012150:	d9c12d17 	ldw	r7,1204(sp)
 8012154:	02010004 	movi	r8,1024
 8012158:	18ffff4c 	andi	r3,r3,65533
 801215c:	d881078d 	sth	r2,1054(sp)
 8012160:	b009883a 	mov	r4,r22
 8012164:	d8800404 	addi	r2,sp,16
 8012168:	d9410404 	addi	r5,sp,1040
 801216c:	d8c1070d 	sth	r3,1052(sp)
 8012170:	dac11d15 	stw	r11,1140(sp)
 8012174:	da810b15 	stw	r10,1068(sp)
 8012178:	da410d15 	stw	r9,1076(sp)
 801217c:	d8810415 	stw	r2,1040(sp)
 8012180:	d8810815 	stw	r2,1056(sp)
 8012184:	da010615 	stw	r8,1048(sp)
 8012188:	da010915 	stw	r8,1060(sp)
 801218c:	d8010a15 	stw	zero,1064(sp)
 8012190:	8011dd80 	call	8011dd8 <___vfprintf_internal_r>
 8012194:	1021883a 	mov	r16,r2
 8012198:	10000416 	blt	r2,zero,80121ac <___vfprintf_internal_r+0x3d4>
 801219c:	b009883a 	mov	r4,r22
 80121a0:	d9410404 	addi	r5,sp,1040
 80121a4:	80158500 	call	8015850 <_fflush_r>
 80121a8:	1006ee1e 	bne	r2,zero,8013d64 <___vfprintf_internal_r+0x1f8c>
 80121ac:	d881070b 	ldhu	r2,1052(sp)
 80121b0:	1080100c 	andi	r2,r2,64
 80121b4:	10000326 	beq	r2,zero,80121c4 <___vfprintf_internal_r+0x3ec>
 80121b8:	b880030b 	ldhu	r2,12(r23)
 80121bc:	10801014 	ori	r2,r2,64
 80121c0:	b880030d 	sth	r2,12(r23)
 80121c4:	8005883a 	mov	r2,r16
 80121c8:	00000106 	br	80121d0 <___vfprintf_internal_r+0x3f8>
 80121cc:	00bfffc4 	movi	r2,-1
 80121d0:	dfc14917 	ldw	ra,1316(sp)
 80121d4:	df014817 	ldw	fp,1312(sp)
 80121d8:	ddc14717 	ldw	r23,1308(sp)
 80121dc:	dd814617 	ldw	r22,1304(sp)
 80121e0:	dd414517 	ldw	r21,1300(sp)
 80121e4:	dd014417 	ldw	r20,1296(sp)
 80121e8:	dcc14317 	ldw	r19,1292(sp)
 80121ec:	dc814217 	ldw	r18,1288(sp)
 80121f0:	dc414117 	ldw	r17,1284(sp)
 80121f4:	dc014017 	ldw	r16,1280(sp)
 80121f8:	dec14a04 	addi	sp,sp,1320
 80121fc:	f800283a 	ret
 8012200:	b009883a 	mov	r4,r22
 8012204:	b80b883a 	mov	r5,r23
 8012208:	d9811e04 	addi	r6,sp,1144
 801220c:	8019c500 	call	8019c50 <__sprint_r>
 8012210:	1000081e 	bne	r2,zero,8012234 <___vfprintf_internal_r+0x45c>
 8012214:	da000404 	addi	r8,sp,16
 8012218:	003f4606 	br	8011f34 <__alt_data_end+0xfc011f34>
 801221c:	d8812017 	ldw	r2,1152(sp)
 8012220:	10000426 	beq	r2,zero,8012234 <___vfprintf_internal_r+0x45c>
 8012224:	b009883a 	mov	r4,r22
 8012228:	b80b883a 	mov	r5,r23
 801222c:	d9811e04 	addi	r6,sp,1144
 8012230:	8019c500 	call	8019c50 <__sprint_r>
 8012234:	b880030b 	ldhu	r2,12(r23)
 8012238:	1080100c 	andi	r2,r2,64
 801223c:	103fe31e 	bne	r2,zero,80121cc <__alt_data_end+0xfc0121cc>
 8012240:	d8812f17 	ldw	r2,1212(sp)
 8012244:	003fe206 	br	80121d0 <__alt_data_end+0xfc0121d0>
 8012248:	b009883a 	mov	r4,r22
 801224c:	8015df80 	call	8015df8 <__sinit>
 8012250:	003ef906 	br	8011e38 <__alt_data_end+0xfc011e38>
 8012254:	dc012a17 	ldw	r16,1192(sp)
 8012258:	003f3906 	br	8011f40 <__alt_data_end+0xfc011f40>
 801225c:	1805883a 	mov	r2,r3
 8012260:	8c400114 	ori	r17,r17,4
 8012264:	1c000007 	ldb	r16,0(r3)
 8012268:	003f4206 	br	8011f74 <__alt_data_end+0xfc011f74>
 801226c:	1c000007 	ldb	r16,0(r3)
 8012270:	18800044 	addi	r2,r3,1
 8012274:	8286b326 	beq	r16,r10,8013d44 <___vfprintf_internal_r+0x1f6c>
 8012278:	82fff404 	addi	r11,r16,-48
 801227c:	1007883a 	mov	r3,r2
 8012280:	0013883a 	mov	r9,zero
 8012284:	2aff3c36 	bltu	r5,r11,8011f78 <__alt_data_end+0xfc011f78>
 8012288:	1c000007 	ldb	r16,0(r3)
 801228c:	4a4002a4 	muli	r9,r9,10
 8012290:	18c00044 	addi	r3,r3,1
 8012294:	5a53883a 	add	r9,r11,r9
 8012298:	82fff404 	addi	r11,r16,-48
 801229c:	2afffa2e 	bgeu	r5,r11,8012288 <__alt_data_end+0xfc012288>
 80122a0:	483f350e 	bge	r9,zero,8011f78 <__alt_data_end+0xfc011f78>
 80122a4:	027fffc4 	movi	r9,-1
 80122a8:	003f3306 	br	8011f78 <__alt_data_end+0xfc011f78>
 80122ac:	8c402014 	ori	r17,r17,128
 80122b0:	1805883a 	mov	r2,r3
 80122b4:	1c000007 	ldb	r16,0(r3)
 80122b8:	003f2e06 	br	8011f74 <__alt_data_end+0xfc011f74>
 80122bc:	db012d17 	ldw	r12,1204(sp)
 80122c0:	dac12d17 	ldw	r11,1204(sp)
 80122c4:	d8c12a15 	stw	r3,1192(sp)
 80122c8:	63000017 	ldw	r12,0(r12)
 80122cc:	5ac00117 	ldw	r11,4(r11)
 80122d0:	d9812785 	stb	r6,1182(sp)
 80122d4:	6009883a 	mov	r4,r12
 80122d8:	580b883a 	mov	r5,r11
 80122dc:	db013715 	stw	r12,1244(sp)
 80122e0:	da013f15 	stw	r8,1276(sp)
 80122e4:	da413e15 	stw	r9,1272(sp)
 80122e8:	dac13915 	stw	r11,1252(sp)
 80122ec:	800a4480 	call	800a448 <__fpclassifyd>
 80122f0:	db012d17 	ldw	r12,1204(sp)
 80122f4:	04800044 	movi	r18,1
 80122f8:	da013f17 	ldw	r8,1276(sp)
 80122fc:	64c00204 	addi	r19,r12,8
 8012300:	da413e17 	ldw	r9,1272(sp)
 8012304:	d9013717 	ldw	r4,1244(sp)
 8012308:	d9413917 	ldw	r5,1252(sp)
 801230c:	1484581e 	bne	r2,r18,8013470 <___vfprintf_internal_r+0x1698>
 8012310:	000d883a 	mov	r6,zero
 8012314:	000f883a 	mov	r7,zero
 8012318:	800c1740 	call	800c174 <__ledf2>
 801231c:	da013f17 	ldw	r8,1276(sp)
 8012320:	1005ef16 	blt	r2,zero,8013ae0 <___vfprintf_internal_r+0x1d08>
 8012324:	dd412783 	ldbu	r21,1182(sp)
 8012328:	008011c4 	movi	r2,71
 801232c:	14053b0e 	bge	r2,r16,801381c <___vfprintf_internal_r+0x1a44>
 8012330:	00c200f4 	movhi	r3,2051
 8012334:	18eb0c04 	addi	r3,r3,-21456
 8012338:	d8c13115 	stw	r3,1220(sp)
 801233c:	02c000c4 	movi	r11,3
 8012340:	00bfdfc4 	movi	r2,-129
 8012344:	dac12b15 	stw	r11,1196(sp)
 8012348:	88a2703a 	and	r17,r17,r2
 801234c:	dcc12d15 	stw	r19,1204(sp)
 8012350:	5825883a 	mov	r18,r11
 8012354:	d8013215 	stw	zero,1224(sp)
 8012358:	d8013415 	stw	zero,1232(sp)
 801235c:	00003206 	br	8012428 <___vfprintf_internal_r+0x650>
 8012360:	8c400214 	ori	r17,r17,8
 8012364:	1805883a 	mov	r2,r3
 8012368:	1c000007 	ldb	r16,0(r3)
 801236c:	003f0106 	br	8011f74 <__alt_data_end+0xfc011f74>
 8012370:	8c400414 	ori	r17,r17,16
 8012374:	d8c12a15 	stw	r3,1192(sp)
 8012378:	88c0080c 	andi	r3,r17,32
 801237c:	d8812d17 	ldw	r2,1204(sp)
 8012380:	18017726 	beq	r3,zero,8012960 <___vfprintf_internal_r+0xb88>
 8012384:	db012d17 	ldw	r12,1204(sp)
 8012388:	14c00017 	ldw	r19,0(r2)
 801238c:	17000117 	ldw	fp,4(r2)
 8012390:	63000204 	addi	r12,r12,8
 8012394:	db012d15 	stw	r12,1204(sp)
 8012398:	0005883a 	mov	r2,zero
 801239c:	9f06b03a 	or	r3,r19,fp
 80123a0:	d8012785 	stb	zero,1182(sp)
 80123a4:	da413215 	stw	r9,1224(sp)
 80123a8:	002b883a 	mov	r21,zero
 80123ac:	48000216 	blt	r9,zero,80123b8 <___vfprintf_internal_r+0x5e0>
 80123b0:	013fdfc4 	movi	r4,-129
 80123b4:	8922703a 	and	r17,r17,r4
 80123b8:	1801ed1e 	bne	r3,zero,8012b70 <___vfprintf_internal_r+0xd98>
 80123bc:	4802e026 	beq	r9,zero,8012f40 <___vfprintf_internal_r+0x1168>
 80123c0:	10803fcc 	andi	r2,r2,255
 80123c4:	00c00044 	movi	r3,1
 80123c8:	10c20f26 	beq	r2,r3,8012c08 <___vfprintf_internal_r+0xe30>
 80123cc:	00c00084 	movi	r3,2
 80123d0:	10c2fd26 	beq	r2,r3,8012fc8 <___vfprintf_internal_r+0x11f0>
 80123d4:	d8c10e04 	addi	r3,sp,1080
 80123d8:	9808d0fa 	srli	r4,r19,3
 80123dc:	e00a977a 	slli	r5,fp,29
 80123e0:	e038d0fa 	srli	fp,fp,3
 80123e4:	9cc001cc 	andi	r19,r19,7
 80123e8:	98800c04 	addi	r2,r19,48
 80123ec:	18ffffc4 	addi	r3,r3,-1
 80123f0:	2926b03a 	or	r19,r5,r4
 80123f4:	18800005 	stb	r2,0(r3)
 80123f8:	9f08b03a 	or	r4,r19,fp
 80123fc:	203ff61e 	bne	r4,zero,80123d8 <__alt_data_end+0xfc0123d8>
 8012400:	8900004c 	andi	r4,r17,1
 8012404:	d8c13115 	stw	r3,1220(sp)
 8012408:	2003791e 	bne	r4,zero,80131f0 <___vfprintf_internal_r+0x1418>
 801240c:	dac12817 	ldw	r11,1184(sp)
 8012410:	58e5c83a 	sub	r18,r11,r3
 8012414:	9005883a 	mov	r2,r18
 8012418:	9240010e 	bge	r18,r9,8012420 <___vfprintf_internal_r+0x648>
 801241c:	4805883a 	mov	r2,r9
 8012420:	d8812b15 	stw	r2,1196(sp)
 8012424:	d8013415 	stw	zero,1232(sp)
 8012428:	a8803fcc 	andi	r2,r21,255
 801242c:	1080201c 	xori	r2,r2,128
 8012430:	10bfe004 	addi	r2,r2,-128
 8012434:	10000326 	beq	r2,zero,8012444 <___vfprintf_internal_r+0x66c>
 8012438:	db012b17 	ldw	r12,1196(sp)
 801243c:	63000044 	addi	r12,r12,1
 8012440:	db012b15 	stw	r12,1196(sp)
 8012444:	88c0008c 	andi	r3,r17,2
 8012448:	d8c12c15 	stw	r3,1200(sp)
 801244c:	18000326 	beq	r3,zero,801245c <___vfprintf_internal_r+0x684>
 8012450:	dac12b17 	ldw	r11,1196(sp)
 8012454:	5ac00084 	addi	r11,r11,2
 8012458:	dac12b15 	stw	r11,1196(sp)
 801245c:	8b00210c 	andi	r12,r17,132
 8012460:	db013015 	stw	r12,1216(sp)
 8012464:	6001c01e 	bne	r12,zero,8012b68 <___vfprintf_internal_r+0xd90>
 8012468:	dac12e17 	ldw	r11,1208(sp)
 801246c:	db012b17 	ldw	r12,1196(sp)
 8012470:	5b39c83a 	sub	fp,r11,r12
 8012474:	0701bc0e 	bge	zero,fp,8012b68 <___vfprintf_internal_r+0xd90>
 8012478:	02400404 	movi	r9,16
 801247c:	d8c12017 	ldw	r3,1152(sp)
 8012480:	d8811f17 	ldw	r2,1148(sp)
 8012484:	4f05220e 	bge	r9,fp,8013910 <___vfprintf_internal_r+0x1b38>
 8012488:	014200f4 	movhi	r5,2051
 801248c:	296b2784 	addi	r5,r5,-21346
 8012490:	d9413615 	stw	r5,1240(sp)
 8012494:	482b883a 	mov	r21,r9
 8012498:	04c001c4 	movi	r19,7
 801249c:	00000306 	br	80124ac <___vfprintf_internal_r+0x6d4>
 80124a0:	e73ffc04 	addi	fp,fp,-16
 80124a4:	42000204 	addi	r8,r8,8
 80124a8:	af00130e 	bge	r21,fp,80124f8 <___vfprintf_internal_r+0x720>
 80124ac:	02c200f4 	movhi	r11,2051
 80124b0:	18c00404 	addi	r3,r3,16
 80124b4:	10800044 	addi	r2,r2,1
 80124b8:	5aeb2784 	addi	r11,r11,-21346
 80124bc:	42c00015 	stw	r11,0(r8)
 80124c0:	45400115 	stw	r21,4(r8)
 80124c4:	d8c12015 	stw	r3,1152(sp)
 80124c8:	d8811f15 	stw	r2,1148(sp)
 80124cc:	98bff40e 	bge	r19,r2,80124a0 <__alt_data_end+0xfc0124a0>
 80124d0:	b009883a 	mov	r4,r22
 80124d4:	b80b883a 	mov	r5,r23
 80124d8:	d9811e04 	addi	r6,sp,1144
 80124dc:	8019c500 	call	8019c50 <__sprint_r>
 80124e0:	103f541e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 80124e4:	e73ffc04 	addi	fp,fp,-16
 80124e8:	d8c12017 	ldw	r3,1152(sp)
 80124ec:	d8811f17 	ldw	r2,1148(sp)
 80124f0:	da000404 	addi	r8,sp,16
 80124f4:	af3fed16 	blt	r21,fp,80124ac <__alt_data_end+0xfc0124ac>
 80124f8:	db013617 	ldw	r12,1240(sp)
 80124fc:	e0c7883a 	add	r3,fp,r3
 8012500:	10800044 	addi	r2,r2,1
 8012504:	43000015 	stw	r12,0(r8)
 8012508:	47000115 	stw	fp,4(r8)
 801250c:	d8c12015 	stw	r3,1152(sp)
 8012510:	d8811f15 	stw	r2,1148(sp)
 8012514:	010001c4 	movi	r4,7
 8012518:	2082f416 	blt	r4,r2,80130ec <___vfprintf_internal_r+0x1314>
 801251c:	d8812787 	ldb	r2,1182(sp)
 8012520:	42000204 	addi	r8,r8,8
 8012524:	10000c26 	beq	r2,zero,8012558 <___vfprintf_internal_r+0x780>
 8012528:	d8811f17 	ldw	r2,1148(sp)
 801252c:	d9012784 	addi	r4,sp,1182
 8012530:	18c00044 	addi	r3,r3,1
 8012534:	10800044 	addi	r2,r2,1
 8012538:	41000015 	stw	r4,0(r8)
 801253c:	01000044 	movi	r4,1
 8012540:	41000115 	stw	r4,4(r8)
 8012544:	d8c12015 	stw	r3,1152(sp)
 8012548:	d8811f15 	stw	r2,1148(sp)
 801254c:	010001c4 	movi	r4,7
 8012550:	20828d16 	blt	r4,r2,8012f88 <___vfprintf_internal_r+0x11b0>
 8012554:	42000204 	addi	r8,r8,8
 8012558:	dac12c17 	ldw	r11,1200(sp)
 801255c:	58000c26 	beq	r11,zero,8012590 <___vfprintf_internal_r+0x7b8>
 8012560:	d8811f17 	ldw	r2,1148(sp)
 8012564:	d9012704 	addi	r4,sp,1180
 8012568:	18c00084 	addi	r3,r3,2
 801256c:	10800044 	addi	r2,r2,1
 8012570:	41000015 	stw	r4,0(r8)
 8012574:	01000084 	movi	r4,2
 8012578:	41000115 	stw	r4,4(r8)
 801257c:	d8c12015 	stw	r3,1152(sp)
 8012580:	d8811f15 	stw	r2,1148(sp)
 8012584:	010001c4 	movi	r4,7
 8012588:	20828716 	blt	r4,r2,8012fa8 <___vfprintf_internal_r+0x11d0>
 801258c:	42000204 	addi	r8,r8,8
 8012590:	db013017 	ldw	r12,1216(sp)
 8012594:	00802004 	movi	r2,128
 8012598:	6081e926 	beq	r12,r2,8012d40 <___vfprintf_internal_r+0xf68>
 801259c:	db013217 	ldw	r12,1224(sp)
 80125a0:	64abc83a 	sub	r21,r12,r18
 80125a4:	0540260e 	bge	zero,r21,8012640 <___vfprintf_internal_r+0x868>
 80125a8:	07000404 	movi	fp,16
 80125ac:	d8811f17 	ldw	r2,1148(sp)
 80125b0:	e5443d0e 	bge	fp,r21,80136a8 <___vfprintf_internal_r+0x18d0>
 80125b4:	014200f4 	movhi	r5,2051
 80125b8:	296b2384 	addi	r5,r5,-21362
 80125bc:	d9412c15 	stw	r5,1200(sp)
 80125c0:	04c001c4 	movi	r19,7
 80125c4:	00000306 	br	80125d4 <___vfprintf_internal_r+0x7fc>
 80125c8:	ad7ffc04 	addi	r21,r21,-16
 80125cc:	42000204 	addi	r8,r8,8
 80125d0:	e540110e 	bge	fp,r21,8012618 <___vfprintf_internal_r+0x840>
 80125d4:	18c00404 	addi	r3,r3,16
 80125d8:	10800044 	addi	r2,r2,1
 80125dc:	45000015 	stw	r20,0(r8)
 80125e0:	47000115 	stw	fp,4(r8)
 80125e4:	d8c12015 	stw	r3,1152(sp)
 80125e8:	d8811f15 	stw	r2,1148(sp)
 80125ec:	98bff60e 	bge	r19,r2,80125c8 <__alt_data_end+0xfc0125c8>
 80125f0:	b009883a 	mov	r4,r22
 80125f4:	b80b883a 	mov	r5,r23
 80125f8:	d9811e04 	addi	r6,sp,1144
 80125fc:	8019c500 	call	8019c50 <__sprint_r>
 8012600:	103f0c1e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 8012604:	ad7ffc04 	addi	r21,r21,-16
 8012608:	d8c12017 	ldw	r3,1152(sp)
 801260c:	d8811f17 	ldw	r2,1148(sp)
 8012610:	da000404 	addi	r8,sp,16
 8012614:	e57fef16 	blt	fp,r21,80125d4 <__alt_data_end+0xfc0125d4>
 8012618:	dac12c17 	ldw	r11,1200(sp)
 801261c:	1d47883a 	add	r3,r3,r21
 8012620:	10800044 	addi	r2,r2,1
 8012624:	42c00015 	stw	r11,0(r8)
 8012628:	45400115 	stw	r21,4(r8)
 801262c:	d8c12015 	stw	r3,1152(sp)
 8012630:	d8811f15 	stw	r2,1148(sp)
 8012634:	010001c4 	movi	r4,7
 8012638:	20824b16 	blt	r4,r2,8012f68 <___vfprintf_internal_r+0x1190>
 801263c:	42000204 	addi	r8,r8,8
 8012640:	8880400c 	andi	r2,r17,256
 8012644:	1001761e 	bne	r2,zero,8012c20 <___vfprintf_internal_r+0xe48>
 8012648:	d8811f17 	ldw	r2,1148(sp)
 801264c:	db013117 	ldw	r12,1220(sp)
 8012650:	1c87883a 	add	r3,r3,r18
 8012654:	10800044 	addi	r2,r2,1
 8012658:	43000015 	stw	r12,0(r8)
 801265c:	44800115 	stw	r18,4(r8)
 8012660:	d8c12015 	stw	r3,1152(sp)
 8012664:	d8811f15 	stw	r2,1148(sp)
 8012668:	010001c4 	movi	r4,7
 801266c:	20822616 	blt	r4,r2,8012f08 <___vfprintf_internal_r+0x1130>
 8012670:	42000204 	addi	r8,r8,8
 8012674:	8c40010c 	andi	r17,r17,4
 8012678:	88003126 	beq	r17,zero,8012740 <___vfprintf_internal_r+0x968>
 801267c:	db012e17 	ldw	r12,1208(sp)
 8012680:	dac12b17 	ldw	r11,1196(sp)
 8012684:	62e1c83a 	sub	r16,r12,r11
 8012688:	04002d0e 	bge	zero,r16,8012740 <___vfprintf_internal_r+0x968>
 801268c:	04400404 	movi	r17,16
 8012690:	d8811f17 	ldw	r2,1148(sp)
 8012694:	8c04df0e 	bge	r17,r16,8013a14 <___vfprintf_internal_r+0x1c3c>
 8012698:	010200f4 	movhi	r4,2051
 801269c:	212b2784 	addi	r4,r4,-21346
 80126a0:	d9013615 	stw	r4,1240(sp)
 80126a4:	048001c4 	movi	r18,7
 80126a8:	00000306 	br	80126b8 <___vfprintf_internal_r+0x8e0>
 80126ac:	843ffc04 	addi	r16,r16,-16
 80126b0:	42000204 	addi	r8,r8,8
 80126b4:	8c00130e 	bge	r17,r16,8012704 <___vfprintf_internal_r+0x92c>
 80126b8:	014200f4 	movhi	r5,2051
 80126bc:	18c00404 	addi	r3,r3,16
 80126c0:	10800044 	addi	r2,r2,1
 80126c4:	296b2784 	addi	r5,r5,-21346
 80126c8:	41400015 	stw	r5,0(r8)
 80126cc:	44400115 	stw	r17,4(r8)
 80126d0:	d8c12015 	stw	r3,1152(sp)
 80126d4:	d8811f15 	stw	r2,1148(sp)
 80126d8:	90bff40e 	bge	r18,r2,80126ac <__alt_data_end+0xfc0126ac>
 80126dc:	b009883a 	mov	r4,r22
 80126e0:	b80b883a 	mov	r5,r23
 80126e4:	d9811e04 	addi	r6,sp,1144
 80126e8:	8019c500 	call	8019c50 <__sprint_r>
 80126ec:	103ed11e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 80126f0:	843ffc04 	addi	r16,r16,-16
 80126f4:	d8c12017 	ldw	r3,1152(sp)
 80126f8:	d8811f17 	ldw	r2,1148(sp)
 80126fc:	da000404 	addi	r8,sp,16
 8012700:	8c3fed16 	blt	r17,r16,80126b8 <__alt_data_end+0xfc0126b8>
 8012704:	dac13617 	ldw	r11,1240(sp)
 8012708:	1c07883a 	add	r3,r3,r16
 801270c:	10800044 	addi	r2,r2,1
 8012710:	42c00015 	stw	r11,0(r8)
 8012714:	44000115 	stw	r16,4(r8)
 8012718:	d8c12015 	stw	r3,1152(sp)
 801271c:	d8811f15 	stw	r2,1148(sp)
 8012720:	010001c4 	movi	r4,7
 8012724:	2080060e 	bge	r4,r2,8012740 <___vfprintf_internal_r+0x968>
 8012728:	b009883a 	mov	r4,r22
 801272c:	b80b883a 	mov	r5,r23
 8012730:	d9811e04 	addi	r6,sp,1144
 8012734:	8019c500 	call	8019c50 <__sprint_r>
 8012738:	103ebe1e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 801273c:	d8c12017 	ldw	r3,1152(sp)
 8012740:	d8812b17 	ldw	r2,1196(sp)
 8012744:	db012e17 	ldw	r12,1208(sp)
 8012748:	1300010e 	bge	r2,r12,8012750 <___vfprintf_internal_r+0x978>
 801274c:	6005883a 	mov	r2,r12
 8012750:	dac12f17 	ldw	r11,1212(sp)
 8012754:	5897883a 	add	r11,r11,r2
 8012758:	dac12f15 	stw	r11,1212(sp)
 801275c:	1801f21e 	bne	r3,zero,8012f28 <___vfprintf_internal_r+0x1150>
 8012760:	d8011f15 	stw	zero,1148(sp)
 8012764:	da000404 	addi	r8,sp,16
 8012768:	003dd806 	br	8011ecc <__alt_data_end+0xfc011ecc>
 801276c:	8c400414 	ori	r17,r17,16
 8012770:	d8c12a15 	stw	r3,1192(sp)
 8012774:	88c0080c 	andi	r3,r17,32
 8012778:	d8812d17 	ldw	r2,1204(sp)
 801277c:	18004626 	beq	r3,zero,8012898 <___vfprintf_internal_r+0xac0>
 8012780:	dac12d17 	ldw	r11,1204(sp)
 8012784:	14c00017 	ldw	r19,0(r2)
 8012788:	17000117 	ldw	fp,4(r2)
 801278c:	5ac00204 	addi	r11,r11,8
 8012790:	dac12d15 	stw	r11,1204(sp)
 8012794:	00800044 	movi	r2,1
 8012798:	9f06b03a 	or	r3,r19,fp
 801279c:	003f0006 	br	80123a0 <__alt_data_end+0xfc0123a0>
 80127a0:	1805883a 	mov	r2,r3
 80127a4:	d8012e15 	stw	zero,1208(sp)
 80127a8:	82fff404 	addi	r11,r16,-48
 80127ac:	0019883a 	mov	r12,zero
 80127b0:	14000007 	ldb	r16,0(r2)
 80127b4:	630002a4 	muli	r12,r12,10
 80127b8:	18c00044 	addi	r3,r3,1
 80127bc:	1805883a 	mov	r2,r3
 80127c0:	62d9883a 	add	r12,r12,r11
 80127c4:	82fff404 	addi	r11,r16,-48
 80127c8:	2afff92e 	bgeu	r5,r11,80127b0 <__alt_data_end+0xfc0127b0>
 80127cc:	db012e15 	stw	r12,1208(sp)
 80127d0:	003de906 	br	8011f78 <__alt_data_end+0xfc011f78>
 80127d4:	8c400414 	ori	r17,r17,16
 80127d8:	d8c12a15 	stw	r3,1192(sp)
 80127dc:	d9812785 	stb	r6,1182(sp)
 80127e0:	8880080c 	andi	r2,r17,32
 80127e4:	d8c12d17 	ldw	r3,1204(sp)
 80127e8:	10007a26 	beq	r2,zero,80129d4 <___vfprintf_internal_r+0xbfc>
 80127ec:	db012d17 	ldw	r12,1204(sp)
 80127f0:	18800117 	ldw	r2,4(r3)
 80127f4:	1cc00017 	ldw	r19,0(r3)
 80127f8:	63000204 	addi	r12,r12,8
 80127fc:	db012d15 	stw	r12,1204(sp)
 8012800:	1039883a 	mov	fp,r2
 8012804:	10031016 	blt	r2,zero,8013448 <___vfprintf_internal_r+0x1670>
 8012808:	dd412783 	ldbu	r21,1182(sp)
 801280c:	da413215 	stw	r9,1224(sp)
 8012810:	00800044 	movi	r2,1
 8012814:	9f06b03a 	or	r3,r19,fp
 8012818:	003ee406 	br	80123ac <__alt_data_end+0xfc0123ac>
 801281c:	030200f4 	movhi	r12,2051
 8012820:	632b0f04 	addi	r12,r12,-21444
 8012824:	d8c12a15 	stw	r3,1192(sp)
 8012828:	d9812785 	stb	r6,1182(sp)
 801282c:	db013b15 	stw	r12,1260(sp)
 8012830:	88c0080c 	andi	r3,r17,32
 8012834:	d8812d17 	ldw	r2,1204(sp)
 8012838:	18002b26 	beq	r3,zero,80128e8 <___vfprintf_internal_r+0xb10>
 801283c:	dac12d17 	ldw	r11,1204(sp)
 8012840:	14c00017 	ldw	r19,0(r2)
 8012844:	17000117 	ldw	fp,4(r2)
 8012848:	5ac00204 	addi	r11,r11,8
 801284c:	dac12d15 	stw	r11,1204(sp)
 8012850:	8880004c 	andi	r2,r17,1
 8012854:	10025b26 	beq	r2,zero,80131c4 <___vfprintf_internal_r+0x13ec>
 8012858:	9f06b03a 	or	r3,r19,fp
 801285c:	18037026 	beq	r3,zero,8013620 <___vfprintf_internal_r+0x1848>
 8012860:	00800c04 	movi	r2,48
 8012864:	d8812705 	stb	r2,1180(sp)
 8012868:	dc012745 	stb	r16,1181(sp)
 801286c:	8c400094 	ori	r17,r17,2
 8012870:	00800084 	movi	r2,2
 8012874:	003eca06 	br	80123a0 <__alt_data_end+0xfc0123a0>
 8012878:	8c400814 	ori	r17,r17,32
 801287c:	1805883a 	mov	r2,r3
 8012880:	1c000007 	ldb	r16,0(r3)
 8012884:	003dbb06 	br	8011f74 <__alt_data_end+0xfc011f74>
 8012888:	d8c12a15 	stw	r3,1192(sp)
 801288c:	88c0080c 	andi	r3,r17,32
 8012890:	d8812d17 	ldw	r2,1204(sp)
 8012894:	183fba1e 	bne	r3,zero,8012780 <__alt_data_end+0xfc012780>
 8012898:	88c0040c 	andi	r3,r17,16
 801289c:	18024c1e 	bne	r3,zero,80131d0 <___vfprintf_internal_r+0x13f8>
 80128a0:	88c0100c 	andi	r3,r17,64
 80128a4:	18024a26 	beq	r3,zero,80131d0 <___vfprintf_internal_r+0x13f8>
 80128a8:	dac12d17 	ldw	r11,1204(sp)
 80128ac:	14c0000b 	ldhu	r19,0(r2)
 80128b0:	0039883a 	mov	fp,zero
 80128b4:	5ac00104 	addi	r11,r11,4
 80128b8:	dac12d15 	stw	r11,1204(sp)
 80128bc:	00800044 	movi	r2,1
 80128c0:	9807883a 	mov	r3,r19
 80128c4:	003eb606 	br	80123a0 <__alt_data_end+0xfc0123a0>
 80128c8:	008200f4 	movhi	r2,2051
 80128cc:	10ab1404 	addi	r2,r2,-21424
 80128d0:	d8c12a15 	stw	r3,1192(sp)
 80128d4:	d8813b15 	stw	r2,1260(sp)
 80128d8:	d9812785 	stb	r6,1182(sp)
 80128dc:	88c0080c 	andi	r3,r17,32
 80128e0:	d8812d17 	ldw	r2,1204(sp)
 80128e4:	183fd51e 	bne	r3,zero,801283c <__alt_data_end+0xfc01283c>
 80128e8:	88c0040c 	andi	r3,r17,16
 80128ec:	18034126 	beq	r3,zero,80135f4 <___vfprintf_internal_r+0x181c>
 80128f0:	db012d17 	ldw	r12,1204(sp)
 80128f4:	14c00017 	ldw	r19,0(r2)
 80128f8:	0039883a 	mov	fp,zero
 80128fc:	63000104 	addi	r12,r12,4
 8012900:	db012d15 	stw	r12,1204(sp)
 8012904:	003fd206 	br	8012850 <__alt_data_end+0xfc012850>
 8012908:	1c000007 	ldb	r16,0(r3)
 801290c:	81c3d626 	beq	r16,r7,8013868 <___vfprintf_internal_r+0x1a90>
 8012910:	8c400414 	ori	r17,r17,16
 8012914:	1805883a 	mov	r2,r3
 8012918:	003d9606 	br	8011f74 <__alt_data_end+0xfc011f74>
 801291c:	d8c12a15 	stw	r3,1192(sp)
 8012920:	d9812785 	stb	r6,1182(sp)
 8012924:	8880080c 	andi	r2,r17,32
 8012928:	10033f26 	beq	r2,zero,8013628 <___vfprintf_internal_r+0x1850>
 801292c:	db012d17 	ldw	r12,1204(sp)
 8012930:	dac12f17 	ldw	r11,1212(sp)
 8012934:	60800017 	ldw	r2,0(r12)
 8012938:	5807d7fa 	srai	r3,r11,31
 801293c:	63000104 	addi	r12,r12,4
 8012940:	db012d15 	stw	r12,1204(sp)
 8012944:	12c00015 	stw	r11,0(r2)
 8012948:	10c00115 	stw	r3,4(r2)
 801294c:	003d5f06 	br	8011ecc <__alt_data_end+0xfc011ecc>
 8012950:	d8c12a15 	stw	r3,1192(sp)
 8012954:	88c0080c 	andi	r3,r17,32
 8012958:	d8812d17 	ldw	r2,1204(sp)
 801295c:	183e891e 	bne	r3,zero,8012384 <__alt_data_end+0xfc012384>
 8012960:	88c0040c 	andi	r3,r17,16
 8012964:	1801ea1e 	bne	r3,zero,8013110 <___vfprintf_internal_r+0x1338>
 8012968:	88c0100c 	andi	r3,r17,64
 801296c:	1801e826 	beq	r3,zero,8013110 <___vfprintf_internal_r+0x1338>
 8012970:	db012d17 	ldw	r12,1204(sp)
 8012974:	14c0000b 	ldhu	r19,0(r2)
 8012978:	0039883a 	mov	fp,zero
 801297c:	63000104 	addi	r12,r12,4
 8012980:	db012d15 	stw	r12,1204(sp)
 8012984:	0005883a 	mov	r2,zero
 8012988:	9807883a 	mov	r3,r19
 801298c:	003e8406 	br	80123a0 <__alt_data_end+0xfc0123a0>
 8012990:	30803fcc 	andi	r2,r6,255
 8012994:	1080201c 	xori	r2,r2,128
 8012998:	10bfe004 	addi	r2,r2,-128
 801299c:	10031d1e 	bne	r2,zero,8013614 <___vfprintf_internal_r+0x183c>
 80129a0:	1805883a 	mov	r2,r3
 80129a4:	01800804 	movi	r6,32
 80129a8:	1c000007 	ldb	r16,0(r3)
 80129ac:	003d7106 	br	8011f74 <__alt_data_end+0xfc011f74>
 80129b0:	8c400054 	ori	r17,r17,1
 80129b4:	1805883a 	mov	r2,r3
 80129b8:	1c000007 	ldb	r16,0(r3)
 80129bc:	003d6d06 	br	8011f74 <__alt_data_end+0xfc011f74>
 80129c0:	d8c12a15 	stw	r3,1192(sp)
 80129c4:	d9812785 	stb	r6,1182(sp)
 80129c8:	8880080c 	andi	r2,r17,32
 80129cc:	d8c12d17 	ldw	r3,1204(sp)
 80129d0:	103f861e 	bne	r2,zero,80127ec <__alt_data_end+0xfc0127ec>
 80129d4:	8880040c 	andi	r2,r17,16
 80129d8:	1001f31e 	bne	r2,zero,80131a8 <___vfprintf_internal_r+0x13d0>
 80129dc:	8880100c 	andi	r2,r17,64
 80129e0:	1001f126 	beq	r2,zero,80131a8 <___vfprintf_internal_r+0x13d0>
 80129e4:	1cc0000f 	ldh	r19,0(r3)
 80129e8:	db012d17 	ldw	r12,1204(sp)
 80129ec:	9839d7fa 	srai	fp,r19,31
 80129f0:	63000104 	addi	r12,r12,4
 80129f4:	db012d15 	stw	r12,1204(sp)
 80129f8:	e005883a 	mov	r2,fp
 80129fc:	003f8106 	br	8012804 <__alt_data_end+0xfc012804>
 8012a00:	8c401014 	ori	r17,r17,64
 8012a04:	1805883a 	mov	r2,r3
 8012a08:	1c000007 	ldb	r16,0(r3)
 8012a0c:	003d5906 	br	8011f74 <__alt_data_end+0xfc011f74>
 8012a10:	db012d17 	ldw	r12,1204(sp)
 8012a14:	d8c12a15 	stw	r3,1192(sp)
 8012a18:	00c00044 	movi	r3,1
 8012a1c:	60800017 	ldw	r2,0(r12)
 8012a20:	63000104 	addi	r12,r12,4
 8012a24:	d8c12b15 	stw	r3,1196(sp)
 8012a28:	d8012785 	stb	zero,1182(sp)
 8012a2c:	d8810405 	stb	r2,1040(sp)
 8012a30:	db012d15 	stw	r12,1204(sp)
 8012a34:	dac10404 	addi	r11,sp,1040
 8012a38:	1825883a 	mov	r18,r3
 8012a3c:	d8013215 	stw	zero,1224(sp)
 8012a40:	d8013415 	stw	zero,1232(sp)
 8012a44:	dac13115 	stw	r11,1220(sp)
 8012a48:	0005883a 	mov	r2,zero
 8012a4c:	003e7d06 	br	8012444 <__alt_data_end+0xfc012444>
 8012a50:	db012d17 	ldw	r12,1204(sp)
 8012a54:	00800c04 	movi	r2,48
 8012a58:	d8812705 	stb	r2,1180(sp)
 8012a5c:	64c00017 	ldw	r19,0(r12)
 8012a60:	00801e04 	movi	r2,120
 8012a64:	d8812745 	stb	r2,1181(sp)
 8012a68:	008200f4 	movhi	r2,2051
 8012a6c:	10ab1404 	addi	r2,r2,-21424
 8012a70:	63000104 	addi	r12,r12,4
 8012a74:	d8c12a15 	stw	r3,1192(sp)
 8012a78:	d8813b15 	stw	r2,1260(sp)
 8012a7c:	0039883a 	mov	fp,zero
 8012a80:	8c400094 	ori	r17,r17,2
 8012a84:	db012d15 	stw	r12,1204(sp)
 8012a88:	00800084 	movi	r2,2
 8012a8c:	04001e04 	movi	r16,120
 8012a90:	9807883a 	mov	r3,r19
 8012a94:	003e4206 	br	80123a0 <__alt_data_end+0xfc0123a0>
 8012a98:	dac12d17 	ldw	r11,1204(sp)
 8012a9c:	db012d17 	ldw	r12,1204(sp)
 8012aa0:	d8c12a15 	stw	r3,1192(sp)
 8012aa4:	5ac00017 	ldw	r11,0(r11)
 8012aa8:	d8012785 	stb	zero,1182(sp)
 8012aac:	64c00104 	addi	r19,r12,4
 8012ab0:	dac13115 	stw	r11,1220(sp)
 8012ab4:	5803e826 	beq	r11,zero,8013a58 <___vfprintf_internal_r+0x1c80>
 8012ab8:	d9013117 	ldw	r4,1220(sp)
 8012abc:	48037a16 	blt	r9,zero,80138a8 <___vfprintf_internal_r+0x1ad0>
 8012ac0:	480d883a 	mov	r6,r9
 8012ac4:	000b883a 	mov	r5,zero
 8012ac8:	da013f15 	stw	r8,1276(sp)
 8012acc:	da413e15 	stw	r9,1272(sp)
 8012ad0:	80172f00 	call	80172f0 <memchr>
 8012ad4:	da013f17 	ldw	r8,1276(sp)
 8012ad8:	da413e17 	ldw	r9,1272(sp)
 8012adc:	10044426 	beq	r2,zero,8013bf0 <___vfprintf_internal_r+0x1e18>
 8012ae0:	d8c13117 	ldw	r3,1220(sp)
 8012ae4:	10e5c83a 	sub	r18,r2,r3
 8012ae8:	4c834416 	blt	r9,r18,80137fc <___vfprintf_internal_r+0x1a24>
 8012aec:	9005883a 	mov	r2,r18
 8012af0:	90037216 	blt	r18,zero,80138bc <___vfprintf_internal_r+0x1ae4>
 8012af4:	dd412783 	ldbu	r21,1182(sp)
 8012af8:	d8812b15 	stw	r2,1196(sp)
 8012afc:	dcc12d15 	stw	r19,1204(sp)
 8012b00:	d8013215 	stw	zero,1224(sp)
 8012b04:	d8013415 	stw	zero,1232(sp)
 8012b08:	003e4706 	br	8012428 <__alt_data_end+0xfc012428>
 8012b0c:	dac12d17 	ldw	r11,1204(sp)
 8012b10:	db012d17 	ldw	r12,1204(sp)
 8012b14:	5ac00017 	ldw	r11,0(r11)
 8012b18:	dac12e15 	stw	r11,1208(sp)
 8012b1c:	62c00104 	addi	r11,r12,4
 8012b20:	db012e17 	ldw	r12,1208(sp)
 8012b24:	60034a16 	blt	r12,zero,8013850 <___vfprintf_internal_r+0x1a78>
 8012b28:	dac12d15 	stw	r11,1204(sp)
 8012b2c:	1805883a 	mov	r2,r3
 8012b30:	1c000007 	ldb	r16,0(r3)
 8012b34:	003d0f06 	br	8011f74 <__alt_data_end+0xfc011f74>
 8012b38:	1805883a 	mov	r2,r3
 8012b3c:	01800ac4 	movi	r6,43
 8012b40:	1c000007 	ldb	r16,0(r3)
 8012b44:	003d0b06 	br	8011f74 <__alt_data_end+0xfc011f74>
 8012b48:	d8c12a15 	stw	r3,1192(sp)
 8012b4c:	d9812785 	stb	r6,1182(sp)
 8012b50:	803db226 	beq	r16,zero,801221c <__alt_data_end+0xfc01221c>
 8012b54:	00c00044 	movi	r3,1
 8012b58:	d8c12b15 	stw	r3,1196(sp)
 8012b5c:	dc010405 	stb	r16,1040(sp)
 8012b60:	d8012785 	stb	zero,1182(sp)
 8012b64:	003fb306 	br	8012a34 <__alt_data_end+0xfc012a34>
 8012b68:	d8c12017 	ldw	r3,1152(sp)
 8012b6c:	003e6d06 	br	8012524 <__alt_data_end+0xfc012524>
 8012b70:	10803fcc 	andi	r2,r2,255
 8012b74:	00c00044 	movi	r3,1
 8012b78:	10fe141e 	bne	r2,r3,80123cc <__alt_data_end+0xfc0123cc>
 8012b7c:	e000021e 	bne	fp,zero,8012b88 <___vfprintf_internal_r+0xdb0>
 8012b80:	00800244 	movi	r2,9
 8012b84:	14c0202e 	bgeu	r2,r19,8012c08 <___vfprintf_internal_r+0xe30>
 8012b88:	dc012b15 	stw	r16,1196(sp)
 8012b8c:	dc412c15 	stw	r17,1200(sp)
 8012b90:	9821883a 	mov	r16,r19
 8012b94:	e023883a 	mov	r17,fp
 8012b98:	dc810e04 	addi	r18,sp,1080
 8012b9c:	4027883a 	mov	r19,r8
 8012ba0:	4839883a 	mov	fp,r9
 8012ba4:	8009883a 	mov	r4,r16
 8012ba8:	880b883a 	mov	r5,r17
 8012bac:	01800284 	movi	r6,10
 8012bb0:	000f883a 	mov	r7,zero
 8012bb4:	801caf40 	call	801caf4 <__umoddi3>
 8012bb8:	10800c04 	addi	r2,r2,48
 8012bbc:	94bfffc4 	addi	r18,r18,-1
 8012bc0:	8009883a 	mov	r4,r16
 8012bc4:	880b883a 	mov	r5,r17
 8012bc8:	01800284 	movi	r6,10
 8012bcc:	000f883a 	mov	r7,zero
 8012bd0:	90800005 	stb	r2,0(r18)
 8012bd4:	801c5340 	call	801c534 <__udivdi3>
 8012bd8:	1021883a 	mov	r16,r2
 8012bdc:	10c4b03a 	or	r2,r2,r3
 8012be0:	1823883a 	mov	r17,r3
 8012be4:	103fef1e 	bne	r2,zero,8012ba4 <__alt_data_end+0xfc012ba4>
 8012be8:	dac12817 	ldw	r11,1184(sp)
 8012bec:	dc813115 	stw	r18,1220(sp)
 8012bf0:	dc012b17 	ldw	r16,1196(sp)
 8012bf4:	9811883a 	mov	r8,r19
 8012bf8:	dc412c17 	ldw	r17,1200(sp)
 8012bfc:	e013883a 	mov	r9,fp
 8012c00:	5ca5c83a 	sub	r18,r11,r18
 8012c04:	003e0306 	br	8012414 <__alt_data_end+0xfc012414>
 8012c08:	9cc00c04 	addi	r19,r19,48
 8012c0c:	d8c10dc4 	addi	r3,sp,1079
 8012c10:	dcc10dc5 	stb	r19,1079(sp)
 8012c14:	dc813c17 	ldw	r18,1264(sp)
 8012c18:	d8c13115 	stw	r3,1220(sp)
 8012c1c:	003dfd06 	br	8012414 <__alt_data_end+0xfc012414>
 8012c20:	00801944 	movi	r2,101
 8012c24:	1400710e 	bge	r2,r16,8012dec <___vfprintf_internal_r+0x1014>
 8012c28:	d9013717 	ldw	r4,1244(sp)
 8012c2c:	d9413917 	ldw	r5,1252(sp)
 8012c30:	000d883a 	mov	r6,zero
 8012c34:	000f883a 	mov	r7,zero
 8012c38:	d8c13d15 	stw	r3,1268(sp)
 8012c3c:	da013f15 	stw	r8,1276(sp)
 8012c40:	800c0100 	call	800c010 <__eqdf2>
 8012c44:	d8c13d17 	ldw	r3,1268(sp)
 8012c48:	da013f17 	ldw	r8,1276(sp)
 8012c4c:	1000ef1e 	bne	r2,zero,801300c <___vfprintf_internal_r+0x1234>
 8012c50:	d8811f17 	ldw	r2,1148(sp)
 8012c54:	010200f4 	movhi	r4,2051
 8012c58:	212b1b04 	addi	r4,r4,-21396
 8012c5c:	18c00044 	addi	r3,r3,1
 8012c60:	10800044 	addi	r2,r2,1
 8012c64:	41000015 	stw	r4,0(r8)
 8012c68:	01000044 	movi	r4,1
 8012c6c:	41000115 	stw	r4,4(r8)
 8012c70:	d8c12015 	stw	r3,1152(sp)
 8012c74:	d8811f15 	stw	r2,1148(sp)
 8012c78:	010001c4 	movi	r4,7
 8012c7c:	20828e16 	blt	r4,r2,80136b8 <___vfprintf_internal_r+0x18e0>
 8012c80:	42000204 	addi	r8,r8,8
 8012c84:	d8812617 	ldw	r2,1176(sp)
 8012c88:	dac13317 	ldw	r11,1228(sp)
 8012c8c:	12c00216 	blt	r2,r11,8012c98 <___vfprintf_internal_r+0xec0>
 8012c90:	8880004c 	andi	r2,r17,1
 8012c94:	103e7726 	beq	r2,zero,8012674 <__alt_data_end+0xfc012674>
 8012c98:	db013817 	ldw	r12,1248(sp)
 8012c9c:	d8811f17 	ldw	r2,1148(sp)
 8012ca0:	dac13517 	ldw	r11,1236(sp)
 8012ca4:	1b07883a 	add	r3,r3,r12
 8012ca8:	10800044 	addi	r2,r2,1
 8012cac:	42c00015 	stw	r11,0(r8)
 8012cb0:	43000115 	stw	r12,4(r8)
 8012cb4:	d8c12015 	stw	r3,1152(sp)
 8012cb8:	d8811f15 	stw	r2,1148(sp)
 8012cbc:	010001c4 	movi	r4,7
 8012cc0:	2082ed16 	blt	r4,r2,8013878 <___vfprintf_internal_r+0x1aa0>
 8012cc4:	42000204 	addi	r8,r8,8
 8012cc8:	db013317 	ldw	r12,1228(sp)
 8012ccc:	643fffc4 	addi	r16,r12,-1
 8012cd0:	043e680e 	bge	zero,r16,8012674 <__alt_data_end+0xfc012674>
 8012cd4:	04800404 	movi	r18,16
 8012cd8:	d8811f17 	ldw	r2,1148(sp)
 8012cdc:	94007e0e 	bge	r18,r16,8012ed8 <___vfprintf_internal_r+0x1100>
 8012ce0:	014200f4 	movhi	r5,2051
 8012ce4:	296b2384 	addi	r5,r5,-21362
 8012ce8:	d9412c15 	stw	r5,1200(sp)
 8012cec:	054001c4 	movi	r21,7
 8012cf0:	00000306 	br	8012d00 <___vfprintf_internal_r+0xf28>
 8012cf4:	42000204 	addi	r8,r8,8
 8012cf8:	843ffc04 	addi	r16,r16,-16
 8012cfc:	9400790e 	bge	r18,r16,8012ee4 <___vfprintf_internal_r+0x110c>
 8012d00:	18c00404 	addi	r3,r3,16
 8012d04:	10800044 	addi	r2,r2,1
 8012d08:	45000015 	stw	r20,0(r8)
 8012d0c:	44800115 	stw	r18,4(r8)
 8012d10:	d8c12015 	stw	r3,1152(sp)
 8012d14:	d8811f15 	stw	r2,1148(sp)
 8012d18:	a8bff60e 	bge	r21,r2,8012cf4 <__alt_data_end+0xfc012cf4>
 8012d1c:	b009883a 	mov	r4,r22
 8012d20:	b80b883a 	mov	r5,r23
 8012d24:	d9811e04 	addi	r6,sp,1144
 8012d28:	8019c500 	call	8019c50 <__sprint_r>
 8012d2c:	103d411e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 8012d30:	d8c12017 	ldw	r3,1152(sp)
 8012d34:	d8811f17 	ldw	r2,1148(sp)
 8012d38:	da000404 	addi	r8,sp,16
 8012d3c:	003fee06 	br	8012cf8 <__alt_data_end+0xfc012cf8>
 8012d40:	dac12e17 	ldw	r11,1208(sp)
 8012d44:	db012b17 	ldw	r12,1196(sp)
 8012d48:	5b2bc83a 	sub	r21,r11,r12
 8012d4c:	057e130e 	bge	zero,r21,801259c <__alt_data_end+0xfc01259c>
 8012d50:	07000404 	movi	fp,16
 8012d54:	d8811f17 	ldw	r2,1148(sp)
 8012d58:	e543640e 	bge	fp,r21,8013aec <___vfprintf_internal_r+0x1d14>
 8012d5c:	014200f4 	movhi	r5,2051
 8012d60:	296b2384 	addi	r5,r5,-21362
 8012d64:	d9412c15 	stw	r5,1200(sp)
 8012d68:	04c001c4 	movi	r19,7
 8012d6c:	00000306 	br	8012d7c <___vfprintf_internal_r+0xfa4>
 8012d70:	ad7ffc04 	addi	r21,r21,-16
 8012d74:	42000204 	addi	r8,r8,8
 8012d78:	e540110e 	bge	fp,r21,8012dc0 <___vfprintf_internal_r+0xfe8>
 8012d7c:	18c00404 	addi	r3,r3,16
 8012d80:	10800044 	addi	r2,r2,1
 8012d84:	45000015 	stw	r20,0(r8)
 8012d88:	47000115 	stw	fp,4(r8)
 8012d8c:	d8c12015 	stw	r3,1152(sp)
 8012d90:	d8811f15 	stw	r2,1148(sp)
 8012d94:	98bff60e 	bge	r19,r2,8012d70 <__alt_data_end+0xfc012d70>
 8012d98:	b009883a 	mov	r4,r22
 8012d9c:	b80b883a 	mov	r5,r23
 8012da0:	d9811e04 	addi	r6,sp,1144
 8012da4:	8019c500 	call	8019c50 <__sprint_r>
 8012da8:	103d221e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 8012dac:	ad7ffc04 	addi	r21,r21,-16
 8012db0:	d8c12017 	ldw	r3,1152(sp)
 8012db4:	d8811f17 	ldw	r2,1148(sp)
 8012db8:	da000404 	addi	r8,sp,16
 8012dbc:	e57fef16 	blt	fp,r21,8012d7c <__alt_data_end+0xfc012d7c>
 8012dc0:	dac12c17 	ldw	r11,1200(sp)
 8012dc4:	1d47883a 	add	r3,r3,r21
 8012dc8:	10800044 	addi	r2,r2,1
 8012dcc:	42c00015 	stw	r11,0(r8)
 8012dd0:	45400115 	stw	r21,4(r8)
 8012dd4:	d8c12015 	stw	r3,1152(sp)
 8012dd8:	d8811f15 	stw	r2,1148(sp)
 8012ddc:	010001c4 	movi	r4,7
 8012de0:	20819116 	blt	r4,r2,8013428 <___vfprintf_internal_r+0x1650>
 8012de4:	42000204 	addi	r8,r8,8
 8012de8:	003dec06 	br	801259c <__alt_data_end+0xfc01259c>
 8012dec:	db013317 	ldw	r12,1228(sp)
 8012df0:	00800044 	movi	r2,1
 8012df4:	18c00044 	addi	r3,r3,1
 8012df8:	1301530e 	bge	r2,r12,8013348 <___vfprintf_internal_r+0x1570>
 8012dfc:	dc011f17 	ldw	r16,1148(sp)
 8012e00:	dac13117 	ldw	r11,1220(sp)
 8012e04:	00800044 	movi	r2,1
 8012e08:	84000044 	addi	r16,r16,1
 8012e0c:	40800115 	stw	r2,4(r8)
 8012e10:	42c00015 	stw	r11,0(r8)
 8012e14:	d8c12015 	stw	r3,1152(sp)
 8012e18:	dc011f15 	stw	r16,1148(sp)
 8012e1c:	008001c4 	movi	r2,7
 8012e20:	14016b16 	blt	r2,r16,80133d0 <___vfprintf_internal_r+0x15f8>
 8012e24:	42000204 	addi	r8,r8,8
 8012e28:	db013817 	ldw	r12,1248(sp)
 8012e2c:	dac13517 	ldw	r11,1236(sp)
 8012e30:	84000044 	addi	r16,r16,1
 8012e34:	1b07883a 	add	r3,r3,r12
 8012e38:	42c00015 	stw	r11,0(r8)
 8012e3c:	43000115 	stw	r12,4(r8)
 8012e40:	d8c12015 	stw	r3,1152(sp)
 8012e44:	dc011f15 	stw	r16,1148(sp)
 8012e48:	008001c4 	movi	r2,7
 8012e4c:	14016916 	blt	r2,r16,80133f4 <___vfprintf_internal_r+0x161c>
 8012e50:	44800204 	addi	r18,r8,8
 8012e54:	d9013717 	ldw	r4,1244(sp)
 8012e58:	d9413917 	ldw	r5,1252(sp)
 8012e5c:	000d883a 	mov	r6,zero
 8012e60:	000f883a 	mov	r7,zero
 8012e64:	d8c13d15 	stw	r3,1268(sp)
 8012e68:	800c0100 	call	800c010 <__eqdf2>
 8012e6c:	d8c13d17 	ldw	r3,1268(sp)
 8012e70:	db013317 	ldw	r12,1228(sp)
 8012e74:	1000ae26 	beq	r2,zero,8013130 <___vfprintf_internal_r+0x1358>
 8012e78:	dac13117 	ldw	r11,1220(sp)
 8012e7c:	60bfffc4 	addi	r2,r12,-1
 8012e80:	1887883a 	add	r3,r3,r2
 8012e84:	59000044 	addi	r4,r11,1
 8012e88:	84000044 	addi	r16,r16,1
 8012e8c:	90800115 	stw	r2,4(r18)
 8012e90:	91000015 	stw	r4,0(r18)
 8012e94:	d8c12015 	stw	r3,1152(sp)
 8012e98:	dc011f15 	stw	r16,1148(sp)
 8012e9c:	008001c4 	movi	r2,7
 8012ea0:	14014216 	blt	r2,r16,80133ac <___vfprintf_internal_r+0x15d4>
 8012ea4:	94800204 	addi	r18,r18,8
 8012ea8:	dac13a17 	ldw	r11,1256(sp)
 8012eac:	dd4122c4 	addi	r21,sp,1163
 8012eb0:	84000044 	addi	r16,r16,1
 8012eb4:	58c7883a 	add	r3,r11,r3
 8012eb8:	95400015 	stw	r21,0(r18)
 8012ebc:	92c00115 	stw	r11,4(r18)
 8012ec0:	d8c12015 	stw	r3,1152(sp)
 8012ec4:	dc011f15 	stw	r16,1148(sp)
 8012ec8:	008001c4 	movi	r2,7
 8012ecc:	14000e16 	blt	r2,r16,8012f08 <___vfprintf_internal_r+0x1130>
 8012ed0:	92000204 	addi	r8,r18,8
 8012ed4:	003de706 	br	8012674 <__alt_data_end+0xfc012674>
 8012ed8:	010200f4 	movhi	r4,2051
 8012edc:	212b2384 	addi	r4,r4,-21362
 8012ee0:	d9012c15 	stw	r4,1200(sp)
 8012ee4:	dac12c17 	ldw	r11,1200(sp)
 8012ee8:	1c07883a 	add	r3,r3,r16
 8012eec:	44000115 	stw	r16,4(r8)
 8012ef0:	42c00015 	stw	r11,0(r8)
 8012ef4:	10800044 	addi	r2,r2,1
 8012ef8:	d8c12015 	stw	r3,1152(sp)
 8012efc:	d8811f15 	stw	r2,1148(sp)
 8012f00:	010001c4 	movi	r4,7
 8012f04:	20bdda0e 	bge	r4,r2,8012670 <__alt_data_end+0xfc012670>
 8012f08:	b009883a 	mov	r4,r22
 8012f0c:	b80b883a 	mov	r5,r23
 8012f10:	d9811e04 	addi	r6,sp,1144
 8012f14:	8019c500 	call	8019c50 <__sprint_r>
 8012f18:	103cc61e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 8012f1c:	d8c12017 	ldw	r3,1152(sp)
 8012f20:	da000404 	addi	r8,sp,16
 8012f24:	003dd306 	br	8012674 <__alt_data_end+0xfc012674>
 8012f28:	b009883a 	mov	r4,r22
 8012f2c:	b80b883a 	mov	r5,r23
 8012f30:	d9811e04 	addi	r6,sp,1144
 8012f34:	8019c500 	call	8019c50 <__sprint_r>
 8012f38:	103e0926 	beq	r2,zero,8012760 <__alt_data_end+0xfc012760>
 8012f3c:	003cbd06 	br	8012234 <__alt_data_end+0xfc012234>
 8012f40:	10803fcc 	andi	r2,r2,255
 8012f44:	1000651e 	bne	r2,zero,80130dc <___vfprintf_internal_r+0x1304>
 8012f48:	8880004c 	andi	r2,r17,1
 8012f4c:	10013226 	beq	r2,zero,8013418 <___vfprintf_internal_r+0x1640>
 8012f50:	00800c04 	movi	r2,48
 8012f54:	d8c10dc4 	addi	r3,sp,1079
 8012f58:	d8810dc5 	stb	r2,1079(sp)
 8012f5c:	dc813c17 	ldw	r18,1264(sp)
 8012f60:	d8c13115 	stw	r3,1220(sp)
 8012f64:	003d2b06 	br	8012414 <__alt_data_end+0xfc012414>
 8012f68:	b009883a 	mov	r4,r22
 8012f6c:	b80b883a 	mov	r5,r23
 8012f70:	d9811e04 	addi	r6,sp,1144
 8012f74:	8019c500 	call	8019c50 <__sprint_r>
 8012f78:	103cae1e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 8012f7c:	d8c12017 	ldw	r3,1152(sp)
 8012f80:	da000404 	addi	r8,sp,16
 8012f84:	003dae06 	br	8012640 <__alt_data_end+0xfc012640>
 8012f88:	b009883a 	mov	r4,r22
 8012f8c:	b80b883a 	mov	r5,r23
 8012f90:	d9811e04 	addi	r6,sp,1144
 8012f94:	8019c500 	call	8019c50 <__sprint_r>
 8012f98:	103ca61e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 8012f9c:	d8c12017 	ldw	r3,1152(sp)
 8012fa0:	da000404 	addi	r8,sp,16
 8012fa4:	003d6c06 	br	8012558 <__alt_data_end+0xfc012558>
 8012fa8:	b009883a 	mov	r4,r22
 8012fac:	b80b883a 	mov	r5,r23
 8012fb0:	d9811e04 	addi	r6,sp,1144
 8012fb4:	8019c500 	call	8019c50 <__sprint_r>
 8012fb8:	103c9e1e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 8012fbc:	d8c12017 	ldw	r3,1152(sp)
 8012fc0:	da000404 	addi	r8,sp,16
 8012fc4:	003d7206 	br	8012590 <__alt_data_end+0xfc012590>
 8012fc8:	d9413b17 	ldw	r5,1260(sp)
 8012fcc:	d8c10e04 	addi	r3,sp,1080
 8012fd0:	988003cc 	andi	r2,r19,15
 8012fd4:	e008973a 	slli	r4,fp,28
 8012fd8:	2885883a 	add	r2,r5,r2
 8012fdc:	9826d13a 	srli	r19,r19,4
 8012fe0:	10800003 	ldbu	r2,0(r2)
 8012fe4:	e038d13a 	srli	fp,fp,4
 8012fe8:	18ffffc4 	addi	r3,r3,-1
 8012fec:	24e6b03a 	or	r19,r4,r19
 8012ff0:	18800005 	stb	r2,0(r3)
 8012ff4:	9f04b03a 	or	r2,r19,fp
 8012ff8:	103ff51e 	bne	r2,zero,8012fd0 <__alt_data_end+0xfc012fd0>
 8012ffc:	db012817 	ldw	r12,1184(sp)
 8013000:	d8c13115 	stw	r3,1220(sp)
 8013004:	60e5c83a 	sub	r18,r12,r3
 8013008:	003d0206 	br	8012414 <__alt_data_end+0xfc012414>
 801300c:	dc012617 	ldw	r16,1176(sp)
 8013010:	0401b10e 	bge	zero,r16,80136d8 <___vfprintf_internal_r+0x1900>
 8013014:	db013117 	ldw	r12,1220(sp)
 8013018:	dac13317 	ldw	r11,1228(sp)
 801301c:	62e1883a 	add	r16,r12,r11
 8013020:	db013417 	ldw	r12,1232(sp)
 8013024:	5825883a 	mov	r18,r11
 8013028:	62c0010e 	bge	r12,r11,8013030 <___vfprintf_internal_r+0x1258>
 801302c:	6025883a 	mov	r18,r12
 8013030:	04800b0e 	bge	zero,r18,8013060 <___vfprintf_internal_r+0x1288>
 8013034:	d8811f17 	ldw	r2,1148(sp)
 8013038:	dac13117 	ldw	r11,1220(sp)
 801303c:	1c87883a 	add	r3,r3,r18
 8013040:	10800044 	addi	r2,r2,1
 8013044:	42c00015 	stw	r11,0(r8)
 8013048:	44800115 	stw	r18,4(r8)
 801304c:	d8c12015 	stw	r3,1152(sp)
 8013050:	d8811f15 	stw	r2,1148(sp)
 8013054:	010001c4 	movi	r4,7
 8013058:	20824f16 	blt	r4,r2,8013998 <___vfprintf_internal_r+0x1bc0>
 801305c:	42000204 	addi	r8,r8,8
 8013060:	90024b16 	blt	r18,zero,8013990 <___vfprintf_internal_r+0x1bb8>
 8013064:	db013417 	ldw	r12,1232(sp)
 8013068:	64a5c83a 	sub	r18,r12,r18
 801306c:	0480730e 	bge	zero,r18,801323c <___vfprintf_internal_r+0x1464>
 8013070:	05400404 	movi	r21,16
 8013074:	d8811f17 	ldw	r2,1148(sp)
 8013078:	ac817d0e 	bge	r21,r18,8013670 <___vfprintf_internal_r+0x1898>
 801307c:	014200f4 	movhi	r5,2051
 8013080:	296b2384 	addi	r5,r5,-21362
 8013084:	d9412c15 	stw	r5,1200(sp)
 8013088:	070001c4 	movi	fp,7
 801308c:	00000306 	br	801309c <___vfprintf_internal_r+0x12c4>
 8013090:	42000204 	addi	r8,r8,8
 8013094:	94bffc04 	addi	r18,r18,-16
 8013098:	ac81780e 	bge	r21,r18,801367c <___vfprintf_internal_r+0x18a4>
 801309c:	18c00404 	addi	r3,r3,16
 80130a0:	10800044 	addi	r2,r2,1
 80130a4:	45000015 	stw	r20,0(r8)
 80130a8:	45400115 	stw	r21,4(r8)
 80130ac:	d8c12015 	stw	r3,1152(sp)
 80130b0:	d8811f15 	stw	r2,1148(sp)
 80130b4:	e0bff60e 	bge	fp,r2,8013090 <__alt_data_end+0xfc013090>
 80130b8:	b009883a 	mov	r4,r22
 80130bc:	b80b883a 	mov	r5,r23
 80130c0:	d9811e04 	addi	r6,sp,1144
 80130c4:	8019c500 	call	8019c50 <__sprint_r>
 80130c8:	103c5a1e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 80130cc:	d8c12017 	ldw	r3,1152(sp)
 80130d0:	d8811f17 	ldw	r2,1148(sp)
 80130d4:	da000404 	addi	r8,sp,16
 80130d8:	003fee06 	br	8013094 <__alt_data_end+0xfc013094>
 80130dc:	dac10e04 	addi	r11,sp,1080
 80130e0:	0025883a 	mov	r18,zero
 80130e4:	dac13115 	stw	r11,1220(sp)
 80130e8:	003cca06 	br	8012414 <__alt_data_end+0xfc012414>
 80130ec:	b009883a 	mov	r4,r22
 80130f0:	b80b883a 	mov	r5,r23
 80130f4:	d9811e04 	addi	r6,sp,1144
 80130f8:	8019c500 	call	8019c50 <__sprint_r>
 80130fc:	103c4d1e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 8013100:	d8c12017 	ldw	r3,1152(sp)
 8013104:	d8812787 	ldb	r2,1182(sp)
 8013108:	da000404 	addi	r8,sp,16
 801310c:	003d0506 	br	8012524 <__alt_data_end+0xfc012524>
 8013110:	dac12d17 	ldw	r11,1204(sp)
 8013114:	14c00017 	ldw	r19,0(r2)
 8013118:	0039883a 	mov	fp,zero
 801311c:	5ac00104 	addi	r11,r11,4
 8013120:	dac12d15 	stw	r11,1204(sp)
 8013124:	0005883a 	mov	r2,zero
 8013128:	9807883a 	mov	r3,r19
 801312c:	003c9c06 	br	80123a0 <__alt_data_end+0xfc0123a0>
 8013130:	657fffc4 	addi	r21,r12,-1
 8013134:	057f5c0e 	bge	zero,r21,8012ea8 <__alt_data_end+0xfc012ea8>
 8013138:	07000404 	movi	fp,16
 801313c:	e5408f0e 	bge	fp,r21,801337c <___vfprintf_internal_r+0x15a4>
 8013140:	010200f4 	movhi	r4,2051
 8013144:	212b2384 	addi	r4,r4,-21362
 8013148:	d9012c15 	stw	r4,1200(sp)
 801314c:	01c001c4 	movi	r7,7
 8013150:	00000306 	br	8013160 <___vfprintf_internal_r+0x1388>
 8013154:	94800204 	addi	r18,r18,8
 8013158:	ad7ffc04 	addi	r21,r21,-16
 801315c:	e5408a0e 	bge	fp,r21,8013388 <___vfprintf_internal_r+0x15b0>
 8013160:	18c00404 	addi	r3,r3,16
 8013164:	84000044 	addi	r16,r16,1
 8013168:	95000015 	stw	r20,0(r18)
 801316c:	97000115 	stw	fp,4(r18)
 8013170:	d8c12015 	stw	r3,1152(sp)
 8013174:	dc011f15 	stw	r16,1148(sp)
 8013178:	3c3ff60e 	bge	r7,r16,8013154 <__alt_data_end+0xfc013154>
 801317c:	b009883a 	mov	r4,r22
 8013180:	b80b883a 	mov	r5,r23
 8013184:	d9811e04 	addi	r6,sp,1144
 8013188:	d9c13d15 	stw	r7,1268(sp)
 801318c:	8019c500 	call	8019c50 <__sprint_r>
 8013190:	d9c13d17 	ldw	r7,1268(sp)
 8013194:	103c271e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 8013198:	d8c12017 	ldw	r3,1152(sp)
 801319c:	dc011f17 	ldw	r16,1148(sp)
 80131a0:	dc800404 	addi	r18,sp,16
 80131a4:	003fec06 	br	8013158 <__alt_data_end+0xfc013158>
 80131a8:	1cc00017 	ldw	r19,0(r3)
 80131ac:	dac12d17 	ldw	r11,1204(sp)
 80131b0:	9839d7fa 	srai	fp,r19,31
 80131b4:	5ac00104 	addi	r11,r11,4
 80131b8:	dac12d15 	stw	r11,1204(sp)
 80131bc:	e005883a 	mov	r2,fp
 80131c0:	003d9006 	br	8012804 <__alt_data_end+0xfc012804>
 80131c4:	00800084 	movi	r2,2
 80131c8:	9f06b03a 	or	r3,r19,fp
 80131cc:	003c7406 	br	80123a0 <__alt_data_end+0xfc0123a0>
 80131d0:	db012d17 	ldw	r12,1204(sp)
 80131d4:	14c00017 	ldw	r19,0(r2)
 80131d8:	0039883a 	mov	fp,zero
 80131dc:	63000104 	addi	r12,r12,4
 80131e0:	db012d15 	stw	r12,1204(sp)
 80131e4:	00800044 	movi	r2,1
 80131e8:	9807883a 	mov	r3,r19
 80131ec:	003c6c06 	br	80123a0 <__alt_data_end+0xfc0123a0>
 80131f0:	10803fcc 	andi	r2,r2,255
 80131f4:	1080201c 	xori	r2,r2,128
 80131f8:	10bfe004 	addi	r2,r2,-128
 80131fc:	01000c04 	movi	r4,48
 8013200:	1101a526 	beq	r2,r4,8013898 <___vfprintf_internal_r+0x1ac0>
 8013204:	dac13117 	ldw	r11,1220(sp)
 8013208:	db012817 	ldw	r12,1184(sp)
 801320c:	193fffc5 	stb	r4,-1(r3)
 8013210:	5affffc4 	addi	r11,r11,-1
 8013214:	dac13115 	stw	r11,1220(sp)
 8013218:	62e5c83a 	sub	r18,r12,r11
 801321c:	003c7d06 	br	8012414 <__alt_data_end+0xfc012414>
 8013220:	b009883a 	mov	r4,r22
 8013224:	b80b883a 	mov	r5,r23
 8013228:	d9811e04 	addi	r6,sp,1144
 801322c:	8019c500 	call	8019c50 <__sprint_r>
 8013230:	103c001e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 8013234:	d8c12017 	ldw	r3,1152(sp)
 8013238:	da000404 	addi	r8,sp,16
 801323c:	db013117 	ldw	r12,1220(sp)
 8013240:	dac13417 	ldw	r11,1232(sp)
 8013244:	d8812617 	ldw	r2,1176(sp)
 8013248:	62e5883a 	add	r18,r12,r11
 801324c:	db013317 	ldw	r12,1228(sp)
 8013250:	13000216 	blt	r2,r12,801325c <___vfprintf_internal_r+0x1484>
 8013254:	8900004c 	andi	r4,r17,1
 8013258:	20000c26 	beq	r4,zero,801328c <___vfprintf_internal_r+0x14b4>
 801325c:	dac13817 	ldw	r11,1248(sp)
 8013260:	d9011f17 	ldw	r4,1148(sp)
 8013264:	db013517 	ldw	r12,1236(sp)
 8013268:	1ac7883a 	add	r3,r3,r11
 801326c:	21000044 	addi	r4,r4,1
 8013270:	43000015 	stw	r12,0(r8)
 8013274:	42c00115 	stw	r11,4(r8)
 8013278:	d8c12015 	stw	r3,1152(sp)
 801327c:	d9011f15 	stw	r4,1148(sp)
 8013280:	014001c4 	movi	r5,7
 8013284:	2901cc16 	blt	r5,r4,80139b8 <___vfprintf_internal_r+0x1be0>
 8013288:	42000204 	addi	r8,r8,8
 801328c:	dac13317 	ldw	r11,1228(sp)
 8013290:	8489c83a 	sub	r4,r16,r18
 8013294:	5885c83a 	sub	r2,r11,r2
 8013298:	1021883a 	mov	r16,r2
 801329c:	2080010e 	bge	r4,r2,80132a4 <___vfprintf_internal_r+0x14cc>
 80132a0:	2021883a 	mov	r16,r4
 80132a4:	04000a0e 	bge	zero,r16,80132d0 <___vfprintf_internal_r+0x14f8>
 80132a8:	d9011f17 	ldw	r4,1148(sp)
 80132ac:	1c07883a 	add	r3,r3,r16
 80132b0:	44800015 	stw	r18,0(r8)
 80132b4:	21000044 	addi	r4,r4,1
 80132b8:	44000115 	stw	r16,4(r8)
 80132bc:	d8c12015 	stw	r3,1152(sp)
 80132c0:	d9011f15 	stw	r4,1148(sp)
 80132c4:	014001c4 	movi	r5,7
 80132c8:	2901d616 	blt	r5,r4,8013a24 <___vfprintf_internal_r+0x1c4c>
 80132cc:	42000204 	addi	r8,r8,8
 80132d0:	8001df16 	blt	r16,zero,8013a50 <___vfprintf_internal_r+0x1c78>
 80132d4:	1421c83a 	sub	r16,r2,r16
 80132d8:	043ce60e 	bge	zero,r16,8012674 <__alt_data_end+0xfc012674>
 80132dc:	04800404 	movi	r18,16
 80132e0:	d8811f17 	ldw	r2,1148(sp)
 80132e4:	943efc0e 	bge	r18,r16,8012ed8 <__alt_data_end+0xfc012ed8>
 80132e8:	014200f4 	movhi	r5,2051
 80132ec:	296b2384 	addi	r5,r5,-21362
 80132f0:	d9412c15 	stw	r5,1200(sp)
 80132f4:	054001c4 	movi	r21,7
 80132f8:	00000306 	br	8013308 <___vfprintf_internal_r+0x1530>
 80132fc:	42000204 	addi	r8,r8,8
 8013300:	843ffc04 	addi	r16,r16,-16
 8013304:	943ef70e 	bge	r18,r16,8012ee4 <__alt_data_end+0xfc012ee4>
 8013308:	18c00404 	addi	r3,r3,16
 801330c:	10800044 	addi	r2,r2,1
 8013310:	45000015 	stw	r20,0(r8)
 8013314:	44800115 	stw	r18,4(r8)
 8013318:	d8c12015 	stw	r3,1152(sp)
 801331c:	d8811f15 	stw	r2,1148(sp)
 8013320:	a8bff60e 	bge	r21,r2,80132fc <__alt_data_end+0xfc0132fc>
 8013324:	b009883a 	mov	r4,r22
 8013328:	b80b883a 	mov	r5,r23
 801332c:	d9811e04 	addi	r6,sp,1144
 8013330:	8019c500 	call	8019c50 <__sprint_r>
 8013334:	103bbf1e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 8013338:	d8c12017 	ldw	r3,1152(sp)
 801333c:	d8811f17 	ldw	r2,1148(sp)
 8013340:	da000404 	addi	r8,sp,16
 8013344:	003fee06 	br	8013300 <__alt_data_end+0xfc013300>
 8013348:	8888703a 	and	r4,r17,r2
 801334c:	203eab1e 	bne	r4,zero,8012dfc <__alt_data_end+0xfc012dfc>
 8013350:	dc011f17 	ldw	r16,1148(sp)
 8013354:	db013117 	ldw	r12,1220(sp)
 8013358:	40800115 	stw	r2,4(r8)
 801335c:	84000044 	addi	r16,r16,1
 8013360:	43000015 	stw	r12,0(r8)
 8013364:	d8c12015 	stw	r3,1152(sp)
 8013368:	dc011f15 	stw	r16,1148(sp)
 801336c:	008001c4 	movi	r2,7
 8013370:	14000e16 	blt	r2,r16,80133ac <___vfprintf_internal_r+0x15d4>
 8013374:	44800204 	addi	r18,r8,8
 8013378:	003ecb06 	br	8012ea8 <__alt_data_end+0xfc012ea8>
 801337c:	008200f4 	movhi	r2,2051
 8013380:	10ab2384 	addi	r2,r2,-21362
 8013384:	d8812c15 	stw	r2,1200(sp)
 8013388:	dac12c17 	ldw	r11,1200(sp)
 801338c:	1d47883a 	add	r3,r3,r21
 8013390:	84000044 	addi	r16,r16,1
 8013394:	92c00015 	stw	r11,0(r18)
 8013398:	95400115 	stw	r21,4(r18)
 801339c:	d8c12015 	stw	r3,1152(sp)
 80133a0:	dc011f15 	stw	r16,1148(sp)
 80133a4:	008001c4 	movi	r2,7
 80133a8:	143ebe0e 	bge	r2,r16,8012ea4 <__alt_data_end+0xfc012ea4>
 80133ac:	b009883a 	mov	r4,r22
 80133b0:	b80b883a 	mov	r5,r23
 80133b4:	d9811e04 	addi	r6,sp,1144
 80133b8:	8019c500 	call	8019c50 <__sprint_r>
 80133bc:	103b9d1e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 80133c0:	d8c12017 	ldw	r3,1152(sp)
 80133c4:	dc011f17 	ldw	r16,1148(sp)
 80133c8:	dc800404 	addi	r18,sp,16
 80133cc:	003eb606 	br	8012ea8 <__alt_data_end+0xfc012ea8>
 80133d0:	b009883a 	mov	r4,r22
 80133d4:	b80b883a 	mov	r5,r23
 80133d8:	d9811e04 	addi	r6,sp,1144
 80133dc:	8019c500 	call	8019c50 <__sprint_r>
 80133e0:	103b941e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 80133e4:	d8c12017 	ldw	r3,1152(sp)
 80133e8:	dc011f17 	ldw	r16,1148(sp)
 80133ec:	da000404 	addi	r8,sp,16
 80133f0:	003e8d06 	br	8012e28 <__alt_data_end+0xfc012e28>
 80133f4:	b009883a 	mov	r4,r22
 80133f8:	b80b883a 	mov	r5,r23
 80133fc:	d9811e04 	addi	r6,sp,1144
 8013400:	8019c500 	call	8019c50 <__sprint_r>
 8013404:	103b8b1e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 8013408:	d8c12017 	ldw	r3,1152(sp)
 801340c:	dc011f17 	ldw	r16,1148(sp)
 8013410:	dc800404 	addi	r18,sp,16
 8013414:	003e8f06 	br	8012e54 <__alt_data_end+0xfc012e54>
 8013418:	db010e04 	addi	r12,sp,1080
 801341c:	0025883a 	mov	r18,zero
 8013420:	db013115 	stw	r12,1220(sp)
 8013424:	003bfb06 	br	8012414 <__alt_data_end+0xfc012414>
 8013428:	b009883a 	mov	r4,r22
 801342c:	b80b883a 	mov	r5,r23
 8013430:	d9811e04 	addi	r6,sp,1144
 8013434:	8019c500 	call	8019c50 <__sprint_r>
 8013438:	103b7e1e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 801343c:	d8c12017 	ldw	r3,1152(sp)
 8013440:	da000404 	addi	r8,sp,16
 8013444:	003c5506 	br	801259c <__alt_data_end+0xfc01259c>
 8013448:	04e7c83a 	sub	r19,zero,r19
 801344c:	9804c03a 	cmpne	r2,r19,zero
 8013450:	0739c83a 	sub	fp,zero,fp
 8013454:	e0b9c83a 	sub	fp,fp,r2
 8013458:	05400b44 	movi	r21,45
 801345c:	dd412785 	stb	r21,1182(sp)
 8013460:	da413215 	stw	r9,1224(sp)
 8013464:	00800044 	movi	r2,1
 8013468:	9f06b03a 	or	r3,r19,fp
 801346c:	003bcf06 	br	80123ac <__alt_data_end+0xfc0123ac>
 8013470:	da013f15 	stw	r8,1276(sp)
 8013474:	da413e15 	stw	r9,1272(sp)
 8013478:	800a4480 	call	800a448 <__fpclassifyd>
 801347c:	da013f17 	ldw	r8,1276(sp)
 8013480:	da413e17 	ldw	r9,1272(sp)
 8013484:	1000ce26 	beq	r2,zero,80137c0 <___vfprintf_internal_r+0x19e8>
 8013488:	057ff7c4 	movi	r21,-33
 801348c:	00bfffc4 	movi	r2,-1
 8013490:	856a703a 	and	r21,r16,r21
 8013494:	4881f026 	beq	r9,r2,8013c58 <___vfprintf_internal_r+0x1e80>
 8013498:	008011c4 	movi	r2,71
 801349c:	a881e526 	beq	r21,r2,8013c34 <___vfprintf_internal_r+0x1e5c>
 80134a0:	db013917 	ldw	r12,1252(sp)
 80134a4:	8ac04014 	ori	r11,r17,256
 80134a8:	dac12d15 	stw	r11,1204(sp)
 80134ac:	6001e416 	blt	r12,zero,8013c40 <___vfprintf_internal_r+0x1e68>
 80134b0:	dc813917 	ldw	r18,1252(sp)
 80134b4:	d8012b05 	stb	zero,1196(sp)
 80134b8:	00801984 	movi	r2,102
 80134bc:	80811826 	beq	r16,r2,8013920 <___vfprintf_internal_r+0x1b48>
 80134c0:	00801184 	movi	r2,70
 80134c4:	80811626 	beq	r16,r2,8013920 <___vfprintf_internal_r+0x1b48>
 80134c8:	00801144 	movi	r2,69
 80134cc:	a881e026 	beq	r21,r2,8013c50 <___vfprintf_internal_r+0x1e78>
 80134d0:	4839883a 	mov	fp,r9
 80134d4:	d8812604 	addi	r2,sp,1176
 80134d8:	d8800115 	stw	r2,4(sp)
 80134dc:	d9413717 	ldw	r5,1244(sp)
 80134e0:	d8812504 	addi	r2,sp,1172
 80134e4:	d8800215 	stw	r2,8(sp)
 80134e8:	d8812104 	addi	r2,sp,1156
 80134ec:	df000015 	stw	fp,0(sp)
 80134f0:	d8800315 	stw	r2,12(sp)
 80134f4:	b009883a 	mov	r4,r22
 80134f8:	900d883a 	mov	r6,r18
 80134fc:	01c00084 	movi	r7,2
 8013500:	da013f15 	stw	r8,1276(sp)
 8013504:	da413e15 	stw	r9,1272(sp)
 8013508:	80141280 	call	8014128 <_dtoa_r>
 801350c:	d8813115 	stw	r2,1220(sp)
 8013510:	008019c4 	movi	r2,103
 8013514:	da013f17 	ldw	r8,1276(sp)
 8013518:	da413e17 	ldw	r9,1272(sp)
 801351c:	80800226 	beq	r16,r2,8013528 <___vfprintf_internal_r+0x1750>
 8013520:	008011c4 	movi	r2,71
 8013524:	8081101e 	bne	r16,r2,8013968 <___vfprintf_internal_r+0x1b90>
 8013528:	8880004c 	andi	r2,r17,1
 801352c:	1001df26 	beq	r2,zero,8013cac <___vfprintf_internal_r+0x1ed4>
 8013530:	db013117 	ldw	r12,1220(sp)
 8013534:	6715883a 	add	r10,r12,fp
 8013538:	d9013717 	ldw	r4,1244(sp)
 801353c:	900b883a 	mov	r5,r18
 8013540:	000d883a 	mov	r6,zero
 8013544:	000f883a 	mov	r7,zero
 8013548:	da013f15 	stw	r8,1276(sp)
 801354c:	da413e15 	stw	r9,1272(sp)
 8013550:	da813d15 	stw	r10,1268(sp)
 8013554:	800c0100 	call	800c010 <__eqdf2>
 8013558:	da013f17 	ldw	r8,1276(sp)
 801355c:	da413e17 	ldw	r9,1272(sp)
 8013560:	da813d17 	ldw	r10,1268(sp)
 8013564:	10016526 	beq	r2,zero,8013afc <___vfprintf_internal_r+0x1d24>
 8013568:	d8812117 	ldw	r2,1156(sp)
 801356c:	1280062e 	bgeu	r2,r10,8013588 <___vfprintf_internal_r+0x17b0>
 8013570:	01000c04 	movi	r4,48
 8013574:	10c00044 	addi	r3,r2,1
 8013578:	d8c12115 	stw	r3,1156(sp)
 801357c:	11000005 	stb	r4,0(r2)
 8013580:	d8812117 	ldw	r2,1156(sp)
 8013584:	12bffb36 	bltu	r2,r10,8013574 <__alt_data_end+0xfc013574>
 8013588:	db013117 	ldw	r12,1220(sp)
 801358c:	1305c83a 	sub	r2,r2,r12
 8013590:	d8813315 	stw	r2,1228(sp)
 8013594:	008011c4 	movi	r2,71
 8013598:	a8814a26 	beq	r21,r2,8013ac4 <___vfprintf_internal_r+0x1cec>
 801359c:	00801944 	movi	r2,101
 80135a0:	14020a0e 	bge	r2,r16,8013dcc <___vfprintf_internal_r+0x1ff4>
 80135a4:	00801984 	movi	r2,102
 80135a8:	8081b626 	beq	r16,r2,8013c84 <___vfprintf_internal_r+0x1eac>
 80135ac:	db012617 	ldw	r12,1176(sp)
 80135b0:	db013415 	stw	r12,1232(sp)
 80135b4:	db013417 	ldw	r12,1232(sp)
 80135b8:	dac13317 	ldw	r11,1228(sp)
 80135bc:	62c1a816 	blt	r12,r11,8013c60 <___vfprintf_internal_r+0x1e88>
 80135c0:	8c40004c 	andi	r17,r17,1
 80135c4:	8801ca1e 	bne	r17,zero,8013cf0 <___vfprintf_internal_r+0x1f18>
 80135c8:	6005883a 	mov	r2,r12
 80135cc:	6001b516 	blt	r12,zero,8013ca4 <___vfprintf_internal_r+0x1ecc>
 80135d0:	dc813417 	ldw	r18,1232(sp)
 80135d4:	df012b07 	ldb	fp,1196(sp)
 80135d8:	e001321e 	bne	fp,zero,8013aa4 <___vfprintf_internal_r+0x1ccc>
 80135dc:	dc412d17 	ldw	r17,1204(sp)
 80135e0:	dd412783 	ldbu	r21,1182(sp)
 80135e4:	d8812b15 	stw	r2,1196(sp)
 80135e8:	dcc12d15 	stw	r19,1204(sp)
 80135ec:	d8013215 	stw	zero,1224(sp)
 80135f0:	003b8d06 	br	8012428 <__alt_data_end+0xfc012428>
 80135f4:	88c0100c 	andi	r3,r17,64
 80135f8:	18008226 	beq	r3,zero,8013804 <___vfprintf_internal_r+0x1a2c>
 80135fc:	dac12d17 	ldw	r11,1204(sp)
 8013600:	14c0000b 	ldhu	r19,0(r2)
 8013604:	0039883a 	mov	fp,zero
 8013608:	5ac00104 	addi	r11,r11,4
 801360c:	dac12d15 	stw	r11,1204(sp)
 8013610:	003c8f06 	br	8012850 <__alt_data_end+0xfc012850>
 8013614:	1c000007 	ldb	r16,0(r3)
 8013618:	1805883a 	mov	r2,r3
 801361c:	003a5506 	br	8011f74 <__alt_data_end+0xfc011f74>
 8013620:	00800084 	movi	r2,2
 8013624:	003b5e06 	br	80123a0 <__alt_data_end+0xfc0123a0>
 8013628:	8880040c 	andi	r2,r17,16
 801362c:	1000091e 	bne	r2,zero,8013654 <___vfprintf_internal_r+0x187c>
 8013630:	8c40100c 	andi	r17,r17,64
 8013634:	88000726 	beq	r17,zero,8013654 <___vfprintf_internal_r+0x187c>
 8013638:	db012d17 	ldw	r12,1204(sp)
 801363c:	dac12f17 	ldw	r11,1212(sp)
 8013640:	60800017 	ldw	r2,0(r12)
 8013644:	63000104 	addi	r12,r12,4
 8013648:	db012d15 	stw	r12,1204(sp)
 801364c:	12c0000d 	sth	r11,0(r2)
 8013650:	003a1e06 	br	8011ecc <__alt_data_end+0xfc011ecc>
 8013654:	db012d17 	ldw	r12,1204(sp)
 8013658:	dac12f17 	ldw	r11,1212(sp)
 801365c:	60800017 	ldw	r2,0(r12)
 8013660:	63000104 	addi	r12,r12,4
 8013664:	db012d15 	stw	r12,1204(sp)
 8013668:	12c00015 	stw	r11,0(r2)
 801366c:	003a1706 	br	8011ecc <__alt_data_end+0xfc011ecc>
 8013670:	010200f4 	movhi	r4,2051
 8013674:	212b2384 	addi	r4,r4,-21362
 8013678:	d9012c15 	stw	r4,1200(sp)
 801367c:	dac12c17 	ldw	r11,1200(sp)
 8013680:	1c87883a 	add	r3,r3,r18
 8013684:	10800044 	addi	r2,r2,1
 8013688:	42c00015 	stw	r11,0(r8)
 801368c:	44800115 	stw	r18,4(r8)
 8013690:	d8c12015 	stw	r3,1152(sp)
 8013694:	d8811f15 	stw	r2,1148(sp)
 8013698:	010001c4 	movi	r4,7
 801369c:	20bee016 	blt	r4,r2,8013220 <__alt_data_end+0xfc013220>
 80136a0:	42000204 	addi	r8,r8,8
 80136a4:	003ee506 	br	801323c <__alt_data_end+0xfc01323c>
 80136a8:	010200f4 	movhi	r4,2051
 80136ac:	212b2384 	addi	r4,r4,-21362
 80136b0:	d9012c15 	stw	r4,1200(sp)
 80136b4:	003bd806 	br	8012618 <__alt_data_end+0xfc012618>
 80136b8:	b009883a 	mov	r4,r22
 80136bc:	b80b883a 	mov	r5,r23
 80136c0:	d9811e04 	addi	r6,sp,1144
 80136c4:	8019c500 	call	8019c50 <__sprint_r>
 80136c8:	103ada1e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 80136cc:	d8c12017 	ldw	r3,1152(sp)
 80136d0:	da000404 	addi	r8,sp,16
 80136d4:	003d6b06 	br	8012c84 <__alt_data_end+0xfc012c84>
 80136d8:	d8811f17 	ldw	r2,1148(sp)
 80136dc:	030200f4 	movhi	r12,2051
 80136e0:	01000044 	movi	r4,1
 80136e4:	18c00044 	addi	r3,r3,1
 80136e8:	10800044 	addi	r2,r2,1
 80136ec:	632b1b04 	addi	r12,r12,-21396
 80136f0:	41000115 	stw	r4,4(r8)
 80136f4:	43000015 	stw	r12,0(r8)
 80136f8:	d8c12015 	stw	r3,1152(sp)
 80136fc:	d8811f15 	stw	r2,1148(sp)
 8013700:	010001c4 	movi	r4,7
 8013704:	20804916 	blt	r4,r2,801382c <___vfprintf_internal_r+0x1a54>
 8013708:	42000204 	addi	r8,r8,8
 801370c:	8000041e 	bne	r16,zero,8013720 <___vfprintf_internal_r+0x1948>
 8013710:	dac13317 	ldw	r11,1228(sp)
 8013714:	5800021e 	bne	r11,zero,8013720 <___vfprintf_internal_r+0x1948>
 8013718:	8880004c 	andi	r2,r17,1
 801371c:	103bd526 	beq	r2,zero,8012674 <__alt_data_end+0xfc012674>
 8013720:	db013817 	ldw	r12,1248(sp)
 8013724:	d8811f17 	ldw	r2,1148(sp)
 8013728:	dac13517 	ldw	r11,1236(sp)
 801372c:	1b07883a 	add	r3,r3,r12
 8013730:	10800044 	addi	r2,r2,1
 8013734:	42c00015 	stw	r11,0(r8)
 8013738:	43000115 	stw	r12,4(r8)
 801373c:	d8c12015 	stw	r3,1152(sp)
 8013740:	d8811f15 	stw	r2,1148(sp)
 8013744:	010001c4 	movi	r4,7
 8013748:	20813016 	blt	r4,r2,8013c0c <___vfprintf_internal_r+0x1e34>
 801374c:	42000204 	addi	r8,r8,8
 8013750:	0421c83a 	sub	r16,zero,r16
 8013754:	0400630e 	bge	zero,r16,80138e4 <___vfprintf_internal_r+0x1b0c>
 8013758:	04800404 	movi	r18,16
 801375c:	94009f0e 	bge	r18,r16,80139dc <___vfprintf_internal_r+0x1c04>
 8013760:	010200f4 	movhi	r4,2051
 8013764:	212b2384 	addi	r4,r4,-21362
 8013768:	d9012c15 	stw	r4,1200(sp)
 801376c:	054001c4 	movi	r21,7
 8013770:	00000306 	br	8013780 <___vfprintf_internal_r+0x19a8>
 8013774:	42000204 	addi	r8,r8,8
 8013778:	843ffc04 	addi	r16,r16,-16
 801377c:	94009a0e 	bge	r18,r16,80139e8 <___vfprintf_internal_r+0x1c10>
 8013780:	18c00404 	addi	r3,r3,16
 8013784:	10800044 	addi	r2,r2,1
 8013788:	45000015 	stw	r20,0(r8)
 801378c:	44800115 	stw	r18,4(r8)
 8013790:	d8c12015 	stw	r3,1152(sp)
 8013794:	d8811f15 	stw	r2,1148(sp)
 8013798:	a8bff60e 	bge	r21,r2,8013774 <__alt_data_end+0xfc013774>
 801379c:	b009883a 	mov	r4,r22
 80137a0:	b80b883a 	mov	r5,r23
 80137a4:	d9811e04 	addi	r6,sp,1144
 80137a8:	8019c500 	call	8019c50 <__sprint_r>
 80137ac:	103aa11e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 80137b0:	d8c12017 	ldw	r3,1152(sp)
 80137b4:	d8811f17 	ldw	r2,1148(sp)
 80137b8:	da000404 	addi	r8,sp,16
 80137bc:	003fee06 	br	8013778 <__alt_data_end+0xfc013778>
 80137c0:	008011c4 	movi	r2,71
 80137c4:	1400b316 	blt	r2,r16,8013a94 <___vfprintf_internal_r+0x1cbc>
 80137c8:	030200f4 	movhi	r12,2051
 80137cc:	632b0d04 	addi	r12,r12,-21452
 80137d0:	db013115 	stw	r12,1220(sp)
 80137d4:	00c000c4 	movi	r3,3
 80137d8:	00bfdfc4 	movi	r2,-129
 80137dc:	d8c12b15 	stw	r3,1196(sp)
 80137e0:	88a2703a 	and	r17,r17,r2
 80137e4:	dd412783 	ldbu	r21,1182(sp)
 80137e8:	dcc12d15 	stw	r19,1204(sp)
 80137ec:	1825883a 	mov	r18,r3
 80137f0:	d8013215 	stw	zero,1224(sp)
 80137f4:	d8013415 	stw	zero,1232(sp)
 80137f8:	003b0b06 	br	8012428 <__alt_data_end+0xfc012428>
 80137fc:	4825883a 	mov	r18,r9
 8013800:	003cba06 	br	8012aec <__alt_data_end+0xfc012aec>
 8013804:	db012d17 	ldw	r12,1204(sp)
 8013808:	14c00017 	ldw	r19,0(r2)
 801380c:	0039883a 	mov	fp,zero
 8013810:	63000104 	addi	r12,r12,4
 8013814:	db012d15 	stw	r12,1204(sp)
 8013818:	003c0d06 	br	8012850 <__alt_data_end+0xfc012850>
 801381c:	008200f4 	movhi	r2,2051
 8013820:	10ab0b04 	addi	r2,r2,-21460
 8013824:	d8813115 	stw	r2,1220(sp)
 8013828:	003ac406 	br	801233c <__alt_data_end+0xfc01233c>
 801382c:	b009883a 	mov	r4,r22
 8013830:	b80b883a 	mov	r5,r23
 8013834:	d9811e04 	addi	r6,sp,1144
 8013838:	8019c500 	call	8019c50 <__sprint_r>
 801383c:	103a7d1e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 8013840:	dc012617 	ldw	r16,1176(sp)
 8013844:	d8c12017 	ldw	r3,1152(sp)
 8013848:	da000404 	addi	r8,sp,16
 801384c:	003faf06 	br	801370c <__alt_data_end+0xfc01370c>
 8013850:	db012e17 	ldw	r12,1208(sp)
 8013854:	1805883a 	mov	r2,r3
 8013858:	dac12d15 	stw	r11,1204(sp)
 801385c:	0319c83a 	sub	r12,zero,r12
 8013860:	db012e15 	stw	r12,1208(sp)
 8013864:	003a7e06 	br	8012260 <__alt_data_end+0xfc012260>
 8013868:	18800044 	addi	r2,r3,1
 801386c:	8c400814 	ori	r17,r17,32
 8013870:	1c000047 	ldb	r16,1(r3)
 8013874:	0039bf06 	br	8011f74 <__alt_data_end+0xfc011f74>
 8013878:	b009883a 	mov	r4,r22
 801387c:	b80b883a 	mov	r5,r23
 8013880:	d9811e04 	addi	r6,sp,1144
 8013884:	8019c500 	call	8019c50 <__sprint_r>
 8013888:	103a6a1e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 801388c:	d8c12017 	ldw	r3,1152(sp)
 8013890:	da000404 	addi	r8,sp,16
 8013894:	003d0c06 	br	8012cc8 <__alt_data_end+0xfc012cc8>
 8013898:	db012817 	ldw	r12,1184(sp)
 801389c:	d8c13117 	ldw	r3,1220(sp)
 80138a0:	60e5c83a 	sub	r18,r12,r3
 80138a4:	003adb06 	br	8012414 <__alt_data_end+0xfc012414>
 80138a8:	da013f15 	stw	r8,1276(sp)
 80138ac:	800e3c40 	call	800e3c4 <strlen>
 80138b0:	1025883a 	mov	r18,r2
 80138b4:	da013f17 	ldw	r8,1276(sp)
 80138b8:	903c8e0e 	bge	r18,zero,8012af4 <__alt_data_end+0xfc012af4>
 80138bc:	0005883a 	mov	r2,zero
 80138c0:	003c8c06 	br	8012af4 <__alt_data_end+0xfc012af4>
 80138c4:	b009883a 	mov	r4,r22
 80138c8:	b80b883a 	mov	r5,r23
 80138cc:	d9811e04 	addi	r6,sp,1144
 80138d0:	8019c500 	call	8019c50 <__sprint_r>
 80138d4:	103a571e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 80138d8:	d8c12017 	ldw	r3,1152(sp)
 80138dc:	d8811f17 	ldw	r2,1148(sp)
 80138e0:	da000404 	addi	r8,sp,16
 80138e4:	db013317 	ldw	r12,1228(sp)
 80138e8:	dac13117 	ldw	r11,1220(sp)
 80138ec:	10800044 	addi	r2,r2,1
 80138f0:	60c7883a 	add	r3,r12,r3
 80138f4:	42c00015 	stw	r11,0(r8)
 80138f8:	43000115 	stw	r12,4(r8)
 80138fc:	d8c12015 	stw	r3,1152(sp)
 8013900:	d8811f15 	stw	r2,1148(sp)
 8013904:	010001c4 	movi	r4,7
 8013908:	20bb590e 	bge	r4,r2,8012670 <__alt_data_end+0xfc012670>
 801390c:	003d7e06 	br	8012f08 <__alt_data_end+0xfc012f08>
 8013910:	010200f4 	movhi	r4,2051
 8013914:	212b2784 	addi	r4,r4,-21346
 8013918:	d9013615 	stw	r4,1240(sp)
 801391c:	003af606 	br	80124f8 <__alt_data_end+0xfc0124f8>
 8013920:	d8812604 	addi	r2,sp,1176
 8013924:	d8800115 	stw	r2,4(sp)
 8013928:	d9413717 	ldw	r5,1244(sp)
 801392c:	d8812504 	addi	r2,sp,1172
 8013930:	d8800215 	stw	r2,8(sp)
 8013934:	d8812104 	addi	r2,sp,1156
 8013938:	da400015 	stw	r9,0(sp)
 801393c:	d8800315 	stw	r2,12(sp)
 8013940:	b009883a 	mov	r4,r22
 8013944:	900d883a 	mov	r6,r18
 8013948:	01c000c4 	movi	r7,3
 801394c:	da013f15 	stw	r8,1276(sp)
 8013950:	da413e15 	stw	r9,1272(sp)
 8013954:	80141280 	call	8014128 <_dtoa_r>
 8013958:	da413e17 	ldw	r9,1272(sp)
 801395c:	da013f17 	ldw	r8,1276(sp)
 8013960:	d8813115 	stw	r2,1220(sp)
 8013964:	4839883a 	mov	fp,r9
 8013968:	dac13117 	ldw	r11,1220(sp)
 801396c:	00801184 	movi	r2,70
 8013970:	5f15883a 	add	r10,r11,fp
 8013974:	a8bef01e 	bne	r21,r2,8013538 <__alt_data_end+0xfc013538>
 8013978:	59000007 	ldb	r4,0(r11)
 801397c:	00800c04 	movi	r2,48
 8013980:	2080e026 	beq	r4,r2,8013d04 <___vfprintf_internal_r+0x1f2c>
 8013984:	d8c12617 	ldw	r3,1176(sp)
 8013988:	50d5883a 	add	r10,r10,r3
 801398c:	003eea06 	br	8013538 <__alt_data_end+0xfc013538>
 8013990:	0025883a 	mov	r18,zero
 8013994:	003db306 	br	8013064 <__alt_data_end+0xfc013064>
 8013998:	b009883a 	mov	r4,r22
 801399c:	b80b883a 	mov	r5,r23
 80139a0:	d9811e04 	addi	r6,sp,1144
 80139a4:	8019c500 	call	8019c50 <__sprint_r>
 80139a8:	103a221e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 80139ac:	d8c12017 	ldw	r3,1152(sp)
 80139b0:	da000404 	addi	r8,sp,16
 80139b4:	003daa06 	br	8013060 <__alt_data_end+0xfc013060>
 80139b8:	b009883a 	mov	r4,r22
 80139bc:	b80b883a 	mov	r5,r23
 80139c0:	d9811e04 	addi	r6,sp,1144
 80139c4:	8019c500 	call	8019c50 <__sprint_r>
 80139c8:	103a1a1e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 80139cc:	d8812617 	ldw	r2,1176(sp)
 80139d0:	d8c12017 	ldw	r3,1152(sp)
 80139d4:	da000404 	addi	r8,sp,16
 80139d8:	003e2c06 	br	801328c <__alt_data_end+0xfc01328c>
 80139dc:	030200f4 	movhi	r12,2051
 80139e0:	632b2384 	addi	r12,r12,-21362
 80139e4:	db012c15 	stw	r12,1200(sp)
 80139e8:	dac12c17 	ldw	r11,1200(sp)
 80139ec:	1c07883a 	add	r3,r3,r16
 80139f0:	10800044 	addi	r2,r2,1
 80139f4:	42c00015 	stw	r11,0(r8)
 80139f8:	44000115 	stw	r16,4(r8)
 80139fc:	d8c12015 	stw	r3,1152(sp)
 8013a00:	d8811f15 	stw	r2,1148(sp)
 8013a04:	010001c4 	movi	r4,7
 8013a08:	20bfae16 	blt	r4,r2,80138c4 <__alt_data_end+0xfc0138c4>
 8013a0c:	42000204 	addi	r8,r8,8
 8013a10:	003fb406 	br	80138e4 <__alt_data_end+0xfc0138e4>
 8013a14:	030200f4 	movhi	r12,2051
 8013a18:	632b2784 	addi	r12,r12,-21346
 8013a1c:	db013615 	stw	r12,1240(sp)
 8013a20:	003b3806 	br	8012704 <__alt_data_end+0xfc012704>
 8013a24:	b009883a 	mov	r4,r22
 8013a28:	b80b883a 	mov	r5,r23
 8013a2c:	d9811e04 	addi	r6,sp,1144
 8013a30:	8019c500 	call	8019c50 <__sprint_r>
 8013a34:	1039ff1e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 8013a38:	d8812617 	ldw	r2,1176(sp)
 8013a3c:	db013317 	ldw	r12,1228(sp)
 8013a40:	d8c12017 	ldw	r3,1152(sp)
 8013a44:	da000404 	addi	r8,sp,16
 8013a48:	6085c83a 	sub	r2,r12,r2
 8013a4c:	003e2006 	br	80132d0 <__alt_data_end+0xfc0132d0>
 8013a50:	0021883a 	mov	r16,zero
 8013a54:	003e1f06 	br	80132d4 <__alt_data_end+0xfc0132d4>
 8013a58:	00800184 	movi	r2,6
 8013a5c:	1240012e 	bgeu	r2,r9,8013a64 <___vfprintf_internal_r+0x1c8c>
 8013a60:	1013883a 	mov	r9,r2
 8013a64:	4825883a 	mov	r18,r9
 8013a68:	4805883a 	mov	r2,r9
 8013a6c:	48009e16 	blt	r9,zero,8013ce8 <___vfprintf_internal_r+0x1f10>
 8013a70:	d8812b15 	stw	r2,1196(sp)
 8013a74:	008200f4 	movhi	r2,2051
 8013a78:	10ab1904 	addi	r2,r2,-21404
 8013a7c:	d8813115 	stw	r2,1220(sp)
 8013a80:	dcc12d15 	stw	r19,1204(sp)
 8013a84:	d8013215 	stw	zero,1224(sp)
 8013a88:	d8013415 	stw	zero,1232(sp)
 8013a8c:	0005883a 	mov	r2,zero
 8013a90:	003a6c06 	br	8012444 <__alt_data_end+0xfc012444>
 8013a94:	008200f4 	movhi	r2,2051
 8013a98:	10ab0e04 	addi	r2,r2,-21448
 8013a9c:	d8813115 	stw	r2,1220(sp)
 8013aa0:	003f4c06 	br	80137d4 <__alt_data_end+0xfc0137d4>
 8013aa4:	00c00b44 	movi	r3,45
 8013aa8:	d8812b15 	stw	r2,1196(sp)
 8013aac:	dc412d17 	ldw	r17,1204(sp)
 8013ab0:	d8c12785 	stb	r3,1182(sp)
 8013ab4:	dcc12d15 	stw	r19,1204(sp)
 8013ab8:	d8013215 	stw	zero,1224(sp)
 8013abc:	00800b44 	movi	r2,45
 8013ac0:	003a5d06 	br	8012438 <__alt_data_end+0xfc012438>
 8013ac4:	d8c12617 	ldw	r3,1176(sp)
 8013ac8:	00bfff44 	movi	r2,-3
 8013acc:	18800d16 	blt	r3,r2,8013b04 <___vfprintf_internal_r+0x1d2c>
 8013ad0:	48c00c16 	blt	r9,r3,8013b04 <___vfprintf_internal_r+0x1d2c>
 8013ad4:	d8c13415 	stw	r3,1232(sp)
 8013ad8:	040019c4 	movi	r16,103
 8013adc:	003eb506 	br	80135b4 <__alt_data_end+0xfc0135b4>
 8013ae0:	05400b44 	movi	r21,45
 8013ae4:	dd412785 	stb	r21,1182(sp)
 8013ae8:	003a0f06 	br	8012328 <__alt_data_end+0xfc012328>
 8013aec:	010200f4 	movhi	r4,2051
 8013af0:	212b2384 	addi	r4,r4,-21362
 8013af4:	d9012c15 	stw	r4,1200(sp)
 8013af8:	003cb106 	br	8012dc0 <__alt_data_end+0xfc012dc0>
 8013afc:	5005883a 	mov	r2,r10
 8013b00:	003ea106 	br	8013588 <__alt_data_end+0xfc013588>
 8013b04:	843fff84 	addi	r16,r16,-2
 8013b08:	1f3fffc4 	addi	fp,r3,-1
 8013b0c:	df012615 	stw	fp,1176(sp)
 8013b10:	dc0122c5 	stb	r16,1163(sp)
 8013b14:	e0009516 	blt	fp,zero,8013d6c <___vfprintf_internal_r+0x1f94>
 8013b18:	00800ac4 	movi	r2,43
 8013b1c:	d8812305 	stb	r2,1164(sp)
 8013b20:	00800244 	movi	r2,9
 8013b24:	1700690e 	bge	r2,fp,8013ccc <___vfprintf_internal_r+0x1ef4>
 8013b28:	dd4122c4 	addi	r21,sp,1163
 8013b2c:	dc012c15 	stw	r16,1200(sp)
 8013b30:	8825883a 	mov	r18,r17
 8013b34:	a821883a 	mov	r16,r21
 8013b38:	4023883a 	mov	r17,r8
 8013b3c:	e009883a 	mov	r4,fp
 8013b40:	01400284 	movi	r5,10
 8013b44:	800a95c0 	call	800a95c <__modsi3>
 8013b48:	10800c04 	addi	r2,r2,48
 8013b4c:	843fffc4 	addi	r16,r16,-1
 8013b50:	e009883a 	mov	r4,fp
 8013b54:	01400284 	movi	r5,10
 8013b58:	80800005 	stb	r2,0(r16)
 8013b5c:	800a9080 	call	800a908 <__divsi3>
 8013b60:	1039883a 	mov	fp,r2
 8013b64:	00800244 	movi	r2,9
 8013b68:	173ff416 	blt	r2,fp,8013b3c <__alt_data_end+0xfc013b3c>
 8013b6c:	8811883a 	mov	r8,r17
 8013b70:	e0800c04 	addi	r2,fp,48
 8013b74:	9023883a 	mov	r17,r18
 8013b78:	8025883a 	mov	r18,r16
 8013b7c:	913fffc4 	addi	r4,r18,-1
 8013b80:	90bfffc5 	stb	r2,-1(r18)
 8013b84:	dc012c17 	ldw	r16,1200(sp)
 8013b88:	25408e2e 	bgeu	r4,r21,8013dc4 <___vfprintf_internal_r+0x1fec>
 8013b8c:	d9412384 	addi	r5,sp,1166
 8013b90:	2c8bc83a 	sub	r5,r5,r18
 8013b94:	d8c12344 	addi	r3,sp,1165
 8013b98:	a94b883a 	add	r5,r21,r5
 8013b9c:	00000106 	br	8013ba4 <___vfprintf_internal_r+0x1dcc>
 8013ba0:	20800003 	ldbu	r2,0(r4)
 8013ba4:	18800005 	stb	r2,0(r3)
 8013ba8:	18c00044 	addi	r3,r3,1
 8013bac:	21000044 	addi	r4,r4,1
 8013bb0:	197ffb1e 	bne	r3,r5,8013ba0 <__alt_data_end+0xfc013ba0>
 8013bb4:	d8812304 	addi	r2,sp,1164
 8013bb8:	1485c83a 	sub	r2,r2,r18
 8013bbc:	d8c12344 	addi	r3,sp,1165
 8013bc0:	1885883a 	add	r2,r3,r2
 8013bc4:	dac13317 	ldw	r11,1228(sp)
 8013bc8:	156bc83a 	sub	r21,r2,r21
 8013bcc:	dd413a15 	stw	r21,1256(sp)
 8013bd0:	00800044 	movi	r2,1
 8013bd4:	5d65883a 	add	r18,r11,r21
 8013bd8:	12c0770e 	bge	r2,r11,8013db8 <___vfprintf_internal_r+0x1fe0>
 8013bdc:	94800044 	addi	r18,r18,1
 8013be0:	9005883a 	mov	r2,r18
 8013be4:	90007216 	blt	r18,zero,8013db0 <___vfprintf_internal_r+0x1fd8>
 8013be8:	d8013415 	stw	zero,1232(sp)
 8013bec:	003e7906 	br	80135d4 <__alt_data_end+0xfc0135d4>
 8013bf0:	da412b15 	stw	r9,1196(sp)
 8013bf4:	dd412783 	ldbu	r21,1182(sp)
 8013bf8:	4825883a 	mov	r18,r9
 8013bfc:	dcc12d15 	stw	r19,1204(sp)
 8013c00:	d8013215 	stw	zero,1224(sp)
 8013c04:	d8013415 	stw	zero,1232(sp)
 8013c08:	003a0706 	br	8012428 <__alt_data_end+0xfc012428>
 8013c0c:	b009883a 	mov	r4,r22
 8013c10:	b80b883a 	mov	r5,r23
 8013c14:	d9811e04 	addi	r6,sp,1144
 8013c18:	8019c500 	call	8019c50 <__sprint_r>
 8013c1c:	1039851e 	bne	r2,zero,8012234 <__alt_data_end+0xfc012234>
 8013c20:	dc012617 	ldw	r16,1176(sp)
 8013c24:	d8c12017 	ldw	r3,1152(sp)
 8013c28:	d8811f17 	ldw	r2,1148(sp)
 8013c2c:	da000404 	addi	r8,sp,16
 8013c30:	003ec706 	br	8013750 <__alt_data_end+0xfc013750>
 8013c34:	483e1a1e 	bne	r9,zero,80134a0 <__alt_data_end+0xfc0134a0>
 8013c38:	9013883a 	mov	r9,r18
 8013c3c:	003e1806 	br	80134a0 <__alt_data_end+0xfc0134a0>
 8013c40:	00c00b44 	movi	r3,45
 8013c44:	64a0003c 	xorhi	r18,r12,32768
 8013c48:	d8c12b05 	stb	r3,1196(sp)
 8013c4c:	003e1a06 	br	80134b8 <__alt_data_end+0xfc0134b8>
 8013c50:	4f000044 	addi	fp,r9,1
 8013c54:	003e1f06 	br	80134d4 <__alt_data_end+0xfc0134d4>
 8013c58:	02400184 	movi	r9,6
 8013c5c:	003e1006 	br	80134a0 <__alt_data_end+0xfc0134a0>
 8013c60:	d8c13417 	ldw	r3,1232(sp)
 8013c64:	00c04b0e 	bge	zero,r3,8013d94 <___vfprintf_internal_r+0x1fbc>
 8013c68:	04800044 	movi	r18,1
 8013c6c:	dac13317 	ldw	r11,1228(sp)
 8013c70:	92e5883a 	add	r18,r18,r11
 8013c74:	9005883a 	mov	r2,r18
 8013c78:	903e560e 	bge	r18,zero,80135d4 <__alt_data_end+0xfc0135d4>
 8013c7c:	0005883a 	mov	r2,zero
 8013c80:	003e5406 	br	80135d4 <__alt_data_end+0xfc0135d4>
 8013c84:	d8c12617 	ldw	r3,1176(sp)
 8013c88:	d8c13415 	stw	r3,1232(sp)
 8013c8c:	00c03b0e 	bge	zero,r3,8013d7c <___vfprintf_internal_r+0x1fa4>
 8013c90:	4800081e 	bne	r9,zero,8013cb4 <___vfprintf_internal_r+0x1edc>
 8013c94:	8c40004c 	andi	r17,r17,1
 8013c98:	8800061e 	bne	r17,zero,8013cb4 <___vfprintf_internal_r+0x1edc>
 8013c9c:	1805883a 	mov	r2,r3
 8013ca0:	183e4b0e 	bge	r3,zero,80135d0 <__alt_data_end+0xfc0135d0>
 8013ca4:	0005883a 	mov	r2,zero
 8013ca8:	003e4906 	br	80135d0 <__alt_data_end+0xfc0135d0>
 8013cac:	d8812117 	ldw	r2,1156(sp)
 8013cb0:	003e3506 	br	8013588 <__alt_data_end+0xfc013588>
 8013cb4:	dac13417 	ldw	r11,1232(sp)
 8013cb8:	4a400044 	addi	r9,r9,1
 8013cbc:	5a65883a 	add	r18,r11,r9
 8013cc0:	9005883a 	mov	r2,r18
 8013cc4:	903e430e 	bge	r18,zero,80135d4 <__alt_data_end+0xfc0135d4>
 8013cc8:	003fec06 	br	8013c7c <__alt_data_end+0xfc013c7c>
 8013ccc:	00800c04 	movi	r2,48
 8013cd0:	e0c00c04 	addi	r3,fp,48
 8013cd4:	d8812345 	stb	r2,1165(sp)
 8013cd8:	d8c12385 	stb	r3,1166(sp)
 8013cdc:	d88123c4 	addi	r2,sp,1167
 8013ce0:	dd4122c4 	addi	r21,sp,1163
 8013ce4:	003fb706 	br	8013bc4 <__alt_data_end+0xfc013bc4>
 8013ce8:	0005883a 	mov	r2,zero
 8013cec:	003f6006 	br	8013a70 <__alt_data_end+0xfc013a70>
 8013cf0:	db013417 	ldw	r12,1232(sp)
 8013cf4:	64800044 	addi	r18,r12,1
 8013cf8:	9005883a 	mov	r2,r18
 8013cfc:	903e350e 	bge	r18,zero,80135d4 <__alt_data_end+0xfc0135d4>
 8013d00:	003fde06 	br	8013c7c <__alt_data_end+0xfc013c7c>
 8013d04:	d9013717 	ldw	r4,1244(sp)
 8013d08:	900b883a 	mov	r5,r18
 8013d0c:	000d883a 	mov	r6,zero
 8013d10:	000f883a 	mov	r7,zero
 8013d14:	da013f15 	stw	r8,1276(sp)
 8013d18:	da413e15 	stw	r9,1272(sp)
 8013d1c:	da813d15 	stw	r10,1268(sp)
 8013d20:	800c0100 	call	800c010 <__eqdf2>
 8013d24:	da013f17 	ldw	r8,1276(sp)
 8013d28:	da413e17 	ldw	r9,1272(sp)
 8013d2c:	da813d17 	ldw	r10,1268(sp)
 8013d30:	103f1426 	beq	r2,zero,8013984 <__alt_data_end+0xfc013984>
 8013d34:	00800044 	movi	r2,1
 8013d38:	1707c83a 	sub	r3,r2,fp
 8013d3c:	d8c12615 	stw	r3,1176(sp)
 8013d40:	003f1106 	br	8013988 <__alt_data_end+0xfc013988>
 8013d44:	dac12d17 	ldw	r11,1204(sp)
 8013d48:	5a400017 	ldw	r9,0(r11)
 8013d4c:	5ac00104 	addi	r11,r11,4
 8013d50:	dac12d15 	stw	r11,1204(sp)
 8013d54:	483ec60e 	bge	r9,zero,8013870 <__alt_data_end+0xfc013870>
 8013d58:	027fffc4 	movi	r9,-1
 8013d5c:	1c000047 	ldb	r16,1(r3)
 8013d60:	00388406 	br	8011f74 <__alt_data_end+0xfc011f74>
 8013d64:	043fffc4 	movi	r16,-1
 8013d68:	00391006 	br	80121ac <__alt_data_end+0xfc0121ac>
 8013d6c:	00800b44 	movi	r2,45
 8013d70:	0739c83a 	sub	fp,zero,fp
 8013d74:	d8812305 	stb	r2,1164(sp)
 8013d78:	003f6906 	br	8013b20 <__alt_data_end+0xfc013b20>
 8013d7c:	4800081e 	bne	r9,zero,8013da0 <___vfprintf_internal_r+0x1fc8>
 8013d80:	8c40004c 	andi	r17,r17,1
 8013d84:	8800061e 	bne	r17,zero,8013da0 <___vfprintf_internal_r+0x1fc8>
 8013d88:	00800044 	movi	r2,1
 8013d8c:	1025883a 	mov	r18,r2
 8013d90:	003e1006 	br	80135d4 <__alt_data_end+0xfc0135d4>
 8013d94:	04800084 	movi	r18,2
 8013d98:	90e5c83a 	sub	r18,r18,r3
 8013d9c:	003fb306 	br	8013c6c <__alt_data_end+0xfc013c6c>
 8013da0:	4c800084 	addi	r18,r9,2
 8013da4:	9005883a 	mov	r2,r18
 8013da8:	903e0a0e 	bge	r18,zero,80135d4 <__alt_data_end+0xfc0135d4>
 8013dac:	003fb306 	br	8013c7c <__alt_data_end+0xfc013c7c>
 8013db0:	0005883a 	mov	r2,zero
 8013db4:	003f8c06 	br	8013be8 <__alt_data_end+0xfc013be8>
 8013db8:	88a2703a 	and	r17,r17,r2
 8013dbc:	883f8826 	beq	r17,zero,8013be0 <__alt_data_end+0xfc013be0>
 8013dc0:	003f8606 	br	8013bdc <__alt_data_end+0xfc013bdc>
 8013dc4:	d8812344 	addi	r2,sp,1165
 8013dc8:	003f7e06 	br	8013bc4 <__alt_data_end+0xfc013bc4>
 8013dcc:	d8c12617 	ldw	r3,1176(sp)
 8013dd0:	003f4d06 	br	8013b08 <__alt_data_end+0xfc013b08>

08013dd4 <__vfprintf_internal>:
 8013dd4:	2007883a 	mov	r3,r4
 8013dd8:	010200f4 	movhi	r4,2051
 8013ddc:	21331604 	addi	r4,r4,-13224
 8013de0:	21000017 	ldw	r4,0(r4)
 8013de4:	2805883a 	mov	r2,r5
 8013de8:	300f883a 	mov	r7,r6
 8013dec:	180b883a 	mov	r5,r3
 8013df0:	100d883a 	mov	r6,r2
 8013df4:	8011dd81 	jmpi	8011dd8 <___vfprintf_internal_r>

08013df8 <__swsetup_r>:
 8013df8:	008200f4 	movhi	r2,2051
 8013dfc:	defffd04 	addi	sp,sp,-12
 8013e00:	10b31604 	addi	r2,r2,-13224
 8013e04:	dc400115 	stw	r17,4(sp)
 8013e08:	2023883a 	mov	r17,r4
 8013e0c:	11000017 	ldw	r4,0(r2)
 8013e10:	dc000015 	stw	r16,0(sp)
 8013e14:	dfc00215 	stw	ra,8(sp)
 8013e18:	2821883a 	mov	r16,r5
 8013e1c:	20000226 	beq	r4,zero,8013e28 <__swsetup_r+0x30>
 8013e20:	20c00e17 	ldw	r3,56(r4)
 8013e24:	18002e26 	beq	r3,zero,8013ee0 <__swsetup_r+0xe8>
 8013e28:	8080030b 	ldhu	r2,12(r16)
 8013e2c:	10c0020c 	andi	r3,r2,8
 8013e30:	100d883a 	mov	r6,r2
 8013e34:	18000f26 	beq	r3,zero,8013e74 <__swsetup_r+0x7c>
 8013e38:	80c00417 	ldw	r3,16(r16)
 8013e3c:	18001526 	beq	r3,zero,8013e94 <__swsetup_r+0x9c>
 8013e40:	1100004c 	andi	r4,r2,1
 8013e44:	20001c1e 	bne	r4,zero,8013eb8 <__swsetup_r+0xc0>
 8013e48:	1080008c 	andi	r2,r2,2
 8013e4c:	1000261e 	bne	r2,zero,8013ee8 <__swsetup_r+0xf0>
 8013e50:	80800517 	ldw	r2,20(r16)
 8013e54:	80800215 	stw	r2,8(r16)
 8013e58:	18001c26 	beq	r3,zero,8013ecc <__swsetup_r+0xd4>
 8013e5c:	0005883a 	mov	r2,zero
 8013e60:	dfc00217 	ldw	ra,8(sp)
 8013e64:	dc400117 	ldw	r17,4(sp)
 8013e68:	dc000017 	ldw	r16,0(sp)
 8013e6c:	dec00304 	addi	sp,sp,12
 8013e70:	f800283a 	ret
 8013e74:	3080040c 	andi	r2,r6,16
 8013e78:	10001726 	beq	r2,zero,8013ed8 <__swsetup_r+0xe0>
 8013e7c:	3080010c 	andi	r2,r6,4
 8013e80:	10001b1e 	bne	r2,zero,8013ef0 <__swsetup_r+0xf8>
 8013e84:	80c00417 	ldw	r3,16(r16)
 8013e88:	30800214 	ori	r2,r6,8
 8013e8c:	8080030d 	sth	r2,12(r16)
 8013e90:	183feb1e 	bne	r3,zero,8013e40 <__alt_data_end+0xfc013e40>
 8013e94:	1140a00c 	andi	r5,r2,640
 8013e98:	01008004 	movi	r4,512
 8013e9c:	293fe826 	beq	r5,r4,8013e40 <__alt_data_end+0xfc013e40>
 8013ea0:	8809883a 	mov	r4,r17
 8013ea4:	800b883a 	mov	r5,r16
 8013ea8:	80171380 	call	8017138 <__smakebuf_r>
 8013eac:	8080030b 	ldhu	r2,12(r16)
 8013eb0:	80c00417 	ldw	r3,16(r16)
 8013eb4:	003fe206 	br	8013e40 <__alt_data_end+0xfc013e40>
 8013eb8:	80800517 	ldw	r2,20(r16)
 8013ebc:	80000215 	stw	zero,8(r16)
 8013ec0:	0085c83a 	sub	r2,zero,r2
 8013ec4:	80800615 	stw	r2,24(r16)
 8013ec8:	183fe41e 	bne	r3,zero,8013e5c <__alt_data_end+0xfc013e5c>
 8013ecc:	8080030b 	ldhu	r2,12(r16)
 8013ed0:	1080200c 	andi	r2,r2,128
 8013ed4:	103fe226 	beq	r2,zero,8013e60 <__alt_data_end+0xfc013e60>
 8013ed8:	00bfffc4 	movi	r2,-1
 8013edc:	003fe006 	br	8013e60 <__alt_data_end+0xfc013e60>
 8013ee0:	8015df80 	call	8015df8 <__sinit>
 8013ee4:	003fd006 	br	8013e28 <__alt_data_end+0xfc013e28>
 8013ee8:	0005883a 	mov	r2,zero
 8013eec:	003fd906 	br	8013e54 <__alt_data_end+0xfc013e54>
 8013ef0:	81400c17 	ldw	r5,48(r16)
 8013ef4:	28000626 	beq	r5,zero,8013f10 <__swsetup_r+0x118>
 8013ef8:	80801004 	addi	r2,r16,64
 8013efc:	28800326 	beq	r5,r2,8013f0c <__swsetup_r+0x114>
 8013f00:	8809883a 	mov	r4,r17
 8013f04:	8015f6c0 	call	8015f6c <_free_r>
 8013f08:	8180030b 	ldhu	r6,12(r16)
 8013f0c:	80000c15 	stw	zero,48(r16)
 8013f10:	80c00417 	ldw	r3,16(r16)
 8013f14:	00bff6c4 	movi	r2,-37
 8013f18:	118c703a 	and	r6,r2,r6
 8013f1c:	80000115 	stw	zero,4(r16)
 8013f20:	80c00015 	stw	r3,0(r16)
 8013f24:	003fd806 	br	8013e88 <__alt_data_end+0xfc013e88>

08013f28 <quorem>:
 8013f28:	defff704 	addi	sp,sp,-36
 8013f2c:	dc800215 	stw	r18,8(sp)
 8013f30:	20800417 	ldw	r2,16(r4)
 8013f34:	2c800417 	ldw	r18,16(r5)
 8013f38:	dfc00815 	stw	ra,32(sp)
 8013f3c:	ddc00715 	stw	r23,28(sp)
 8013f40:	dd800615 	stw	r22,24(sp)
 8013f44:	dd400515 	stw	r21,20(sp)
 8013f48:	dd000415 	stw	r20,16(sp)
 8013f4c:	dcc00315 	stw	r19,12(sp)
 8013f50:	dc400115 	stw	r17,4(sp)
 8013f54:	dc000015 	stw	r16,0(sp)
 8013f58:	14807116 	blt	r2,r18,8014120 <quorem+0x1f8>
 8013f5c:	94bfffc4 	addi	r18,r18,-1
 8013f60:	94ad883a 	add	r22,r18,r18
 8013f64:	b5ad883a 	add	r22,r22,r22
 8013f68:	2c400504 	addi	r17,r5,20
 8013f6c:	8da9883a 	add	r20,r17,r22
 8013f70:	25400504 	addi	r21,r4,20
 8013f74:	282f883a 	mov	r23,r5
 8013f78:	adad883a 	add	r22,r21,r22
 8013f7c:	a1400017 	ldw	r5,0(r20)
 8013f80:	2021883a 	mov	r16,r4
 8013f84:	b1000017 	ldw	r4,0(r22)
 8013f88:	29400044 	addi	r5,r5,1
 8013f8c:	800a9b80 	call	800a9b8 <__udivsi3>
 8013f90:	1027883a 	mov	r19,r2
 8013f94:	10002c26 	beq	r2,zero,8014048 <quorem+0x120>
 8013f98:	a813883a 	mov	r9,r21
 8013f9c:	8811883a 	mov	r8,r17
 8013fa0:	0009883a 	mov	r4,zero
 8013fa4:	000d883a 	mov	r6,zero
 8013fa8:	41c00017 	ldw	r7,0(r8)
 8013fac:	49400017 	ldw	r5,0(r9)
 8013fb0:	42000104 	addi	r8,r8,4
 8013fb4:	38bfffcc 	andi	r2,r7,65535
 8013fb8:	14c5383a 	mul	r2,r2,r19
 8013fbc:	380ed43a 	srli	r7,r7,16
 8013fc0:	28ffffcc 	andi	r3,r5,65535
 8013fc4:	2085883a 	add	r2,r4,r2
 8013fc8:	1008d43a 	srli	r4,r2,16
 8013fcc:	3ccf383a 	mul	r7,r7,r19
 8013fd0:	198d883a 	add	r6,r3,r6
 8013fd4:	10ffffcc 	andi	r3,r2,65535
 8013fd8:	30c7c83a 	sub	r3,r6,r3
 8013fdc:	280ad43a 	srli	r5,r5,16
 8013fe0:	21c9883a 	add	r4,r4,r7
 8013fe4:	180dd43a 	srai	r6,r3,16
 8013fe8:	20bfffcc 	andi	r2,r4,65535
 8013fec:	288bc83a 	sub	r5,r5,r2
 8013ff0:	298b883a 	add	r5,r5,r6
 8013ff4:	280e943a 	slli	r7,r5,16
 8013ff8:	18ffffcc 	andi	r3,r3,65535
 8013ffc:	2008d43a 	srli	r4,r4,16
 8014000:	38ceb03a 	or	r7,r7,r3
 8014004:	49c00015 	stw	r7,0(r9)
 8014008:	280dd43a 	srai	r6,r5,16
 801400c:	4a400104 	addi	r9,r9,4
 8014010:	a23fe52e 	bgeu	r20,r8,8013fa8 <__alt_data_end+0xfc013fa8>
 8014014:	b0800017 	ldw	r2,0(r22)
 8014018:	10000b1e 	bne	r2,zero,8014048 <quorem+0x120>
 801401c:	b0bfff04 	addi	r2,r22,-4
 8014020:	a880082e 	bgeu	r21,r2,8014044 <quorem+0x11c>
 8014024:	b0ffff17 	ldw	r3,-4(r22)
 8014028:	18000326 	beq	r3,zero,8014038 <quorem+0x110>
 801402c:	00000506 	br	8014044 <quorem+0x11c>
 8014030:	10c00017 	ldw	r3,0(r2)
 8014034:	1800031e 	bne	r3,zero,8014044 <quorem+0x11c>
 8014038:	10bfff04 	addi	r2,r2,-4
 801403c:	94bfffc4 	addi	r18,r18,-1
 8014040:	a8bffb36 	bltu	r21,r2,8014030 <__alt_data_end+0xfc014030>
 8014044:	84800415 	stw	r18,16(r16)
 8014048:	8009883a 	mov	r4,r16
 801404c:	b80b883a 	mov	r5,r23
 8014050:	8017ef40 	call	8017ef4 <__mcmp>
 8014054:	10002616 	blt	r2,zero,80140f0 <quorem+0x1c8>
 8014058:	9cc00044 	addi	r19,r19,1
 801405c:	a80d883a 	mov	r6,r21
 8014060:	000b883a 	mov	r5,zero
 8014064:	31000017 	ldw	r4,0(r6)
 8014068:	88800017 	ldw	r2,0(r17)
 801406c:	31800104 	addi	r6,r6,4
 8014070:	20ffffcc 	andi	r3,r4,65535
 8014074:	194b883a 	add	r5,r3,r5
 8014078:	10ffffcc 	andi	r3,r2,65535
 801407c:	28c7c83a 	sub	r3,r5,r3
 8014080:	1004d43a 	srli	r2,r2,16
 8014084:	2008d43a 	srli	r4,r4,16
 8014088:	180bd43a 	srai	r5,r3,16
 801408c:	18ffffcc 	andi	r3,r3,65535
 8014090:	2089c83a 	sub	r4,r4,r2
 8014094:	2149883a 	add	r4,r4,r5
 8014098:	2004943a 	slli	r2,r4,16
 801409c:	8c400104 	addi	r17,r17,4
 80140a0:	200bd43a 	srai	r5,r4,16
 80140a4:	10c6b03a 	or	r3,r2,r3
 80140a8:	30ffff15 	stw	r3,-4(r6)
 80140ac:	a47fed2e 	bgeu	r20,r17,8014064 <__alt_data_end+0xfc014064>
 80140b0:	9485883a 	add	r2,r18,r18
 80140b4:	1085883a 	add	r2,r2,r2
 80140b8:	a887883a 	add	r3,r21,r2
 80140bc:	18800017 	ldw	r2,0(r3)
 80140c0:	10000b1e 	bne	r2,zero,80140f0 <quorem+0x1c8>
 80140c4:	18bfff04 	addi	r2,r3,-4
 80140c8:	a880082e 	bgeu	r21,r2,80140ec <quorem+0x1c4>
 80140cc:	18ffff17 	ldw	r3,-4(r3)
 80140d0:	18000326 	beq	r3,zero,80140e0 <quorem+0x1b8>
 80140d4:	00000506 	br	80140ec <quorem+0x1c4>
 80140d8:	10c00017 	ldw	r3,0(r2)
 80140dc:	1800031e 	bne	r3,zero,80140ec <quorem+0x1c4>
 80140e0:	10bfff04 	addi	r2,r2,-4
 80140e4:	94bfffc4 	addi	r18,r18,-1
 80140e8:	a8bffb36 	bltu	r21,r2,80140d8 <__alt_data_end+0xfc0140d8>
 80140ec:	84800415 	stw	r18,16(r16)
 80140f0:	9805883a 	mov	r2,r19
 80140f4:	dfc00817 	ldw	ra,32(sp)
 80140f8:	ddc00717 	ldw	r23,28(sp)
 80140fc:	dd800617 	ldw	r22,24(sp)
 8014100:	dd400517 	ldw	r21,20(sp)
 8014104:	dd000417 	ldw	r20,16(sp)
 8014108:	dcc00317 	ldw	r19,12(sp)
 801410c:	dc800217 	ldw	r18,8(sp)
 8014110:	dc400117 	ldw	r17,4(sp)
 8014114:	dc000017 	ldw	r16,0(sp)
 8014118:	dec00904 	addi	sp,sp,36
 801411c:	f800283a 	ret
 8014120:	0005883a 	mov	r2,zero
 8014124:	003ff306 	br	80140f4 <__alt_data_end+0xfc0140f4>

08014128 <_dtoa_r>:
 8014128:	20801017 	ldw	r2,64(r4)
 801412c:	deffde04 	addi	sp,sp,-136
 8014130:	dd401d15 	stw	r21,116(sp)
 8014134:	dcc01b15 	stw	r19,108(sp)
 8014138:	dc801a15 	stw	r18,104(sp)
 801413c:	dc401915 	stw	r17,100(sp)
 8014140:	dc001815 	stw	r16,96(sp)
 8014144:	dfc02115 	stw	ra,132(sp)
 8014148:	df002015 	stw	fp,128(sp)
 801414c:	ddc01f15 	stw	r23,124(sp)
 8014150:	dd801e15 	stw	r22,120(sp)
 8014154:	dd001c15 	stw	r20,112(sp)
 8014158:	d9c00315 	stw	r7,12(sp)
 801415c:	2021883a 	mov	r16,r4
 8014160:	302b883a 	mov	r21,r6
 8014164:	2825883a 	mov	r18,r5
 8014168:	dc402417 	ldw	r17,144(sp)
 801416c:	3027883a 	mov	r19,r6
 8014170:	10000826 	beq	r2,zero,8014194 <_dtoa_r+0x6c>
 8014174:	21801117 	ldw	r6,68(r4)
 8014178:	00c00044 	movi	r3,1
 801417c:	100b883a 	mov	r5,r2
 8014180:	1986983a 	sll	r3,r3,r6
 8014184:	11800115 	stw	r6,4(r2)
 8014188:	10c00215 	stw	r3,8(r2)
 801418c:	80176dc0 	call	80176dc <_Bfree>
 8014190:	80001015 	stw	zero,64(r16)
 8014194:	a8002d16 	blt	r21,zero,801424c <_dtoa_r+0x124>
 8014198:	88000015 	stw	zero,0(r17)
 801419c:	a8dffc2c 	andhi	r3,r21,32752
 80141a0:	009ffc34 	movhi	r2,32752
 80141a4:	18801b26 	beq	r3,r2,8014214 <_dtoa_r+0xec>
 80141a8:	9009883a 	mov	r4,r18
 80141ac:	980b883a 	mov	r5,r19
 80141b0:	000d883a 	mov	r6,zero
 80141b4:	000f883a 	mov	r7,zero
 80141b8:	800c0100 	call	800c010 <__eqdf2>
 80141bc:	10002a1e 	bne	r2,zero,8014268 <_dtoa_r+0x140>
 80141c0:	d8c02317 	ldw	r3,140(sp)
 80141c4:	d9002517 	ldw	r4,148(sp)
 80141c8:	00800044 	movi	r2,1
 80141cc:	18800015 	stw	r2,0(r3)
 80141d0:	2001a226 	beq	r4,zero,801485c <_dtoa_r+0x734>
 80141d4:	008200f4 	movhi	r2,2051
 80141d8:	10ab1b44 	addi	r2,r2,-21395
 80141dc:	20800015 	stw	r2,0(r4)
 80141e0:	10bfffc4 	addi	r2,r2,-1
 80141e4:	dfc02117 	ldw	ra,132(sp)
 80141e8:	df002017 	ldw	fp,128(sp)
 80141ec:	ddc01f17 	ldw	r23,124(sp)
 80141f0:	dd801e17 	ldw	r22,120(sp)
 80141f4:	dd401d17 	ldw	r21,116(sp)
 80141f8:	dd001c17 	ldw	r20,112(sp)
 80141fc:	dcc01b17 	ldw	r19,108(sp)
 8014200:	dc801a17 	ldw	r18,104(sp)
 8014204:	dc401917 	ldw	r17,100(sp)
 8014208:	dc001817 	ldw	r16,96(sp)
 801420c:	dec02204 	addi	sp,sp,136
 8014210:	f800283a 	ret
 8014214:	d8c02317 	ldw	r3,140(sp)
 8014218:	0089c3c4 	movi	r2,9999
 801421c:	18800015 	stw	r2,0(r3)
 8014220:	90017c26 	beq	r18,zero,8014814 <_dtoa_r+0x6ec>
 8014224:	008200f4 	movhi	r2,2051
 8014228:	10abcf04 	addi	r2,r2,-20676
 801422c:	d9002517 	ldw	r4,148(sp)
 8014230:	203fec26 	beq	r4,zero,80141e4 <__alt_data_end+0xfc0141e4>
 8014234:	10c000c7 	ldb	r3,3(r2)
 8014238:	18017d1e 	bne	r3,zero,8014830 <_dtoa_r+0x708>
 801423c:	10c000c4 	addi	r3,r2,3
 8014240:	d9802517 	ldw	r6,148(sp)
 8014244:	30c00015 	stw	r3,0(r6)
 8014248:	003fe606 	br	80141e4 <__alt_data_end+0xfc0141e4>
 801424c:	04e00034 	movhi	r19,32768
 8014250:	9cffffc4 	addi	r19,r19,-1
 8014254:	00800044 	movi	r2,1
 8014258:	ace6703a 	and	r19,r21,r19
 801425c:	88800015 	stw	r2,0(r17)
 8014260:	982b883a 	mov	r21,r19
 8014264:	003fcd06 	br	801419c <__alt_data_end+0xfc01419c>
 8014268:	d8800204 	addi	r2,sp,8
 801426c:	a822d53a 	srli	r17,r21,20
 8014270:	d8800015 	stw	r2,0(sp)
 8014274:	8009883a 	mov	r4,r16
 8014278:	900b883a 	mov	r5,r18
 801427c:	980d883a 	mov	r6,r19
 8014280:	d9c00104 	addi	r7,sp,4
 8014284:	80182680 	call	8018268 <__d2b>
 8014288:	1039883a 	mov	fp,r2
 801428c:	88016a1e 	bne	r17,zero,8014838 <_dtoa_r+0x710>
 8014290:	dd000217 	ldw	r20,8(sp)
 8014294:	dc400117 	ldw	r17,4(sp)
 8014298:	00befbc4 	movi	r2,-1041
 801429c:	a463883a 	add	r17,r20,r17
 80142a0:	8882ea16 	blt	r17,r2,8014e4c <_dtoa_r+0xd24>
 80142a4:	00bf0384 	movi	r2,-1010
 80142a8:	1445c83a 	sub	r2,r2,r17
 80142ac:	89010484 	addi	r4,r17,1042
 80142b0:	a8aa983a 	sll	r21,r21,r2
 80142b4:	9108d83a 	srl	r4,r18,r4
 80142b8:	a908b03a 	or	r4,r21,r4
 80142bc:	801d2680 	call	801d268 <__floatunsidf>
 80142c0:	017f8434 	movhi	r5,65040
 80142c4:	01800044 	movi	r6,1
 80142c8:	1009883a 	mov	r4,r2
 80142cc:	194b883a 	add	r5,r3,r5
 80142d0:	8c7fffc4 	addi	r17,r17,-1
 80142d4:	d9800f15 	stw	r6,60(sp)
 80142d8:	000d883a 	mov	r6,zero
 80142dc:	01cffe34 	movhi	r7,16376
 80142e0:	800c9780 	call	800c978 <__subdf3>
 80142e4:	0198dbf4 	movhi	r6,25455
 80142e8:	01cff4f4 	movhi	r7,16339
 80142ec:	1009883a 	mov	r4,r2
 80142f0:	180b883a 	mov	r5,r3
 80142f4:	3190d844 	addi	r6,r6,17249
 80142f8:	39e1e9c4 	addi	r7,r7,-30809
 80142fc:	800c2540 	call	800c254 <__muldf3>
 8014300:	01a2d874 	movhi	r6,35681
 8014304:	01cff1f4 	movhi	r7,16327
 8014308:	180b883a 	mov	r5,r3
 801430c:	31b22cc4 	addi	r6,r6,-14157
 8014310:	39e28a04 	addi	r7,r7,-30168
 8014314:	1009883a 	mov	r4,r2
 8014318:	800aea80 	call	800aea8 <__adddf3>
 801431c:	8809883a 	mov	r4,r17
 8014320:	102d883a 	mov	r22,r2
 8014324:	182b883a 	mov	r21,r3
 8014328:	800d2d00 	call	800d2d0 <__floatsidf>
 801432c:	019427f4 	movhi	r6,20639
 8014330:	01cff4f4 	movhi	r7,16339
 8014334:	1009883a 	mov	r4,r2
 8014338:	180b883a 	mov	r5,r3
 801433c:	319e7ec4 	addi	r6,r6,31227
 8014340:	39d104c4 	addi	r7,r7,17427
 8014344:	800c2540 	call	800c254 <__muldf3>
 8014348:	b009883a 	mov	r4,r22
 801434c:	a80b883a 	mov	r5,r21
 8014350:	100d883a 	mov	r6,r2
 8014354:	180f883a 	mov	r7,r3
 8014358:	800aea80 	call	800aea8 <__adddf3>
 801435c:	1009883a 	mov	r4,r2
 8014360:	180b883a 	mov	r5,r3
 8014364:	102d883a 	mov	r22,r2
 8014368:	182b883a 	mov	r21,r3
 801436c:	800d2480 	call	800d248 <__fixdfsi>
 8014370:	b009883a 	mov	r4,r22
 8014374:	a80b883a 	mov	r5,r21
 8014378:	000d883a 	mov	r6,zero
 801437c:	000f883a 	mov	r7,zero
 8014380:	d8800515 	stw	r2,20(sp)
 8014384:	800c1740 	call	800c174 <__ledf2>
 8014388:	10023116 	blt	r2,zero,8014c50 <_dtoa_r+0xb28>
 801438c:	d8c00517 	ldw	r3,20(sp)
 8014390:	00800584 	movi	r2,22
 8014394:	10c21f36 	bltu	r2,r3,8014c14 <_dtoa_r+0xaec>
 8014398:	180490fa 	slli	r2,r3,3
 801439c:	00c200f4 	movhi	r3,2051
 80143a0:	18ebf104 	addi	r3,r3,-20540
 80143a4:	1885883a 	add	r2,r3,r2
 80143a8:	11000017 	ldw	r4,0(r2)
 80143ac:	11400117 	ldw	r5,4(r2)
 80143b0:	900d883a 	mov	r6,r18
 80143b4:	980f883a 	mov	r7,r19
 80143b8:	800c0940 	call	800c094 <__gedf2>
 80143bc:	0082a70e 	bge	zero,r2,8014e5c <_dtoa_r+0xd34>
 80143c0:	d9000517 	ldw	r4,20(sp)
 80143c4:	d8000c15 	stw	zero,48(sp)
 80143c8:	213fffc4 	addi	r4,r4,-1
 80143cc:	d9000515 	stw	r4,20(sp)
 80143d0:	a463c83a 	sub	r17,r20,r17
 80143d4:	8dbfffc4 	addi	r22,r17,-1
 80143d8:	b0021916 	blt	r22,zero,8014c40 <_dtoa_r+0xb18>
 80143dc:	d8000815 	stw	zero,32(sp)
 80143e0:	d8800517 	ldw	r2,20(sp)
 80143e4:	10020e16 	blt	r2,zero,8014c20 <_dtoa_r+0xaf8>
 80143e8:	b0ad883a 	add	r22,r22,r2
 80143ec:	d8800a15 	stw	r2,40(sp)
 80143f0:	d8000915 	stw	zero,36(sp)
 80143f4:	d8c00317 	ldw	r3,12(sp)
 80143f8:	00800244 	movi	r2,9
 80143fc:	10c11a36 	bltu	r2,r3,8014868 <_dtoa_r+0x740>
 8014400:	00800144 	movi	r2,5
 8014404:	10c4fc0e 	bge	r2,r3,80157f8 <_dtoa_r+0x16d0>
 8014408:	18ffff04 	addi	r3,r3,-4
 801440c:	d8c00315 	stw	r3,12(sp)
 8014410:	0029883a 	mov	r20,zero
 8014414:	d9800317 	ldw	r6,12(sp)
 8014418:	008000c4 	movi	r2,3
 801441c:	3083bd26 	beq	r6,r2,8015314 <_dtoa_r+0x11ec>
 8014420:	1183670e 	bge	r2,r6,80151c0 <_dtoa_r+0x1098>
 8014424:	d8c00317 	ldw	r3,12(sp)
 8014428:	00800104 	movi	r2,4
 801442c:	1882e726 	beq	r3,r2,8014fcc <_dtoa_r+0xea4>
 8014430:	00800144 	movi	r2,5
 8014434:	1884f21e 	bne	r3,r2,8015800 <_dtoa_r+0x16d8>
 8014438:	00800044 	movi	r2,1
 801443c:	d8800b15 	stw	r2,44(sp)
 8014440:	d8c02217 	ldw	r3,136(sp)
 8014444:	d9000517 	ldw	r4,20(sp)
 8014448:	1907883a 	add	r3,r3,r4
 801444c:	19800044 	addi	r6,r3,1
 8014450:	d8c00d15 	stw	r3,52(sp)
 8014454:	d9800615 	stw	r6,24(sp)
 8014458:	0183c30e 	bge	zero,r6,8015368 <_dtoa_r+0x1240>
 801445c:	d9800617 	ldw	r6,24(sp)
 8014460:	3023883a 	mov	r17,r6
 8014464:	80001115 	stw	zero,68(r16)
 8014468:	008005c4 	movi	r2,23
 801446c:	1184f62e 	bgeu	r2,r6,8015848 <_dtoa_r+0x1720>
 8014470:	00c00044 	movi	r3,1
 8014474:	00800104 	movi	r2,4
 8014478:	1085883a 	add	r2,r2,r2
 801447c:	11000504 	addi	r4,r2,20
 8014480:	180b883a 	mov	r5,r3
 8014484:	18c00044 	addi	r3,r3,1
 8014488:	313ffb2e 	bgeu	r6,r4,8014478 <__alt_data_end+0xfc014478>
 801448c:	81401115 	stw	r5,68(r16)
 8014490:	8009883a 	mov	r4,r16
 8014494:	80176340 	call	8017634 <_Balloc>
 8014498:	d8800715 	stw	r2,28(sp)
 801449c:	80801015 	stw	r2,64(r16)
 80144a0:	00800384 	movi	r2,14
 80144a4:	1440fd36 	bltu	r2,r17,801489c <_dtoa_r+0x774>
 80144a8:	a000fc26 	beq	r20,zero,801489c <_dtoa_r+0x774>
 80144ac:	d8800517 	ldw	r2,20(sp)
 80144b0:	0083b90e 	bge	zero,r2,8015398 <_dtoa_r+0x1270>
 80144b4:	d8c00517 	ldw	r3,20(sp)
 80144b8:	108003cc 	andi	r2,r2,15
 80144bc:	100490fa 	slli	r2,r2,3
 80144c0:	182fd13a 	srai	r23,r3,4
 80144c4:	00c200f4 	movhi	r3,2051
 80144c8:	18ebf104 	addi	r3,r3,-20540
 80144cc:	1885883a 	add	r2,r3,r2
 80144d0:	b8c0040c 	andi	r3,r23,16
 80144d4:	12c00017 	ldw	r11,0(r2)
 80144d8:	12800117 	ldw	r10,4(r2)
 80144dc:	18039726 	beq	r3,zero,801533c <_dtoa_r+0x1214>
 80144e0:	008200f4 	movhi	r2,2051
 80144e4:	10abe704 	addi	r2,r2,-20580
 80144e8:	11800817 	ldw	r6,32(r2)
 80144ec:	11c00917 	ldw	r7,36(r2)
 80144f0:	9009883a 	mov	r4,r18
 80144f4:	980b883a 	mov	r5,r19
 80144f8:	da801615 	stw	r10,88(sp)
 80144fc:	dac01515 	stw	r11,84(sp)
 8014500:	800b7440 	call	800b744 <__divdf3>
 8014504:	da801617 	ldw	r10,88(sp)
 8014508:	dac01517 	ldw	r11,84(sp)
 801450c:	bdc003cc 	andi	r23,r23,15
 8014510:	044000c4 	movi	r17,3
 8014514:	d8800e15 	stw	r2,56(sp)
 8014518:	182b883a 	mov	r21,r3
 801451c:	b8001126 	beq	r23,zero,8014564 <_dtoa_r+0x43c>
 8014520:	050200f4 	movhi	r20,2051
 8014524:	a52be704 	addi	r20,r20,-20580
 8014528:	5805883a 	mov	r2,r11
 801452c:	5007883a 	mov	r3,r10
 8014530:	b980004c 	andi	r6,r23,1
 8014534:	1009883a 	mov	r4,r2
 8014538:	b82fd07a 	srai	r23,r23,1
 801453c:	180b883a 	mov	r5,r3
 8014540:	30000426 	beq	r6,zero,8014554 <_dtoa_r+0x42c>
 8014544:	a1800017 	ldw	r6,0(r20)
 8014548:	a1c00117 	ldw	r7,4(r20)
 801454c:	8c400044 	addi	r17,r17,1
 8014550:	800c2540 	call	800c254 <__muldf3>
 8014554:	a5000204 	addi	r20,r20,8
 8014558:	b83ff51e 	bne	r23,zero,8014530 <__alt_data_end+0xfc014530>
 801455c:	1017883a 	mov	r11,r2
 8014560:	1815883a 	mov	r10,r3
 8014564:	d9000e17 	ldw	r4,56(sp)
 8014568:	a80b883a 	mov	r5,r21
 801456c:	580d883a 	mov	r6,r11
 8014570:	500f883a 	mov	r7,r10
 8014574:	800b7440 	call	800b744 <__divdf3>
 8014578:	1029883a 	mov	r20,r2
 801457c:	182b883a 	mov	r21,r3
 8014580:	d9800c17 	ldw	r6,48(sp)
 8014584:	30000626 	beq	r6,zero,80145a0 <_dtoa_r+0x478>
 8014588:	a009883a 	mov	r4,r20
 801458c:	a80b883a 	mov	r5,r21
 8014590:	000d883a 	mov	r6,zero
 8014594:	01cffc34 	movhi	r7,16368
 8014598:	800c1740 	call	800c174 <__ledf2>
 801459c:	10043216 	blt	r2,zero,8015668 <_dtoa_r+0x1540>
 80145a0:	8809883a 	mov	r4,r17
 80145a4:	800d2d00 	call	800d2d0 <__floatsidf>
 80145a8:	1009883a 	mov	r4,r2
 80145ac:	180b883a 	mov	r5,r3
 80145b0:	a00d883a 	mov	r6,r20
 80145b4:	a80f883a 	mov	r7,r21
 80145b8:	800c2540 	call	800c254 <__muldf3>
 80145bc:	000d883a 	mov	r6,zero
 80145c0:	1009883a 	mov	r4,r2
 80145c4:	180b883a 	mov	r5,r3
 80145c8:	01d00734 	movhi	r7,16412
 80145cc:	800aea80 	call	800aea8 <__adddf3>
 80145d0:	1023883a 	mov	r17,r2
 80145d4:	d9800617 	ldw	r6,24(sp)
 80145d8:	00bf3034 	movhi	r2,64704
 80145dc:	1885883a 	add	r2,r3,r2
 80145e0:	d8800e15 	stw	r2,56(sp)
 80145e4:	30032e26 	beq	r6,zero,80152a0 <_dtoa_r+0x1178>
 80145e8:	d8c00517 	ldw	r3,20(sp)
 80145ec:	da800617 	ldw	r10,24(sp)
 80145f0:	d8c01215 	stw	r3,72(sp)
 80145f4:	d9000b17 	ldw	r4,44(sp)
 80145f8:	2003b026 	beq	r4,zero,80154bc <_dtoa_r+0x1394>
 80145fc:	50bfffc4 	addi	r2,r10,-1
 8014600:	100490fa 	slli	r2,r2,3
 8014604:	00c200f4 	movhi	r3,2051
 8014608:	18ebf104 	addi	r3,r3,-20540
 801460c:	1885883a 	add	r2,r3,r2
 8014610:	11800017 	ldw	r6,0(r2)
 8014614:	11c00117 	ldw	r7,4(r2)
 8014618:	d8800717 	ldw	r2,28(sp)
 801461c:	0009883a 	mov	r4,zero
 8014620:	014ff834 	movhi	r5,16352
 8014624:	da801615 	stw	r10,88(sp)
 8014628:	15c00044 	addi	r23,r2,1
 801462c:	800b7440 	call	800b744 <__divdf3>
 8014630:	d9c00e17 	ldw	r7,56(sp)
 8014634:	880d883a 	mov	r6,r17
 8014638:	1009883a 	mov	r4,r2
 801463c:	180b883a 	mov	r5,r3
 8014640:	800c9780 	call	800c978 <__subdf3>
 8014644:	a80b883a 	mov	r5,r21
 8014648:	a009883a 	mov	r4,r20
 801464c:	d8c01015 	stw	r3,64(sp)
 8014650:	d8800e15 	stw	r2,56(sp)
 8014654:	800d2480 	call	800d248 <__fixdfsi>
 8014658:	1009883a 	mov	r4,r2
 801465c:	d8801715 	stw	r2,92(sp)
 8014660:	800d2d00 	call	800d2d0 <__floatsidf>
 8014664:	a009883a 	mov	r4,r20
 8014668:	a80b883a 	mov	r5,r21
 801466c:	100d883a 	mov	r6,r2
 8014670:	180f883a 	mov	r7,r3
 8014674:	800c9780 	call	800c978 <__subdf3>
 8014678:	da001717 	ldw	r8,92(sp)
 801467c:	1829883a 	mov	r20,r3
 8014680:	d8c00717 	ldw	r3,28(sp)
 8014684:	d9000e17 	ldw	r4,56(sp)
 8014688:	d9401017 	ldw	r5,64(sp)
 801468c:	42000c04 	addi	r8,r8,48
 8014690:	1023883a 	mov	r17,r2
 8014694:	1a000005 	stb	r8,0(r3)
 8014698:	880d883a 	mov	r6,r17
 801469c:	a00f883a 	mov	r7,r20
 80146a0:	402b883a 	mov	r21,r8
 80146a4:	800c0940 	call	800c094 <__gedf2>
 80146a8:	00844516 	blt	zero,r2,80157c0 <_dtoa_r+0x1698>
 80146ac:	0009883a 	mov	r4,zero
 80146b0:	014ffc34 	movhi	r5,16368
 80146b4:	880d883a 	mov	r6,r17
 80146b8:	a00f883a 	mov	r7,r20
 80146bc:	800c9780 	call	800c978 <__subdf3>
 80146c0:	d9000e17 	ldw	r4,56(sp)
 80146c4:	d9401017 	ldw	r5,64(sp)
 80146c8:	100d883a 	mov	r6,r2
 80146cc:	180f883a 	mov	r7,r3
 80146d0:	800c0940 	call	800c094 <__gedf2>
 80146d4:	da801617 	ldw	r10,88(sp)
 80146d8:	00843616 	blt	zero,r2,80157b4 <_dtoa_r+0x168c>
 80146dc:	00800044 	movi	r2,1
 80146e0:	12806e0e 	bge	r2,r10,801489c <_dtoa_r+0x774>
 80146e4:	d9000717 	ldw	r4,28(sp)
 80146e8:	dd801315 	stw	r22,76(sp)
 80146ec:	dc001115 	stw	r16,68(sp)
 80146f0:	2295883a 	add	r10,r4,r10
 80146f4:	dcc01415 	stw	r19,80(sp)
 80146f8:	502d883a 	mov	r22,r10
 80146fc:	dcc01017 	ldw	r19,64(sp)
 8014700:	b821883a 	mov	r16,r23
 8014704:	dc801015 	stw	r18,64(sp)
 8014708:	dc800e17 	ldw	r18,56(sp)
 801470c:	00000906 	br	8014734 <_dtoa_r+0x60c>
 8014710:	800c9780 	call	800c978 <__subdf3>
 8014714:	1009883a 	mov	r4,r2
 8014718:	180b883a 	mov	r5,r3
 801471c:	900d883a 	mov	r6,r18
 8014720:	980f883a 	mov	r7,r19
 8014724:	800c1740 	call	800c174 <__ledf2>
 8014728:	10040e16 	blt	r2,zero,8015764 <_dtoa_r+0x163c>
 801472c:	b821883a 	mov	r16,r23
 8014730:	bd841026 	beq	r23,r22,8015774 <_dtoa_r+0x164c>
 8014734:	9009883a 	mov	r4,r18
 8014738:	980b883a 	mov	r5,r19
 801473c:	000d883a 	mov	r6,zero
 8014740:	01d00934 	movhi	r7,16420
 8014744:	800c2540 	call	800c254 <__muldf3>
 8014748:	000d883a 	mov	r6,zero
 801474c:	01d00934 	movhi	r7,16420
 8014750:	8809883a 	mov	r4,r17
 8014754:	a00b883a 	mov	r5,r20
 8014758:	1025883a 	mov	r18,r2
 801475c:	1827883a 	mov	r19,r3
 8014760:	800c2540 	call	800c254 <__muldf3>
 8014764:	180b883a 	mov	r5,r3
 8014768:	1009883a 	mov	r4,r2
 801476c:	1823883a 	mov	r17,r3
 8014770:	1029883a 	mov	r20,r2
 8014774:	800d2480 	call	800d248 <__fixdfsi>
 8014778:	1009883a 	mov	r4,r2
 801477c:	102b883a 	mov	r21,r2
 8014780:	800d2d00 	call	800d2d0 <__floatsidf>
 8014784:	a009883a 	mov	r4,r20
 8014788:	880b883a 	mov	r5,r17
 801478c:	100d883a 	mov	r6,r2
 8014790:	180f883a 	mov	r7,r3
 8014794:	800c9780 	call	800c978 <__subdf3>
 8014798:	ad400c04 	addi	r21,r21,48
 801479c:	1009883a 	mov	r4,r2
 80147a0:	180b883a 	mov	r5,r3
 80147a4:	900d883a 	mov	r6,r18
 80147a8:	980f883a 	mov	r7,r19
 80147ac:	85400005 	stb	r21,0(r16)
 80147b0:	1023883a 	mov	r17,r2
 80147b4:	1829883a 	mov	r20,r3
 80147b8:	800c1740 	call	800c174 <__ledf2>
 80147bc:	bdc00044 	addi	r23,r23,1
 80147c0:	0009883a 	mov	r4,zero
 80147c4:	014ffc34 	movhi	r5,16368
 80147c8:	880d883a 	mov	r6,r17
 80147cc:	a00f883a 	mov	r7,r20
 80147d0:	103fcf0e 	bge	r2,zero,8014710 <__alt_data_end+0xfc014710>
 80147d4:	d9801217 	ldw	r6,72(sp)
 80147d8:	dc001117 	ldw	r16,68(sp)
 80147dc:	d9800515 	stw	r6,20(sp)
 80147e0:	8009883a 	mov	r4,r16
 80147e4:	e00b883a 	mov	r5,fp
 80147e8:	80176dc0 	call	80176dc <_Bfree>
 80147ec:	d8c00517 	ldw	r3,20(sp)
 80147f0:	d9002317 	ldw	r4,140(sp)
 80147f4:	d9802517 	ldw	r6,148(sp)
 80147f8:	b8000005 	stb	zero,0(r23)
 80147fc:	18800044 	addi	r2,r3,1
 8014800:	20800015 	stw	r2,0(r4)
 8014804:	30027226 	beq	r6,zero,80151d0 <_dtoa_r+0x10a8>
 8014808:	35c00015 	stw	r23,0(r6)
 801480c:	d8800717 	ldw	r2,28(sp)
 8014810:	003e7406 	br	80141e4 <__alt_data_end+0xfc0141e4>
 8014814:	00800434 	movhi	r2,16
 8014818:	10bfffc4 	addi	r2,r2,-1
 801481c:	a8aa703a 	and	r21,r21,r2
 8014820:	a83e801e 	bne	r21,zero,8014224 <__alt_data_end+0xfc014224>
 8014824:	008200f4 	movhi	r2,2051
 8014828:	10abcc04 	addi	r2,r2,-20688
 801482c:	003e7f06 	br	801422c <__alt_data_end+0xfc01422c>
 8014830:	10c00204 	addi	r3,r2,8
 8014834:	003e8206 	br	8014240 <__alt_data_end+0xfc014240>
 8014838:	01400434 	movhi	r5,16
 801483c:	297fffc4 	addi	r5,r5,-1
 8014840:	994a703a 	and	r5,r19,r5
 8014844:	9009883a 	mov	r4,r18
 8014848:	8c7f0044 	addi	r17,r17,-1023
 801484c:	294ffc34 	orhi	r5,r5,16368
 8014850:	dd000217 	ldw	r20,8(sp)
 8014854:	d8000f15 	stw	zero,60(sp)
 8014858:	003e9f06 	br	80142d8 <__alt_data_end+0xfc0142d8>
 801485c:	008200f4 	movhi	r2,2051
 8014860:	10ab1b04 	addi	r2,r2,-21396
 8014864:	003e5f06 	br	80141e4 <__alt_data_end+0xfc0141e4>
 8014868:	80001115 	stw	zero,68(r16)
 801486c:	8009883a 	mov	r4,r16
 8014870:	000b883a 	mov	r5,zero
 8014874:	80176340 	call	8017634 <_Balloc>
 8014878:	01bfffc4 	movi	r6,-1
 801487c:	d8800715 	stw	r2,28(sp)
 8014880:	80801015 	stw	r2,64(r16)
 8014884:	00800044 	movi	r2,1
 8014888:	d9800615 	stw	r6,24(sp)
 801488c:	d8800b15 	stw	r2,44(sp)
 8014890:	d8002215 	stw	zero,136(sp)
 8014894:	d9800d15 	stw	r6,52(sp)
 8014898:	d8000315 	stw	zero,12(sp)
 801489c:	d8800117 	ldw	r2,4(sp)
 80148a0:	10008e16 	blt	r2,zero,8014adc <_dtoa_r+0x9b4>
 80148a4:	d9000517 	ldw	r4,20(sp)
 80148a8:	00c00384 	movi	r3,14
 80148ac:	19008b16 	blt	r3,r4,8014adc <_dtoa_r+0x9b4>
 80148b0:	200490fa 	slli	r2,r4,3
 80148b4:	00c200f4 	movhi	r3,2051
 80148b8:	d9802217 	ldw	r6,136(sp)
 80148bc:	18ebf104 	addi	r3,r3,-20540
 80148c0:	1885883a 	add	r2,r3,r2
 80148c4:	14400017 	ldw	r17,0(r2)
 80148c8:	15000117 	ldw	r20,4(r2)
 80148cc:	3001c716 	blt	r6,zero,8014fec <_dtoa_r+0xec4>
 80148d0:	880d883a 	mov	r6,r17
 80148d4:	a00f883a 	mov	r7,r20
 80148d8:	9009883a 	mov	r4,r18
 80148dc:	980b883a 	mov	r5,r19
 80148e0:	800b7440 	call	800b744 <__divdf3>
 80148e4:	180b883a 	mov	r5,r3
 80148e8:	1009883a 	mov	r4,r2
 80148ec:	800d2480 	call	800d248 <__fixdfsi>
 80148f0:	1009883a 	mov	r4,r2
 80148f4:	102d883a 	mov	r22,r2
 80148f8:	800d2d00 	call	800d2d0 <__floatsidf>
 80148fc:	1009883a 	mov	r4,r2
 8014900:	180b883a 	mov	r5,r3
 8014904:	880d883a 	mov	r6,r17
 8014908:	a00f883a 	mov	r7,r20
 801490c:	800c2540 	call	800c254 <__muldf3>
 8014910:	9009883a 	mov	r4,r18
 8014914:	980b883a 	mov	r5,r19
 8014918:	100d883a 	mov	r6,r2
 801491c:	180f883a 	mov	r7,r3
 8014920:	800c9780 	call	800c978 <__subdf3>
 8014924:	d9000717 	ldw	r4,28(sp)
 8014928:	d9800617 	ldw	r6,24(sp)
 801492c:	180b883a 	mov	r5,r3
 8014930:	b0c00c04 	addi	r3,r22,48
 8014934:	20c00005 	stb	r3,0(r4)
 8014938:	25c00044 	addi	r23,r4,1
 801493c:	01000044 	movi	r4,1
 8014940:	1011883a 	mov	r8,r2
 8014944:	2807883a 	mov	r3,r5
 8014948:	31003d26 	beq	r6,r4,8014a40 <_dtoa_r+0x918>
 801494c:	000d883a 	mov	r6,zero
 8014950:	01d00934 	movhi	r7,16420
 8014954:	1009883a 	mov	r4,r2
 8014958:	800c2540 	call	800c254 <__muldf3>
 801495c:	1009883a 	mov	r4,r2
 8014960:	180b883a 	mov	r5,r3
 8014964:	000d883a 	mov	r6,zero
 8014968:	000f883a 	mov	r7,zero
 801496c:	1027883a 	mov	r19,r2
 8014970:	182b883a 	mov	r21,r3
 8014974:	800c0100 	call	800c010 <__eqdf2>
 8014978:	103f9926 	beq	r2,zero,80147e0 <__alt_data_end+0xfc0147e0>
 801497c:	d8c00617 	ldw	r3,24(sp)
 8014980:	d9000717 	ldw	r4,28(sp)
 8014984:	b825883a 	mov	r18,r23
 8014988:	18bfffc4 	addi	r2,r3,-1
 801498c:	20ad883a 	add	r22,r4,r2
 8014990:	dc000315 	stw	r16,12(sp)
 8014994:	00000a06 	br	80149c0 <_dtoa_r+0x898>
 8014998:	800c2540 	call	800c254 <__muldf3>
 801499c:	1009883a 	mov	r4,r2
 80149a0:	180b883a 	mov	r5,r3
 80149a4:	000d883a 	mov	r6,zero
 80149a8:	000f883a 	mov	r7,zero
 80149ac:	1027883a 	mov	r19,r2
 80149b0:	182b883a 	mov	r21,r3
 80149b4:	b825883a 	mov	r18,r23
 80149b8:	800c0100 	call	800c010 <__eqdf2>
 80149bc:	10022626 	beq	r2,zero,8015258 <_dtoa_r+0x1130>
 80149c0:	880d883a 	mov	r6,r17
 80149c4:	a00f883a 	mov	r7,r20
 80149c8:	9809883a 	mov	r4,r19
 80149cc:	a80b883a 	mov	r5,r21
 80149d0:	800b7440 	call	800b744 <__divdf3>
 80149d4:	180b883a 	mov	r5,r3
 80149d8:	1009883a 	mov	r4,r2
 80149dc:	800d2480 	call	800d248 <__fixdfsi>
 80149e0:	1009883a 	mov	r4,r2
 80149e4:	1021883a 	mov	r16,r2
 80149e8:	800d2d00 	call	800d2d0 <__floatsidf>
 80149ec:	1009883a 	mov	r4,r2
 80149f0:	180b883a 	mov	r5,r3
 80149f4:	880d883a 	mov	r6,r17
 80149f8:	a00f883a 	mov	r7,r20
 80149fc:	800c2540 	call	800c254 <__muldf3>
 8014a00:	9809883a 	mov	r4,r19
 8014a04:	a80b883a 	mov	r5,r21
 8014a08:	100d883a 	mov	r6,r2
 8014a0c:	180f883a 	mov	r7,r3
 8014a10:	800c9780 	call	800c978 <__subdf3>
 8014a14:	82000c04 	addi	r8,r16,48
 8014a18:	92000005 	stb	r8,0(r18)
 8014a1c:	1009883a 	mov	r4,r2
 8014a20:	180b883a 	mov	r5,r3
 8014a24:	000d883a 	mov	r6,zero
 8014a28:	01d00934 	movhi	r7,16420
 8014a2c:	1011883a 	mov	r8,r2
 8014a30:	bdc00044 	addi	r23,r23,1
 8014a34:	95bfd81e 	bne	r18,r22,8014998 <__alt_data_end+0xfc014998>
 8014a38:	802d883a 	mov	r22,r16
 8014a3c:	dc000317 	ldw	r16,12(sp)
 8014a40:	4009883a 	mov	r4,r8
 8014a44:	180b883a 	mov	r5,r3
 8014a48:	400d883a 	mov	r6,r8
 8014a4c:	180f883a 	mov	r7,r3
 8014a50:	800aea80 	call	800aea8 <__adddf3>
 8014a54:	8809883a 	mov	r4,r17
 8014a58:	a00b883a 	mov	r5,r20
 8014a5c:	100d883a 	mov	r6,r2
 8014a60:	180f883a 	mov	r7,r3
 8014a64:	1027883a 	mov	r19,r2
 8014a68:	1825883a 	mov	r18,r3
 8014a6c:	800c1740 	call	800c174 <__ledf2>
 8014a70:	10000816 	blt	r2,zero,8014a94 <_dtoa_r+0x96c>
 8014a74:	8809883a 	mov	r4,r17
 8014a78:	a00b883a 	mov	r5,r20
 8014a7c:	980d883a 	mov	r6,r19
 8014a80:	900f883a 	mov	r7,r18
 8014a84:	800c0100 	call	800c010 <__eqdf2>
 8014a88:	103f551e 	bne	r2,zero,80147e0 <__alt_data_end+0xfc0147e0>
 8014a8c:	b580004c 	andi	r22,r22,1
 8014a90:	b03f5326 	beq	r22,zero,80147e0 <__alt_data_end+0xfc0147e0>
 8014a94:	bd7fffc3 	ldbu	r21,-1(r23)
 8014a98:	b8bfffc4 	addi	r2,r23,-1
 8014a9c:	1007883a 	mov	r3,r2
 8014aa0:	01400e44 	movi	r5,57
 8014aa4:	d9800717 	ldw	r6,28(sp)
 8014aa8:	00000506 	br	8014ac0 <_dtoa_r+0x998>
 8014aac:	18ffffc4 	addi	r3,r3,-1
 8014ab0:	30825e26 	beq	r6,r2,801542c <_dtoa_r+0x1304>
 8014ab4:	1d400003 	ldbu	r21,0(r3)
 8014ab8:	102f883a 	mov	r23,r2
 8014abc:	10bfffc4 	addi	r2,r2,-1
 8014ac0:	a9003fcc 	andi	r4,r21,255
 8014ac4:	2100201c 	xori	r4,r4,128
 8014ac8:	213fe004 	addi	r4,r4,-128
 8014acc:	217ff726 	beq	r4,r5,8014aac <__alt_data_end+0xfc014aac>
 8014ad0:	aa000044 	addi	r8,r21,1
 8014ad4:	12000005 	stb	r8,0(r2)
 8014ad8:	003f4106 	br	80147e0 <__alt_data_end+0xfc0147e0>
 8014adc:	d8c00b17 	ldw	r3,44(sp)
 8014ae0:	18006726 	beq	r3,zero,8014c80 <_dtoa_r+0xb58>
 8014ae4:	d9000317 	ldw	r4,12(sp)
 8014ae8:	00c00044 	movi	r3,1
 8014aec:	19016a0e 	bge	r3,r4,8015098 <_dtoa_r+0xf70>
 8014af0:	d8800617 	ldw	r2,24(sp)
 8014af4:	d8c00917 	ldw	r3,36(sp)
 8014af8:	157fffc4 	addi	r21,r2,-1
 8014afc:	1d420716 	blt	r3,r21,801531c <_dtoa_r+0x11f4>
 8014b00:	1d6bc83a 	sub	r21,r3,r21
 8014b04:	d8800617 	ldw	r2,24(sp)
 8014b08:	1002c716 	blt	r2,zero,8015628 <_dtoa_r+0x1500>
 8014b0c:	dd000817 	ldw	r20,32(sp)
 8014b10:	d8800617 	ldw	r2,24(sp)
 8014b14:	d9800817 	ldw	r6,32(sp)
 8014b18:	8009883a 	mov	r4,r16
 8014b1c:	01400044 	movi	r5,1
 8014b20:	308d883a 	add	r6,r6,r2
 8014b24:	d9800815 	stw	r6,32(sp)
 8014b28:	b0ad883a 	add	r22,r22,r2
 8014b2c:	8017a340 	call	8017a34 <__i2b>
 8014b30:	1023883a 	mov	r17,r2
 8014b34:	a0000826 	beq	r20,zero,8014b58 <_dtoa_r+0xa30>
 8014b38:	0580070e 	bge	zero,r22,8014b58 <_dtoa_r+0xa30>
 8014b3c:	b005883a 	mov	r2,r22
 8014b40:	a5812016 	blt	r20,r22,8014fc4 <_dtoa_r+0xe9c>
 8014b44:	d8c00817 	ldw	r3,32(sp)
 8014b48:	a0a9c83a 	sub	r20,r20,r2
 8014b4c:	b0adc83a 	sub	r22,r22,r2
 8014b50:	1887c83a 	sub	r3,r3,r2
 8014b54:	d8c00815 	stw	r3,32(sp)
 8014b58:	d9000917 	ldw	r4,36(sp)
 8014b5c:	0100140e 	bge	zero,r4,8014bb0 <_dtoa_r+0xa88>
 8014b60:	d9800b17 	ldw	r6,44(sp)
 8014b64:	3001e526 	beq	r6,zero,80152fc <_dtoa_r+0x11d4>
 8014b68:	05400e0e 	bge	zero,r21,8014ba4 <_dtoa_r+0xa7c>
 8014b6c:	880b883a 	mov	r5,r17
 8014b70:	8009883a 	mov	r4,r16
 8014b74:	a80d883a 	mov	r6,r21
 8014b78:	8017c6c0 	call	8017c6c <__pow5mult>
 8014b7c:	e00d883a 	mov	r6,fp
 8014b80:	8009883a 	mov	r4,r16
 8014b84:	100b883a 	mov	r5,r2
 8014b88:	1023883a 	mov	r17,r2
 8014b8c:	8017a700 	call	8017a70 <__multiply>
 8014b90:	102f883a 	mov	r23,r2
 8014b94:	e00b883a 	mov	r5,fp
 8014b98:	8009883a 	mov	r4,r16
 8014b9c:	80176dc0 	call	80176dc <_Bfree>
 8014ba0:	b839883a 	mov	fp,r23
 8014ba4:	d8800917 	ldw	r2,36(sp)
 8014ba8:	154dc83a 	sub	r6,r2,r21
 8014bac:	3001281e 	bne	r6,zero,8015050 <_dtoa_r+0xf28>
 8014bb0:	05c00044 	movi	r23,1
 8014bb4:	8009883a 	mov	r4,r16
 8014bb8:	b80b883a 	mov	r5,r23
 8014bbc:	8017a340 	call	8017a34 <__i2b>
 8014bc0:	d8c00a17 	ldw	r3,40(sp)
 8014bc4:	102b883a 	mov	r21,r2
 8014bc8:	00c0310e 	bge	zero,r3,8014c90 <_dtoa_r+0xb68>
 8014bcc:	8009883a 	mov	r4,r16
 8014bd0:	100b883a 	mov	r5,r2
 8014bd4:	180d883a 	mov	r6,r3
 8014bd8:	8017c6c0 	call	8017c6c <__pow5mult>
 8014bdc:	d9000317 	ldw	r4,12(sp)
 8014be0:	102b883a 	mov	r21,r2
 8014be4:	b9011f0e 	bge	r23,r4,8015064 <_dtoa_r+0xf3c>
 8014be8:	0027883a 	mov	r19,zero
 8014bec:	a8800417 	ldw	r2,16(r21)
 8014bf0:	10800104 	addi	r2,r2,4
 8014bf4:	1085883a 	add	r2,r2,r2
 8014bf8:	1085883a 	add	r2,r2,r2
 8014bfc:	a885883a 	add	r2,r21,r2
 8014c00:	11000017 	ldw	r4,0(r2)
 8014c04:	801791c0 	call	801791c <__hi0bits>
 8014c08:	00c00804 	movi	r3,32
 8014c0c:	1885c83a 	sub	r2,r3,r2
 8014c10:	00002506 	br	8014ca8 <_dtoa_r+0xb80>
 8014c14:	01800044 	movi	r6,1
 8014c18:	d9800c15 	stw	r6,48(sp)
 8014c1c:	003dec06 	br	80143d0 <__alt_data_end+0xfc0143d0>
 8014c20:	d8c00817 	ldw	r3,32(sp)
 8014c24:	d9000517 	ldw	r4,20(sp)
 8014c28:	d8000a15 	stw	zero,40(sp)
 8014c2c:	1907c83a 	sub	r3,r3,r4
 8014c30:	010dc83a 	sub	r6,zero,r4
 8014c34:	d8c00815 	stw	r3,32(sp)
 8014c38:	d9800915 	stw	r6,36(sp)
 8014c3c:	003ded06 	br	80143f4 <__alt_data_end+0xfc0143f4>
 8014c40:	05adc83a 	sub	r22,zero,r22
 8014c44:	dd800815 	stw	r22,32(sp)
 8014c48:	002d883a 	mov	r22,zero
 8014c4c:	003de406 	br	80143e0 <__alt_data_end+0xfc0143e0>
 8014c50:	d9000517 	ldw	r4,20(sp)
 8014c54:	800d2d00 	call	800d2d0 <__floatsidf>
 8014c58:	1009883a 	mov	r4,r2
 8014c5c:	180b883a 	mov	r5,r3
 8014c60:	b00d883a 	mov	r6,r22
 8014c64:	a80f883a 	mov	r7,r21
 8014c68:	800c0100 	call	800c010 <__eqdf2>
 8014c6c:	103dc726 	beq	r2,zero,801438c <__alt_data_end+0xfc01438c>
 8014c70:	d8800517 	ldw	r2,20(sp)
 8014c74:	10bfffc4 	addi	r2,r2,-1
 8014c78:	d8800515 	stw	r2,20(sp)
 8014c7c:	003dc306 	br	801438c <__alt_data_end+0xfc01438c>
 8014c80:	dd400917 	ldw	r21,36(sp)
 8014c84:	dd000817 	ldw	r20,32(sp)
 8014c88:	0023883a 	mov	r17,zero
 8014c8c:	003fa906 	br	8014b34 <__alt_data_end+0xfc014b34>
 8014c90:	d9800317 	ldw	r6,12(sp)
 8014c94:	b981670e 	bge	r23,r6,8015234 <_dtoa_r+0x110c>
 8014c98:	0027883a 	mov	r19,zero
 8014c9c:	d8c00a17 	ldw	r3,40(sp)
 8014ca0:	183fd21e 	bne	r3,zero,8014bec <__alt_data_end+0xfc014bec>
 8014ca4:	00800044 	movi	r2,1
 8014ca8:	1585883a 	add	r2,r2,r22
 8014cac:	108007cc 	andi	r2,r2,31
 8014cb0:	10005f26 	beq	r2,zero,8014e30 <_dtoa_r+0xd08>
 8014cb4:	00c00804 	movi	r3,32
 8014cb8:	1887c83a 	sub	r3,r3,r2
 8014cbc:	01000104 	movi	r4,4
 8014cc0:	20c2dd0e 	bge	r4,r3,8015838 <_dtoa_r+0x1710>
 8014cc4:	d9000817 	ldw	r4,32(sp)
 8014cc8:	00c00704 	movi	r3,28
 8014ccc:	1885c83a 	sub	r2,r3,r2
 8014cd0:	2089883a 	add	r4,r4,r2
 8014cd4:	d9000815 	stw	r4,32(sp)
 8014cd8:	a0a9883a 	add	r20,r20,r2
 8014cdc:	b0ad883a 	add	r22,r22,r2
 8014ce0:	d8800817 	ldw	r2,32(sp)
 8014ce4:	0080050e 	bge	zero,r2,8014cfc <_dtoa_r+0xbd4>
 8014ce8:	e00b883a 	mov	r5,fp
 8014cec:	8009883a 	mov	r4,r16
 8014cf0:	100d883a 	mov	r6,r2
 8014cf4:	8017dac0 	call	8017dac <__lshift>
 8014cf8:	1039883a 	mov	fp,r2
 8014cfc:	0580050e 	bge	zero,r22,8014d14 <_dtoa_r+0xbec>
 8014d00:	a80b883a 	mov	r5,r21
 8014d04:	8009883a 	mov	r4,r16
 8014d08:	b00d883a 	mov	r6,r22
 8014d0c:	8017dac0 	call	8017dac <__lshift>
 8014d10:	102b883a 	mov	r21,r2
 8014d14:	d8c00c17 	ldw	r3,48(sp)
 8014d18:	1801161e 	bne	r3,zero,8015174 <_dtoa_r+0x104c>
 8014d1c:	d8c00617 	ldw	r3,24(sp)
 8014d20:	00c12d0e 	bge	zero,r3,80151d8 <_dtoa_r+0x10b0>
 8014d24:	d8c00b17 	ldw	r3,44(sp)
 8014d28:	1800571e 	bne	r3,zero,8014e88 <_dtoa_r+0xd60>
 8014d2c:	dc800717 	ldw	r18,28(sp)
 8014d30:	dcc00617 	ldw	r19,24(sp)
 8014d34:	9029883a 	mov	r20,r18
 8014d38:	00000206 	br	8014d44 <_dtoa_r+0xc1c>
 8014d3c:	80177040 	call	8017704 <__multadd>
 8014d40:	1039883a 	mov	fp,r2
 8014d44:	e009883a 	mov	r4,fp
 8014d48:	a80b883a 	mov	r5,r21
 8014d4c:	8013f280 	call	8013f28 <quorem>
 8014d50:	10800c04 	addi	r2,r2,48
 8014d54:	90800005 	stb	r2,0(r18)
 8014d58:	94800044 	addi	r18,r18,1
 8014d5c:	9507c83a 	sub	r3,r18,r20
 8014d60:	8009883a 	mov	r4,r16
 8014d64:	e00b883a 	mov	r5,fp
 8014d68:	01800284 	movi	r6,10
 8014d6c:	000f883a 	mov	r7,zero
 8014d70:	1cfff216 	blt	r3,r19,8014d3c <__alt_data_end+0xfc014d3c>
 8014d74:	1011883a 	mov	r8,r2
 8014d78:	d8800617 	ldw	r2,24(sp)
 8014d7c:	00822e0e 	bge	zero,r2,8015638 <_dtoa_r+0x1510>
 8014d80:	d9000717 	ldw	r4,28(sp)
 8014d84:	0025883a 	mov	r18,zero
 8014d88:	20af883a 	add	r23,r4,r2
 8014d8c:	e00b883a 	mov	r5,fp
 8014d90:	01800044 	movi	r6,1
 8014d94:	8009883a 	mov	r4,r16
 8014d98:	da001715 	stw	r8,92(sp)
 8014d9c:	8017dac0 	call	8017dac <__lshift>
 8014da0:	1009883a 	mov	r4,r2
 8014da4:	a80b883a 	mov	r5,r21
 8014da8:	1039883a 	mov	fp,r2
 8014dac:	8017ef40 	call	8017ef4 <__mcmp>
 8014db0:	da001717 	ldw	r8,92(sp)
 8014db4:	00816e0e 	bge	zero,r2,8015370 <_dtoa_r+0x1248>
 8014db8:	b93fffc3 	ldbu	r4,-1(r23)
 8014dbc:	b8bfffc4 	addi	r2,r23,-1
 8014dc0:	1007883a 	mov	r3,r2
 8014dc4:	01800e44 	movi	r6,57
 8014dc8:	d9c00717 	ldw	r7,28(sp)
 8014dcc:	00000506 	br	8014de4 <_dtoa_r+0xcbc>
 8014dd0:	18ffffc4 	addi	r3,r3,-1
 8014dd4:	38811926 	beq	r7,r2,801523c <_dtoa_r+0x1114>
 8014dd8:	19000003 	ldbu	r4,0(r3)
 8014ddc:	102f883a 	mov	r23,r2
 8014de0:	10bfffc4 	addi	r2,r2,-1
 8014de4:	21403fcc 	andi	r5,r4,255
 8014de8:	2940201c 	xori	r5,r5,128
 8014dec:	297fe004 	addi	r5,r5,-128
 8014df0:	29bff726 	beq	r5,r6,8014dd0 <__alt_data_end+0xfc014dd0>
 8014df4:	21000044 	addi	r4,r4,1
 8014df8:	11000005 	stb	r4,0(r2)
 8014dfc:	8009883a 	mov	r4,r16
 8014e00:	a80b883a 	mov	r5,r21
 8014e04:	80176dc0 	call	80176dc <_Bfree>
 8014e08:	883e7526 	beq	r17,zero,80147e0 <__alt_data_end+0xfc0147e0>
 8014e0c:	90000426 	beq	r18,zero,8014e20 <_dtoa_r+0xcf8>
 8014e10:	94400326 	beq	r18,r17,8014e20 <_dtoa_r+0xcf8>
 8014e14:	8009883a 	mov	r4,r16
 8014e18:	900b883a 	mov	r5,r18
 8014e1c:	80176dc0 	call	80176dc <_Bfree>
 8014e20:	8009883a 	mov	r4,r16
 8014e24:	880b883a 	mov	r5,r17
 8014e28:	80176dc0 	call	80176dc <_Bfree>
 8014e2c:	003e6c06 	br	80147e0 <__alt_data_end+0xfc0147e0>
 8014e30:	00800704 	movi	r2,28
 8014e34:	d9800817 	ldw	r6,32(sp)
 8014e38:	a0a9883a 	add	r20,r20,r2
 8014e3c:	b0ad883a 	add	r22,r22,r2
 8014e40:	308d883a 	add	r6,r6,r2
 8014e44:	d9800815 	stw	r6,32(sp)
 8014e48:	003fa506 	br	8014ce0 <__alt_data_end+0xfc014ce0>
 8014e4c:	013efb84 	movi	r4,-1042
 8014e50:	246bc83a 	sub	r21,r4,r17
 8014e54:	9548983a 	sll	r4,r18,r21
 8014e58:	003d1806 	br	80142bc <__alt_data_end+0xfc0142bc>
 8014e5c:	d8000c15 	stw	zero,48(sp)
 8014e60:	003d5b06 	br	80143d0 <__alt_data_end+0xfc0143d0>
 8014e64:	880b883a 	mov	r5,r17
 8014e68:	8009883a 	mov	r4,r16
 8014e6c:	01800284 	movi	r6,10
 8014e70:	000f883a 	mov	r7,zero
 8014e74:	80177040 	call	8017704 <__multadd>
 8014e78:	1023883a 	mov	r17,r2
 8014e7c:	d8800d17 	ldw	r2,52(sp)
 8014e80:	0082550e 	bge	zero,r2,80157d8 <_dtoa_r+0x16b0>
 8014e84:	d8800615 	stw	r2,24(sp)
 8014e88:	0500050e 	bge	zero,r20,8014ea0 <_dtoa_r+0xd78>
 8014e8c:	880b883a 	mov	r5,r17
 8014e90:	8009883a 	mov	r4,r16
 8014e94:	a00d883a 	mov	r6,r20
 8014e98:	8017dac0 	call	8017dac <__lshift>
 8014e9c:	1023883a 	mov	r17,r2
 8014ea0:	98016a1e 	bne	r19,zero,801544c <_dtoa_r+0x1324>
 8014ea4:	8829883a 	mov	r20,r17
 8014ea8:	d9000617 	ldw	r4,24(sp)
 8014eac:	dcc00717 	ldw	r19,28(sp)
 8014eb0:	9480004c 	andi	r18,r18,1
 8014eb4:	20bfffc4 	addi	r2,r4,-1
 8014eb8:	9885883a 	add	r2,r19,r2
 8014ebc:	d8800415 	stw	r2,16(sp)
 8014ec0:	dc800615 	stw	r18,24(sp)
 8014ec4:	e009883a 	mov	r4,fp
 8014ec8:	a80b883a 	mov	r5,r21
 8014ecc:	8013f280 	call	8013f28 <quorem>
 8014ed0:	e009883a 	mov	r4,fp
 8014ed4:	880b883a 	mov	r5,r17
 8014ed8:	102f883a 	mov	r23,r2
 8014edc:	8017ef40 	call	8017ef4 <__mcmp>
 8014ee0:	8009883a 	mov	r4,r16
 8014ee4:	a80b883a 	mov	r5,r21
 8014ee8:	a00d883a 	mov	r6,r20
 8014eec:	102d883a 	mov	r22,r2
 8014ef0:	8017f540 	call	8017f54 <__mdiff>
 8014ef4:	1007883a 	mov	r3,r2
 8014ef8:	10800317 	ldw	r2,12(r2)
 8014efc:	bc800c04 	addi	r18,r23,48
 8014f00:	1000971e 	bne	r2,zero,8015160 <_dtoa_r+0x1038>
 8014f04:	180b883a 	mov	r5,r3
 8014f08:	e009883a 	mov	r4,fp
 8014f0c:	d8c01515 	stw	r3,84(sp)
 8014f10:	8017ef40 	call	8017ef4 <__mcmp>
 8014f14:	d8c01517 	ldw	r3,84(sp)
 8014f18:	8009883a 	mov	r4,r16
 8014f1c:	d8801515 	stw	r2,84(sp)
 8014f20:	180b883a 	mov	r5,r3
 8014f24:	80176dc0 	call	80176dc <_Bfree>
 8014f28:	d8801517 	ldw	r2,84(sp)
 8014f2c:	1000041e 	bne	r2,zero,8014f40 <_dtoa_r+0xe18>
 8014f30:	d9800317 	ldw	r6,12(sp)
 8014f34:	3000021e 	bne	r6,zero,8014f40 <_dtoa_r+0xe18>
 8014f38:	d8c00617 	ldw	r3,24(sp)
 8014f3c:	18007626 	beq	r3,zero,8015118 <_dtoa_r+0xff0>
 8014f40:	b0005b16 	blt	r22,zero,80150b0 <_dtoa_r+0xf88>
 8014f44:	b000041e 	bne	r22,zero,8014f58 <_dtoa_r+0xe30>
 8014f48:	d9000317 	ldw	r4,12(sp)
 8014f4c:	2000021e 	bne	r4,zero,8014f58 <_dtoa_r+0xe30>
 8014f50:	d8c00617 	ldw	r3,24(sp)
 8014f54:	18005626 	beq	r3,zero,80150b0 <_dtoa_r+0xf88>
 8014f58:	00814d16 	blt	zero,r2,8015490 <_dtoa_r+0x1368>
 8014f5c:	d8c00417 	ldw	r3,16(sp)
 8014f60:	9d800044 	addi	r22,r19,1
 8014f64:	9c800005 	stb	r18,0(r19)
 8014f68:	b02f883a 	mov	r23,r22
 8014f6c:	98c14c26 	beq	r19,r3,80154a0 <_dtoa_r+0x1378>
 8014f70:	e00b883a 	mov	r5,fp
 8014f74:	8009883a 	mov	r4,r16
 8014f78:	01800284 	movi	r6,10
 8014f7c:	000f883a 	mov	r7,zero
 8014f80:	80177040 	call	8017704 <__multadd>
 8014f84:	1039883a 	mov	fp,r2
 8014f88:	8d006d26 	beq	r17,r20,8015140 <_dtoa_r+0x1018>
 8014f8c:	880b883a 	mov	r5,r17
 8014f90:	01800284 	movi	r6,10
 8014f94:	000f883a 	mov	r7,zero
 8014f98:	8009883a 	mov	r4,r16
 8014f9c:	80177040 	call	8017704 <__multadd>
 8014fa0:	a00b883a 	mov	r5,r20
 8014fa4:	8009883a 	mov	r4,r16
 8014fa8:	01800284 	movi	r6,10
 8014fac:	000f883a 	mov	r7,zero
 8014fb0:	1023883a 	mov	r17,r2
 8014fb4:	80177040 	call	8017704 <__multadd>
 8014fb8:	1029883a 	mov	r20,r2
 8014fbc:	b027883a 	mov	r19,r22
 8014fc0:	003fc006 	br	8014ec4 <__alt_data_end+0xfc014ec4>
 8014fc4:	a005883a 	mov	r2,r20
 8014fc8:	003ede06 	br	8014b44 <__alt_data_end+0xfc014b44>
 8014fcc:	01000044 	movi	r4,1
 8014fd0:	d9000b15 	stw	r4,44(sp)
 8014fd4:	d9802217 	ldw	r6,136(sp)
 8014fd8:	0180dc0e 	bge	zero,r6,801534c <_dtoa_r+0x1224>
 8014fdc:	3023883a 	mov	r17,r6
 8014fe0:	d9800d15 	stw	r6,52(sp)
 8014fe4:	d9800615 	stw	r6,24(sp)
 8014fe8:	003d1e06 	br	8014464 <__alt_data_end+0xfc014464>
 8014fec:	d8800617 	ldw	r2,24(sp)
 8014ff0:	00be3716 	blt	zero,r2,80148d0 <__alt_data_end+0xfc0148d0>
 8014ff4:	1000be1e 	bne	r2,zero,80152f0 <_dtoa_r+0x11c8>
 8014ff8:	8809883a 	mov	r4,r17
 8014ffc:	a00b883a 	mov	r5,r20
 8015000:	000d883a 	mov	r6,zero
 8015004:	01d00534 	movhi	r7,16404
 8015008:	800c2540 	call	800c254 <__muldf3>
 801500c:	1009883a 	mov	r4,r2
 8015010:	180b883a 	mov	r5,r3
 8015014:	900d883a 	mov	r6,r18
 8015018:	980f883a 	mov	r7,r19
 801501c:	800c0940 	call	800c094 <__gedf2>
 8015020:	002b883a 	mov	r21,zero
 8015024:	0023883a 	mov	r17,zero
 8015028:	10007a16 	blt	r2,zero,8015214 <_dtoa_r+0x10ec>
 801502c:	d9002217 	ldw	r4,136(sp)
 8015030:	ddc00717 	ldw	r23,28(sp)
 8015034:	0108303a 	nor	r4,zero,r4
 8015038:	d9000515 	stw	r4,20(sp)
 801503c:	8009883a 	mov	r4,r16
 8015040:	a80b883a 	mov	r5,r21
 8015044:	80176dc0 	call	80176dc <_Bfree>
 8015048:	883f751e 	bne	r17,zero,8014e20 <__alt_data_end+0xfc014e20>
 801504c:	003de406 	br	80147e0 <__alt_data_end+0xfc0147e0>
 8015050:	e00b883a 	mov	r5,fp
 8015054:	8009883a 	mov	r4,r16
 8015058:	8017c6c0 	call	8017c6c <__pow5mult>
 801505c:	1039883a 	mov	fp,r2
 8015060:	003ed306 	br	8014bb0 <__alt_data_end+0xfc014bb0>
 8015064:	903ee01e 	bne	r18,zero,8014be8 <__alt_data_end+0xfc014be8>
 8015068:	00800434 	movhi	r2,16
 801506c:	10bfffc4 	addi	r2,r2,-1
 8015070:	9884703a 	and	r2,r19,r2
 8015074:	103f081e 	bne	r2,zero,8014c98 <__alt_data_end+0xfc014c98>
 8015078:	9cdffc2c 	andhi	r19,r19,32752
 801507c:	983f0626 	beq	r19,zero,8014c98 <__alt_data_end+0xfc014c98>
 8015080:	d8800817 	ldw	r2,32(sp)
 8015084:	b5800044 	addi	r22,r22,1
 8015088:	04c00044 	movi	r19,1
 801508c:	10800044 	addi	r2,r2,1
 8015090:	d8800815 	stw	r2,32(sp)
 8015094:	003f0106 	br	8014c9c <__alt_data_end+0xfc014c9c>
 8015098:	d9800f17 	ldw	r6,60(sp)
 801509c:	30016826 	beq	r6,zero,8015640 <_dtoa_r+0x1518>
 80150a0:	10810cc4 	addi	r2,r2,1075
 80150a4:	dd400917 	ldw	r21,36(sp)
 80150a8:	dd000817 	ldw	r20,32(sp)
 80150ac:	003e9906 	br	8014b14 <__alt_data_end+0xfc014b14>
 80150b0:	9011883a 	mov	r8,r18
 80150b4:	4007883a 	mov	r3,r8
 80150b8:	e02d883a 	mov	r22,fp
 80150bc:	0080100e 	bge	zero,r2,8015100 <_dtoa_r+0xfd8>
 80150c0:	01800044 	movi	r6,1
 80150c4:	8009883a 	mov	r4,r16
 80150c8:	e00b883a 	mov	r5,fp
 80150cc:	da001515 	stw	r8,84(sp)
 80150d0:	da001715 	stw	r8,92(sp)
 80150d4:	8017dac0 	call	8017dac <__lshift>
 80150d8:	1009883a 	mov	r4,r2
 80150dc:	a80b883a 	mov	r5,r21
 80150e0:	102d883a 	mov	r22,r2
 80150e4:	8017ef40 	call	8017ef4 <__mcmp>
 80150e8:	d8c01517 	ldw	r3,84(sp)
 80150ec:	da001717 	ldw	r8,92(sp)
 80150f0:	0081a50e 	bge	zero,r2,8015788 <_dtoa_r+0x1660>
 80150f4:	00800e44 	movi	r2,57
 80150f8:	40817b26 	beq	r8,r2,80156e8 <_dtoa_r+0x15c0>
 80150fc:	40c00044 	addi	r3,r8,1
 8015100:	8825883a 	mov	r18,r17
 8015104:	9dc00044 	addi	r23,r19,1
 8015108:	98c00005 	stb	r3,0(r19)
 801510c:	a023883a 	mov	r17,r20
 8015110:	b039883a 	mov	fp,r22
 8015114:	003f3906 	br	8014dfc <__alt_data_end+0xfc014dfc>
 8015118:	00800e44 	movi	r2,57
 801511c:	9011883a 	mov	r8,r18
 8015120:	90817226 	beq	r18,r2,80156ec <_dtoa_r+0x15c4>
 8015124:	0580010e 	bge	zero,r22,801512c <_dtoa_r+0x1004>
 8015128:	ba000c44 	addi	r8,r23,49
 801512c:	8825883a 	mov	r18,r17
 8015130:	9dc00044 	addi	r23,r19,1
 8015134:	9a000005 	stb	r8,0(r19)
 8015138:	a023883a 	mov	r17,r20
 801513c:	003f2f06 	br	8014dfc <__alt_data_end+0xfc014dfc>
 8015140:	880b883a 	mov	r5,r17
 8015144:	8009883a 	mov	r4,r16
 8015148:	01800284 	movi	r6,10
 801514c:	000f883a 	mov	r7,zero
 8015150:	80177040 	call	8017704 <__multadd>
 8015154:	1023883a 	mov	r17,r2
 8015158:	1029883a 	mov	r20,r2
 801515c:	003f9706 	br	8014fbc <__alt_data_end+0xfc014fbc>
 8015160:	8009883a 	mov	r4,r16
 8015164:	180b883a 	mov	r5,r3
 8015168:	80176dc0 	call	80176dc <_Bfree>
 801516c:	00800044 	movi	r2,1
 8015170:	003f7306 	br	8014f40 <__alt_data_end+0xfc014f40>
 8015174:	e009883a 	mov	r4,fp
 8015178:	a80b883a 	mov	r5,r21
 801517c:	8017ef40 	call	8017ef4 <__mcmp>
 8015180:	103ee60e 	bge	r2,zero,8014d1c <__alt_data_end+0xfc014d1c>
 8015184:	8009883a 	mov	r4,r16
 8015188:	e00b883a 	mov	r5,fp
 801518c:	01800284 	movi	r6,10
 8015190:	000f883a 	mov	r7,zero
 8015194:	80177040 	call	8017704 <__multadd>
 8015198:	d9000517 	ldw	r4,20(sp)
 801519c:	d9800b17 	ldw	r6,44(sp)
 80151a0:	1039883a 	mov	fp,r2
 80151a4:	213fffc4 	addi	r4,r4,-1
 80151a8:	d9000515 	stw	r4,20(sp)
 80151ac:	303f2d1e 	bne	r6,zero,8014e64 <__alt_data_end+0xfc014e64>
 80151b0:	d9000d17 	ldw	r4,52(sp)
 80151b4:	0101780e 	bge	zero,r4,8015798 <_dtoa_r+0x1670>
 80151b8:	d9000615 	stw	r4,24(sp)
 80151bc:	003edb06 	br	8014d2c <__alt_data_end+0xfc014d2c>
 80151c0:	00800084 	movi	r2,2
 80151c4:	30818e1e 	bne	r6,r2,8015800 <_dtoa_r+0x16d8>
 80151c8:	d8000b15 	stw	zero,44(sp)
 80151cc:	003f8106 	br	8014fd4 <__alt_data_end+0xfc014fd4>
 80151d0:	d8800717 	ldw	r2,28(sp)
 80151d4:	003c0306 	br	80141e4 <__alt_data_end+0xfc0141e4>
 80151d8:	d9000317 	ldw	r4,12(sp)
 80151dc:	00800084 	movi	r2,2
 80151e0:	113ed00e 	bge	r2,r4,8014d24 <__alt_data_end+0xfc014d24>
 80151e4:	d8c00617 	ldw	r3,24(sp)
 80151e8:	183f901e 	bne	r3,zero,801502c <__alt_data_end+0xfc01502c>
 80151ec:	a80b883a 	mov	r5,r21
 80151f0:	8009883a 	mov	r4,r16
 80151f4:	01800144 	movi	r6,5
 80151f8:	000f883a 	mov	r7,zero
 80151fc:	80177040 	call	8017704 <__multadd>
 8015200:	e009883a 	mov	r4,fp
 8015204:	100b883a 	mov	r5,r2
 8015208:	102b883a 	mov	r21,r2
 801520c:	8017ef40 	call	8017ef4 <__mcmp>
 8015210:	00bf860e 	bge	zero,r2,801502c <__alt_data_end+0xfc01502c>
 8015214:	d9800717 	ldw	r6,28(sp)
 8015218:	00800c44 	movi	r2,49
 801521c:	30800005 	stb	r2,0(r6)
 8015220:	d8800517 	ldw	r2,20(sp)
 8015224:	35c00044 	addi	r23,r6,1
 8015228:	10800044 	addi	r2,r2,1
 801522c:	d8800515 	stw	r2,20(sp)
 8015230:	003f8206 	br	801503c <__alt_data_end+0xfc01503c>
 8015234:	903e981e 	bne	r18,zero,8014c98 <__alt_data_end+0xfc014c98>
 8015238:	003f8b06 	br	8015068 <__alt_data_end+0xfc015068>
 801523c:	d9800517 	ldw	r6,20(sp)
 8015240:	d8c00717 	ldw	r3,28(sp)
 8015244:	00800c44 	movi	r2,49
 8015248:	31800044 	addi	r6,r6,1
 801524c:	d9800515 	stw	r6,20(sp)
 8015250:	18800005 	stb	r2,0(r3)
 8015254:	003ee906 	br	8014dfc <__alt_data_end+0xfc014dfc>
 8015258:	dc000317 	ldw	r16,12(sp)
 801525c:	003d6006 	br	80147e0 <__alt_data_end+0xfc0147e0>
 8015260:	8809883a 	mov	r4,r17
 8015264:	800d2d00 	call	800d2d0 <__floatsidf>
 8015268:	a009883a 	mov	r4,r20
 801526c:	a80b883a 	mov	r5,r21
 8015270:	100d883a 	mov	r6,r2
 8015274:	180f883a 	mov	r7,r3
 8015278:	800c2540 	call	800c254 <__muldf3>
 801527c:	1009883a 	mov	r4,r2
 8015280:	180b883a 	mov	r5,r3
 8015284:	000d883a 	mov	r6,zero
 8015288:	01d00734 	movhi	r7,16412
 801528c:	800aea80 	call	800aea8 <__adddf3>
 8015290:	1023883a 	mov	r17,r2
 8015294:	00bf3034 	movhi	r2,64704
 8015298:	1885883a 	add	r2,r3,r2
 801529c:	d8800e15 	stw	r2,56(sp)
 80152a0:	a009883a 	mov	r4,r20
 80152a4:	a80b883a 	mov	r5,r21
 80152a8:	000d883a 	mov	r6,zero
 80152ac:	01d00534 	movhi	r7,16404
 80152b0:	800c9780 	call	800c978 <__subdf3>
 80152b4:	d9c00e17 	ldw	r7,56(sp)
 80152b8:	1009883a 	mov	r4,r2
 80152bc:	180b883a 	mov	r5,r3
 80152c0:	880d883a 	mov	r6,r17
 80152c4:	102b883a 	mov	r21,r2
 80152c8:	1829883a 	mov	r20,r3
 80152cc:	800c0940 	call	800c094 <__gedf2>
 80152d0:	00807716 	blt	zero,r2,80154b0 <_dtoa_r+0x1388>
 80152d4:	d8800e17 	ldw	r2,56(sp)
 80152d8:	a809883a 	mov	r4,r21
 80152dc:	a00b883a 	mov	r5,r20
 80152e0:	11e0003c 	xorhi	r7,r2,32768
 80152e4:	880d883a 	mov	r6,r17
 80152e8:	800c1740 	call	800c174 <__ledf2>
 80152ec:	103d6b0e 	bge	r2,zero,801489c <__alt_data_end+0xfc01489c>
 80152f0:	002b883a 	mov	r21,zero
 80152f4:	0023883a 	mov	r17,zero
 80152f8:	003f4c06 	br	801502c <__alt_data_end+0xfc01502c>
 80152fc:	d9800917 	ldw	r6,36(sp)
 8015300:	e00b883a 	mov	r5,fp
 8015304:	8009883a 	mov	r4,r16
 8015308:	8017c6c0 	call	8017c6c <__pow5mult>
 801530c:	1039883a 	mov	fp,r2
 8015310:	003e2706 	br	8014bb0 <__alt_data_end+0xfc014bb0>
 8015314:	d8000b15 	stw	zero,44(sp)
 8015318:	003c4906 	br	8014440 <__alt_data_end+0xfc014440>
 801531c:	d9000917 	ldw	r4,36(sp)
 8015320:	d9800a17 	ldw	r6,40(sp)
 8015324:	dd400915 	stw	r21,36(sp)
 8015328:	a905c83a 	sub	r2,r21,r4
 801532c:	308d883a 	add	r6,r6,r2
 8015330:	d9800a15 	stw	r6,40(sp)
 8015334:	002b883a 	mov	r21,zero
 8015338:	003df206 	br	8014b04 <__alt_data_end+0xfc014b04>
 801533c:	dc800e15 	stw	r18,56(sp)
 8015340:	982b883a 	mov	r21,r19
 8015344:	04400084 	movi	r17,2
 8015348:	003c7406 	br	801451c <__alt_data_end+0xfc01451c>
 801534c:	04400044 	movi	r17,1
 8015350:	dc400d15 	stw	r17,52(sp)
 8015354:	dc400615 	stw	r17,24(sp)
 8015358:	dc402215 	stw	r17,136(sp)
 801535c:	80001115 	stw	zero,68(r16)
 8015360:	000b883a 	mov	r5,zero
 8015364:	003c4a06 	br	8014490 <__alt_data_end+0xfc014490>
 8015368:	3023883a 	mov	r17,r6
 801536c:	003ffb06 	br	801535c <__alt_data_end+0xfc01535c>
 8015370:	1000021e 	bne	r2,zero,801537c <_dtoa_r+0x1254>
 8015374:	4200004c 	andi	r8,r8,1
 8015378:	403e8f1e 	bne	r8,zero,8014db8 <__alt_data_end+0xfc014db8>
 801537c:	01000c04 	movi	r4,48
 8015380:	00000106 	br	8015388 <_dtoa_r+0x1260>
 8015384:	102f883a 	mov	r23,r2
 8015388:	b8bfffc4 	addi	r2,r23,-1
 801538c:	10c00007 	ldb	r3,0(r2)
 8015390:	193ffc26 	beq	r3,r4,8015384 <__alt_data_end+0xfc015384>
 8015394:	003e9906 	br	8014dfc <__alt_data_end+0xfc014dfc>
 8015398:	d9000517 	ldw	r4,20(sp)
 801539c:	012fc83a 	sub	r23,zero,r4
 80153a0:	b800ad26 	beq	r23,zero,8015658 <_dtoa_r+0x1530>
 80153a4:	b88003cc 	andi	r2,r23,15
 80153a8:	100490fa 	slli	r2,r2,3
 80153ac:	00c200f4 	movhi	r3,2051
 80153b0:	18ebf104 	addi	r3,r3,-20540
 80153b4:	1885883a 	add	r2,r3,r2
 80153b8:	11800017 	ldw	r6,0(r2)
 80153bc:	11c00117 	ldw	r7,4(r2)
 80153c0:	b82fd13a 	srai	r23,r23,4
 80153c4:	9009883a 	mov	r4,r18
 80153c8:	980b883a 	mov	r5,r19
 80153cc:	800c2540 	call	800c254 <__muldf3>
 80153d0:	1029883a 	mov	r20,r2
 80153d4:	182b883a 	mov	r21,r3
 80153d8:	b800f426 	beq	r23,zero,80157ac <_dtoa_r+0x1684>
 80153dc:	020200f4 	movhi	r8,2051
 80153e0:	422be704 	addi	r8,r8,-20580
 80153e4:	8029883a 	mov	r20,r16
 80153e8:	04400084 	movi	r17,2
 80153ec:	4021883a 	mov	r16,r8
 80153f0:	b980004c 	andi	r6,r23,1
 80153f4:	1009883a 	mov	r4,r2
 80153f8:	b82fd07a 	srai	r23,r23,1
 80153fc:	180b883a 	mov	r5,r3
 8015400:	30000426 	beq	r6,zero,8015414 <_dtoa_r+0x12ec>
 8015404:	81800017 	ldw	r6,0(r16)
 8015408:	81c00117 	ldw	r7,4(r16)
 801540c:	8c400044 	addi	r17,r17,1
 8015410:	800c2540 	call	800c254 <__muldf3>
 8015414:	84000204 	addi	r16,r16,8
 8015418:	b83ff51e 	bne	r23,zero,80153f0 <__alt_data_end+0xfc0153f0>
 801541c:	a021883a 	mov	r16,r20
 8015420:	182b883a 	mov	r21,r3
 8015424:	1029883a 	mov	r20,r2
 8015428:	003c5506 	br	8014580 <__alt_data_end+0xfc014580>
 801542c:	d9800517 	ldw	r6,20(sp)
 8015430:	d9000717 	ldw	r4,28(sp)
 8015434:	00c00c04 	movi	r3,48
 8015438:	31800044 	addi	r6,r6,1
 801543c:	d9800515 	stw	r6,20(sp)
 8015440:	20c00005 	stb	r3,0(r4)
 8015444:	02000c44 	movi	r8,49
 8015448:	003da206 	br	8014ad4 <__alt_data_end+0xfc014ad4>
 801544c:	89400117 	ldw	r5,4(r17)
 8015450:	8009883a 	mov	r4,r16
 8015454:	80176340 	call	8017634 <_Balloc>
 8015458:	89800417 	ldw	r6,16(r17)
 801545c:	11000304 	addi	r4,r2,12
 8015460:	89400304 	addi	r5,r17,12
 8015464:	31800084 	addi	r6,r6,2
 8015468:	318d883a 	add	r6,r6,r6
 801546c:	318d883a 	add	r6,r6,r6
 8015470:	1027883a 	mov	r19,r2
 8015474:	80173d80 	call	80173d8 <memcpy>
 8015478:	8009883a 	mov	r4,r16
 801547c:	980b883a 	mov	r5,r19
 8015480:	01800044 	movi	r6,1
 8015484:	8017dac0 	call	8017dac <__lshift>
 8015488:	1029883a 	mov	r20,r2
 801548c:	003e8606 	br	8014ea8 <__alt_data_end+0xfc014ea8>
 8015490:	00800e44 	movi	r2,57
 8015494:	90809526 	beq	r18,r2,80156ec <_dtoa_r+0x15c4>
 8015498:	92000044 	addi	r8,r18,1
 801549c:	003f2306 	br	801512c <__alt_data_end+0xfc01512c>
 80154a0:	9011883a 	mov	r8,r18
 80154a4:	8825883a 	mov	r18,r17
 80154a8:	a023883a 	mov	r17,r20
 80154ac:	003e3706 	br	8014d8c <__alt_data_end+0xfc014d8c>
 80154b0:	002b883a 	mov	r21,zero
 80154b4:	0023883a 	mov	r17,zero
 80154b8:	003f5606 	br	8015214 <__alt_data_end+0xfc015214>
 80154bc:	51bfffc4 	addi	r6,r10,-1
 80154c0:	300490fa 	slli	r2,r6,3
 80154c4:	00c200f4 	movhi	r3,2051
 80154c8:	18ebf104 	addi	r3,r3,-20540
 80154cc:	1885883a 	add	r2,r3,r2
 80154d0:	d9c00e17 	ldw	r7,56(sp)
 80154d4:	11000017 	ldw	r4,0(r2)
 80154d8:	11400117 	ldw	r5,4(r2)
 80154dc:	d8800717 	ldw	r2,28(sp)
 80154e0:	d9801015 	stw	r6,64(sp)
 80154e4:	880d883a 	mov	r6,r17
 80154e8:	da801615 	stw	r10,88(sp)
 80154ec:	15c00044 	addi	r23,r2,1
 80154f0:	800c2540 	call	800c254 <__muldf3>
 80154f4:	a80b883a 	mov	r5,r21
 80154f8:	a009883a 	mov	r4,r20
 80154fc:	d8c01115 	stw	r3,68(sp)
 8015500:	d8800e15 	stw	r2,56(sp)
 8015504:	800d2480 	call	800d248 <__fixdfsi>
 8015508:	1009883a 	mov	r4,r2
 801550c:	1023883a 	mov	r17,r2
 8015510:	800d2d00 	call	800d2d0 <__floatsidf>
 8015514:	a009883a 	mov	r4,r20
 8015518:	a80b883a 	mov	r5,r21
 801551c:	100d883a 	mov	r6,r2
 8015520:	180f883a 	mov	r7,r3
 8015524:	800c9780 	call	800c978 <__subdf3>
 8015528:	1813883a 	mov	r9,r3
 801552c:	d8c00717 	ldw	r3,28(sp)
 8015530:	8c400c04 	addi	r17,r17,48
 8015534:	1011883a 	mov	r8,r2
 8015538:	1c400005 	stb	r17,0(r3)
 801553c:	da801617 	ldw	r10,88(sp)
 8015540:	00800044 	movi	r2,1
 8015544:	50802326 	beq	r10,r2,80155d4 <_dtoa_r+0x14ac>
 8015548:	d8800717 	ldw	r2,28(sp)
 801554c:	b82b883a 	mov	r21,r23
 8015550:	dc001315 	stw	r16,76(sp)
 8015554:	12a9883a 	add	r20,r2,r10
 8015558:	4807883a 	mov	r3,r9
 801555c:	4005883a 	mov	r2,r8
 8015560:	dc801415 	stw	r18,80(sp)
 8015564:	000d883a 	mov	r6,zero
 8015568:	01d00934 	movhi	r7,16420
 801556c:	1009883a 	mov	r4,r2
 8015570:	180b883a 	mov	r5,r3
 8015574:	800c2540 	call	800c254 <__muldf3>
 8015578:	180b883a 	mov	r5,r3
 801557c:	1009883a 	mov	r4,r2
 8015580:	1821883a 	mov	r16,r3
 8015584:	1025883a 	mov	r18,r2
 8015588:	800d2480 	call	800d248 <__fixdfsi>
 801558c:	1009883a 	mov	r4,r2
 8015590:	1023883a 	mov	r17,r2
 8015594:	800d2d00 	call	800d2d0 <__floatsidf>
 8015598:	9009883a 	mov	r4,r18
 801559c:	800b883a 	mov	r5,r16
 80155a0:	100d883a 	mov	r6,r2
 80155a4:	180f883a 	mov	r7,r3
 80155a8:	8c400c04 	addi	r17,r17,48
 80155ac:	800c9780 	call	800c978 <__subdf3>
 80155b0:	ad400044 	addi	r21,r21,1
 80155b4:	ac7fffc5 	stb	r17,-1(r21)
 80155b8:	ad3fea1e 	bne	r21,r20,8015564 <__alt_data_end+0xfc015564>
 80155bc:	1813883a 	mov	r9,r3
 80155c0:	d8c01017 	ldw	r3,64(sp)
 80155c4:	dc001317 	ldw	r16,76(sp)
 80155c8:	dc801417 	ldw	r18,80(sp)
 80155cc:	1011883a 	mov	r8,r2
 80155d0:	b8ef883a 	add	r23,r23,r3
 80155d4:	d9000e17 	ldw	r4,56(sp)
 80155d8:	d9401117 	ldw	r5,68(sp)
 80155dc:	000d883a 	mov	r6,zero
 80155e0:	01cff834 	movhi	r7,16352
 80155e4:	da001715 	stw	r8,92(sp)
 80155e8:	da401515 	stw	r9,84(sp)
 80155ec:	800aea80 	call	800aea8 <__adddf3>
 80155f0:	da001717 	ldw	r8,92(sp)
 80155f4:	da401517 	ldw	r9,84(sp)
 80155f8:	1009883a 	mov	r4,r2
 80155fc:	400d883a 	mov	r6,r8
 8015600:	480f883a 	mov	r7,r9
 8015604:	180b883a 	mov	r5,r3
 8015608:	800c1740 	call	800c174 <__ledf2>
 801560c:	da001717 	ldw	r8,92(sp)
 8015610:	da401517 	ldw	r9,84(sp)
 8015614:	10003b0e 	bge	r2,zero,8015704 <_dtoa_r+0x15dc>
 8015618:	d9001217 	ldw	r4,72(sp)
 801561c:	bd7fffc3 	ldbu	r21,-1(r23)
 8015620:	d9000515 	stw	r4,20(sp)
 8015624:	003d1c06 	br	8014a98 <__alt_data_end+0xfc014a98>
 8015628:	d8c00817 	ldw	r3,32(sp)
 801562c:	18a9c83a 	sub	r20,r3,r2
 8015630:	0005883a 	mov	r2,zero
 8015634:	003d3706 	br	8014b14 <__alt_data_end+0xfc014b14>
 8015638:	00800044 	movi	r2,1
 801563c:	003dd006 	br	8014d80 <__alt_data_end+0xfc014d80>
 8015640:	d8c00217 	ldw	r3,8(sp)
 8015644:	00800d84 	movi	r2,54
 8015648:	dd400917 	ldw	r21,36(sp)
 801564c:	10c5c83a 	sub	r2,r2,r3
 8015650:	dd000817 	ldw	r20,32(sp)
 8015654:	003d2f06 	br	8014b14 <__alt_data_end+0xfc014b14>
 8015658:	9029883a 	mov	r20,r18
 801565c:	982b883a 	mov	r21,r19
 8015660:	04400084 	movi	r17,2
 8015664:	003bc606 	br	8014580 <__alt_data_end+0xfc014580>
 8015668:	d8800617 	ldw	r2,24(sp)
 801566c:	103efc26 	beq	r2,zero,8015260 <__alt_data_end+0xfc015260>
 8015670:	d8c00d17 	ldw	r3,52(sp)
 8015674:	00fc890e 	bge	zero,r3,801489c <__alt_data_end+0xfc01489c>
 8015678:	a80b883a 	mov	r5,r21
 801567c:	a009883a 	mov	r4,r20
 8015680:	000d883a 	mov	r6,zero
 8015684:	01d00934 	movhi	r7,16420
 8015688:	800c2540 	call	800c254 <__muldf3>
 801568c:	89000044 	addi	r4,r17,1
 8015690:	1029883a 	mov	r20,r2
 8015694:	182b883a 	mov	r21,r3
 8015698:	800d2d00 	call	800d2d0 <__floatsidf>
 801569c:	a009883a 	mov	r4,r20
 80156a0:	a80b883a 	mov	r5,r21
 80156a4:	100d883a 	mov	r6,r2
 80156a8:	180f883a 	mov	r7,r3
 80156ac:	800c2540 	call	800c254 <__muldf3>
 80156b0:	1009883a 	mov	r4,r2
 80156b4:	180b883a 	mov	r5,r3
 80156b8:	000d883a 	mov	r6,zero
 80156bc:	01d00734 	movhi	r7,16412
 80156c0:	800aea80 	call	800aea8 <__adddf3>
 80156c4:	d9000517 	ldw	r4,20(sp)
 80156c8:	1023883a 	mov	r17,r2
 80156cc:	00bf3034 	movhi	r2,64704
 80156d0:	213fffc4 	addi	r4,r4,-1
 80156d4:	1885883a 	add	r2,r3,r2
 80156d8:	d9001215 	stw	r4,72(sp)
 80156dc:	d8800e15 	stw	r2,56(sp)
 80156e0:	da800d17 	ldw	r10,52(sp)
 80156e4:	003bc306 	br	80145f4 <__alt_data_end+0xfc0145f4>
 80156e8:	b039883a 	mov	fp,r22
 80156ec:	01000e44 	movi	r4,57
 80156f0:	8825883a 	mov	r18,r17
 80156f4:	9dc00044 	addi	r23,r19,1
 80156f8:	99000005 	stb	r4,0(r19)
 80156fc:	a023883a 	mov	r17,r20
 8015700:	003dae06 	br	8014dbc <__alt_data_end+0xfc014dbc>
 8015704:	d9800e17 	ldw	r6,56(sp)
 8015708:	d9c01117 	ldw	r7,68(sp)
 801570c:	0009883a 	mov	r4,zero
 8015710:	014ff834 	movhi	r5,16352
 8015714:	da001715 	stw	r8,92(sp)
 8015718:	da401515 	stw	r9,84(sp)
 801571c:	800c9780 	call	800c978 <__subdf3>
 8015720:	da001717 	ldw	r8,92(sp)
 8015724:	da401517 	ldw	r9,84(sp)
 8015728:	1009883a 	mov	r4,r2
 801572c:	180b883a 	mov	r5,r3
 8015730:	400d883a 	mov	r6,r8
 8015734:	480f883a 	mov	r7,r9
 8015738:	800c0940 	call	800c094 <__gedf2>
 801573c:	00bc570e 	bge	zero,r2,801489c <__alt_data_end+0xfc01489c>
 8015740:	01000c04 	movi	r4,48
 8015744:	00000106 	br	801574c <_dtoa_r+0x1624>
 8015748:	102f883a 	mov	r23,r2
 801574c:	b8bfffc4 	addi	r2,r23,-1
 8015750:	10c00007 	ldb	r3,0(r2)
 8015754:	193ffc26 	beq	r3,r4,8015748 <__alt_data_end+0xfc015748>
 8015758:	d9801217 	ldw	r6,72(sp)
 801575c:	d9800515 	stw	r6,20(sp)
 8015760:	003c1f06 	br	80147e0 <__alt_data_end+0xfc0147e0>
 8015764:	d8801217 	ldw	r2,72(sp)
 8015768:	dc001117 	ldw	r16,68(sp)
 801576c:	d8800515 	stw	r2,20(sp)
 8015770:	003cc906 	br	8014a98 <__alt_data_end+0xfc014a98>
 8015774:	dd801317 	ldw	r22,76(sp)
 8015778:	dc001117 	ldw	r16,68(sp)
 801577c:	dcc01417 	ldw	r19,80(sp)
 8015780:	dc801017 	ldw	r18,64(sp)
 8015784:	003c4506 	br	801489c <__alt_data_end+0xfc01489c>
 8015788:	103e5d1e 	bne	r2,zero,8015100 <__alt_data_end+0xfc015100>
 801578c:	4080004c 	andi	r2,r8,1
 8015790:	103e5b26 	beq	r2,zero,8015100 <__alt_data_end+0xfc015100>
 8015794:	003e5706 	br	80150f4 <__alt_data_end+0xfc0150f4>
 8015798:	d8c00317 	ldw	r3,12(sp)
 801579c:	00800084 	movi	r2,2
 80157a0:	10c00a16 	blt	r2,r3,80157cc <_dtoa_r+0x16a4>
 80157a4:	d9000d17 	ldw	r4,52(sp)
 80157a8:	003e8306 	br	80151b8 <__alt_data_end+0xfc0151b8>
 80157ac:	04400084 	movi	r17,2
 80157b0:	003b7306 	br	8014580 <__alt_data_end+0xfc014580>
 80157b4:	d9801217 	ldw	r6,72(sp)
 80157b8:	d9800515 	stw	r6,20(sp)
 80157bc:	003cb606 	br	8014a98 <__alt_data_end+0xfc014a98>
 80157c0:	d9001217 	ldw	r4,72(sp)
 80157c4:	d9000515 	stw	r4,20(sp)
 80157c8:	003c0506 	br	80147e0 <__alt_data_end+0xfc0147e0>
 80157cc:	d9800d17 	ldw	r6,52(sp)
 80157d0:	d9800615 	stw	r6,24(sp)
 80157d4:	003e8306 	br	80151e4 <__alt_data_end+0xfc0151e4>
 80157d8:	d9800317 	ldw	r6,12(sp)
 80157dc:	00800084 	movi	r2,2
 80157e0:	11800216 	blt	r2,r6,80157ec <_dtoa_r+0x16c4>
 80157e4:	d8800d17 	ldw	r2,52(sp)
 80157e8:	003da606 	br	8014e84 <__alt_data_end+0xfc014e84>
 80157ec:	d8800d17 	ldw	r2,52(sp)
 80157f0:	d8800615 	stw	r2,24(sp)
 80157f4:	003e7b06 	br	80151e4 <__alt_data_end+0xfc0151e4>
 80157f8:	05000044 	movi	r20,1
 80157fc:	003b0506 	br	8014414 <__alt_data_end+0xfc014414>
 8015800:	8009883a 	mov	r4,r16
 8015804:	80001115 	stw	zero,68(r16)
 8015808:	000b883a 	mov	r5,zero
 801580c:	80176340 	call	8017634 <_Balloc>
 8015810:	d8800715 	stw	r2,28(sp)
 8015814:	d8c00717 	ldw	r3,28(sp)
 8015818:	00bfffc4 	movi	r2,-1
 801581c:	01000044 	movi	r4,1
 8015820:	d8800615 	stw	r2,24(sp)
 8015824:	80c01015 	stw	r3,64(r16)
 8015828:	d9000b15 	stw	r4,44(sp)
 801582c:	d8002215 	stw	zero,136(sp)
 8015830:	d8800d15 	stw	r2,52(sp)
 8015834:	003c1906 	br	801489c <__alt_data_end+0xfc01489c>
 8015838:	193d2926 	beq	r3,r4,8014ce0 <__alt_data_end+0xfc014ce0>
 801583c:	00c00f04 	movi	r3,60
 8015840:	1885c83a 	sub	r2,r3,r2
 8015844:	003d7b06 	br	8014e34 <__alt_data_end+0xfc014e34>
 8015848:	000b883a 	mov	r5,zero
 801584c:	003b1006 	br	8014490 <__alt_data_end+0xfc014490>

08015850 <_fflush_r>:
 8015850:	defffb04 	addi	sp,sp,-20
 8015854:	dcc00315 	stw	r19,12(sp)
 8015858:	dc000015 	stw	r16,0(sp)
 801585c:	dfc00415 	stw	ra,16(sp)
 8015860:	dc800215 	stw	r18,8(sp)
 8015864:	dc400115 	stw	r17,4(sp)
 8015868:	2027883a 	mov	r19,r4
 801586c:	2821883a 	mov	r16,r5
 8015870:	20000226 	beq	r4,zero,801587c <_fflush_r+0x2c>
 8015874:	20800e17 	ldw	r2,56(r4)
 8015878:	10005326 	beq	r2,zero,80159c8 <_fflush_r+0x178>
 801587c:	8080030b 	ldhu	r2,12(r16)
 8015880:	10ffffcc 	andi	r3,r2,65535
 8015884:	18e0001c 	xori	r3,r3,32768
 8015888:	18e00004 	addi	r3,r3,-32768
 801588c:	18002c26 	beq	r3,zero,8015940 <_fflush_r+0xf0>
 8015890:	10c0020c 	andi	r3,r2,8
 8015894:	1800321e 	bne	r3,zero,8015960 <_fflush_r+0x110>
 8015898:	80c00117 	ldw	r3,4(r16)
 801589c:	10820014 	ori	r2,r2,2048
 80158a0:	8080030d 	sth	r2,12(r16)
 80158a4:	00c0570e 	bge	zero,r3,8015a04 <_fflush_r+0x1b4>
 80158a8:	82000a17 	ldw	r8,40(r16)
 80158ac:	40002426 	beq	r8,zero,8015940 <_fflush_r+0xf0>
 80158b0:	9c400017 	ldw	r17,0(r19)
 80158b4:	10c4000c 	andi	r3,r2,4096
 80158b8:	98000015 	stw	zero,0(r19)
 80158bc:	18004626 	beq	r3,zero,80159d8 <_fflush_r+0x188>
 80158c0:	81801417 	ldw	r6,80(r16)
 80158c4:	10c0010c 	andi	r3,r2,4
 80158c8:	18000626 	beq	r3,zero,80158e4 <_fflush_r+0x94>
 80158cc:	80c00117 	ldw	r3,4(r16)
 80158d0:	80800c17 	ldw	r2,48(r16)
 80158d4:	30cdc83a 	sub	r6,r6,r3
 80158d8:	10000226 	beq	r2,zero,80158e4 <_fflush_r+0x94>
 80158dc:	80800f17 	ldw	r2,60(r16)
 80158e0:	308dc83a 	sub	r6,r6,r2
 80158e4:	81400717 	ldw	r5,28(r16)
 80158e8:	9809883a 	mov	r4,r19
 80158ec:	000f883a 	mov	r7,zero
 80158f0:	403ee83a 	callr	r8
 80158f4:	00ffffc4 	movi	r3,-1
 80158f8:	10c04526 	beq	r2,r3,8015a10 <_fflush_r+0x1c0>
 80158fc:	80c0030b 	ldhu	r3,12(r16)
 8015900:	81000417 	ldw	r4,16(r16)
 8015904:	80000115 	stw	zero,4(r16)
 8015908:	197dffcc 	andi	r5,r3,63487
 801590c:	8140030d 	sth	r5,12(r16)
 8015910:	81000015 	stw	r4,0(r16)
 8015914:	18c4000c 	andi	r3,r3,4096
 8015918:	18000126 	beq	r3,zero,8015920 <_fflush_r+0xd0>
 801591c:	80801415 	stw	r2,80(r16)
 8015920:	81400c17 	ldw	r5,48(r16)
 8015924:	9c400015 	stw	r17,0(r19)
 8015928:	28000526 	beq	r5,zero,8015940 <_fflush_r+0xf0>
 801592c:	80801004 	addi	r2,r16,64
 8015930:	28800226 	beq	r5,r2,801593c <_fflush_r+0xec>
 8015934:	9809883a 	mov	r4,r19
 8015938:	8015f6c0 	call	8015f6c <_free_r>
 801593c:	80000c15 	stw	zero,48(r16)
 8015940:	0005883a 	mov	r2,zero
 8015944:	dfc00417 	ldw	ra,16(sp)
 8015948:	dcc00317 	ldw	r19,12(sp)
 801594c:	dc800217 	ldw	r18,8(sp)
 8015950:	dc400117 	ldw	r17,4(sp)
 8015954:	dc000017 	ldw	r16,0(sp)
 8015958:	dec00504 	addi	sp,sp,20
 801595c:	f800283a 	ret
 8015960:	84800417 	ldw	r18,16(r16)
 8015964:	903ff626 	beq	r18,zero,8015940 <__alt_data_end+0xfc015940>
 8015968:	84400017 	ldw	r17,0(r16)
 801596c:	108000cc 	andi	r2,r2,3
 8015970:	84800015 	stw	r18,0(r16)
 8015974:	8ca3c83a 	sub	r17,r17,r18
 8015978:	10001526 	beq	r2,zero,80159d0 <_fflush_r+0x180>
 801597c:	0005883a 	mov	r2,zero
 8015980:	80800215 	stw	r2,8(r16)
 8015984:	04400316 	blt	zero,r17,8015994 <_fflush_r+0x144>
 8015988:	003fed06 	br	8015940 <__alt_data_end+0xfc015940>
 801598c:	90a5883a 	add	r18,r18,r2
 8015990:	047feb0e 	bge	zero,r17,8015940 <__alt_data_end+0xfc015940>
 8015994:	80800917 	ldw	r2,36(r16)
 8015998:	81400717 	ldw	r5,28(r16)
 801599c:	880f883a 	mov	r7,r17
 80159a0:	900d883a 	mov	r6,r18
 80159a4:	9809883a 	mov	r4,r19
 80159a8:	103ee83a 	callr	r2
 80159ac:	88a3c83a 	sub	r17,r17,r2
 80159b0:	00bff616 	blt	zero,r2,801598c <__alt_data_end+0xfc01598c>
 80159b4:	80c0030b 	ldhu	r3,12(r16)
 80159b8:	00bfffc4 	movi	r2,-1
 80159bc:	18c01014 	ori	r3,r3,64
 80159c0:	80c0030d 	sth	r3,12(r16)
 80159c4:	003fdf06 	br	8015944 <__alt_data_end+0xfc015944>
 80159c8:	8015df80 	call	8015df8 <__sinit>
 80159cc:	003fab06 	br	801587c <__alt_data_end+0xfc01587c>
 80159d0:	80800517 	ldw	r2,20(r16)
 80159d4:	003fea06 	br	8015980 <__alt_data_end+0xfc015980>
 80159d8:	81400717 	ldw	r5,28(r16)
 80159dc:	000d883a 	mov	r6,zero
 80159e0:	9809883a 	mov	r4,r19
 80159e4:	01c00044 	movi	r7,1
 80159e8:	403ee83a 	callr	r8
 80159ec:	100d883a 	mov	r6,r2
 80159f0:	00bfffc4 	movi	r2,-1
 80159f4:	30801326 	beq	r6,r2,8015a44 <_fflush_r+0x1f4>
 80159f8:	8080030b 	ldhu	r2,12(r16)
 80159fc:	82000a17 	ldw	r8,40(r16)
 8015a00:	003fb006 	br	80158c4 <__alt_data_end+0xfc0158c4>
 8015a04:	80c00f17 	ldw	r3,60(r16)
 8015a08:	00ffa716 	blt	zero,r3,80158a8 <__alt_data_end+0xfc0158a8>
 8015a0c:	003fcc06 	br	8015940 <__alt_data_end+0xfc015940>
 8015a10:	98c00017 	ldw	r3,0(r19)
 8015a14:	183fb926 	beq	r3,zero,80158fc <__alt_data_end+0xfc0158fc>
 8015a18:	01000744 	movi	r4,29
 8015a1c:	19000226 	beq	r3,r4,8015a28 <_fflush_r+0x1d8>
 8015a20:	01000584 	movi	r4,22
 8015a24:	1900101e 	bne	r3,r4,8015a68 <_fflush_r+0x218>
 8015a28:	8080030b 	ldhu	r2,12(r16)
 8015a2c:	80c00417 	ldw	r3,16(r16)
 8015a30:	80000115 	stw	zero,4(r16)
 8015a34:	10bdffcc 	andi	r2,r2,63487
 8015a38:	8080030d 	sth	r2,12(r16)
 8015a3c:	80c00015 	stw	r3,0(r16)
 8015a40:	003fb706 	br	8015920 <__alt_data_end+0xfc015920>
 8015a44:	98800017 	ldw	r2,0(r19)
 8015a48:	103feb26 	beq	r2,zero,80159f8 <__alt_data_end+0xfc0159f8>
 8015a4c:	00c00744 	movi	r3,29
 8015a50:	10c00226 	beq	r2,r3,8015a5c <_fflush_r+0x20c>
 8015a54:	00c00584 	movi	r3,22
 8015a58:	10ffd61e 	bne	r2,r3,80159b4 <__alt_data_end+0xfc0159b4>
 8015a5c:	9c400015 	stw	r17,0(r19)
 8015a60:	0005883a 	mov	r2,zero
 8015a64:	003fb706 	br	8015944 <__alt_data_end+0xfc015944>
 8015a68:	80c0030b 	ldhu	r3,12(r16)
 8015a6c:	18c01014 	ori	r3,r3,64
 8015a70:	80c0030d 	sth	r3,12(r16)
 8015a74:	003fb306 	br	8015944 <__alt_data_end+0xfc015944>

08015a78 <fflush>:
 8015a78:	20000526 	beq	r4,zero,8015a90 <fflush+0x18>
 8015a7c:	008200f4 	movhi	r2,2051
 8015a80:	10b31604 	addi	r2,r2,-13224
 8015a84:	200b883a 	mov	r5,r4
 8015a88:	11000017 	ldw	r4,0(r2)
 8015a8c:	80158501 	jmpi	8015850 <_fflush_r>
 8015a90:	008200f4 	movhi	r2,2051
 8015a94:	10b31504 	addi	r2,r2,-13228
 8015a98:	11000017 	ldw	r4,0(r2)
 8015a9c:	01420074 	movhi	r5,2049
 8015aa0:	29561404 	addi	r5,r5,22608
 8015aa4:	80163141 	jmpi	8016314 <_fwalk_reent>

08015aa8 <__fp_lock>:
 8015aa8:	0005883a 	mov	r2,zero
 8015aac:	f800283a 	ret

08015ab0 <__fp_unlock>:
 8015ab0:	0005883a 	mov	r2,zero
 8015ab4:	f800283a 	ret

08015ab8 <_cleanup_r>:
 8015ab8:	014200b4 	movhi	r5,2050
 8015abc:	296cf304 	addi	r5,r5,-19508
 8015ac0:	801625c1 	jmpi	801625c <_fwalk>

08015ac4 <__sinit.part.1>:
 8015ac4:	defff604 	addi	sp,sp,-40
 8015ac8:	00c20074 	movhi	r3,2049
 8015acc:	dfc00915 	stw	ra,36(sp)
 8015ad0:	df000815 	stw	fp,32(sp)
 8015ad4:	ddc00715 	stw	r23,28(sp)
 8015ad8:	dd800615 	stw	r22,24(sp)
 8015adc:	dd400515 	stw	r21,20(sp)
 8015ae0:	dd000415 	stw	r20,16(sp)
 8015ae4:	dcc00315 	stw	r19,12(sp)
 8015ae8:	dc800215 	stw	r18,8(sp)
 8015aec:	dc400115 	stw	r17,4(sp)
 8015af0:	dc000015 	stw	r16,0(sp)
 8015af4:	18d6ae04 	addi	r3,r3,23224
 8015af8:	24000117 	ldw	r16,4(r4)
 8015afc:	20c00f15 	stw	r3,60(r4)
 8015b00:	07000044 	movi	fp,1
 8015b04:	00c000c4 	movi	r3,3
 8015b08:	2080bb04 	addi	r2,r4,748
 8015b0c:	20c0b915 	stw	r3,740(r4)
 8015b10:	27000e15 	stw	fp,56(r4)
 8015b14:	2080ba15 	stw	r2,744(r4)
 8015b18:	2000b815 	stw	zero,736(r4)
 8015b1c:	05c00204 	movi	r23,8
 8015b20:	00800104 	movi	r2,4
 8015b24:	2025883a 	mov	r18,r4
 8015b28:	b80d883a 	mov	r6,r23
 8015b2c:	81001704 	addi	r4,r16,92
 8015b30:	000b883a 	mov	r5,zero
 8015b34:	80000015 	stw	zero,0(r16)
 8015b38:	80000115 	stw	zero,4(r16)
 8015b3c:	80000215 	stw	zero,8(r16)
 8015b40:	8080030d 	sth	r2,12(r16)
 8015b44:	80001915 	stw	zero,100(r16)
 8015b48:	8000038d 	sth	zero,14(r16)
 8015b4c:	80000415 	stw	zero,16(r16)
 8015b50:	80000515 	stw	zero,20(r16)
 8015b54:	80000615 	stw	zero,24(r16)
 8015b58:	80175100 	call	8017510 <memset>
 8015b5c:	058200b4 	movhi	r22,2050
 8015b60:	94400217 	ldw	r17,8(r18)
 8015b64:	054200b4 	movhi	r21,2050
 8015b68:	050200b4 	movhi	r20,2050
 8015b6c:	04c200b4 	movhi	r19,2050
 8015b70:	b5a1ca04 	addi	r22,r22,-30936
 8015b74:	ad61e104 	addi	r21,r21,-30844
 8015b78:	a5220004 	addi	r20,r20,-30720
 8015b7c:	9ce21704 	addi	r19,r19,-30628
 8015b80:	85800815 	stw	r22,32(r16)
 8015b84:	85400915 	stw	r21,36(r16)
 8015b88:	85000a15 	stw	r20,40(r16)
 8015b8c:	84c00b15 	stw	r19,44(r16)
 8015b90:	84000715 	stw	r16,28(r16)
 8015b94:	00800284 	movi	r2,10
 8015b98:	89001704 	addi	r4,r17,92
 8015b9c:	b80d883a 	mov	r6,r23
 8015ba0:	000b883a 	mov	r5,zero
 8015ba4:	88000015 	stw	zero,0(r17)
 8015ba8:	88000115 	stw	zero,4(r17)
 8015bac:	88000215 	stw	zero,8(r17)
 8015bb0:	8880030d 	sth	r2,12(r17)
 8015bb4:	88001915 	stw	zero,100(r17)
 8015bb8:	8f00038d 	sth	fp,14(r17)
 8015bbc:	88000415 	stw	zero,16(r17)
 8015bc0:	88000515 	stw	zero,20(r17)
 8015bc4:	88000615 	stw	zero,24(r17)
 8015bc8:	80175100 	call	8017510 <memset>
 8015bcc:	94000317 	ldw	r16,12(r18)
 8015bd0:	00800484 	movi	r2,18
 8015bd4:	8c400715 	stw	r17,28(r17)
 8015bd8:	8d800815 	stw	r22,32(r17)
 8015bdc:	8d400915 	stw	r21,36(r17)
 8015be0:	8d000a15 	stw	r20,40(r17)
 8015be4:	8cc00b15 	stw	r19,44(r17)
 8015be8:	8080030d 	sth	r2,12(r16)
 8015bec:	00800084 	movi	r2,2
 8015bf0:	80000015 	stw	zero,0(r16)
 8015bf4:	80000115 	stw	zero,4(r16)
 8015bf8:	80000215 	stw	zero,8(r16)
 8015bfc:	80001915 	stw	zero,100(r16)
 8015c00:	8080038d 	sth	r2,14(r16)
 8015c04:	80000415 	stw	zero,16(r16)
 8015c08:	80000515 	stw	zero,20(r16)
 8015c0c:	80000615 	stw	zero,24(r16)
 8015c10:	81001704 	addi	r4,r16,92
 8015c14:	000b883a 	mov	r5,zero
 8015c18:	b80d883a 	mov	r6,r23
 8015c1c:	80175100 	call	8017510 <memset>
 8015c20:	84000715 	stw	r16,28(r16)
 8015c24:	85800815 	stw	r22,32(r16)
 8015c28:	85400915 	stw	r21,36(r16)
 8015c2c:	85000a15 	stw	r20,40(r16)
 8015c30:	84c00b15 	stw	r19,44(r16)
 8015c34:	dfc00917 	ldw	ra,36(sp)
 8015c38:	df000817 	ldw	fp,32(sp)
 8015c3c:	ddc00717 	ldw	r23,28(sp)
 8015c40:	dd800617 	ldw	r22,24(sp)
 8015c44:	dd400517 	ldw	r21,20(sp)
 8015c48:	dd000417 	ldw	r20,16(sp)
 8015c4c:	dcc00317 	ldw	r19,12(sp)
 8015c50:	dc800217 	ldw	r18,8(sp)
 8015c54:	dc400117 	ldw	r17,4(sp)
 8015c58:	dc000017 	ldw	r16,0(sp)
 8015c5c:	dec00a04 	addi	sp,sp,40
 8015c60:	f800283a 	ret

08015c64 <__sfmoreglue>:
 8015c64:	defffc04 	addi	sp,sp,-16
 8015c68:	dc400115 	stw	r17,4(sp)
 8015c6c:	2c401a24 	muli	r17,r5,104
 8015c70:	dc800215 	stw	r18,8(sp)
 8015c74:	2825883a 	mov	r18,r5
 8015c78:	89400304 	addi	r5,r17,12
 8015c7c:	dc000015 	stw	r16,0(sp)
 8015c80:	dfc00315 	stw	ra,12(sp)
 8015c84:	800d7040 	call	800d704 <_malloc_r>
 8015c88:	1021883a 	mov	r16,r2
 8015c8c:	10000726 	beq	r2,zero,8015cac <__sfmoreglue+0x48>
 8015c90:	11000304 	addi	r4,r2,12
 8015c94:	10000015 	stw	zero,0(r2)
 8015c98:	14800115 	stw	r18,4(r2)
 8015c9c:	11000215 	stw	r4,8(r2)
 8015ca0:	000b883a 	mov	r5,zero
 8015ca4:	880d883a 	mov	r6,r17
 8015ca8:	80175100 	call	8017510 <memset>
 8015cac:	8005883a 	mov	r2,r16
 8015cb0:	dfc00317 	ldw	ra,12(sp)
 8015cb4:	dc800217 	ldw	r18,8(sp)
 8015cb8:	dc400117 	ldw	r17,4(sp)
 8015cbc:	dc000017 	ldw	r16,0(sp)
 8015cc0:	dec00404 	addi	sp,sp,16
 8015cc4:	f800283a 	ret

08015cc8 <__sfp>:
 8015cc8:	008200f4 	movhi	r2,2051
 8015ccc:	defffb04 	addi	sp,sp,-20
 8015cd0:	10b31504 	addi	r2,r2,-13228
 8015cd4:	dc800215 	stw	r18,8(sp)
 8015cd8:	14800017 	ldw	r18,0(r2)
 8015cdc:	dcc00315 	stw	r19,12(sp)
 8015ce0:	dfc00415 	stw	ra,16(sp)
 8015ce4:	90800e17 	ldw	r2,56(r18)
 8015ce8:	dc400115 	stw	r17,4(sp)
 8015cec:	dc000015 	stw	r16,0(sp)
 8015cf0:	2027883a 	mov	r19,r4
 8015cf4:	1000021e 	bne	r2,zero,8015d00 <__sfp+0x38>
 8015cf8:	9009883a 	mov	r4,r18
 8015cfc:	8015ac40 	call	8015ac4 <__sinit.part.1>
 8015d00:	9480b804 	addi	r18,r18,736
 8015d04:	047fffc4 	movi	r17,-1
 8015d08:	91400117 	ldw	r5,4(r18)
 8015d0c:	94000217 	ldw	r16,8(r18)
 8015d10:	297fffc4 	addi	r5,r5,-1
 8015d14:	28000a16 	blt	r5,zero,8015d40 <__sfp+0x78>
 8015d18:	8080030f 	ldh	r2,12(r16)
 8015d1c:	10000c26 	beq	r2,zero,8015d50 <__sfp+0x88>
 8015d20:	80c01d04 	addi	r3,r16,116
 8015d24:	00000206 	br	8015d30 <__sfp+0x68>
 8015d28:	18bfe60f 	ldh	r2,-104(r3)
 8015d2c:	10000826 	beq	r2,zero,8015d50 <__sfp+0x88>
 8015d30:	297fffc4 	addi	r5,r5,-1
 8015d34:	1c3ffd04 	addi	r16,r3,-12
 8015d38:	18c01a04 	addi	r3,r3,104
 8015d3c:	2c7ffa1e 	bne	r5,r17,8015d28 <__alt_data_end+0xfc015d28>
 8015d40:	90800017 	ldw	r2,0(r18)
 8015d44:	10001d26 	beq	r2,zero,8015dbc <__sfp+0xf4>
 8015d48:	1025883a 	mov	r18,r2
 8015d4c:	003fee06 	br	8015d08 <__alt_data_end+0xfc015d08>
 8015d50:	00bfffc4 	movi	r2,-1
 8015d54:	8080038d 	sth	r2,14(r16)
 8015d58:	00800044 	movi	r2,1
 8015d5c:	8080030d 	sth	r2,12(r16)
 8015d60:	80001915 	stw	zero,100(r16)
 8015d64:	80000015 	stw	zero,0(r16)
 8015d68:	80000215 	stw	zero,8(r16)
 8015d6c:	80000115 	stw	zero,4(r16)
 8015d70:	80000415 	stw	zero,16(r16)
 8015d74:	80000515 	stw	zero,20(r16)
 8015d78:	80000615 	stw	zero,24(r16)
 8015d7c:	81001704 	addi	r4,r16,92
 8015d80:	000b883a 	mov	r5,zero
 8015d84:	01800204 	movi	r6,8
 8015d88:	80175100 	call	8017510 <memset>
 8015d8c:	8005883a 	mov	r2,r16
 8015d90:	80000c15 	stw	zero,48(r16)
 8015d94:	80000d15 	stw	zero,52(r16)
 8015d98:	80001115 	stw	zero,68(r16)
 8015d9c:	80001215 	stw	zero,72(r16)
 8015da0:	dfc00417 	ldw	ra,16(sp)
 8015da4:	dcc00317 	ldw	r19,12(sp)
 8015da8:	dc800217 	ldw	r18,8(sp)
 8015dac:	dc400117 	ldw	r17,4(sp)
 8015db0:	dc000017 	ldw	r16,0(sp)
 8015db4:	dec00504 	addi	sp,sp,20
 8015db8:	f800283a 	ret
 8015dbc:	9809883a 	mov	r4,r19
 8015dc0:	01400104 	movi	r5,4
 8015dc4:	8015c640 	call	8015c64 <__sfmoreglue>
 8015dc8:	90800015 	stw	r2,0(r18)
 8015dcc:	103fde1e 	bne	r2,zero,8015d48 <__alt_data_end+0xfc015d48>
 8015dd0:	00800304 	movi	r2,12
 8015dd4:	98800015 	stw	r2,0(r19)
 8015dd8:	0005883a 	mov	r2,zero
 8015ddc:	003ff006 	br	8015da0 <__alt_data_end+0xfc015da0>

08015de0 <_cleanup>:
 8015de0:	008200f4 	movhi	r2,2051
 8015de4:	10b31504 	addi	r2,r2,-13228
 8015de8:	11000017 	ldw	r4,0(r2)
 8015dec:	014200b4 	movhi	r5,2050
 8015df0:	296cf304 	addi	r5,r5,-19508
 8015df4:	801625c1 	jmpi	801625c <_fwalk>

08015df8 <__sinit>:
 8015df8:	20800e17 	ldw	r2,56(r4)
 8015dfc:	10000126 	beq	r2,zero,8015e04 <__sinit+0xc>
 8015e00:	f800283a 	ret
 8015e04:	8015ac41 	jmpi	8015ac4 <__sinit.part.1>

08015e08 <__sfp_lock_acquire>:
 8015e08:	f800283a 	ret

08015e0c <__sfp_lock_release>:
 8015e0c:	f800283a 	ret

08015e10 <__sinit_lock_acquire>:
 8015e10:	f800283a 	ret

08015e14 <__sinit_lock_release>:
 8015e14:	f800283a 	ret

08015e18 <__fp_lock_all>:
 8015e18:	008200f4 	movhi	r2,2051
 8015e1c:	10b31604 	addi	r2,r2,-13224
 8015e20:	11000017 	ldw	r4,0(r2)
 8015e24:	01420074 	movhi	r5,2049
 8015e28:	2956aa04 	addi	r5,r5,23208
 8015e2c:	801625c1 	jmpi	801625c <_fwalk>

08015e30 <__fp_unlock_all>:
 8015e30:	008200f4 	movhi	r2,2051
 8015e34:	10b31604 	addi	r2,r2,-13224
 8015e38:	11000017 	ldw	r4,0(r2)
 8015e3c:	01420074 	movhi	r5,2049
 8015e40:	2956ac04 	addi	r5,r5,23216
 8015e44:	801625c1 	jmpi	801625c <_fwalk>

08015e48 <_malloc_trim_r>:
 8015e48:	defffb04 	addi	sp,sp,-20
 8015e4c:	dcc00315 	stw	r19,12(sp)
 8015e50:	04c200f4 	movhi	r19,2051
 8015e54:	dc800215 	stw	r18,8(sp)
 8015e58:	dc400115 	stw	r17,4(sp)
 8015e5c:	dc000015 	stw	r16,0(sp)
 8015e60:	dfc00415 	stw	ra,16(sp)
 8015e64:	2821883a 	mov	r16,r5
 8015e68:	9ced5904 	addi	r19,r19,-19100
 8015e6c:	2025883a 	mov	r18,r4
 8015e70:	801dac00 	call	801dac0 <__malloc_lock>
 8015e74:	98800217 	ldw	r2,8(r19)
 8015e78:	14400117 	ldw	r17,4(r2)
 8015e7c:	00bfff04 	movi	r2,-4
 8015e80:	88a2703a 	and	r17,r17,r2
 8015e84:	8c21c83a 	sub	r16,r17,r16
 8015e88:	8403fbc4 	addi	r16,r16,4079
 8015e8c:	8020d33a 	srli	r16,r16,12
 8015e90:	0083ffc4 	movi	r2,4095
 8015e94:	843fffc4 	addi	r16,r16,-1
 8015e98:	8020933a 	slli	r16,r16,12
 8015e9c:	1400060e 	bge	r2,r16,8015eb8 <_malloc_trim_r+0x70>
 8015ea0:	9009883a 	mov	r4,r18
 8015ea4:	000b883a 	mov	r5,zero
 8015ea8:	800df340 	call	800df34 <_sbrk_r>
 8015eac:	98c00217 	ldw	r3,8(r19)
 8015eb0:	1c47883a 	add	r3,r3,r17
 8015eb4:	10c00a26 	beq	r2,r3,8015ee0 <_malloc_trim_r+0x98>
 8015eb8:	9009883a 	mov	r4,r18
 8015ebc:	801dae00 	call	801dae0 <__malloc_unlock>
 8015ec0:	0005883a 	mov	r2,zero
 8015ec4:	dfc00417 	ldw	ra,16(sp)
 8015ec8:	dcc00317 	ldw	r19,12(sp)
 8015ecc:	dc800217 	ldw	r18,8(sp)
 8015ed0:	dc400117 	ldw	r17,4(sp)
 8015ed4:	dc000017 	ldw	r16,0(sp)
 8015ed8:	dec00504 	addi	sp,sp,20
 8015edc:	f800283a 	ret
 8015ee0:	9009883a 	mov	r4,r18
 8015ee4:	040bc83a 	sub	r5,zero,r16
 8015ee8:	800df340 	call	800df34 <_sbrk_r>
 8015eec:	00ffffc4 	movi	r3,-1
 8015ef0:	10c00d26 	beq	r2,r3,8015f28 <_malloc_trim_r+0xe0>
 8015ef4:	00c200f4 	movhi	r3,2051
 8015ef8:	18fa1c04 	addi	r3,r3,-6032
 8015efc:	18800017 	ldw	r2,0(r3)
 8015f00:	99000217 	ldw	r4,8(r19)
 8015f04:	8c23c83a 	sub	r17,r17,r16
 8015f08:	8c400054 	ori	r17,r17,1
 8015f0c:	1421c83a 	sub	r16,r2,r16
 8015f10:	24400115 	stw	r17,4(r4)
 8015f14:	9009883a 	mov	r4,r18
 8015f18:	1c000015 	stw	r16,0(r3)
 8015f1c:	801dae00 	call	801dae0 <__malloc_unlock>
 8015f20:	00800044 	movi	r2,1
 8015f24:	003fe706 	br	8015ec4 <__alt_data_end+0xfc015ec4>
 8015f28:	9009883a 	mov	r4,r18
 8015f2c:	000b883a 	mov	r5,zero
 8015f30:	800df340 	call	800df34 <_sbrk_r>
 8015f34:	99000217 	ldw	r4,8(r19)
 8015f38:	014003c4 	movi	r5,15
 8015f3c:	1107c83a 	sub	r3,r2,r4
 8015f40:	28ffdd0e 	bge	r5,r3,8015eb8 <__alt_data_end+0xfc015eb8>
 8015f44:	014200f4 	movhi	r5,2051
 8015f48:	29731704 	addi	r5,r5,-13220
 8015f4c:	29400017 	ldw	r5,0(r5)
 8015f50:	18c00054 	ori	r3,r3,1
 8015f54:	20c00115 	stw	r3,4(r4)
 8015f58:	00c200f4 	movhi	r3,2051
 8015f5c:	1145c83a 	sub	r2,r2,r5
 8015f60:	18fa1c04 	addi	r3,r3,-6032
 8015f64:	18800015 	stw	r2,0(r3)
 8015f68:	003fd306 	br	8015eb8 <__alt_data_end+0xfc015eb8>

08015f6c <_free_r>:
 8015f6c:	28004c26 	beq	r5,zero,80160a0 <_free_r+0x134>
 8015f70:	defffd04 	addi	sp,sp,-12
 8015f74:	dc400115 	stw	r17,4(sp)
 8015f78:	dc000015 	stw	r16,0(sp)
 8015f7c:	2023883a 	mov	r17,r4
 8015f80:	2821883a 	mov	r16,r5
 8015f84:	dfc00215 	stw	ra,8(sp)
 8015f88:	801dac00 	call	801dac0 <__malloc_lock>
 8015f8c:	813fff17 	ldw	r4,-4(r16)
 8015f90:	00bfff84 	movi	r2,-2
 8015f94:	024200f4 	movhi	r9,2051
 8015f98:	81bffe04 	addi	r6,r16,-8
 8015f9c:	2084703a 	and	r2,r4,r2
 8015fa0:	4a6d5904 	addi	r9,r9,-19100
 8015fa4:	308b883a 	add	r5,r6,r2
 8015fa8:	2a000117 	ldw	r8,4(r5)
 8015fac:	49c00217 	ldw	r7,8(r9)
 8015fb0:	00ffff04 	movi	r3,-4
 8015fb4:	40c6703a 	and	r3,r8,r3
 8015fb8:	39405326 	beq	r7,r5,8016108 <_free_r+0x19c>
 8015fbc:	28c00115 	stw	r3,4(r5)
 8015fc0:	2100004c 	andi	r4,r4,1
 8015fc4:	2000091e 	bne	r4,zero,8015fec <_free_r+0x80>
 8015fc8:	81fffe17 	ldw	r7,-8(r16)
 8015fcc:	4a000204 	addi	r8,r9,8
 8015fd0:	31cdc83a 	sub	r6,r6,r7
 8015fd4:	31000217 	ldw	r4,8(r6)
 8015fd8:	11c5883a 	add	r2,r2,r7
 8015fdc:	22006126 	beq	r4,r8,8016164 <_free_r+0x1f8>
 8015fe0:	31c00317 	ldw	r7,12(r6)
 8015fe4:	21c00315 	stw	r7,12(r4)
 8015fe8:	39000215 	stw	r4,8(r7)
 8015fec:	28c9883a 	add	r4,r5,r3
 8015ff0:	21c00117 	ldw	r7,4(r4)
 8015ff4:	39c0004c 	andi	r7,r7,1
 8015ff8:	38000d1e 	bne	r7,zero,8016030 <_free_r+0xc4>
 8015ffc:	29000217 	ldw	r4,8(r5)
 8016000:	10c5883a 	add	r2,r2,r3
 8016004:	00c200f4 	movhi	r3,2051
 8016008:	18ed5b04 	addi	r3,r3,-19092
 801600c:	20c07526 	beq	r4,r3,80161e4 <_free_r+0x278>
 8016010:	29c00317 	ldw	r7,12(r5)
 8016014:	11400054 	ori	r5,r2,1
 8016018:	3087883a 	add	r3,r6,r2
 801601c:	21c00315 	stw	r7,12(r4)
 8016020:	39000215 	stw	r4,8(r7)
 8016024:	31400115 	stw	r5,4(r6)
 8016028:	18800015 	stw	r2,0(r3)
 801602c:	00000406 	br	8016040 <_free_r+0xd4>
 8016030:	10c00054 	ori	r3,r2,1
 8016034:	30c00115 	stw	r3,4(r6)
 8016038:	3087883a 	add	r3,r6,r2
 801603c:	18800015 	stw	r2,0(r3)
 8016040:	00c07fc4 	movi	r3,511
 8016044:	18801736 	bltu	r3,r2,80160a4 <_free_r+0x138>
 8016048:	1004d0fa 	srli	r2,r2,3
 801604c:	01400044 	movi	r5,1
 8016050:	49000117 	ldw	r4,4(r9)
 8016054:	1087883a 	add	r3,r2,r2
 8016058:	18c7883a 	add	r3,r3,r3
 801605c:	1005d0ba 	srai	r2,r2,2
 8016060:	18c7883a 	add	r3,r3,r3
 8016064:	1a47883a 	add	r3,r3,r9
 8016068:	19c00217 	ldw	r7,8(r3)
 801606c:	2884983a 	sll	r2,r5,r2
 8016070:	30c00315 	stw	r3,12(r6)
 8016074:	31c00215 	stw	r7,8(r6)
 8016078:	1104b03a 	or	r2,r2,r4
 801607c:	19800215 	stw	r6,8(r3)
 8016080:	48800115 	stw	r2,4(r9)
 8016084:	39800315 	stw	r6,12(r7)
 8016088:	8809883a 	mov	r4,r17
 801608c:	dfc00217 	ldw	ra,8(sp)
 8016090:	dc400117 	ldw	r17,4(sp)
 8016094:	dc000017 	ldw	r16,0(sp)
 8016098:	dec00304 	addi	sp,sp,12
 801609c:	801dae01 	jmpi	801dae0 <__malloc_unlock>
 80160a0:	f800283a 	ret
 80160a4:	1006d27a 	srli	r3,r2,9
 80160a8:	01000104 	movi	r4,4
 80160ac:	20c04036 	bltu	r4,r3,80161b0 <_free_r+0x244>
 80160b0:	1006d1ba 	srli	r3,r2,6
 80160b4:	19400e04 	addi	r5,r3,56
 80160b8:	2947883a 	add	r3,r5,r5
 80160bc:	18c7883a 	add	r3,r3,r3
 80160c0:	18c7883a 	add	r3,r3,r3
 80160c4:	1a49883a 	add	r4,r3,r9
 80160c8:	20c00217 	ldw	r3,8(r4)
 80160cc:	01c200f4 	movhi	r7,2051
 80160d0:	39ed5904 	addi	r7,r7,-19100
 80160d4:	19003b26 	beq	r3,r4,80161c4 <_free_r+0x258>
 80160d8:	01ffff04 	movi	r7,-4
 80160dc:	19400117 	ldw	r5,4(r3)
 80160e0:	29ca703a 	and	r5,r5,r7
 80160e4:	1140022e 	bgeu	r2,r5,80160f0 <_free_r+0x184>
 80160e8:	18c00217 	ldw	r3,8(r3)
 80160ec:	20fffb1e 	bne	r4,r3,80160dc <__alt_data_end+0xfc0160dc>
 80160f0:	18800317 	ldw	r2,12(r3)
 80160f4:	30800315 	stw	r2,12(r6)
 80160f8:	30c00215 	stw	r3,8(r6)
 80160fc:	11800215 	stw	r6,8(r2)
 8016100:	19800315 	stw	r6,12(r3)
 8016104:	003fe006 	br	8016088 <__alt_data_end+0xfc016088>
 8016108:	2100004c 	andi	r4,r4,1
 801610c:	1885883a 	add	r2,r3,r2
 8016110:	2000071e 	bne	r4,zero,8016130 <_free_r+0x1c4>
 8016114:	817ffe17 	ldw	r5,-8(r16)
 8016118:	314dc83a 	sub	r6,r6,r5
 801611c:	30c00317 	ldw	r3,12(r6)
 8016120:	31000217 	ldw	r4,8(r6)
 8016124:	1145883a 	add	r2,r2,r5
 8016128:	20c00315 	stw	r3,12(r4)
 801612c:	19000215 	stw	r4,8(r3)
 8016130:	10c00054 	ori	r3,r2,1
 8016134:	30c00115 	stw	r3,4(r6)
 8016138:	00c200f4 	movhi	r3,2051
 801613c:	18f31804 	addi	r3,r3,-13216
 8016140:	18c00017 	ldw	r3,0(r3)
 8016144:	49800215 	stw	r6,8(r9)
 8016148:	10ffcf36 	bltu	r2,r3,8016088 <__alt_data_end+0xfc016088>
 801614c:	008200f4 	movhi	r2,2051
 8016150:	10ba0d04 	addi	r2,r2,-6092
 8016154:	11400017 	ldw	r5,0(r2)
 8016158:	8809883a 	mov	r4,r17
 801615c:	8015e480 	call	8015e48 <_malloc_trim_r>
 8016160:	003fc906 	br	8016088 <__alt_data_end+0xfc016088>
 8016164:	28c9883a 	add	r4,r5,r3
 8016168:	21000117 	ldw	r4,4(r4)
 801616c:	2100004c 	andi	r4,r4,1
 8016170:	20000a1e 	bne	r4,zero,801619c <_free_r+0x230>
 8016174:	29000317 	ldw	r4,12(r5)
 8016178:	29400217 	ldw	r5,8(r5)
 801617c:	10c5883a 	add	r2,r2,r3
 8016180:	10c00054 	ori	r3,r2,1
 8016184:	29000315 	stw	r4,12(r5)
 8016188:	21400215 	stw	r5,8(r4)
 801618c:	30c00115 	stw	r3,4(r6)
 8016190:	308d883a 	add	r6,r6,r2
 8016194:	30800015 	stw	r2,0(r6)
 8016198:	003fbb06 	br	8016088 <__alt_data_end+0xfc016088>
 801619c:	10c00054 	ori	r3,r2,1
 80161a0:	30c00115 	stw	r3,4(r6)
 80161a4:	308d883a 	add	r6,r6,r2
 80161a8:	30800015 	stw	r2,0(r6)
 80161ac:	003fb606 	br	8016088 <__alt_data_end+0xfc016088>
 80161b0:	01000504 	movi	r4,20
 80161b4:	20c01436 	bltu	r4,r3,8016208 <_free_r+0x29c>
 80161b8:	194016c4 	addi	r5,r3,91
 80161bc:	2947883a 	add	r3,r5,r5
 80161c0:	003fbe06 	br	80160bc <__alt_data_end+0xfc0160bc>
 80161c4:	280bd0ba 	srai	r5,r5,2
 80161c8:	00800044 	movi	r2,1
 80161cc:	39000117 	ldw	r4,4(r7)
 80161d0:	114a983a 	sll	r5,r2,r5
 80161d4:	1805883a 	mov	r2,r3
 80161d8:	2908b03a 	or	r4,r5,r4
 80161dc:	39000115 	stw	r4,4(r7)
 80161e0:	003fc406 	br	80160f4 <__alt_data_end+0xfc0160f4>
 80161e4:	49800515 	stw	r6,20(r9)
 80161e8:	49800415 	stw	r6,16(r9)
 80161ec:	10c00054 	ori	r3,r2,1
 80161f0:	31000315 	stw	r4,12(r6)
 80161f4:	31000215 	stw	r4,8(r6)
 80161f8:	30c00115 	stw	r3,4(r6)
 80161fc:	308d883a 	add	r6,r6,r2
 8016200:	30800015 	stw	r2,0(r6)
 8016204:	003fa006 	br	8016088 <__alt_data_end+0xfc016088>
 8016208:	01001504 	movi	r4,84
 801620c:	20c00436 	bltu	r4,r3,8016220 <_free_r+0x2b4>
 8016210:	1006d33a 	srli	r3,r2,12
 8016214:	19401b84 	addi	r5,r3,110
 8016218:	2947883a 	add	r3,r5,r5
 801621c:	003fa706 	br	80160bc <__alt_data_end+0xfc0160bc>
 8016220:	01005504 	movi	r4,340
 8016224:	20c00436 	bltu	r4,r3,8016238 <_free_r+0x2cc>
 8016228:	1006d3fa 	srli	r3,r2,15
 801622c:	19401dc4 	addi	r5,r3,119
 8016230:	2947883a 	add	r3,r5,r5
 8016234:	003fa106 	br	80160bc <__alt_data_end+0xfc0160bc>
 8016238:	01015504 	movi	r4,1364
 801623c:	20c00436 	bltu	r4,r3,8016250 <_free_r+0x2e4>
 8016240:	1006d4ba 	srli	r3,r2,18
 8016244:	19401f04 	addi	r5,r3,124
 8016248:	2947883a 	add	r3,r5,r5
 801624c:	003f9b06 	br	80160bc <__alt_data_end+0xfc0160bc>
 8016250:	00c03f04 	movi	r3,252
 8016254:	01401f84 	movi	r5,126
 8016258:	003f9806 	br	80160bc <__alt_data_end+0xfc0160bc>

0801625c <_fwalk>:
 801625c:	defff804 	addi	sp,sp,-32
 8016260:	dd400515 	stw	r21,20(sp)
 8016264:	2540b804 	addi	r21,r4,736
 8016268:	dd800615 	stw	r22,24(sp)
 801626c:	dd000415 	stw	r20,16(sp)
 8016270:	dfc00715 	stw	ra,28(sp)
 8016274:	dcc00315 	stw	r19,12(sp)
 8016278:	dc800215 	stw	r18,8(sp)
 801627c:	dc400115 	stw	r17,4(sp)
 8016280:	dc000015 	stw	r16,0(sp)
 8016284:	2829883a 	mov	r20,r5
 8016288:	002d883a 	mov	r22,zero
 801628c:	8015e080 	call	8015e08 <__sfp_lock_acquire>
 8016290:	a8001426 	beq	r21,zero,80162e4 <_fwalk+0x88>
 8016294:	04ffffc4 	movi	r19,-1
 8016298:	ac400117 	ldw	r17,4(r21)
 801629c:	ac800217 	ldw	r18,8(r21)
 80162a0:	8c7fffc4 	addi	r17,r17,-1
 80162a4:	88000d16 	blt	r17,zero,80162dc <_fwalk+0x80>
 80162a8:	94000304 	addi	r16,r18,12
 80162ac:	94800384 	addi	r18,r18,14
 80162b0:	80c0000f 	ldh	r3,0(r16)
 80162b4:	8c7fffc4 	addi	r17,r17,-1
 80162b8:	813ffd04 	addi	r4,r16,-12
 80162bc:	18000426 	beq	r3,zero,80162d0 <_fwalk+0x74>
 80162c0:	90c0000f 	ldh	r3,0(r18)
 80162c4:	1cc00226 	beq	r3,r19,80162d0 <_fwalk+0x74>
 80162c8:	a03ee83a 	callr	r20
 80162cc:	b0acb03a 	or	r22,r22,r2
 80162d0:	84001a04 	addi	r16,r16,104
 80162d4:	94801a04 	addi	r18,r18,104
 80162d8:	8cfff51e 	bne	r17,r19,80162b0 <__alt_data_end+0xfc0162b0>
 80162dc:	ad400017 	ldw	r21,0(r21)
 80162e0:	a83fed1e 	bne	r21,zero,8016298 <__alt_data_end+0xfc016298>
 80162e4:	8015e0c0 	call	8015e0c <__sfp_lock_release>
 80162e8:	b005883a 	mov	r2,r22
 80162ec:	dfc00717 	ldw	ra,28(sp)
 80162f0:	dd800617 	ldw	r22,24(sp)
 80162f4:	dd400517 	ldw	r21,20(sp)
 80162f8:	dd000417 	ldw	r20,16(sp)
 80162fc:	dcc00317 	ldw	r19,12(sp)
 8016300:	dc800217 	ldw	r18,8(sp)
 8016304:	dc400117 	ldw	r17,4(sp)
 8016308:	dc000017 	ldw	r16,0(sp)
 801630c:	dec00804 	addi	sp,sp,32
 8016310:	f800283a 	ret

08016314 <_fwalk_reent>:
 8016314:	defff804 	addi	sp,sp,-32
 8016318:	dd400515 	stw	r21,20(sp)
 801631c:	2540b804 	addi	r21,r4,736
 8016320:	dd800615 	stw	r22,24(sp)
 8016324:	dd000415 	stw	r20,16(sp)
 8016328:	dcc00315 	stw	r19,12(sp)
 801632c:	dfc00715 	stw	ra,28(sp)
 8016330:	dc800215 	stw	r18,8(sp)
 8016334:	dc400115 	stw	r17,4(sp)
 8016338:	dc000015 	stw	r16,0(sp)
 801633c:	2027883a 	mov	r19,r4
 8016340:	2829883a 	mov	r20,r5
 8016344:	002d883a 	mov	r22,zero
 8016348:	8015e080 	call	8015e08 <__sfp_lock_acquire>
 801634c:	a8001326 	beq	r21,zero,801639c <_fwalk_reent+0x88>
 8016350:	04bfffc4 	movi	r18,-1
 8016354:	ac400117 	ldw	r17,4(r21)
 8016358:	ac000217 	ldw	r16,8(r21)
 801635c:	8c7fffc4 	addi	r17,r17,-1
 8016360:	88000c16 	blt	r17,zero,8016394 <_fwalk_reent+0x80>
 8016364:	84000304 	addi	r16,r16,12
 8016368:	80c0000f 	ldh	r3,0(r16)
 801636c:	8c7fffc4 	addi	r17,r17,-1
 8016370:	817ffd04 	addi	r5,r16,-12
 8016374:	18000526 	beq	r3,zero,801638c <_fwalk_reent+0x78>
 8016378:	80c0008f 	ldh	r3,2(r16)
 801637c:	9809883a 	mov	r4,r19
 8016380:	1c800226 	beq	r3,r18,801638c <_fwalk_reent+0x78>
 8016384:	a03ee83a 	callr	r20
 8016388:	b0acb03a 	or	r22,r22,r2
 801638c:	84001a04 	addi	r16,r16,104
 8016390:	8cbff51e 	bne	r17,r18,8016368 <__alt_data_end+0xfc016368>
 8016394:	ad400017 	ldw	r21,0(r21)
 8016398:	a83fee1e 	bne	r21,zero,8016354 <__alt_data_end+0xfc016354>
 801639c:	8015e0c0 	call	8015e0c <__sfp_lock_release>
 80163a0:	b005883a 	mov	r2,r22
 80163a4:	dfc00717 	ldw	ra,28(sp)
 80163a8:	dd800617 	ldw	r22,24(sp)
 80163ac:	dd400517 	ldw	r21,20(sp)
 80163b0:	dd000417 	ldw	r20,16(sp)
 80163b4:	dcc00317 	ldw	r19,12(sp)
 80163b8:	dc800217 	ldw	r18,8(sp)
 80163bc:	dc400117 	ldw	r17,4(sp)
 80163c0:	dc000017 	ldw	r16,0(sp)
 80163c4:	dec00804 	addi	sp,sp,32
 80163c8:	f800283a 	ret

080163cc <rshift>:
 80163cc:	2807d17a 	srai	r3,r5,5
 80163d0:	20800417 	ldw	r2,16(r4)
 80163d4:	22400504 	addi	r9,r4,20
 80163d8:	1880250e 	bge	r3,r2,8016470 <rshift+0xa4>
 80163dc:	1085883a 	add	r2,r2,r2
 80163e0:	18c7883a 	add	r3,r3,r3
 80163e4:	1085883a 	add	r2,r2,r2
 80163e8:	18c7883a 	add	r3,r3,r3
 80163ec:	294007cc 	andi	r5,r5,31
 80163f0:	4885883a 	add	r2,r9,r2
 80163f4:	48c7883a 	add	r3,r9,r3
 80163f8:	28002026 	beq	r5,zero,801647c <rshift+0xb0>
 80163fc:	19800017 	ldw	r6,0(r3)
 8016400:	02c00804 	movi	r11,32
 8016404:	19c00104 	addi	r7,r3,4
 8016408:	5957c83a 	sub	r11,r11,r5
 801640c:	3150d83a 	srl	r8,r6,r5
 8016410:	38802c2e 	bgeu	r7,r2,80164c4 <rshift+0xf8>
 8016414:	4815883a 	mov	r10,r9
 8016418:	39800017 	ldw	r6,0(r7)
 801641c:	52800104 	addi	r10,r10,4
 8016420:	39c00104 	addi	r7,r7,4
 8016424:	32cc983a 	sll	r6,r6,r11
 8016428:	418cb03a 	or	r6,r8,r6
 801642c:	51bfff15 	stw	r6,-4(r10)
 8016430:	39bfff17 	ldw	r6,-4(r7)
 8016434:	3150d83a 	srl	r8,r6,r5
 8016438:	38bff736 	bltu	r7,r2,8016418 <__alt_data_end+0xfc016418>
 801643c:	10c7c83a 	sub	r3,r2,r3
 8016440:	18fffec4 	addi	r3,r3,-5
 8016444:	1806d0ba 	srli	r3,r3,2
 8016448:	18c00044 	addi	r3,r3,1
 801644c:	18c7883a 	add	r3,r3,r3
 8016450:	18c7883a 	add	r3,r3,r3
 8016454:	48c7883a 	add	r3,r9,r3
 8016458:	1a000015 	stw	r8,0(r3)
 801645c:	40000126 	beq	r8,zero,8016464 <rshift+0x98>
 8016460:	18c00104 	addi	r3,r3,4
 8016464:	1a45c83a 	sub	r2,r3,r9
 8016468:	1005d0ba 	srai	r2,r2,2
 801646c:	00001206 	br	80164b8 <rshift+0xec>
 8016470:	20000415 	stw	zero,16(r4)
 8016474:	20000515 	stw	zero,20(r4)
 8016478:	f800283a 	ret
 801647c:	18bffc2e 	bgeu	r3,r2,8016470 <__alt_data_end+0xfc016470>
 8016480:	180d883a 	mov	r6,r3
 8016484:	480b883a 	mov	r5,r9
 8016488:	31c00017 	ldw	r7,0(r6)
 801648c:	29400104 	addi	r5,r5,4
 8016490:	31800104 	addi	r6,r6,4
 8016494:	29ffff15 	stw	r7,-4(r5)
 8016498:	30bffb36 	bltu	r6,r2,8016488 <__alt_data_end+0xfc016488>
 801649c:	00c6303a 	nor	r3,zero,r3
 80164a0:	1885883a 	add	r2,r3,r2
 80164a4:	1004d0ba 	srli	r2,r2,2
 80164a8:	10800044 	addi	r2,r2,1
 80164ac:	1085883a 	add	r2,r2,r2
 80164b0:	1085883a 	add	r2,r2,r2
 80164b4:	1005d0ba 	srai	r2,r2,2
 80164b8:	20800415 	stw	r2,16(r4)
 80164bc:	103fed26 	beq	r2,zero,8016474 <__alt_data_end+0xfc016474>
 80164c0:	f800283a 	ret
 80164c4:	4807883a 	mov	r3,r9
 80164c8:	003fe306 	br	8016458 <__alt_data_end+0xfc016458>

080164cc <__hexdig_init>:
 80164cc:	014200f4 	movhi	r5,2051
 80164d0:	00c200f4 	movhi	r3,2051
 80164d4:	296bd444 	addi	r5,r5,-20655
 80164d8:	18fa7b04 	addi	r3,r3,-5652
 80164dc:	01000404 	movi	r4,16
 80164e0:	00800c04 	movi	r2,48
 80164e4:	10c5883a 	add	r2,r2,r3
 80164e8:	11000005 	stb	r4,0(r2)
 80164ec:	28800003 	ldbu	r2,0(r5)
 80164f0:	21000044 	addi	r4,r4,1
 80164f4:	29400044 	addi	r5,r5,1
 80164f8:	103ffa1e 	bne	r2,zero,80164e4 <__alt_data_end+0xfc0164e4>
 80164fc:	014200f4 	movhi	r5,2051
 8016500:	296bd244 	addi	r5,r5,-20663
 8016504:	01000684 	movi	r4,26
 8016508:	00801844 	movi	r2,97
 801650c:	10c5883a 	add	r2,r2,r3
 8016510:	11000005 	stb	r4,0(r2)
 8016514:	28800003 	ldbu	r2,0(r5)
 8016518:	21000044 	addi	r4,r4,1
 801651c:	29400044 	addi	r5,r5,1
 8016520:	103ffa1e 	bne	r2,zero,801650c <__alt_data_end+0xfc01650c>
 8016524:	014200f4 	movhi	r5,2051
 8016528:	296bd044 	addi	r5,r5,-20671
 801652c:	01000684 	movi	r4,26
 8016530:	00801044 	movi	r2,65
 8016534:	10c5883a 	add	r2,r2,r3
 8016538:	11000005 	stb	r4,0(r2)
 801653c:	28800003 	ldbu	r2,0(r5)
 8016540:	21000044 	addi	r4,r4,1
 8016544:	29400044 	addi	r5,r5,1
 8016548:	103ffa1e 	bne	r2,zero,8016534 <__alt_data_end+0xfc016534>
 801654c:	f800283a 	ret

08016550 <__gethex>:
 8016550:	deffeb04 	addi	sp,sp,-84
 8016554:	dfc01415 	stw	ra,80(sp)
 8016558:	dd401015 	stw	r21,64(sp)
 801655c:	dd000f15 	stw	r20,60(sp)
 8016560:	dcc00e15 	stw	r19,56(sp)
 8016564:	dc800d15 	stw	r18,52(sp)
 8016568:	d9000115 	stw	r4,4(sp)
 801656c:	2829883a 	mov	r20,r5
 8016570:	d9800015 	stw	r6,0(sp)
 8016574:	d9c00315 	stw	r7,12(sp)
 8016578:	df001315 	stw	fp,76(sp)
 801657c:	ddc01215 	stw	r23,72(sp)
 8016580:	dd801115 	stw	r22,68(sp)
 8016584:	dc400c15 	stw	r17,48(sp)
 8016588:	dc000b15 	stw	r16,44(sp)
 801658c:	80171040 	call	8017104 <_localeconv_r>
 8016590:	14800017 	ldw	r18,0(r2)
 8016594:	054200f4 	movhi	r21,2051
 8016598:	ad7a7b04 	addi	r21,r21,-5652
 801659c:	9009883a 	mov	r4,r18
 80165a0:	800e3c40 	call	800e3c4 <strlen>
 80165a4:	1027883a 	mov	r19,r2
 80165a8:	94c7883a 	add	r3,r18,r19
 80165ac:	18ffffc3 	ldbu	r3,-1(r3)
 80165b0:	a8800c03 	ldbu	r2,48(r21)
 80165b4:	d8c00205 	stb	r3,8(sp)
 80165b8:	1000d726 	beq	r2,zero,8016918 <__gethex+0x3c8>
 80165bc:	a2000017 	ldw	r8,0(r20)
 80165c0:	00c00c04 	movi	r3,48
 80165c4:	40800083 	ldbu	r2,2(r8)
 80165c8:	10c14a1e 	bne	r2,r3,8016af4 <__gethex+0x5a4>
 80165cc:	013fff84 	movi	r4,-2
 80165d0:	40c000c4 	addi	r3,r8,3
 80165d4:	2209c83a 	sub	r4,r4,r8
 80165d8:	100b883a 	mov	r5,r2
 80165dc:	20ef883a 	add	r23,r4,r3
 80165e0:	182d883a 	mov	r22,r3
 80165e4:	18c00044 	addi	r3,r3,1
 80165e8:	18bfffc3 	ldbu	r2,-1(r3)
 80165ec:	117ffb26 	beq	r2,r5,80165dc <__alt_data_end+0xfc0165dc>
 80165f0:	a885883a 	add	r2,r21,r2
 80165f4:	10800003 	ldbu	r2,0(r2)
 80165f8:	01c200f4 	movhi	r7,2051
 80165fc:	39fa7b04 	addi	r7,r7,-5652
 8016600:	1000c726 	beq	r2,zero,8016920 <__gethex+0x3d0>
 8016604:	b0800003 	ldbu	r2,0(r22)
 8016608:	0023883a 	mov	r17,zero
 801660c:	0039883a 	mov	fp,zero
 8016610:	3885883a 	add	r2,r7,r2
 8016614:	10800003 	ldbu	r2,0(r2)
 8016618:	b021883a 	mov	r16,r22
 801661c:	10000526 	beq	r2,zero,8016634 <__gethex+0xe4>
 8016620:	84000044 	addi	r16,r16,1
 8016624:	80800003 	ldbu	r2,0(r16)
 8016628:	a885883a 	add	r2,r21,r2
 801662c:	10800003 	ldbu	r2,0(r2)
 8016630:	103ffb1e 	bne	r2,zero,8016620 <__alt_data_end+0xfc016620>
 8016634:	8009883a 	mov	r4,r16
 8016638:	900b883a 	mov	r5,r18
 801663c:	980d883a 	mov	r6,r19
 8016640:	80188640 	call	8018864 <strncmp>
 8016644:	10007c26 	beq	r2,zero,8016838 <__gethex+0x2e8>
 8016648:	80800003 	ldbu	r2,0(r16)
 801664c:	e0000426 	beq	fp,zero,8016660 <__gethex+0x110>
 8016650:	8739c83a 	sub	fp,r16,fp
 8016654:	e739883a 	add	fp,fp,fp
 8016658:	e739883a 	add	fp,fp,fp
 801665c:	0739c83a 	sub	fp,zero,fp
 8016660:	10803fcc 	andi	r2,r2,255
 8016664:	01001404 	movi	r4,80
 8016668:	11007e26 	beq	r2,r4,8016864 <__gethex+0x314>
 801666c:	01001c04 	movi	r4,112
 8016670:	11007c26 	beq	r2,r4,8016864 <__gethex+0x314>
 8016674:	800f883a 	mov	r7,r16
 8016678:	a4000015 	stw	r16,0(r20)
 801667c:	88000e26 	beq	r17,zero,80166b8 <__gethex+0x168>
 8016680:	b800b71e 	bne	r23,zero,8016960 <__gethex+0x410>
 8016684:	00800184 	movi	r2,6
 8016688:	dfc01417 	ldw	ra,80(sp)
 801668c:	df001317 	ldw	fp,76(sp)
 8016690:	ddc01217 	ldw	r23,72(sp)
 8016694:	dd801117 	ldw	r22,68(sp)
 8016698:	dd401017 	ldw	r21,64(sp)
 801669c:	dd000f17 	ldw	r20,60(sp)
 80166a0:	dcc00e17 	ldw	r19,56(sp)
 80166a4:	dc800d17 	ldw	r18,52(sp)
 80166a8:	dc400c17 	ldw	r17,48(sp)
 80166ac:	dc000b17 	ldw	r16,44(sp)
 80166b0:	dec01504 	addi	sp,sp,84
 80166b4:	f800283a 	ret
 80166b8:	3d85c83a 	sub	r2,r7,r22
 80166bc:	10bfffc4 	addi	r2,r2,-1
 80166c0:	00c001c4 	movi	r3,7
 80166c4:	000b883a 	mov	r5,zero
 80166c8:	1880030e 	bge	r3,r2,80166d8 <__gethex+0x188>
 80166cc:	1005d07a 	srai	r2,r2,1
 80166d0:	29400044 	addi	r5,r5,1
 80166d4:	18bffd16 	blt	r3,r2,80166cc <__alt_data_end+0xfc0166cc>
 80166d8:	d9000117 	ldw	r4,4(sp)
 80166dc:	d9c00a15 	stw	r7,40(sp)
 80166e0:	80176340 	call	8017634 <_Balloc>
 80166e4:	d9c00a17 	ldw	r7,40(sp)
 80166e8:	14000504 	addi	r16,r2,20
 80166ec:	102f883a 	mov	r23,r2
 80166f0:	8017883a 	mov	r11,r16
 80166f4:	0015883a 	mov	r10,zero
 80166f8:	b1c0132e 	bgeu	r22,r7,8016748 <__gethex+0x1f8>
 80166fc:	dc400203 	ldbu	r17,8(sp)
 8016700:	03800044 	movi	r14,1
 8016704:	0029883a 	mov	r20,zero
 8016708:	74ddc83a 	sub	r14,r14,r19
 801670c:	03000804 	movi	r12,32
 8016710:	38bfffc3 	ldbu	r2,-1(r7)
 8016714:	3bffffc4 	addi	r15,r7,-1
 8016718:	14402f26 	beq	r2,r17,80167d8 <__gethex+0x288>
 801671c:	a3004926 	beq	r20,r12,8016844 <__gethex+0x2f4>
 8016720:	a009883a 	mov	r4,r20
 8016724:	a5000104 	addi	r20,r20,4
 8016728:	38bfffc3 	ldbu	r2,-1(r7)
 801672c:	780f883a 	mov	r7,r15
 8016730:	a885883a 	add	r2,r21,r2
 8016734:	10c00003 	ldbu	r3,0(r2)
 8016738:	18c003cc 	andi	r3,r3,15
 801673c:	1906983a 	sll	r3,r3,r4
 8016740:	50d4b03a 	or	r10,r10,r3
 8016744:	b1fff236 	bltu	r22,r7,8016710 <__alt_data_end+0xfc016710>
 8016748:	58800104 	addi	r2,r11,4
 801674c:	1405c83a 	sub	r2,r2,r16
 8016750:	1005d0ba 	srai	r2,r2,2
 8016754:	5a800015 	stw	r10,0(r11)
 8016758:	5009883a 	mov	r4,r10
 801675c:	b8800415 	stw	r2,16(r23)
 8016760:	1022917a 	slli	r17,r2,5
 8016764:	801791c0 	call	801791c <__hi0bits>
 8016768:	d8c00017 	ldw	r3,0(sp)
 801676c:	8885c83a 	sub	r2,r17,r2
 8016770:	1c800017 	ldw	r18,0(r3)
 8016774:	9080ba16 	blt	r18,r2,8016a60 <__gethex+0x510>
 8016778:	1480d416 	blt	r2,r18,8016acc <__gethex+0x57c>
 801677c:	0027883a 	mov	r19,zero
 8016780:	d8c00017 	ldw	r3,0(sp)
 8016784:	18800217 	ldw	r2,8(r3)
 8016788:	17008416 	blt	r2,fp,801699c <__gethex+0x44c>
 801678c:	d8c00017 	ldw	r3,0(sp)
 8016790:	18800117 	ldw	r2,4(r3)
 8016794:	e0809f0e 	bge	fp,r2,8016a14 <__gethex+0x4c4>
 8016798:	1739c83a 	sub	fp,r2,fp
 801679c:	e480dc16 	blt	fp,r18,8016b10 <__gethex+0x5c0>
 80167a0:	18c00317 	ldw	r3,12(r3)
 80167a4:	01000084 	movi	r4,2
 80167a8:	19013c26 	beq	r3,r4,8016c9c <__gethex+0x74c>
 80167ac:	010000c4 	movi	r4,3
 80167b0:	19011d26 	beq	r3,r4,8016c28 <__gethex+0x6d8>
 80167b4:	01000044 	movi	r4,1
 80167b8:	19012f26 	beq	r3,r4,8016c78 <__gethex+0x728>
 80167bc:	d9000117 	ldw	r4,4(sp)
 80167c0:	b80b883a 	mov	r5,r23
 80167c4:	80176dc0 	call	80176dc <_Bfree>
 80167c8:	d8801517 	ldw	r2,84(sp)
 80167cc:	10000015 	stw	zero,0(r2)
 80167d0:	00801404 	movi	r2,80
 80167d4:	003fac06 	br	8016688 <__alt_data_end+0xfc016688>
 80167d8:	7b87883a 	add	r3,r15,r14
 80167dc:	1dbfcf36 	bltu	r3,r22,801671c <__alt_data_end+0xfc01671c>
 80167e0:	1809883a 	mov	r4,r3
 80167e4:	900b883a 	mov	r5,r18
 80167e8:	980d883a 	mov	r6,r19
 80167ec:	d8c00515 	stw	r3,20(sp)
 80167f0:	d9c00a15 	stw	r7,40(sp)
 80167f4:	da800615 	stw	r10,24(sp)
 80167f8:	dac00715 	stw	r11,28(sp)
 80167fc:	db000915 	stw	r12,36(sp)
 8016800:	db800815 	stw	r14,32(sp)
 8016804:	dbc00415 	stw	r15,16(sp)
 8016808:	80188640 	call	8018864 <strncmp>
 801680c:	d8c00517 	ldw	r3,20(sp)
 8016810:	d9c00a17 	ldw	r7,40(sp)
 8016814:	da800617 	ldw	r10,24(sp)
 8016818:	dac00717 	ldw	r11,28(sp)
 801681c:	db000917 	ldw	r12,36(sp)
 8016820:	db800817 	ldw	r14,32(sp)
 8016824:	dbc00417 	ldw	r15,16(sp)
 8016828:	103fbc1e 	bne	r2,zero,801671c <__alt_data_end+0xfc01671c>
 801682c:	180f883a 	mov	r7,r3
 8016830:	b1ffb736 	bltu	r22,r7,8016710 <__alt_data_end+0xfc016710>
 8016834:	003fc406 	br	8016748 <__alt_data_end+0xfc016748>
 8016838:	e000cf26 	beq	fp,zero,8016b78 <__gethex+0x628>
 801683c:	80800003 	ldbu	r2,0(r16)
 8016840:	003f8306 	br	8016650 <__alt_data_end+0xfc016650>
 8016844:	05000104 	movi	r20,4
 8016848:	5a800015 	stw	r10,0(r11)
 801684c:	0009883a 	mov	r4,zero
 8016850:	5d17883a 	add	r11,r11,r20
 8016854:	0015883a 	mov	r10,zero
 8016858:	003fb306 	br	8016728 <__alt_data_end+0xfc016728>
 801685c:	0039883a 	mov	fp,zero
 8016860:	04400044 	movi	r17,1
 8016864:	80800043 	ldbu	r2,1(r16)
 8016868:	01400ac4 	movi	r5,43
 801686c:	11003fcc 	andi	r4,r2,255
 8016870:	21407926 	beq	r4,r5,8016a58 <__gethex+0x508>
 8016874:	01400b44 	movi	r5,45
 8016878:	21404f26 	beq	r4,r5,80169b8 <__gethex+0x468>
 801687c:	81400044 	addi	r5,r16,1
 8016880:	000d883a 	mov	r6,zero
 8016884:	10803fcc 	andi	r2,r2,255
 8016888:	a885883a 	add	r2,r21,r2
 801688c:	11000003 	ldbu	r4,0(r2)
 8016890:	02c00604 	movi	r11,24
 8016894:	20bfffc4 	addi	r2,r4,-1
 8016898:	10803fcc 	andi	r2,r2,255
 801689c:	58bf7536 	bltu	r11,r2,8016674 <__alt_data_end+0xfc016674>
 80168a0:	29c00043 	ldbu	r7,1(r5)
 80168a4:	20803fcc 	andi	r2,r4,255
 80168a8:	010200f4 	movhi	r4,2051
 80168ac:	213a7b04 	addi	r4,r4,-5652
 80168b0:	21c9883a 	add	r4,r4,r7
 80168b4:	23000003 	ldbu	r12,0(r4)
 80168b8:	10bffc04 	addi	r2,r2,-16
 80168bc:	29400044 	addi	r5,r5,1
 80168c0:	613fffc4 	addi	r4,r12,-1
 80168c4:	21003fcc 	andi	r4,r4,255
 80168c8:	63003fcc 	andi	r12,r12,255
 80168cc:	59000b36 	bltu	r11,r4,80168fc <__gethex+0x3ac>
 80168d0:	29400044 	addi	r5,r5,1
 80168d4:	29000003 	ldbu	r4,0(r5)
 80168d8:	108002a4 	muli	r2,r2,10
 80168dc:	a909883a 	add	r4,r21,r4
 80168e0:	21c00003 	ldbu	r7,0(r4)
 80168e4:	1305883a 	add	r2,r2,r12
 80168e8:	10bffc04 	addi	r2,r2,-16
 80168ec:	393fffc4 	addi	r4,r7,-1
 80168f0:	21003fcc 	andi	r4,r4,255
 80168f4:	3b003fcc 	andi	r12,r7,255
 80168f8:	593ff52e 	bgeu	r11,r4,80168d0 <__alt_data_end+0xfc0168d0>
 80168fc:	0189c83a 	sub	r4,zero,r6
 8016900:	1104f03a 	xor	r2,r2,r4
 8016904:	118d883a 	add	r6,r2,r6
 8016908:	800f883a 	mov	r7,r16
 801690c:	e1b9883a 	add	fp,fp,r6
 8016910:	2821883a 	mov	r16,r5
 8016914:	003f5806 	br	8016678 <__alt_data_end+0xfc016678>
 8016918:	80164cc0 	call	80164cc <__hexdig_init>
 801691c:	003f2706 	br	80165bc <__alt_data_end+0xfc0165bc>
 8016920:	b009883a 	mov	r4,r22
 8016924:	900b883a 	mov	r5,r18
 8016928:	980d883a 	mov	r6,r19
 801692c:	d9c00a15 	stw	r7,40(sp)
 8016930:	80188640 	call	8018864 <strncmp>
 8016934:	d9c00a17 	ldw	r7,40(sp)
 8016938:	10002326 	beq	r2,zero,80169c8 <__gethex+0x478>
 801693c:	b0800003 	ldbu	r2,0(r22)
 8016940:	b021883a 	mov	r16,r22
 8016944:	10803fcc 	andi	r2,r2,255
 8016948:	00c01404 	movi	r3,80
 801694c:	10ffc326 	beq	r2,r3,801685c <__alt_data_end+0xfc01685c>
 8016950:	00c01c04 	movi	r3,112
 8016954:	10ffc126 	beq	r2,r3,801685c <__alt_data_end+0xfc01685c>
 8016958:	a4000015 	stw	r16,0(r20)
 801695c:	b83f4926 	beq	r23,zero,8016684 <__alt_data_end+0xfc016684>
 8016960:	0005883a 	mov	r2,zero
 8016964:	003f4806 	br	8016688 <__alt_data_end+0xfc016688>
 8016968:	84e7883a 	add	r19,r16,r19
 801696c:	993fff17 	ldw	r4,-4(r19)
 8016970:	801791c0 	call	801791c <__hi0bits>
 8016974:	00c00804 	movi	r3,32
 8016978:	1c63c83a 	sub	r17,r3,r17
 801697c:	1440a60e 	bge	r2,r17,8016c18 <__gethex+0x6c8>
 8016980:	b809883a 	mov	r4,r23
 8016984:	01400044 	movi	r5,1
 8016988:	80163cc0 	call	80163cc <rshift>
 801698c:	d8c00017 	ldw	r3,0(sp)
 8016990:	e7000044 	addi	fp,fp,1
 8016994:	18800217 	ldw	r2,8(r3)
 8016998:	17009f0e 	bge	r2,fp,8016c18 <__gethex+0x6c8>
 801699c:	d9000117 	ldw	r4,4(sp)
 80169a0:	b80b883a 	mov	r5,r23
 80169a4:	80176dc0 	call	80176dc <_Bfree>
 80169a8:	d9001517 	ldw	r4,84(sp)
 80169ac:	008028c4 	movi	r2,163
 80169b0:	20000015 	stw	zero,0(r4)
 80169b4:	003f3406 	br	8016688 <__alt_data_end+0xfc016688>
 80169b8:	01800044 	movi	r6,1
 80169bc:	80800083 	ldbu	r2,2(r16)
 80169c0:	81400084 	addi	r5,r16,2
 80169c4:	003faf06 	br	8016884 <__alt_data_end+0xfc016884>
 80169c8:	b4e1883a 	add	r16,r22,r19
 80169cc:	80c00003 	ldbu	r3,0(r16)
 80169d0:	19003fcc 	andi	r4,r3,255
 80169d4:	3905883a 	add	r2,r7,r4
 80169d8:	10800003 	ldbu	r2,0(r2)
 80169dc:	10004826 	beq	r2,zero,8016b00 <__gethex+0x5b0>
 80169e0:	00c00c04 	movi	r3,48
 80169e4:	802d883a 	mov	r22,r16
 80169e8:	20c0061e 	bne	r4,r3,8016a04 <__gethex+0x4b4>
 80169ec:	2007883a 	mov	r3,r4
 80169f0:	b5800044 	addi	r22,r22,1
 80169f4:	b0800003 	ldbu	r2,0(r22)
 80169f8:	10fffd26 	beq	r2,r3,80169f0 <__alt_data_end+0xfc0169f0>
 80169fc:	a885883a 	add	r2,r21,r2
 8016a00:	10800003 	ldbu	r2,0(r2)
 8016a04:	1023003a 	cmpeq	r17,r2,zero
 8016a08:	8039883a 	mov	fp,r16
 8016a0c:	05c00044 	movi	r23,1
 8016a10:	003f0106 	br	8016618 <__alt_data_end+0xfc016618>
 8016a14:	04400044 	movi	r17,1
 8016a18:	98000926 	beq	r19,zero,8016a40 <__gethex+0x4f0>
 8016a1c:	d8c00017 	ldw	r3,0(sp)
 8016a20:	18800317 	ldw	r2,12(r3)
 8016a24:	00c00084 	movi	r3,2
 8016a28:	10c06126 	beq	r2,r3,8016bb0 <__gethex+0x660>
 8016a2c:	00c000c4 	movi	r3,3
 8016a30:	10c06326 	beq	r2,r3,8016bc0 <__gethex+0x670>
 8016a34:	00c00044 	movi	r3,1
 8016a38:	10c08626 	beq	r2,r3,8016c54 <__gethex+0x704>
 8016a3c:	8c400414 	ori	r17,r17,16
 8016a40:	d9001517 	ldw	r4,84(sp)
 8016a44:	d8c00317 	ldw	r3,12(sp)
 8016a48:	8805883a 	mov	r2,r17
 8016a4c:	25c00015 	stw	r23,0(r4)
 8016a50:	1f000015 	stw	fp,0(r3)
 8016a54:	003f0c06 	br	8016688 <__alt_data_end+0xfc016688>
 8016a58:	000d883a 	mov	r6,zero
 8016a5c:	003fd706 	br	80169bc <__alt_data_end+0xfc0169bc>
 8016a60:	14a3c83a 	sub	r17,r2,r18
 8016a64:	b809883a 	mov	r4,r23
 8016a68:	880b883a 	mov	r5,r17
 8016a6c:	80185340 	call	8018534 <__any_on>
 8016a70:	10002526 	beq	r2,zero,8016b08 <__gethex+0x5b8>
 8016a74:	897fffc4 	addi	r5,r17,-1
 8016a78:	2807d17a 	srai	r3,r5,5
 8016a7c:	290007cc 	andi	r4,r5,31
 8016a80:	04c00044 	movi	r19,1
 8016a84:	18c7883a 	add	r3,r3,r3
 8016a88:	18c7883a 	add	r3,r3,r3
 8016a8c:	80c7883a 	add	r3,r16,r3
 8016a90:	9908983a 	sll	r4,r19,r4
 8016a94:	18c00017 	ldw	r3,0(r3)
 8016a98:	20c6703a 	and	r3,r4,r3
 8016a9c:	18000626 	beq	r3,zero,8016ab8 <__gethex+0x568>
 8016aa0:	9940730e 	bge	r19,r5,8016c70 <__gethex+0x720>
 8016aa4:	b809883a 	mov	r4,r23
 8016aa8:	897fff84 	addi	r5,r17,-2
 8016aac:	80185340 	call	8018534 <__any_on>
 8016ab0:	10006f26 	beq	r2,zero,8016c70 <__gethex+0x720>
 8016ab4:	04c000c4 	movi	r19,3
 8016ab8:	b809883a 	mov	r4,r23
 8016abc:	880b883a 	mov	r5,r17
 8016ac0:	80163cc0 	call	80163cc <rshift>
 8016ac4:	e479883a 	add	fp,fp,r17
 8016ac8:	003f2d06 	br	8016780 <__alt_data_end+0xfc016780>
 8016acc:	d9000117 	ldw	r4,4(sp)
 8016ad0:	90a1c83a 	sub	r16,r18,r2
 8016ad4:	b80b883a 	mov	r5,r23
 8016ad8:	800d883a 	mov	r6,r16
 8016adc:	8017dac0 	call	8017dac <__lshift>
 8016ae0:	e439c83a 	sub	fp,fp,r16
 8016ae4:	102f883a 	mov	r23,r2
 8016ae8:	14000504 	addi	r16,r2,20
 8016aec:	0027883a 	mov	r19,zero
 8016af0:	003f2306 	br	8016780 <__alt_data_end+0xfc016780>
 8016af4:	45800084 	addi	r22,r8,2
 8016af8:	002f883a 	mov	r23,zero
 8016afc:	003ebc06 	br	80165f0 <__alt_data_end+0xfc0165f0>
 8016b00:	1805883a 	mov	r2,r3
 8016b04:	003f8f06 	br	8016944 <__alt_data_end+0xfc016944>
 8016b08:	0027883a 	mov	r19,zero
 8016b0c:	003fea06 	br	8016ab8 <__alt_data_end+0xfc016ab8>
 8016b10:	e47fffc4 	addi	r17,fp,-1
 8016b14:	9800421e 	bne	r19,zero,8016c20 <__gethex+0x6d0>
 8016b18:	0440040e 	bge	zero,r17,8016b2c <__gethex+0x5dc>
 8016b1c:	b809883a 	mov	r4,r23
 8016b20:	880b883a 	mov	r5,r17
 8016b24:	80185340 	call	8018534 <__any_on>
 8016b28:	1027883a 	mov	r19,r2
 8016b2c:	8805d17a 	srai	r2,r17,5
 8016b30:	00c00044 	movi	r3,1
 8016b34:	8c4007cc 	andi	r17,r17,31
 8016b38:	1085883a 	add	r2,r2,r2
 8016b3c:	1085883a 	add	r2,r2,r2
 8016b40:	8085883a 	add	r2,r16,r2
 8016b44:	1c62983a 	sll	r17,r3,r17
 8016b48:	10800017 	ldw	r2,0(r2)
 8016b4c:	8884703a 	and	r2,r17,r2
 8016b50:	10000126 	beq	r2,zero,8016b58 <__gethex+0x608>
 8016b54:	9cc00094 	ori	r19,r19,2
 8016b58:	e00b883a 	mov	r5,fp
 8016b5c:	b809883a 	mov	r4,r23
 8016b60:	80163cc0 	call	80163cc <rshift>
 8016b64:	d8c00017 	ldw	r3,0(sp)
 8016b68:	9725c83a 	sub	r18,r18,fp
 8016b6c:	04400084 	movi	r17,2
 8016b70:	1f000117 	ldw	fp,4(r3)
 8016b74:	003fa806 	br	8016a18 <__alt_data_end+0xfc016a18>
 8016b78:	84f9883a 	add	fp,r16,r19
 8016b7c:	e0800003 	ldbu	r2,0(fp)
 8016b80:	e021883a 	mov	r16,fp
 8016b84:	11003fcc 	andi	r4,r2,255
 8016b88:	a909883a 	add	r4,r21,r4
 8016b8c:	21000003 	ldbu	r4,0(r4)
 8016b90:	203eaf26 	beq	r4,zero,8016650 <__alt_data_end+0xfc016650>
 8016b94:	84000044 	addi	r16,r16,1
 8016b98:	80800003 	ldbu	r2,0(r16)
 8016b9c:	11003fcc 	andi	r4,r2,255
 8016ba0:	a909883a 	add	r4,r21,r4
 8016ba4:	21000003 	ldbu	r4,0(r4)
 8016ba8:	203ffa1e 	bne	r4,zero,8016b94 <__alt_data_end+0xfc016b94>
 8016bac:	003ea806 	br	8016650 <__alt_data_end+0xfc016650>
 8016bb0:	d9001617 	ldw	r4,88(sp)
 8016bb4:	00800044 	movi	r2,1
 8016bb8:	1109c83a 	sub	r4,r2,r4
 8016bbc:	d9001615 	stw	r4,88(sp)
 8016bc0:	d8801617 	ldw	r2,88(sp)
 8016bc4:	103f9d26 	beq	r2,zero,8016a3c <__alt_data_end+0xfc016a3c>
 8016bc8:	bd000417 	ldw	r20,16(r23)
 8016bcc:	8005883a 	mov	r2,r16
 8016bd0:	013fffc4 	movi	r4,-1
 8016bd4:	a527883a 	add	r19,r20,r20
 8016bd8:	9ce7883a 	add	r19,r19,r19
 8016bdc:	84cb883a 	add	r5,r16,r19
 8016be0:	00000306 	br	8016bf0 <__gethex+0x6a0>
 8016be4:	10000015 	stw	zero,0(r2)
 8016be8:	10800104 	addi	r2,r2,4
 8016bec:	11402e2e 	bgeu	r2,r5,8016ca8 <__gethex+0x758>
 8016bf0:	10c00017 	ldw	r3,0(r2)
 8016bf4:	193ffb26 	beq	r3,r4,8016be4 <__alt_data_end+0xfc016be4>
 8016bf8:	18c00044 	addi	r3,r3,1
 8016bfc:	10c00015 	stw	r3,0(r2)
 8016c00:	00800084 	movi	r2,2
 8016c04:	88803426 	beq	r17,r2,8016cd8 <__gethex+0x788>
 8016c08:	b8800417 	ldw	r2,16(r23)
 8016c0c:	a0bf5c16 	blt	r20,r2,8016980 <__alt_data_end+0xfc016980>
 8016c10:	944007cc 	andi	r17,r18,31
 8016c14:	883f541e 	bne	r17,zero,8016968 <__alt_data_end+0xfc016968>
 8016c18:	04400844 	movi	r17,33
 8016c1c:	003f8806 	br	8016a40 <__alt_data_end+0xfc016a40>
 8016c20:	04c00044 	movi	r19,1
 8016c24:	003fc106 	br	8016b2c <__alt_data_end+0xfc016b2c>
 8016c28:	d8c01617 	ldw	r3,88(sp)
 8016c2c:	183ee326 	beq	r3,zero,80167bc <__alt_data_end+0xfc0167bc>
 8016c30:	d8c00317 	ldw	r3,12(sp)
 8016c34:	d9001517 	ldw	r4,84(sp)
 8016c38:	18800015 	stw	r2,0(r3)
 8016c3c:	00800044 	movi	r2,1
 8016c40:	b8800415 	stw	r2,16(r23)
 8016c44:	80800015 	stw	r2,0(r16)
 8016c48:	25c00015 	stw	r23,0(r4)
 8016c4c:	00801884 	movi	r2,98
 8016c50:	003e8d06 	br	8016688 <__alt_data_end+0xfc016688>
 8016c54:	9880008c 	andi	r2,r19,2
 8016c58:	103f7826 	beq	r2,zero,8016a3c <__alt_data_end+0xfc016a3c>
 8016c5c:	80800017 	ldw	r2,0(r16)
 8016c60:	9884b03a 	or	r2,r19,r2
 8016c64:	10c4703a 	and	r2,r2,r3
 8016c68:	103fd71e 	bne	r2,zero,8016bc8 <__alt_data_end+0xfc016bc8>
 8016c6c:	003f7306 	br	8016a3c <__alt_data_end+0xfc016a3c>
 8016c70:	04c00084 	movi	r19,2
 8016c74:	003f9006 	br	8016ab8 <__alt_data_end+0xfc016ab8>
 8016c78:	e4bed01e 	bne	fp,r18,80167bc <__alt_data_end+0xfc0167bc>
 8016c7c:	1cbfec0e 	bge	r3,r18,8016c30 <__alt_data_end+0xfc016c30>
 8016c80:	b809883a 	mov	r4,r23
 8016c84:	917fffc4 	addi	r5,r18,-1
 8016c88:	80185340 	call	8018534 <__any_on>
 8016c8c:	103ecb26 	beq	r2,zero,80167bc <__alt_data_end+0xfc0167bc>
 8016c90:	d8c00017 	ldw	r3,0(sp)
 8016c94:	18800117 	ldw	r2,4(r3)
 8016c98:	003fe506 	br	8016c30 <__alt_data_end+0xfc016c30>
 8016c9c:	d9001617 	ldw	r4,88(sp)
 8016ca0:	203fe326 	beq	r4,zero,8016c30 <__alt_data_end+0xfc016c30>
 8016ca4:	003ec506 	br	80167bc <__alt_data_end+0xfc0167bc>
 8016ca8:	b8800217 	ldw	r2,8(r23)
 8016cac:	a080100e 	bge	r20,r2,8016cf0 <__gethex+0x7a0>
 8016cb0:	a009883a 	mov	r4,r20
 8016cb4:	20c00144 	addi	r3,r4,5
 8016cb8:	18c7883a 	add	r3,r3,r3
 8016cbc:	21000044 	addi	r4,r4,1
 8016cc0:	18c7883a 	add	r3,r3,r3
 8016cc4:	b9000415 	stw	r4,16(r23)
 8016cc8:	b8c7883a 	add	r3,r23,r3
 8016ccc:	00800044 	movi	r2,1
 8016cd0:	18800015 	stw	r2,0(r3)
 8016cd4:	003fca06 	br	8016c00 <__alt_data_end+0xfc016c00>
 8016cd8:	d8c00017 	ldw	r3,0(sp)
 8016cdc:	18800017 	ldw	r2,0(r3)
 8016ce0:	10bfffc4 	addi	r2,r2,-1
 8016ce4:	14801526 	beq	r2,r18,8016d3c <__gethex+0x7ec>
 8016ce8:	04400884 	movi	r17,34
 8016cec:	003f5406 	br	8016a40 <__alt_data_end+0xfc016a40>
 8016cf0:	b9400117 	ldw	r5,4(r23)
 8016cf4:	d9000117 	ldw	r4,4(sp)
 8016cf8:	29400044 	addi	r5,r5,1
 8016cfc:	80176340 	call	8017634 <_Balloc>
 8016d00:	b9800417 	ldw	r6,16(r23)
 8016d04:	b9400304 	addi	r5,r23,12
 8016d08:	11000304 	addi	r4,r2,12
 8016d0c:	31800084 	addi	r6,r6,2
 8016d10:	318d883a 	add	r6,r6,r6
 8016d14:	318d883a 	add	r6,r6,r6
 8016d18:	1021883a 	mov	r16,r2
 8016d1c:	80173d80 	call	80173d8 <memcpy>
 8016d20:	d9000117 	ldw	r4,4(sp)
 8016d24:	b80b883a 	mov	r5,r23
 8016d28:	802f883a 	mov	r23,r16
 8016d2c:	80176dc0 	call	80176dc <_Bfree>
 8016d30:	81000417 	ldw	r4,16(r16)
 8016d34:	84000504 	addi	r16,r16,20
 8016d38:	003fde06 	br	8016cb4 <__alt_data_end+0xfc016cb4>
 8016d3c:	9005d17a 	srai	r2,r18,5
 8016d40:	944007cc 	andi	r17,r18,31
 8016d44:	00c00044 	movi	r3,1
 8016d48:	1085883a 	add	r2,r2,r2
 8016d4c:	1085883a 	add	r2,r2,r2
 8016d50:	8085883a 	add	r2,r16,r2
 8016d54:	1c62983a 	sll	r17,r3,r17
 8016d58:	10800017 	ldw	r2,0(r2)
 8016d5c:	8884703a 	and	r2,r17,r2
 8016d60:	1023003a 	cmpeq	r17,r2,zero
 8016d64:	8c400844 	addi	r17,r17,33
 8016d68:	003f3506 	br	8016a40 <__alt_data_end+0xfc016a40>

08016d6c <__hexnan>:
 8016d6c:	defff504 	addi	sp,sp,-44
 8016d70:	dc000315 	stw	r16,12(sp)
 8016d74:	040200f4 	movhi	r16,2051
 8016d78:	843a7b04 	addi	r16,r16,-5652
 8016d7c:	80800c03 	ldbu	r2,48(r16)
 8016d80:	dfc00a15 	stw	ra,40(sp)
 8016d84:	dd800915 	stw	r22,36(sp)
 8016d88:	dd400815 	stw	r21,32(sp)
 8016d8c:	dd000715 	stw	r20,28(sp)
 8016d90:	dcc00615 	stw	r19,24(sp)
 8016d94:	dc800515 	stw	r18,20(sp)
 8016d98:	dc400415 	stw	r17,16(sp)
 8016d9c:	10006c26 	beq	r2,zero,8016f50 <__hexnan+0x1e4>
 8016da0:	2cc00017 	ldw	r19,0(r5)
 8016da4:	981dd17a 	srai	r14,r19,5
 8016da8:	9cc007cc 	andi	r19,r19,31
 8016dac:	739d883a 	add	r14,r14,r14
 8016db0:	739d883a 	add	r14,r14,r14
 8016db4:	339d883a 	add	r14,r6,r14
 8016db8:	98000126 	beq	r19,zero,8016dc0 <__hexnan+0x54>
 8016dbc:	73800104 	addi	r14,r14,4
 8016dc0:	22000017 	ldw	r8,0(r4)
 8016dc4:	72ffff04 	addi	r11,r14,-4
 8016dc8:	703fff15 	stw	zero,-4(r14)
 8016dcc:	581b883a 	mov	r13,r11
 8016dd0:	580f883a 	mov	r7,r11
 8016dd4:	000b883a 	mov	r5,zero
 8016dd8:	001f883a 	mov	r15,zero
 8016ddc:	0019883a 	mov	r12,zero
 8016de0:	04800204 	movi	r18,8
 8016de4:	04400804 	movi	r17,32
 8016de8:	050001c4 	movi	r20,7
 8016dec:	42000044 	addi	r8,r8,1
 8016df0:	40c00003 	ldbu	r3,0(r8)
 8016df4:	18001d26 	beq	r3,zero,8016e6c <__hexnan+0x100>
 8016df8:	80c5883a 	add	r2,r16,r3
 8016dfc:	10800003 	ldbu	r2,0(r2)
 8016e00:	12403fcc 	andi	r9,r2,255
 8016e04:	4800301e 	bne	r9,zero,8016ec8 <__hexnan+0x15c>
 8016e08:	88c04436 	bltu	r17,r3,8016f1c <__hexnan+0x1b0>
 8016e0c:	7b3ff70e 	bge	r15,r12,8016dec <__alt_data_end+0xfc016dec>
 8016e10:	3b40112e 	bgeu	r7,r13,8016e58 <__hexnan+0xec>
 8016e14:	a1401016 	blt	r20,r5,8016e58 <__hexnan+0xec>
 8016e18:	914bc83a 	sub	r5,r18,r5
 8016e1c:	294b883a 	add	r5,r5,r5
 8016e20:	3a800017 	ldw	r10,0(r7)
 8016e24:	294b883a 	add	r5,r5,r5
 8016e28:	896dc83a 	sub	r22,r17,r5
 8016e2c:	38c00104 	addi	r3,r7,4
 8016e30:	3805883a 	mov	r2,r7
 8016e34:	1d400017 	ldw	r21,0(r3)
 8016e38:	10800104 	addi	r2,r2,4
 8016e3c:	18c00104 	addi	r3,r3,4
 8016e40:	ad92983a 	sll	r9,r21,r22
 8016e44:	5252b03a 	or	r9,r10,r9
 8016e48:	a954d83a 	srl	r10,r21,r5
 8016e4c:	127fff15 	stw	r9,-4(r2)
 8016e50:	1abfff15 	stw	r10,-4(r3)
 8016e54:	137ff736 	bltu	r2,r13,8016e34 <__alt_data_end+0xfc016e34>
 8016e58:	31c02a36 	bltu	r6,r7,8016f04 <__hexnan+0x198>
 8016e5c:	42000044 	addi	r8,r8,1
 8016e60:	40c00003 	ldbu	r3,0(r8)
 8016e64:	01400204 	movi	r5,8
 8016e68:	183fe31e 	bne	r3,zero,8016df8 <__alt_data_end+0xfc016df8>
 8016e6c:	3805883a 	mov	r2,r7
 8016e70:	60002c26 	beq	r12,zero,8016f24 <__hexnan+0x1b8>
 8016e74:	3b40022e 	bgeu	r7,r13,8016e80 <__hexnan+0x114>
 8016e78:	00c001c4 	movi	r3,7
 8016e7c:	19404e0e 	bge	r3,r5,8016fb8 <__hexnan+0x24c>
 8016e80:	31c03b2e 	bgeu	r6,r7,8016f70 <__hexnan+0x204>
 8016e84:	3005883a 	mov	r2,r6
 8016e88:	38c00017 	ldw	r3,0(r7)
 8016e8c:	10800104 	addi	r2,r2,4
 8016e90:	39c00104 	addi	r7,r7,4
 8016e94:	10ffff15 	stw	r3,-4(r2)
 8016e98:	59fffb2e 	bgeu	r11,r7,8016e88 <__alt_data_end+0xfc016e88>
 8016e9c:	10000015 	stw	zero,0(r2)
 8016ea0:	10800104 	addi	r2,r2,4
 8016ea4:	58bffd2e 	bgeu	r11,r2,8016e9c <__alt_data_end+0xfc016e9c>
 8016ea8:	70bfff17 	ldw	r2,-4(r14)
 8016eac:	1000041e 	bne	r2,zero,8016ec0 <__hexnan+0x154>
 8016eb0:	32c03826 	beq	r6,r11,8016f94 <__hexnan+0x228>
 8016eb4:	5affff04 	addi	r11,r11,-4
 8016eb8:	58800017 	ldw	r2,0(r11)
 8016ebc:	103ffc26 	beq	r2,zero,8016eb0 <__alt_data_end+0xfc016eb0>
 8016ec0:	00800144 	movi	r2,5
 8016ec4:	00001806 	br	8016f28 <__hexnan+0x1bc>
 8016ec8:	29400044 	addi	r5,r5,1
 8016ecc:	63000044 	addi	r12,r12,1
 8016ed0:	91400616 	blt	r18,r5,8016eec <__hexnan+0x180>
 8016ed4:	38c00017 	ldw	r3,0(r7)
 8016ed8:	1806913a 	slli	r3,r3,4
 8016edc:	108003cc 	andi	r2,r2,15
 8016ee0:	1884b03a 	or	r2,r3,r2
 8016ee4:	38800015 	stw	r2,0(r7)
 8016ee8:	003fc006 	br	8016dec <__alt_data_end+0xfc016dec>
 8016eec:	31ffbf2e 	bgeu	r6,r7,8016dec <__alt_data_end+0xfc016dec>
 8016ef0:	383fff15 	stw	zero,-4(r7)
 8016ef4:	0007883a 	mov	r3,zero
 8016ef8:	39ffff04 	addi	r7,r7,-4
 8016efc:	01400044 	movi	r5,1
 8016f00:	003ff606 	br	8016edc <__alt_data_end+0xfc016edc>
 8016f04:	3b7fff04 	addi	r13,r7,-4
 8016f08:	383fff15 	stw	zero,-4(r7)
 8016f0c:	601f883a 	mov	r15,r12
 8016f10:	680f883a 	mov	r7,r13
 8016f14:	000b883a 	mov	r5,zero
 8016f18:	003fb406 	br	8016dec <__alt_data_end+0xfc016dec>
 8016f1c:	00800a44 	movi	r2,41
 8016f20:	18802026 	beq	r3,r2,8016fa4 <__hexnan+0x238>
 8016f24:	00800104 	movi	r2,4
 8016f28:	dfc00a17 	ldw	ra,40(sp)
 8016f2c:	dd800917 	ldw	r22,36(sp)
 8016f30:	dd400817 	ldw	r21,32(sp)
 8016f34:	dd000717 	ldw	r20,28(sp)
 8016f38:	dcc00617 	ldw	r19,24(sp)
 8016f3c:	dc800517 	ldw	r18,20(sp)
 8016f40:	dc400417 	ldw	r17,16(sp)
 8016f44:	dc000317 	ldw	r16,12(sp)
 8016f48:	dec00b04 	addi	sp,sp,44
 8016f4c:	f800283a 	ret
 8016f50:	d9000015 	stw	r4,0(sp)
 8016f54:	d9400115 	stw	r5,4(sp)
 8016f58:	d9800215 	stw	r6,8(sp)
 8016f5c:	80164cc0 	call	80164cc <__hexdig_init>
 8016f60:	d9800217 	ldw	r6,8(sp)
 8016f64:	d9400117 	ldw	r5,4(sp)
 8016f68:	d9000017 	ldw	r4,0(sp)
 8016f6c:	003f8c06 	br	8016da0 <__alt_data_end+0xfc016da0>
 8016f70:	983fcd26 	beq	r19,zero,8016ea8 <__alt_data_end+0xfc016ea8>
 8016f74:	00c00804 	movi	r3,32
 8016f78:	1ce7c83a 	sub	r19,r3,r19
 8016f7c:	00ffffc4 	movi	r3,-1
 8016f80:	70bfff17 	ldw	r2,-4(r14)
 8016f84:	1cc6d83a 	srl	r3,r3,r19
 8016f88:	1884703a 	and	r2,r3,r2
 8016f8c:	70bfff15 	stw	r2,-4(r14)
 8016f90:	003fc606 	br	8016eac <__alt_data_end+0xfc016eac>
 8016f94:	00800044 	movi	r2,1
 8016f98:	58800015 	stw	r2,0(r11)
 8016f9c:	00800144 	movi	r2,5
 8016fa0:	003fe106 	br	8016f28 <__alt_data_end+0xfc016f28>
 8016fa4:	42000044 	addi	r8,r8,1
 8016fa8:	22000015 	stw	r8,0(r4)
 8016fac:	3805883a 	mov	r2,r7
 8016fb0:	603fb01e 	bne	r12,zero,8016e74 <__alt_data_end+0xfc016e74>
 8016fb4:	003fdb06 	br	8016f24 <__alt_data_end+0xfc016f24>
 8016fb8:	02400204 	movi	r9,8
 8016fbc:	4953c83a 	sub	r9,r9,r5
 8016fc0:	4a53883a 	add	r9,r9,r9
 8016fc4:	3a000017 	ldw	r8,0(r7)
 8016fc8:	4a53883a 	add	r9,r9,r9
 8016fcc:	02800804 	movi	r10,32
 8016fd0:	5255c83a 	sub	r10,r10,r9
 8016fd4:	38c00104 	addi	r3,r7,4
 8016fd8:	19400017 	ldw	r5,0(r3)
 8016fdc:	10800104 	addi	r2,r2,4
 8016fe0:	18c00104 	addi	r3,r3,4
 8016fe4:	2a88983a 	sll	r4,r5,r10
 8016fe8:	4108b03a 	or	r4,r8,r4
 8016fec:	2a50d83a 	srl	r8,r5,r9
 8016ff0:	113fff15 	stw	r4,-4(r2)
 8016ff4:	1a3fff15 	stw	r8,-4(r3)
 8016ff8:	137ff736 	bltu	r2,r13,8016fd8 <__alt_data_end+0xfc016fd8>
 8016ffc:	003fa006 	br	8016e80 <__alt_data_end+0xfc016e80>

08017000 <_gettimeofday_r>:
 8017000:	defffd04 	addi	sp,sp,-12
 8017004:	dc000015 	stw	r16,0(sp)
 8017008:	040200f4 	movhi	r16,2051
 801700c:	dc400115 	stw	r17,4(sp)
 8017010:	843a0e04 	addi	r16,r16,-6088
 8017014:	2023883a 	mov	r17,r4
 8017018:	2809883a 	mov	r4,r5
 801701c:	300b883a 	mov	r5,r6
 8017020:	dfc00215 	stw	ra,8(sp)
 8017024:	80000015 	stw	zero,0(r16)
 8017028:	801d5580 	call	801d558 <gettimeofday>
 801702c:	00ffffc4 	movi	r3,-1
 8017030:	10c00526 	beq	r2,r3,8017048 <_gettimeofday_r+0x48>
 8017034:	dfc00217 	ldw	ra,8(sp)
 8017038:	dc400117 	ldw	r17,4(sp)
 801703c:	dc000017 	ldw	r16,0(sp)
 8017040:	dec00304 	addi	sp,sp,12
 8017044:	f800283a 	ret
 8017048:	80c00017 	ldw	r3,0(r16)
 801704c:	183ff926 	beq	r3,zero,8017034 <__alt_data_end+0xfc017034>
 8017050:	88c00015 	stw	r3,0(r17)
 8017054:	003ff706 	br	8017034 <__alt_data_end+0xfc017034>

08017058 <_setlocale_r>:
 8017058:	30001b26 	beq	r6,zero,80170c8 <_setlocale_r+0x70>
 801705c:	014200f4 	movhi	r5,2051
 8017060:	defffe04 	addi	sp,sp,-8
 8017064:	296bd704 	addi	r5,r5,-20644
 8017068:	3009883a 	mov	r4,r6
 801706c:	dc000015 	stw	r16,0(sp)
 8017070:	dfc00115 	stw	ra,4(sp)
 8017074:	3021883a 	mov	r16,r6
 8017078:	800e2900 	call	800e290 <strcmp>
 801707c:	1000061e 	bne	r2,zero,8017098 <_setlocale_r+0x40>
 8017080:	008200f4 	movhi	r2,2051
 8017084:	10aafc04 	addi	r2,r2,-21520
 8017088:	dfc00117 	ldw	ra,4(sp)
 801708c:	dc000017 	ldw	r16,0(sp)
 8017090:	dec00204 	addi	sp,sp,8
 8017094:	f800283a 	ret
 8017098:	014200f4 	movhi	r5,2051
 801709c:	296afc04 	addi	r5,r5,-21520
 80170a0:	8009883a 	mov	r4,r16
 80170a4:	800e2900 	call	800e290 <strcmp>
 80170a8:	103ff526 	beq	r2,zero,8017080 <__alt_data_end+0xfc017080>
 80170ac:	014200f4 	movhi	r5,2051
 80170b0:	296b1304 	addi	r5,r5,-21428
 80170b4:	8009883a 	mov	r4,r16
 80170b8:	800e2900 	call	800e290 <strcmp>
 80170bc:	103ff026 	beq	r2,zero,8017080 <__alt_data_end+0xfc017080>
 80170c0:	0005883a 	mov	r2,zero
 80170c4:	003ff006 	br	8017088 <__alt_data_end+0xfc017088>
 80170c8:	008200f4 	movhi	r2,2051
 80170cc:	10aafc04 	addi	r2,r2,-21520
 80170d0:	f800283a 	ret

080170d4 <__locale_charset>:
 80170d4:	008200f4 	movhi	r2,2051
 80170d8:	10ae6d04 	addi	r2,r2,-17996
 80170dc:	f800283a 	ret

080170e0 <__locale_mb_cur_max>:
 80170e0:	008200f4 	movhi	r2,2051
 80170e4:	10b31a04 	addi	r2,r2,-13208
 80170e8:	10800017 	ldw	r2,0(r2)
 80170ec:	f800283a 	ret

080170f0 <__locale_msgcharset>:
 80170f0:	008200f4 	movhi	r2,2051
 80170f4:	10ae6504 	addi	r2,r2,-18028
 80170f8:	f800283a 	ret

080170fc <__locale_cjk_lang>:
 80170fc:	0005883a 	mov	r2,zero
 8017100:	f800283a 	ret

08017104 <_localeconv_r>:
 8017104:	008200f4 	movhi	r2,2051
 8017108:	10ae7504 	addi	r2,r2,-17964
 801710c:	f800283a 	ret

08017110 <setlocale>:
 8017110:	00c200f4 	movhi	r3,2051
 8017114:	18f31604 	addi	r3,r3,-13224
 8017118:	2005883a 	mov	r2,r4
 801711c:	19000017 	ldw	r4,0(r3)
 8017120:	280d883a 	mov	r6,r5
 8017124:	100b883a 	mov	r5,r2
 8017128:	80170581 	jmpi	8017058 <_setlocale_r>

0801712c <localeconv>:
 801712c:	008200f4 	movhi	r2,2051
 8017130:	10ae7504 	addi	r2,r2,-17964
 8017134:	f800283a 	ret

08017138 <__smakebuf_r>:
 8017138:	2880030b 	ldhu	r2,12(r5)
 801713c:	10c0008c 	andi	r3,r2,2
 8017140:	1800401e 	bne	r3,zero,8017244 <__smakebuf_r+0x10c>
 8017144:	deffec04 	addi	sp,sp,-80
 8017148:	dc000f15 	stw	r16,60(sp)
 801714c:	2821883a 	mov	r16,r5
 8017150:	2940038f 	ldh	r5,14(r5)
 8017154:	dc401015 	stw	r17,64(sp)
 8017158:	dfc01315 	stw	ra,76(sp)
 801715c:	dcc01215 	stw	r19,72(sp)
 8017160:	dc801115 	stw	r18,68(sp)
 8017164:	2023883a 	mov	r17,r4
 8017168:	28001b16 	blt	r5,zero,80171d8 <__smakebuf_r+0xa0>
 801716c:	d80d883a 	mov	r6,sp
 8017170:	801b5bc0 	call	801b5bc <_fstat_r>
 8017174:	10001716 	blt	r2,zero,80171d4 <__smakebuf_r+0x9c>
 8017178:	d8800117 	ldw	r2,4(sp)
 801717c:	00e00014 	movui	r3,32768
 8017180:	10bc000c 	andi	r2,r2,61440
 8017184:	10c03726 	beq	r2,r3,8017264 <__smakebuf_r+0x12c>
 8017188:	80c0030b 	ldhu	r3,12(r16)
 801718c:	18c20014 	ori	r3,r3,2048
 8017190:	80c0030d 	sth	r3,12(r16)
 8017194:	00c80004 	movi	r3,8192
 8017198:	10c03c1e 	bne	r2,r3,801728c <__smakebuf_r+0x154>
 801719c:	8140038f 	ldh	r5,14(r16)
 80171a0:	8809883a 	mov	r4,r17
 80171a4:	801bab80 	call	801bab8 <_isatty_r>
 80171a8:	10004e26 	beq	r2,zero,80172e4 <__smakebuf_r+0x1ac>
 80171ac:	8080030b 	ldhu	r2,12(r16)
 80171b0:	04c00044 	movi	r19,1
 80171b4:	80c010c4 	addi	r3,r16,67
 80171b8:	14c4b03a 	or	r2,r2,r19
 80171bc:	8080030d 	sth	r2,12(r16)
 80171c0:	80c00015 	stw	r3,0(r16)
 80171c4:	80c00415 	stw	r3,16(r16)
 80171c8:	84c00515 	stw	r19,20(r16)
 80171cc:	04810004 	movi	r18,1024
 80171d0:	00000706 	br	80171f0 <__smakebuf_r+0xb8>
 80171d4:	8080030b 	ldhu	r2,12(r16)
 80171d8:	10c0200c 	andi	r3,r2,128
 80171dc:	18001f1e 	bne	r3,zero,801725c <__smakebuf_r+0x124>
 80171e0:	04810004 	movi	r18,1024
 80171e4:	10820014 	ori	r2,r2,2048
 80171e8:	8080030d 	sth	r2,12(r16)
 80171ec:	0027883a 	mov	r19,zero
 80171f0:	8809883a 	mov	r4,r17
 80171f4:	900b883a 	mov	r5,r18
 80171f8:	800d7040 	call	800d704 <_malloc_r>
 80171fc:	10002e26 	beq	r2,zero,80172b8 <__smakebuf_r+0x180>
 8017200:	80c0030b 	ldhu	r3,12(r16)
 8017204:	01020074 	movhi	r4,2049
 8017208:	2116ae04 	addi	r4,r4,23224
 801720c:	89000f15 	stw	r4,60(r17)
 8017210:	18c02014 	ori	r3,r3,128
 8017214:	80c0030d 	sth	r3,12(r16)
 8017218:	80800015 	stw	r2,0(r16)
 801721c:	80800415 	stw	r2,16(r16)
 8017220:	84800515 	stw	r18,20(r16)
 8017224:	98001c1e 	bne	r19,zero,8017298 <__smakebuf_r+0x160>
 8017228:	dfc01317 	ldw	ra,76(sp)
 801722c:	dcc01217 	ldw	r19,72(sp)
 8017230:	dc801117 	ldw	r18,68(sp)
 8017234:	dc401017 	ldw	r17,64(sp)
 8017238:	dc000f17 	ldw	r16,60(sp)
 801723c:	dec01404 	addi	sp,sp,80
 8017240:	f800283a 	ret
 8017244:	288010c4 	addi	r2,r5,67
 8017248:	28800015 	stw	r2,0(r5)
 801724c:	28800415 	stw	r2,16(r5)
 8017250:	00800044 	movi	r2,1
 8017254:	28800515 	stw	r2,20(r5)
 8017258:	f800283a 	ret
 801725c:	04801004 	movi	r18,64
 8017260:	003fe006 	br	80171e4 <__alt_data_end+0xfc0171e4>
 8017264:	81000a17 	ldw	r4,40(r16)
 8017268:	00c200b4 	movhi	r3,2050
 801726c:	18e20004 	addi	r3,r3,-30720
 8017270:	20ffc51e 	bne	r4,r3,8017188 <__alt_data_end+0xfc017188>
 8017274:	80c0030b 	ldhu	r3,12(r16)
 8017278:	01010004 	movi	r4,1024
 801727c:	81001315 	stw	r4,76(r16)
 8017280:	1906b03a 	or	r3,r3,r4
 8017284:	80c0030d 	sth	r3,12(r16)
 8017288:	003fc206 	br	8017194 <__alt_data_end+0xfc017194>
 801728c:	0027883a 	mov	r19,zero
 8017290:	04810004 	movi	r18,1024
 8017294:	003fd606 	br	80171f0 <__alt_data_end+0xfc0171f0>
 8017298:	8140038f 	ldh	r5,14(r16)
 801729c:	8809883a 	mov	r4,r17
 80172a0:	801bab80 	call	801bab8 <_isatty_r>
 80172a4:	103fe026 	beq	r2,zero,8017228 <__alt_data_end+0xfc017228>
 80172a8:	8080030b 	ldhu	r2,12(r16)
 80172ac:	10800054 	ori	r2,r2,1
 80172b0:	8080030d 	sth	r2,12(r16)
 80172b4:	003fdc06 	br	8017228 <__alt_data_end+0xfc017228>
 80172b8:	8080030b 	ldhu	r2,12(r16)
 80172bc:	10c0800c 	andi	r3,r2,512
 80172c0:	183fd91e 	bne	r3,zero,8017228 <__alt_data_end+0xfc017228>
 80172c4:	10800094 	ori	r2,r2,2
 80172c8:	80c010c4 	addi	r3,r16,67
 80172cc:	8080030d 	sth	r2,12(r16)
 80172d0:	00800044 	movi	r2,1
 80172d4:	80c00015 	stw	r3,0(r16)
 80172d8:	80c00415 	stw	r3,16(r16)
 80172dc:	80800515 	stw	r2,20(r16)
 80172e0:	003fd106 	br	8017228 <__alt_data_end+0xfc017228>
 80172e4:	04c00044 	movi	r19,1
 80172e8:	04810004 	movi	r18,1024
 80172ec:	003fc006 	br	80171f0 <__alt_data_end+0xfc0171f0>

080172f0 <memchr>:
 80172f0:	208000cc 	andi	r2,r4,3
 80172f4:	280f883a 	mov	r7,r5
 80172f8:	10003526 	beq	r2,zero,80173d0 <memchr+0xe0>
 80172fc:	30bfffc4 	addi	r2,r6,-1
 8017300:	30001b26 	beq	r6,zero,8017370 <memchr+0x80>
 8017304:	21800003 	ldbu	r6,0(r4)
 8017308:	28c03fcc 	andi	r3,r5,255
 801730c:	30c01a26 	beq	r6,r3,8017378 <memchr+0x88>
 8017310:	180d883a 	mov	r6,r3
 8017314:	00000406 	br	8017328 <memchr+0x38>
 8017318:	10001526 	beq	r2,zero,8017370 <memchr+0x80>
 801731c:	20c00003 	ldbu	r3,0(r4)
 8017320:	10bfffc4 	addi	r2,r2,-1
 8017324:	19801426 	beq	r3,r6,8017378 <memchr+0x88>
 8017328:	21000044 	addi	r4,r4,1
 801732c:	20c000cc 	andi	r3,r4,3
 8017330:	183ff91e 	bne	r3,zero,8017318 <__alt_data_end+0xfc017318>
 8017334:	024000c4 	movi	r9,3
 8017338:	48801136 	bltu	r9,r2,8017380 <memchr+0x90>
 801733c:	10000c26 	beq	r2,zero,8017370 <memchr+0x80>
 8017340:	20c00003 	ldbu	r3,0(r4)
 8017344:	29403fcc 	andi	r5,r5,255
 8017348:	19400b26 	beq	r3,r5,8017378 <memchr+0x88>
 801734c:	20c00044 	addi	r3,r4,1
 8017350:	2085883a 	add	r2,r4,r2
 8017354:	39803fcc 	andi	r6,r7,255
 8017358:	00000306 	br	8017368 <memchr+0x78>
 801735c:	18c00044 	addi	r3,r3,1
 8017360:	197fffc3 	ldbu	r5,-1(r3)
 8017364:	29800426 	beq	r5,r6,8017378 <memchr+0x88>
 8017368:	1809883a 	mov	r4,r3
 801736c:	18bffb1e 	bne	r3,r2,801735c <__alt_data_end+0xfc01735c>
 8017370:	0005883a 	mov	r2,zero
 8017374:	f800283a 	ret
 8017378:	2005883a 	mov	r2,r4
 801737c:	f800283a 	ret
 8017380:	28c03fcc 	andi	r3,r5,255
 8017384:	1810923a 	slli	r8,r3,8
 8017388:	02ffbff4 	movhi	r11,65279
 801738c:	02a02074 	movhi	r10,32897
 8017390:	40c6b03a 	or	r3,r8,r3
 8017394:	1810943a 	slli	r8,r3,16
 8017398:	5affbfc4 	addi	r11,r11,-257
 801739c:	52a02004 	addi	r10,r10,-32640
 80173a0:	40d0b03a 	or	r8,r8,r3
 80173a4:	20c00017 	ldw	r3,0(r4)
 80173a8:	40c6f03a 	xor	r3,r8,r3
 80173ac:	1acd883a 	add	r6,r3,r11
 80173b0:	00c6303a 	nor	r3,zero,r3
 80173b4:	30c6703a 	and	r3,r6,r3
 80173b8:	1a86703a 	and	r3,r3,r10
 80173bc:	183fdf1e 	bne	r3,zero,801733c <__alt_data_end+0xfc01733c>
 80173c0:	10bfff04 	addi	r2,r2,-4
 80173c4:	21000104 	addi	r4,r4,4
 80173c8:	48bff636 	bltu	r9,r2,80173a4 <__alt_data_end+0xfc0173a4>
 80173cc:	003fdb06 	br	801733c <__alt_data_end+0xfc01733c>
 80173d0:	3005883a 	mov	r2,r6
 80173d4:	003fd706 	br	8017334 <__alt_data_end+0xfc017334>

080173d8 <memcpy>:
 80173d8:	deffff04 	addi	sp,sp,-4
 80173dc:	dc000015 	stw	r16,0(sp)
 80173e0:	00c003c4 	movi	r3,15
 80173e4:	2005883a 	mov	r2,r4
 80173e8:	1980432e 	bgeu	r3,r6,80174f8 <memcpy+0x120>
 80173ec:	2146b03a 	or	r3,r4,r5
 80173f0:	18c000cc 	andi	r3,r3,3
 80173f4:	1800421e 	bne	r3,zero,8017500 <memcpy+0x128>
 80173f8:	343ffc04 	addi	r16,r6,-16
 80173fc:	8020d13a 	srli	r16,r16,4
 8017400:	28c00104 	addi	r3,r5,4
 8017404:	23400104 	addi	r13,r4,4
 8017408:	801e913a 	slli	r15,r16,4
 801740c:	2b000204 	addi	r12,r5,8
 8017410:	22c00204 	addi	r11,r4,8
 8017414:	7bc00504 	addi	r15,r15,20
 8017418:	2a800304 	addi	r10,r5,12
 801741c:	22400304 	addi	r9,r4,12
 8017420:	2bdf883a 	add	r15,r5,r15
 8017424:	2811883a 	mov	r8,r5
 8017428:	200f883a 	mov	r7,r4
 801742c:	41000017 	ldw	r4,0(r8)
 8017430:	39c00404 	addi	r7,r7,16
 8017434:	18c00404 	addi	r3,r3,16
 8017438:	393ffc15 	stw	r4,-16(r7)
 801743c:	1bbffc17 	ldw	r14,-16(r3)
 8017440:	6b400404 	addi	r13,r13,16
 8017444:	5ac00404 	addi	r11,r11,16
 8017448:	6bbffc15 	stw	r14,-16(r13)
 801744c:	63800017 	ldw	r14,0(r12)
 8017450:	4a400404 	addi	r9,r9,16
 8017454:	42000404 	addi	r8,r8,16
 8017458:	5bbffc15 	stw	r14,-16(r11)
 801745c:	53800017 	ldw	r14,0(r10)
 8017460:	63000404 	addi	r12,r12,16
 8017464:	52800404 	addi	r10,r10,16
 8017468:	4bbffc15 	stw	r14,-16(r9)
 801746c:	1bffef1e 	bne	r3,r15,801742c <__alt_data_end+0xfc01742c>
 8017470:	81c00044 	addi	r7,r16,1
 8017474:	380e913a 	slli	r7,r7,4
 8017478:	310003cc 	andi	r4,r6,15
 801747c:	02c000c4 	movi	r11,3
 8017480:	11c7883a 	add	r3,r2,r7
 8017484:	29cb883a 	add	r5,r5,r7
 8017488:	59001f2e 	bgeu	r11,r4,8017508 <memcpy+0x130>
 801748c:	1813883a 	mov	r9,r3
 8017490:	2811883a 	mov	r8,r5
 8017494:	200f883a 	mov	r7,r4
 8017498:	42800017 	ldw	r10,0(r8)
 801749c:	4a400104 	addi	r9,r9,4
 80174a0:	39ffff04 	addi	r7,r7,-4
 80174a4:	4abfff15 	stw	r10,-4(r9)
 80174a8:	42000104 	addi	r8,r8,4
 80174ac:	59fffa36 	bltu	r11,r7,8017498 <__alt_data_end+0xfc017498>
 80174b0:	213fff04 	addi	r4,r4,-4
 80174b4:	2008d0ba 	srli	r4,r4,2
 80174b8:	318000cc 	andi	r6,r6,3
 80174bc:	21000044 	addi	r4,r4,1
 80174c0:	2109883a 	add	r4,r4,r4
 80174c4:	2109883a 	add	r4,r4,r4
 80174c8:	1907883a 	add	r3,r3,r4
 80174cc:	290b883a 	add	r5,r5,r4
 80174d0:	30000626 	beq	r6,zero,80174ec <memcpy+0x114>
 80174d4:	198d883a 	add	r6,r3,r6
 80174d8:	29c00003 	ldbu	r7,0(r5)
 80174dc:	18c00044 	addi	r3,r3,1
 80174e0:	29400044 	addi	r5,r5,1
 80174e4:	19ffffc5 	stb	r7,-1(r3)
 80174e8:	19bffb1e 	bne	r3,r6,80174d8 <__alt_data_end+0xfc0174d8>
 80174ec:	dc000017 	ldw	r16,0(sp)
 80174f0:	dec00104 	addi	sp,sp,4
 80174f4:	f800283a 	ret
 80174f8:	2007883a 	mov	r3,r4
 80174fc:	003ff406 	br	80174d0 <__alt_data_end+0xfc0174d0>
 8017500:	2007883a 	mov	r3,r4
 8017504:	003ff306 	br	80174d4 <__alt_data_end+0xfc0174d4>
 8017508:	200d883a 	mov	r6,r4
 801750c:	003ff006 	br	80174d0 <__alt_data_end+0xfc0174d0>

08017510 <memset>:
 8017510:	20c000cc 	andi	r3,r4,3
 8017514:	2005883a 	mov	r2,r4
 8017518:	18004326 	beq	r3,zero,8017628 <memset+0x118>
 801751c:	31ffffc4 	addi	r7,r6,-1
 8017520:	30004026 	beq	r6,zero,8017624 <memset+0x114>
 8017524:	2813883a 	mov	r9,r5
 8017528:	200d883a 	mov	r6,r4
 801752c:	2007883a 	mov	r3,r4
 8017530:	00000406 	br	8017544 <memset+0x34>
 8017534:	3a3fffc4 	addi	r8,r7,-1
 8017538:	31800044 	addi	r6,r6,1
 801753c:	38003926 	beq	r7,zero,8017624 <memset+0x114>
 8017540:	400f883a 	mov	r7,r8
 8017544:	18c00044 	addi	r3,r3,1
 8017548:	32400005 	stb	r9,0(r6)
 801754c:	1a0000cc 	andi	r8,r3,3
 8017550:	403ff81e 	bne	r8,zero,8017534 <__alt_data_end+0xfc017534>
 8017554:	010000c4 	movi	r4,3
 8017558:	21c02d2e 	bgeu	r4,r7,8017610 <memset+0x100>
 801755c:	29803fcc 	andi	r6,r5,255
 8017560:	3008923a 	slli	r4,r6,8
 8017564:	218cb03a 	or	r6,r4,r6
 8017568:	3008943a 	slli	r4,r6,16
 801756c:	218cb03a 	or	r6,r4,r6
 8017570:	010003c4 	movi	r4,15
 8017574:	21c0182e 	bgeu	r4,r7,80175d8 <memset+0xc8>
 8017578:	3b3ffc04 	addi	r12,r7,-16
 801757c:	6018d13a 	srli	r12,r12,4
 8017580:	1a000104 	addi	r8,r3,4
 8017584:	1ac00204 	addi	r11,r3,8
 8017588:	6008913a 	slli	r4,r12,4
 801758c:	1a800304 	addi	r10,r3,12
 8017590:	1813883a 	mov	r9,r3
 8017594:	21000504 	addi	r4,r4,20
 8017598:	1909883a 	add	r4,r3,r4
 801759c:	49800015 	stw	r6,0(r9)
 80175a0:	41800015 	stw	r6,0(r8)
 80175a4:	59800015 	stw	r6,0(r11)
 80175a8:	51800015 	stw	r6,0(r10)
 80175ac:	42000404 	addi	r8,r8,16
 80175b0:	4a400404 	addi	r9,r9,16
 80175b4:	5ac00404 	addi	r11,r11,16
 80175b8:	52800404 	addi	r10,r10,16
 80175bc:	413ff71e 	bne	r8,r4,801759c <__alt_data_end+0xfc01759c>
 80175c0:	63000044 	addi	r12,r12,1
 80175c4:	6018913a 	slli	r12,r12,4
 80175c8:	39c003cc 	andi	r7,r7,15
 80175cc:	010000c4 	movi	r4,3
 80175d0:	1b07883a 	add	r3,r3,r12
 80175d4:	21c00e2e 	bgeu	r4,r7,8017610 <memset+0x100>
 80175d8:	1813883a 	mov	r9,r3
 80175dc:	3811883a 	mov	r8,r7
 80175e0:	010000c4 	movi	r4,3
 80175e4:	49800015 	stw	r6,0(r9)
 80175e8:	423fff04 	addi	r8,r8,-4
 80175ec:	4a400104 	addi	r9,r9,4
 80175f0:	223ffc36 	bltu	r4,r8,80175e4 <__alt_data_end+0xfc0175e4>
 80175f4:	393fff04 	addi	r4,r7,-4
 80175f8:	2008d0ba 	srli	r4,r4,2
 80175fc:	39c000cc 	andi	r7,r7,3
 8017600:	21000044 	addi	r4,r4,1
 8017604:	2109883a 	add	r4,r4,r4
 8017608:	2109883a 	add	r4,r4,r4
 801760c:	1907883a 	add	r3,r3,r4
 8017610:	38000426 	beq	r7,zero,8017624 <memset+0x114>
 8017614:	19cf883a 	add	r7,r3,r7
 8017618:	19400005 	stb	r5,0(r3)
 801761c:	18c00044 	addi	r3,r3,1
 8017620:	19fffd1e 	bne	r3,r7,8017618 <__alt_data_end+0xfc017618>
 8017624:	f800283a 	ret
 8017628:	2007883a 	mov	r3,r4
 801762c:	300f883a 	mov	r7,r6
 8017630:	003fc806 	br	8017554 <__alt_data_end+0xfc017554>

08017634 <_Balloc>:
 8017634:	20801317 	ldw	r2,76(r4)
 8017638:	defffc04 	addi	sp,sp,-16
 801763c:	dc400115 	stw	r17,4(sp)
 8017640:	dc000015 	stw	r16,0(sp)
 8017644:	dfc00315 	stw	ra,12(sp)
 8017648:	dc800215 	stw	r18,8(sp)
 801764c:	2023883a 	mov	r17,r4
 8017650:	2821883a 	mov	r16,r5
 8017654:	10000f26 	beq	r2,zero,8017694 <_Balloc+0x60>
 8017658:	8407883a 	add	r3,r16,r16
 801765c:	18c7883a 	add	r3,r3,r3
 8017660:	10c7883a 	add	r3,r2,r3
 8017664:	18800017 	ldw	r2,0(r3)
 8017668:	10001126 	beq	r2,zero,80176b0 <_Balloc+0x7c>
 801766c:	11000017 	ldw	r4,0(r2)
 8017670:	19000015 	stw	r4,0(r3)
 8017674:	10000415 	stw	zero,16(r2)
 8017678:	10000315 	stw	zero,12(r2)
 801767c:	dfc00317 	ldw	ra,12(sp)
 8017680:	dc800217 	ldw	r18,8(sp)
 8017684:	dc400117 	ldw	r17,4(sp)
 8017688:	dc000017 	ldw	r16,0(sp)
 801768c:	dec00404 	addi	sp,sp,16
 8017690:	f800283a 	ret
 8017694:	01400104 	movi	r5,4
 8017698:	01800844 	movi	r6,33
 801769c:	801b2080 	call	801b208 <_calloc_r>
 80176a0:	88801315 	stw	r2,76(r17)
 80176a4:	103fec1e 	bne	r2,zero,8017658 <__alt_data_end+0xfc017658>
 80176a8:	0005883a 	mov	r2,zero
 80176ac:	003ff306 	br	801767c <__alt_data_end+0xfc01767c>
 80176b0:	01400044 	movi	r5,1
 80176b4:	2c24983a 	sll	r18,r5,r16
 80176b8:	8809883a 	mov	r4,r17
 80176bc:	91800144 	addi	r6,r18,5
 80176c0:	318d883a 	add	r6,r6,r6
 80176c4:	318d883a 	add	r6,r6,r6
 80176c8:	801b2080 	call	801b208 <_calloc_r>
 80176cc:	103ff626 	beq	r2,zero,80176a8 <__alt_data_end+0xfc0176a8>
 80176d0:	14000115 	stw	r16,4(r2)
 80176d4:	14800215 	stw	r18,8(r2)
 80176d8:	003fe606 	br	8017674 <__alt_data_end+0xfc017674>

080176dc <_Bfree>:
 80176dc:	28000826 	beq	r5,zero,8017700 <_Bfree+0x24>
 80176e0:	28c00117 	ldw	r3,4(r5)
 80176e4:	20801317 	ldw	r2,76(r4)
 80176e8:	18c7883a 	add	r3,r3,r3
 80176ec:	18c7883a 	add	r3,r3,r3
 80176f0:	10c5883a 	add	r2,r2,r3
 80176f4:	10c00017 	ldw	r3,0(r2)
 80176f8:	28c00015 	stw	r3,0(r5)
 80176fc:	11400015 	stw	r5,0(r2)
 8017700:	f800283a 	ret

08017704 <__multadd>:
 8017704:	defffa04 	addi	sp,sp,-24
 8017708:	dc000115 	stw	r16,4(sp)
 801770c:	2c000417 	ldw	r16,16(r5)
 8017710:	dc800315 	stw	r18,12(sp)
 8017714:	dc400215 	stw	r17,8(sp)
 8017718:	dfc00515 	stw	ra,20(sp)
 801771c:	dcc00415 	stw	r19,16(sp)
 8017720:	2823883a 	mov	r17,r5
 8017724:	2025883a 	mov	r18,r4
 8017728:	2a400504 	addi	r9,r5,20
 801772c:	0015883a 	mov	r10,zero
 8017730:	4a000017 	ldw	r8,0(r9)
 8017734:	4a400104 	addi	r9,r9,4
 8017738:	52800044 	addi	r10,r10,1
 801773c:	40ffffcc 	andi	r3,r8,65535
 8017740:	1987383a 	mul	r3,r3,r6
 8017744:	4010d43a 	srli	r8,r8,16
 8017748:	19cf883a 	add	r7,r3,r7
 801774c:	4191383a 	mul	r8,r8,r6
 8017750:	3816d43a 	srli	r11,r7,16
 8017754:	38ffffcc 	andi	r3,r7,65535
 8017758:	5a0f883a 	add	r7,r11,r8
 801775c:	3810943a 	slli	r8,r7,16
 8017760:	380ed43a 	srli	r7,r7,16
 8017764:	40c7883a 	add	r3,r8,r3
 8017768:	48ffff15 	stw	r3,-4(r9)
 801776c:	543ff016 	blt	r10,r16,8017730 <__alt_data_end+0xfc017730>
 8017770:	38000926 	beq	r7,zero,8017798 <__multadd+0x94>
 8017774:	88800217 	ldw	r2,8(r17)
 8017778:	80800f0e 	bge	r16,r2,80177b8 <__multadd+0xb4>
 801777c:	80800144 	addi	r2,r16,5
 8017780:	1085883a 	add	r2,r2,r2
 8017784:	1085883a 	add	r2,r2,r2
 8017788:	8885883a 	add	r2,r17,r2
 801778c:	11c00015 	stw	r7,0(r2)
 8017790:	84000044 	addi	r16,r16,1
 8017794:	8c000415 	stw	r16,16(r17)
 8017798:	8805883a 	mov	r2,r17
 801779c:	dfc00517 	ldw	ra,20(sp)
 80177a0:	dcc00417 	ldw	r19,16(sp)
 80177a4:	dc800317 	ldw	r18,12(sp)
 80177a8:	dc400217 	ldw	r17,8(sp)
 80177ac:	dc000117 	ldw	r16,4(sp)
 80177b0:	dec00604 	addi	sp,sp,24
 80177b4:	f800283a 	ret
 80177b8:	89400117 	ldw	r5,4(r17)
 80177bc:	9009883a 	mov	r4,r18
 80177c0:	d9c00015 	stw	r7,0(sp)
 80177c4:	29400044 	addi	r5,r5,1
 80177c8:	80176340 	call	8017634 <_Balloc>
 80177cc:	89800417 	ldw	r6,16(r17)
 80177d0:	89400304 	addi	r5,r17,12
 80177d4:	11000304 	addi	r4,r2,12
 80177d8:	31800084 	addi	r6,r6,2
 80177dc:	318d883a 	add	r6,r6,r6
 80177e0:	318d883a 	add	r6,r6,r6
 80177e4:	1027883a 	mov	r19,r2
 80177e8:	80173d80 	call	80173d8 <memcpy>
 80177ec:	89000117 	ldw	r4,4(r17)
 80177f0:	90c01317 	ldw	r3,76(r18)
 80177f4:	d9c00017 	ldw	r7,0(sp)
 80177f8:	2109883a 	add	r4,r4,r4
 80177fc:	2109883a 	add	r4,r4,r4
 8017800:	1907883a 	add	r3,r3,r4
 8017804:	18800017 	ldw	r2,0(r3)
 8017808:	88800015 	stw	r2,0(r17)
 801780c:	1c400015 	stw	r17,0(r3)
 8017810:	9823883a 	mov	r17,r19
 8017814:	003fd906 	br	801777c <__alt_data_end+0xfc01777c>

08017818 <__s2b>:
 8017818:	defff904 	addi	sp,sp,-28
 801781c:	dc400115 	stw	r17,4(sp)
 8017820:	dc000015 	stw	r16,0(sp)
 8017824:	2023883a 	mov	r17,r4
 8017828:	2821883a 	mov	r16,r5
 801782c:	39000204 	addi	r4,r7,8
 8017830:	01400244 	movi	r5,9
 8017834:	dcc00315 	stw	r19,12(sp)
 8017838:	dc800215 	stw	r18,8(sp)
 801783c:	dfc00615 	stw	ra,24(sp)
 8017840:	dd400515 	stw	r21,20(sp)
 8017844:	dd000415 	stw	r20,16(sp)
 8017848:	3825883a 	mov	r18,r7
 801784c:	3027883a 	mov	r19,r6
 8017850:	800a9080 	call	800a908 <__divsi3>
 8017854:	00c00044 	movi	r3,1
 8017858:	000b883a 	mov	r5,zero
 801785c:	1880030e 	bge	r3,r2,801786c <__s2b+0x54>
 8017860:	18c7883a 	add	r3,r3,r3
 8017864:	29400044 	addi	r5,r5,1
 8017868:	18bffd16 	blt	r3,r2,8017860 <__alt_data_end+0xfc017860>
 801786c:	8809883a 	mov	r4,r17
 8017870:	80176340 	call	8017634 <_Balloc>
 8017874:	d8c00717 	ldw	r3,28(sp)
 8017878:	10c00515 	stw	r3,20(r2)
 801787c:	00c00044 	movi	r3,1
 8017880:	10c00415 	stw	r3,16(r2)
 8017884:	00c00244 	movi	r3,9
 8017888:	1cc0210e 	bge	r3,r19,8017910 <__s2b+0xf8>
 801788c:	80eb883a 	add	r21,r16,r3
 8017890:	a829883a 	mov	r20,r21
 8017894:	84e1883a 	add	r16,r16,r19
 8017898:	a1c00007 	ldb	r7,0(r20)
 801789c:	8809883a 	mov	r4,r17
 80178a0:	a5000044 	addi	r20,r20,1
 80178a4:	100b883a 	mov	r5,r2
 80178a8:	01800284 	movi	r6,10
 80178ac:	39fff404 	addi	r7,r7,-48
 80178b0:	80177040 	call	8017704 <__multadd>
 80178b4:	a43ff81e 	bne	r20,r16,8017898 <__alt_data_end+0xfc017898>
 80178b8:	ace1883a 	add	r16,r21,r19
 80178bc:	843ffe04 	addi	r16,r16,-8
 80178c0:	9c800a0e 	bge	r19,r18,80178ec <__s2b+0xd4>
 80178c4:	94e5c83a 	sub	r18,r18,r19
 80178c8:	84a5883a 	add	r18,r16,r18
 80178cc:	81c00007 	ldb	r7,0(r16)
 80178d0:	8809883a 	mov	r4,r17
 80178d4:	84000044 	addi	r16,r16,1
 80178d8:	100b883a 	mov	r5,r2
 80178dc:	01800284 	movi	r6,10
 80178e0:	39fff404 	addi	r7,r7,-48
 80178e4:	80177040 	call	8017704 <__multadd>
 80178e8:	84bff81e 	bne	r16,r18,80178cc <__alt_data_end+0xfc0178cc>
 80178ec:	dfc00617 	ldw	ra,24(sp)
 80178f0:	dd400517 	ldw	r21,20(sp)
 80178f4:	dd000417 	ldw	r20,16(sp)
 80178f8:	dcc00317 	ldw	r19,12(sp)
 80178fc:	dc800217 	ldw	r18,8(sp)
 8017900:	dc400117 	ldw	r17,4(sp)
 8017904:	dc000017 	ldw	r16,0(sp)
 8017908:	dec00704 	addi	sp,sp,28
 801790c:	f800283a 	ret
 8017910:	84000284 	addi	r16,r16,10
 8017914:	1827883a 	mov	r19,r3
 8017918:	003fe906 	br	80178c0 <__alt_data_end+0xfc0178c0>

0801791c <__hi0bits>:
 801791c:	20bfffec 	andhi	r2,r4,65535
 8017920:	1000141e 	bne	r2,zero,8017974 <__hi0bits+0x58>
 8017924:	2008943a 	slli	r4,r4,16
 8017928:	00800404 	movi	r2,16
 801792c:	20ffc02c 	andhi	r3,r4,65280
 8017930:	1800021e 	bne	r3,zero,801793c <__hi0bits+0x20>
 8017934:	2008923a 	slli	r4,r4,8
 8017938:	10800204 	addi	r2,r2,8
 801793c:	20fc002c 	andhi	r3,r4,61440
 8017940:	1800021e 	bne	r3,zero,801794c <__hi0bits+0x30>
 8017944:	2008913a 	slli	r4,r4,4
 8017948:	10800104 	addi	r2,r2,4
 801794c:	20f0002c 	andhi	r3,r4,49152
 8017950:	1800031e 	bne	r3,zero,8017960 <__hi0bits+0x44>
 8017954:	2109883a 	add	r4,r4,r4
 8017958:	10800084 	addi	r2,r2,2
 801795c:	2109883a 	add	r4,r4,r4
 8017960:	20000316 	blt	r4,zero,8017970 <__hi0bits+0x54>
 8017964:	2110002c 	andhi	r4,r4,16384
 8017968:	2000041e 	bne	r4,zero,801797c <__hi0bits+0x60>
 801796c:	00800804 	movi	r2,32
 8017970:	f800283a 	ret
 8017974:	0005883a 	mov	r2,zero
 8017978:	003fec06 	br	801792c <__alt_data_end+0xfc01792c>
 801797c:	10800044 	addi	r2,r2,1
 8017980:	f800283a 	ret

08017984 <__lo0bits>:
 8017984:	20c00017 	ldw	r3,0(r4)
 8017988:	188001cc 	andi	r2,r3,7
 801798c:	10000826 	beq	r2,zero,80179b0 <__lo0bits+0x2c>
 8017990:	1880004c 	andi	r2,r3,1
 8017994:	1000211e 	bne	r2,zero,8017a1c <__lo0bits+0x98>
 8017998:	1880008c 	andi	r2,r3,2
 801799c:	1000211e 	bne	r2,zero,8017a24 <__lo0bits+0xa0>
 80179a0:	1806d0ba 	srli	r3,r3,2
 80179a4:	00800084 	movi	r2,2
 80179a8:	20c00015 	stw	r3,0(r4)
 80179ac:	f800283a 	ret
 80179b0:	18bfffcc 	andi	r2,r3,65535
 80179b4:	10001326 	beq	r2,zero,8017a04 <__lo0bits+0x80>
 80179b8:	0005883a 	mov	r2,zero
 80179bc:	19403fcc 	andi	r5,r3,255
 80179c0:	2800021e 	bne	r5,zero,80179cc <__lo0bits+0x48>
 80179c4:	1806d23a 	srli	r3,r3,8
 80179c8:	10800204 	addi	r2,r2,8
 80179cc:	194003cc 	andi	r5,r3,15
 80179d0:	2800021e 	bne	r5,zero,80179dc <__lo0bits+0x58>
 80179d4:	1806d13a 	srli	r3,r3,4
 80179d8:	10800104 	addi	r2,r2,4
 80179dc:	194000cc 	andi	r5,r3,3
 80179e0:	2800021e 	bne	r5,zero,80179ec <__lo0bits+0x68>
 80179e4:	1806d0ba 	srli	r3,r3,2
 80179e8:	10800084 	addi	r2,r2,2
 80179ec:	1940004c 	andi	r5,r3,1
 80179f0:	2800081e 	bne	r5,zero,8017a14 <__lo0bits+0x90>
 80179f4:	1806d07a 	srli	r3,r3,1
 80179f8:	1800051e 	bne	r3,zero,8017a10 <__lo0bits+0x8c>
 80179fc:	00800804 	movi	r2,32
 8017a00:	f800283a 	ret
 8017a04:	1806d43a 	srli	r3,r3,16
 8017a08:	00800404 	movi	r2,16
 8017a0c:	003feb06 	br	80179bc <__alt_data_end+0xfc0179bc>
 8017a10:	10800044 	addi	r2,r2,1
 8017a14:	20c00015 	stw	r3,0(r4)
 8017a18:	f800283a 	ret
 8017a1c:	0005883a 	mov	r2,zero
 8017a20:	f800283a 	ret
 8017a24:	1806d07a 	srli	r3,r3,1
 8017a28:	00800044 	movi	r2,1
 8017a2c:	20c00015 	stw	r3,0(r4)
 8017a30:	f800283a 	ret

08017a34 <__i2b>:
 8017a34:	defffd04 	addi	sp,sp,-12
 8017a38:	dc000015 	stw	r16,0(sp)
 8017a3c:	04000044 	movi	r16,1
 8017a40:	dc400115 	stw	r17,4(sp)
 8017a44:	2823883a 	mov	r17,r5
 8017a48:	800b883a 	mov	r5,r16
 8017a4c:	dfc00215 	stw	ra,8(sp)
 8017a50:	80176340 	call	8017634 <_Balloc>
 8017a54:	14400515 	stw	r17,20(r2)
 8017a58:	14000415 	stw	r16,16(r2)
 8017a5c:	dfc00217 	ldw	ra,8(sp)
 8017a60:	dc400117 	ldw	r17,4(sp)
 8017a64:	dc000017 	ldw	r16,0(sp)
 8017a68:	dec00304 	addi	sp,sp,12
 8017a6c:	f800283a 	ret

08017a70 <__multiply>:
 8017a70:	defffa04 	addi	sp,sp,-24
 8017a74:	dcc00315 	stw	r19,12(sp)
 8017a78:	dc800215 	stw	r18,8(sp)
 8017a7c:	2cc00417 	ldw	r19,16(r5)
 8017a80:	34800417 	ldw	r18,16(r6)
 8017a84:	dd000415 	stw	r20,16(sp)
 8017a88:	dc400115 	stw	r17,4(sp)
 8017a8c:	dfc00515 	stw	ra,20(sp)
 8017a90:	dc000015 	stw	r16,0(sp)
 8017a94:	2829883a 	mov	r20,r5
 8017a98:	3023883a 	mov	r17,r6
 8017a9c:	9c807016 	blt	r19,r18,8017c60 <__multiply+0x1f0>
 8017aa0:	9005883a 	mov	r2,r18
 8017aa4:	9825883a 	mov	r18,r19
 8017aa8:	1027883a 	mov	r19,r2
 8017aac:	a0800217 	ldw	r2,8(r20)
 8017ab0:	94e1883a 	add	r16,r18,r19
 8017ab4:	a1400117 	ldw	r5,4(r20)
 8017ab8:	1400010e 	bge	r2,r16,8017ac0 <__multiply+0x50>
 8017abc:	29400044 	addi	r5,r5,1
 8017ac0:	80176340 	call	8017634 <_Balloc>
 8017ac4:	8417883a 	add	r11,r16,r16
 8017ac8:	13000504 	addi	r12,r2,20
 8017acc:	5ad7883a 	add	r11,r11,r11
 8017ad0:	62d7883a 	add	r11,r12,r11
 8017ad4:	6007883a 	mov	r3,r12
 8017ad8:	62c0032e 	bgeu	r12,r11,8017ae8 <__multiply+0x78>
 8017adc:	18000015 	stw	zero,0(r3)
 8017ae0:	18c00104 	addi	r3,r3,4
 8017ae4:	1afffd36 	bltu	r3,r11,8017adc <__alt_data_end+0xfc017adc>
 8017ae8:	9ce7883a 	add	r19,r19,r19
 8017aec:	94a5883a 	add	r18,r18,r18
 8017af0:	89800504 	addi	r6,r17,20
 8017af4:	9ce7883a 	add	r19,r19,r19
 8017af8:	a3800504 	addi	r14,r20,20
 8017afc:	94a5883a 	add	r18,r18,r18
 8017b00:	34db883a 	add	r13,r6,r19
 8017b04:	7495883a 	add	r10,r14,r18
 8017b08:	3340422e 	bgeu	r6,r13,8017c14 <__multiply+0x1a4>
 8017b0c:	34400017 	ldw	r17,0(r6)
 8017b10:	8cbfffcc 	andi	r18,r17,65535
 8017b14:	90001b26 	beq	r18,zero,8017b84 <__multiply+0x114>
 8017b18:	6013883a 	mov	r9,r12
 8017b1c:	7023883a 	mov	r17,r14
 8017b20:	0011883a 	mov	r8,zero
 8017b24:	88c00017 	ldw	r3,0(r17)
 8017b28:	4bc00017 	ldw	r15,0(r9)
 8017b2c:	8c400104 	addi	r17,r17,4
 8017b30:	19ffffcc 	andi	r7,r3,65535
 8017b34:	3c8f383a 	mul	r7,r7,r18
 8017b38:	1808d43a 	srli	r4,r3,16
 8017b3c:	797fffcc 	andi	r5,r15,65535
 8017b40:	29cb883a 	add	r5,r5,r7
 8017b44:	2a0b883a 	add	r5,r5,r8
 8017b48:	2489383a 	mul	r4,r4,r18
 8017b4c:	7806d43a 	srli	r3,r15,16
 8017b50:	2810d43a 	srli	r8,r5,16
 8017b54:	297fffcc 	andi	r5,r5,65535
 8017b58:	1907883a 	add	r3,r3,r4
 8017b5c:	1a07883a 	add	r3,r3,r8
 8017b60:	1808943a 	slli	r4,r3,16
 8017b64:	480f883a 	mov	r7,r9
 8017b68:	1810d43a 	srli	r8,r3,16
 8017b6c:	214ab03a 	or	r5,r4,r5
 8017b70:	49400015 	stw	r5,0(r9)
 8017b74:	4a400104 	addi	r9,r9,4
 8017b78:	8abfea36 	bltu	r17,r10,8017b24 <__alt_data_end+0xfc017b24>
 8017b7c:	3a000115 	stw	r8,4(r7)
 8017b80:	34400017 	ldw	r17,0(r6)
 8017b84:	8822d43a 	srli	r17,r17,16
 8017b88:	88001f26 	beq	r17,zero,8017c08 <__multiply+0x198>
 8017b8c:	60c00017 	ldw	r3,0(r12)
 8017b90:	7013883a 	mov	r9,r14
 8017b94:	601f883a 	mov	r15,r12
 8017b98:	1811883a 	mov	r8,r3
 8017b9c:	6027883a 	mov	r19,r12
 8017ba0:	000f883a 	mov	r7,zero
 8017ba4:	00000106 	br	8017bac <__multiply+0x13c>
 8017ba8:	9027883a 	mov	r19,r18
 8017bac:	4940000b 	ldhu	r5,0(r9)
 8017bb0:	4010d43a 	srli	r8,r8,16
 8017bb4:	193fffcc 	andi	r4,r3,65535
 8017bb8:	2c4b383a 	mul	r5,r5,r17
 8017bbc:	7bc00104 	addi	r15,r15,4
 8017bc0:	4a400104 	addi	r9,r9,4
 8017bc4:	2a0b883a 	add	r5,r5,r8
 8017bc8:	29cb883a 	add	r5,r5,r7
 8017bcc:	2806943a 	slli	r3,r5,16
 8017bd0:	9c800104 	addi	r18,r19,4
 8017bd4:	280ad43a 	srli	r5,r5,16
 8017bd8:	1908b03a 	or	r4,r3,r4
 8017bdc:	793fff15 	stw	r4,-4(r15)
 8017be0:	48ffff17 	ldw	r3,-4(r9)
 8017be4:	92000017 	ldw	r8,0(r18)
 8017be8:	1806d43a 	srli	r3,r3,16
 8017bec:	413fffcc 	andi	r4,r8,65535
 8017bf0:	1c47383a 	mul	r3,r3,r17
 8017bf4:	1907883a 	add	r3,r3,r4
 8017bf8:	1947883a 	add	r3,r3,r5
 8017bfc:	180ed43a 	srli	r7,r3,16
 8017c00:	4abfe936 	bltu	r9,r10,8017ba8 <__alt_data_end+0xfc017ba8>
 8017c04:	98c00115 	stw	r3,4(r19)
 8017c08:	31800104 	addi	r6,r6,4
 8017c0c:	63000104 	addi	r12,r12,4
 8017c10:	337fbe36 	bltu	r6,r13,8017b0c <__alt_data_end+0xfc017b0c>
 8017c14:	0400090e 	bge	zero,r16,8017c3c <__multiply+0x1cc>
 8017c18:	58ffff17 	ldw	r3,-4(r11)
 8017c1c:	5affff04 	addi	r11,r11,-4
 8017c20:	18000326 	beq	r3,zero,8017c30 <__multiply+0x1c0>
 8017c24:	00000506 	br	8017c3c <__multiply+0x1cc>
 8017c28:	58c00017 	ldw	r3,0(r11)
 8017c2c:	1800031e 	bne	r3,zero,8017c3c <__multiply+0x1cc>
 8017c30:	843fffc4 	addi	r16,r16,-1
 8017c34:	5affff04 	addi	r11,r11,-4
 8017c38:	803ffb1e 	bne	r16,zero,8017c28 <__alt_data_end+0xfc017c28>
 8017c3c:	14000415 	stw	r16,16(r2)
 8017c40:	dfc00517 	ldw	ra,20(sp)
 8017c44:	dd000417 	ldw	r20,16(sp)
 8017c48:	dcc00317 	ldw	r19,12(sp)
 8017c4c:	dc800217 	ldw	r18,8(sp)
 8017c50:	dc400117 	ldw	r17,4(sp)
 8017c54:	dc000017 	ldw	r16,0(sp)
 8017c58:	dec00604 	addi	sp,sp,24
 8017c5c:	f800283a 	ret
 8017c60:	3029883a 	mov	r20,r6
 8017c64:	2823883a 	mov	r17,r5
 8017c68:	003f9006 	br	8017aac <__alt_data_end+0xfc017aac>

08017c6c <__pow5mult>:
 8017c6c:	defffa04 	addi	sp,sp,-24
 8017c70:	dcc00315 	stw	r19,12(sp)
 8017c74:	dc800215 	stw	r18,8(sp)
 8017c78:	dc000015 	stw	r16,0(sp)
 8017c7c:	dfc00515 	stw	ra,20(sp)
 8017c80:	dd000415 	stw	r20,16(sp)
 8017c84:	dc400115 	stw	r17,4(sp)
 8017c88:	308000cc 	andi	r2,r6,3
 8017c8c:	3021883a 	mov	r16,r6
 8017c90:	2027883a 	mov	r19,r4
 8017c94:	2825883a 	mov	r18,r5
 8017c98:	10002e1e 	bne	r2,zero,8017d54 <__pow5mult+0xe8>
 8017c9c:	8021d0ba 	srai	r16,r16,2
 8017ca0:	80001a26 	beq	r16,zero,8017d0c <__pow5mult+0xa0>
 8017ca4:	9c401217 	ldw	r17,72(r19)
 8017ca8:	8800061e 	bne	r17,zero,8017cc4 <__pow5mult+0x58>
 8017cac:	00003406 	br	8017d80 <__pow5mult+0x114>
 8017cb0:	8021d07a 	srai	r16,r16,1
 8017cb4:	80001526 	beq	r16,zero,8017d0c <__pow5mult+0xa0>
 8017cb8:	88800017 	ldw	r2,0(r17)
 8017cbc:	10001c26 	beq	r2,zero,8017d30 <__pow5mult+0xc4>
 8017cc0:	1023883a 	mov	r17,r2
 8017cc4:	80c0004c 	andi	r3,r16,1
 8017cc8:	183ff926 	beq	r3,zero,8017cb0 <__alt_data_end+0xfc017cb0>
 8017ccc:	900b883a 	mov	r5,r18
 8017cd0:	880d883a 	mov	r6,r17
 8017cd4:	9809883a 	mov	r4,r19
 8017cd8:	8017a700 	call	8017a70 <__multiply>
 8017cdc:	90001b26 	beq	r18,zero,8017d4c <__pow5mult+0xe0>
 8017ce0:	91c00117 	ldw	r7,4(r18)
 8017ce4:	98c01317 	ldw	r3,76(r19)
 8017ce8:	8021d07a 	srai	r16,r16,1
 8017cec:	39cf883a 	add	r7,r7,r7
 8017cf0:	39cf883a 	add	r7,r7,r7
 8017cf4:	19c7883a 	add	r3,r3,r7
 8017cf8:	19000017 	ldw	r4,0(r3)
 8017cfc:	91000015 	stw	r4,0(r18)
 8017d00:	1c800015 	stw	r18,0(r3)
 8017d04:	1025883a 	mov	r18,r2
 8017d08:	803feb1e 	bne	r16,zero,8017cb8 <__alt_data_end+0xfc017cb8>
 8017d0c:	9005883a 	mov	r2,r18
 8017d10:	dfc00517 	ldw	ra,20(sp)
 8017d14:	dd000417 	ldw	r20,16(sp)
 8017d18:	dcc00317 	ldw	r19,12(sp)
 8017d1c:	dc800217 	ldw	r18,8(sp)
 8017d20:	dc400117 	ldw	r17,4(sp)
 8017d24:	dc000017 	ldw	r16,0(sp)
 8017d28:	dec00604 	addi	sp,sp,24
 8017d2c:	f800283a 	ret
 8017d30:	9809883a 	mov	r4,r19
 8017d34:	880b883a 	mov	r5,r17
 8017d38:	880d883a 	mov	r6,r17
 8017d3c:	8017a700 	call	8017a70 <__multiply>
 8017d40:	88800015 	stw	r2,0(r17)
 8017d44:	10000015 	stw	zero,0(r2)
 8017d48:	003fdd06 	br	8017cc0 <__alt_data_end+0xfc017cc0>
 8017d4c:	1025883a 	mov	r18,r2
 8017d50:	003fd706 	br	8017cb0 <__alt_data_end+0xfc017cb0>
 8017d54:	10bfffc4 	addi	r2,r2,-1
 8017d58:	1085883a 	add	r2,r2,r2
 8017d5c:	00c200f4 	movhi	r3,2051
 8017d60:	18ebda04 	addi	r3,r3,-20632
 8017d64:	1085883a 	add	r2,r2,r2
 8017d68:	1885883a 	add	r2,r3,r2
 8017d6c:	11800017 	ldw	r6,0(r2)
 8017d70:	000f883a 	mov	r7,zero
 8017d74:	80177040 	call	8017704 <__multadd>
 8017d78:	1025883a 	mov	r18,r2
 8017d7c:	003fc706 	br	8017c9c <__alt_data_end+0xfc017c9c>
 8017d80:	05000044 	movi	r20,1
 8017d84:	9809883a 	mov	r4,r19
 8017d88:	a00b883a 	mov	r5,r20
 8017d8c:	80176340 	call	8017634 <_Balloc>
 8017d90:	1023883a 	mov	r17,r2
 8017d94:	00809c44 	movi	r2,625
 8017d98:	88800515 	stw	r2,20(r17)
 8017d9c:	8d000415 	stw	r20,16(r17)
 8017da0:	9c401215 	stw	r17,72(r19)
 8017da4:	88000015 	stw	zero,0(r17)
 8017da8:	003fc606 	br	8017cc4 <__alt_data_end+0xfc017cc4>

08017dac <__lshift>:
 8017dac:	defff904 	addi	sp,sp,-28
 8017db0:	dd000415 	stw	r20,16(sp)
 8017db4:	dcc00315 	stw	r19,12(sp)
 8017db8:	3029d17a 	srai	r20,r6,5
 8017dbc:	2cc00417 	ldw	r19,16(r5)
 8017dc0:	28800217 	ldw	r2,8(r5)
 8017dc4:	dd400515 	stw	r21,20(sp)
 8017dc8:	a4e7883a 	add	r19,r20,r19
 8017dcc:	dc800215 	stw	r18,8(sp)
 8017dd0:	dc400115 	stw	r17,4(sp)
 8017dd4:	dc000015 	stw	r16,0(sp)
 8017dd8:	dfc00615 	stw	ra,24(sp)
 8017ddc:	9c000044 	addi	r16,r19,1
 8017de0:	2823883a 	mov	r17,r5
 8017de4:	302b883a 	mov	r21,r6
 8017de8:	2025883a 	mov	r18,r4
 8017dec:	29400117 	ldw	r5,4(r5)
 8017df0:	1400030e 	bge	r2,r16,8017e00 <__lshift+0x54>
 8017df4:	1085883a 	add	r2,r2,r2
 8017df8:	29400044 	addi	r5,r5,1
 8017dfc:	143ffd16 	blt	r2,r16,8017df4 <__alt_data_end+0xfc017df4>
 8017e00:	9009883a 	mov	r4,r18
 8017e04:	80176340 	call	8017634 <_Balloc>
 8017e08:	11c00504 	addi	r7,r2,20
 8017e0c:	0500090e 	bge	zero,r20,8017e34 <__lshift+0x88>
 8017e10:	3811883a 	mov	r8,r7
 8017e14:	0007883a 	mov	r3,zero
 8017e18:	40000015 	stw	zero,0(r8)
 8017e1c:	18c00044 	addi	r3,r3,1
 8017e20:	42000104 	addi	r8,r8,4
 8017e24:	1d3ffc1e 	bne	r3,r20,8017e18 <__alt_data_end+0xfc017e18>
 8017e28:	18c7883a 	add	r3,r3,r3
 8017e2c:	18c7883a 	add	r3,r3,r3
 8017e30:	38cf883a 	add	r7,r7,r3
 8017e34:	89000417 	ldw	r4,16(r17)
 8017e38:	88c00504 	addi	r3,r17,20
 8017e3c:	a98007cc 	andi	r6,r21,31
 8017e40:	2109883a 	add	r4,r4,r4
 8017e44:	2109883a 	add	r4,r4,r4
 8017e48:	1909883a 	add	r4,r3,r4
 8017e4c:	30002326 	beq	r6,zero,8017edc <__lshift+0x130>
 8017e50:	01400804 	movi	r5,32
 8017e54:	298bc83a 	sub	r5,r5,r6
 8017e58:	0013883a 	mov	r9,zero
 8017e5c:	1a000017 	ldw	r8,0(r3)
 8017e60:	3815883a 	mov	r10,r7
 8017e64:	39c00104 	addi	r7,r7,4
 8017e68:	4190983a 	sll	r8,r8,r6
 8017e6c:	18c00104 	addi	r3,r3,4
 8017e70:	4a10b03a 	or	r8,r9,r8
 8017e74:	3a3fff15 	stw	r8,-4(r7)
 8017e78:	1a3fff17 	ldw	r8,-4(r3)
 8017e7c:	4152d83a 	srl	r9,r8,r5
 8017e80:	193ff636 	bltu	r3,r4,8017e5c <__alt_data_end+0xfc017e5c>
 8017e84:	52400115 	stw	r9,4(r10)
 8017e88:	48000126 	beq	r9,zero,8017e90 <__lshift+0xe4>
 8017e8c:	9c000084 	addi	r16,r19,2
 8017e90:	89000117 	ldw	r4,4(r17)
 8017e94:	90c01317 	ldw	r3,76(r18)
 8017e98:	843fffc4 	addi	r16,r16,-1
 8017e9c:	2109883a 	add	r4,r4,r4
 8017ea0:	2109883a 	add	r4,r4,r4
 8017ea4:	1907883a 	add	r3,r3,r4
 8017ea8:	19000017 	ldw	r4,0(r3)
 8017eac:	14000415 	stw	r16,16(r2)
 8017eb0:	89000015 	stw	r4,0(r17)
 8017eb4:	1c400015 	stw	r17,0(r3)
 8017eb8:	dfc00617 	ldw	ra,24(sp)
 8017ebc:	dd400517 	ldw	r21,20(sp)
 8017ec0:	dd000417 	ldw	r20,16(sp)
 8017ec4:	dcc00317 	ldw	r19,12(sp)
 8017ec8:	dc800217 	ldw	r18,8(sp)
 8017ecc:	dc400117 	ldw	r17,4(sp)
 8017ed0:	dc000017 	ldw	r16,0(sp)
 8017ed4:	dec00704 	addi	sp,sp,28
 8017ed8:	f800283a 	ret
 8017edc:	19400017 	ldw	r5,0(r3)
 8017ee0:	39c00104 	addi	r7,r7,4
 8017ee4:	18c00104 	addi	r3,r3,4
 8017ee8:	397fff15 	stw	r5,-4(r7)
 8017eec:	193ffb36 	bltu	r3,r4,8017edc <__alt_data_end+0xfc017edc>
 8017ef0:	003fe706 	br	8017e90 <__alt_data_end+0xfc017e90>

08017ef4 <__mcmp>:
 8017ef4:	20800417 	ldw	r2,16(r4)
 8017ef8:	28c00417 	ldw	r3,16(r5)
 8017efc:	10c5c83a 	sub	r2,r2,r3
 8017f00:	1000111e 	bne	r2,zero,8017f48 <__mcmp+0x54>
 8017f04:	18c7883a 	add	r3,r3,r3
 8017f08:	18c7883a 	add	r3,r3,r3
 8017f0c:	21000504 	addi	r4,r4,20
 8017f10:	29400504 	addi	r5,r5,20
 8017f14:	20c5883a 	add	r2,r4,r3
 8017f18:	28cb883a 	add	r5,r5,r3
 8017f1c:	00000106 	br	8017f24 <__mcmp+0x30>
 8017f20:	20800a2e 	bgeu	r4,r2,8017f4c <__mcmp+0x58>
 8017f24:	10bfff04 	addi	r2,r2,-4
 8017f28:	297fff04 	addi	r5,r5,-4
 8017f2c:	11800017 	ldw	r6,0(r2)
 8017f30:	28c00017 	ldw	r3,0(r5)
 8017f34:	30fffa26 	beq	r6,r3,8017f20 <__alt_data_end+0xfc017f20>
 8017f38:	30c00236 	bltu	r6,r3,8017f44 <__mcmp+0x50>
 8017f3c:	00800044 	movi	r2,1
 8017f40:	f800283a 	ret
 8017f44:	00bfffc4 	movi	r2,-1
 8017f48:	f800283a 	ret
 8017f4c:	0005883a 	mov	r2,zero
 8017f50:	f800283a 	ret

08017f54 <__mdiff>:
 8017f54:	defffb04 	addi	sp,sp,-20
 8017f58:	dc000015 	stw	r16,0(sp)
 8017f5c:	2821883a 	mov	r16,r5
 8017f60:	dcc00315 	stw	r19,12(sp)
 8017f64:	300b883a 	mov	r5,r6
 8017f68:	2027883a 	mov	r19,r4
 8017f6c:	8009883a 	mov	r4,r16
 8017f70:	dc800215 	stw	r18,8(sp)
 8017f74:	dfc00415 	stw	ra,16(sp)
 8017f78:	dc400115 	stw	r17,4(sp)
 8017f7c:	3025883a 	mov	r18,r6
 8017f80:	8017ef40 	call	8017ef4 <__mcmp>
 8017f84:	10005226 	beq	r2,zero,80180d0 <__mdiff+0x17c>
 8017f88:	10004c16 	blt	r2,zero,80180bc <__mdiff+0x168>
 8017f8c:	0023883a 	mov	r17,zero
 8017f90:	81400117 	ldw	r5,4(r16)
 8017f94:	9809883a 	mov	r4,r19
 8017f98:	80176340 	call	8017634 <_Balloc>
 8017f9c:	83400417 	ldw	r13,16(r16)
 8017fa0:	93800417 	ldw	r14,16(r18)
 8017fa4:	81000504 	addi	r4,r16,20
 8017fa8:	6b59883a 	add	r12,r13,r13
 8017fac:	739d883a 	add	r14,r14,r14
 8017fb0:	6319883a 	add	r12,r12,r12
 8017fb4:	91800504 	addi	r6,r18,20
 8017fb8:	739d883a 	add	r14,r14,r14
 8017fbc:	14400315 	stw	r17,12(r2)
 8017fc0:	2319883a 	add	r12,r4,r12
 8017fc4:	339d883a 	add	r14,r6,r14
 8017fc8:	12400504 	addi	r9,r2,20
 8017fcc:	0007883a 	mov	r3,zero
 8017fd0:	22000017 	ldw	r8,0(r4)
 8017fd4:	32800017 	ldw	r10,0(r6)
 8017fd8:	4ac00104 	addi	r11,r9,4
 8017fdc:	41ffffcc 	andi	r7,r8,65535
 8017fe0:	38c7883a 	add	r3,r7,r3
 8017fe4:	51ffffcc 	andi	r7,r10,65535
 8017fe8:	19cfc83a 	sub	r7,r3,r7
 8017fec:	4010d43a 	srli	r8,r8,16
 8017ff0:	5014d43a 	srli	r10,r10,16
 8017ff4:	3807d43a 	srai	r3,r7,16
 8017ff8:	39ffffcc 	andi	r7,r7,65535
 8017ffc:	4291c83a 	sub	r8,r8,r10
 8018000:	40c7883a 	add	r3,r8,r3
 8018004:	1810943a 	slli	r8,r3,16
 8018008:	31800104 	addi	r6,r6,4
 801800c:	21000104 	addi	r4,r4,4
 8018010:	41ceb03a 	or	r7,r8,r7
 8018014:	49c00015 	stw	r7,0(r9)
 8018018:	1807d43a 	srai	r3,r3,16
 801801c:	580b883a 	mov	r5,r11
 8018020:	5813883a 	mov	r9,r11
 8018024:	33bfea36 	bltu	r6,r14,8017fd0 <__alt_data_end+0xfc017fd0>
 8018028:	2011883a 	mov	r8,r4
 801802c:	2300152e 	bgeu	r4,r12,8018084 <__mdiff+0x130>
 8018030:	21400017 	ldw	r5,0(r4)
 8018034:	4a400104 	addi	r9,r9,4
 8018038:	21000104 	addi	r4,r4,4
 801803c:	29ffffcc 	andi	r7,r5,65535
 8018040:	38c7883a 	add	r3,r7,r3
 8018044:	280ad43a 	srli	r5,r5,16
 8018048:	180dd43a 	srai	r6,r3,16
 801804c:	19ffffcc 	andi	r7,r3,65535
 8018050:	3147883a 	add	r3,r6,r5
 8018054:	180a943a 	slli	r5,r3,16
 8018058:	1807d43a 	srai	r3,r3,16
 801805c:	29ceb03a 	or	r7,r5,r7
 8018060:	49ffff15 	stw	r7,-4(r9)
 8018064:	233ff236 	bltu	r4,r12,8018030 <__alt_data_end+0xfc018030>
 8018068:	0206303a 	nor	r3,zero,r8
 801806c:	1b07883a 	add	r3,r3,r12
 8018070:	1806d0ba 	srli	r3,r3,2
 8018074:	18c00044 	addi	r3,r3,1
 8018078:	18c7883a 	add	r3,r3,r3
 801807c:	18c7883a 	add	r3,r3,r3
 8018080:	58cb883a 	add	r5,r11,r3
 8018084:	28ffff04 	addi	r3,r5,-4
 8018088:	3800041e 	bne	r7,zero,801809c <__mdiff+0x148>
 801808c:	18ffff04 	addi	r3,r3,-4
 8018090:	19000017 	ldw	r4,0(r3)
 8018094:	6b7fffc4 	addi	r13,r13,-1
 8018098:	203ffc26 	beq	r4,zero,801808c <__alt_data_end+0xfc01808c>
 801809c:	13400415 	stw	r13,16(r2)
 80180a0:	dfc00417 	ldw	ra,16(sp)
 80180a4:	dcc00317 	ldw	r19,12(sp)
 80180a8:	dc800217 	ldw	r18,8(sp)
 80180ac:	dc400117 	ldw	r17,4(sp)
 80180b0:	dc000017 	ldw	r16,0(sp)
 80180b4:	dec00504 	addi	sp,sp,20
 80180b8:	f800283a 	ret
 80180bc:	8005883a 	mov	r2,r16
 80180c0:	04400044 	movi	r17,1
 80180c4:	9021883a 	mov	r16,r18
 80180c8:	1025883a 	mov	r18,r2
 80180cc:	003fb006 	br	8017f90 <__alt_data_end+0xfc017f90>
 80180d0:	9809883a 	mov	r4,r19
 80180d4:	000b883a 	mov	r5,zero
 80180d8:	80176340 	call	8017634 <_Balloc>
 80180dc:	00c00044 	movi	r3,1
 80180e0:	10c00415 	stw	r3,16(r2)
 80180e4:	10000515 	stw	zero,20(r2)
 80180e8:	003fed06 	br	80180a0 <__alt_data_end+0xfc0180a0>

080180ec <__ulp>:
 80180ec:	295ffc2c 	andhi	r5,r5,32752
 80180f0:	00bf3034 	movhi	r2,64704
 80180f4:	2887883a 	add	r3,r5,r2
 80180f8:	00c0020e 	bge	zero,r3,8018104 <__ulp+0x18>
 80180fc:	0005883a 	mov	r2,zero
 8018100:	f800283a 	ret
 8018104:	00c7c83a 	sub	r3,zero,r3
 8018108:	180bd53a 	srai	r5,r3,20
 801810c:	008004c4 	movi	r2,19
 8018110:	11400a0e 	bge	r2,r5,801813c <__ulp+0x50>
 8018114:	00800c84 	movi	r2,50
 8018118:	0007883a 	mov	r3,zero
 801811c:	11400516 	blt	r2,r5,8018134 <__ulp+0x48>
 8018120:	00800cc4 	movi	r2,51
 8018124:	114bc83a 	sub	r5,r2,r5
 8018128:	00800044 	movi	r2,1
 801812c:	1144983a 	sll	r2,r2,r5
 8018130:	f800283a 	ret
 8018134:	00800044 	movi	r2,1
 8018138:	f800283a 	ret
 801813c:	00800234 	movhi	r2,8
 8018140:	1147d83a 	sra	r3,r2,r5
 8018144:	0005883a 	mov	r2,zero
 8018148:	f800283a 	ret

0801814c <__b2d>:
 801814c:	defffa04 	addi	sp,sp,-24
 8018150:	dc000015 	stw	r16,0(sp)
 8018154:	24000417 	ldw	r16,16(r4)
 8018158:	dc400115 	stw	r17,4(sp)
 801815c:	24400504 	addi	r17,r4,20
 8018160:	8421883a 	add	r16,r16,r16
 8018164:	8421883a 	add	r16,r16,r16
 8018168:	8c21883a 	add	r16,r17,r16
 801816c:	dc800215 	stw	r18,8(sp)
 8018170:	84bfff17 	ldw	r18,-4(r16)
 8018174:	dd000415 	stw	r20,16(sp)
 8018178:	dcc00315 	stw	r19,12(sp)
 801817c:	9009883a 	mov	r4,r18
 8018180:	2829883a 	mov	r20,r5
 8018184:	dfc00515 	stw	ra,20(sp)
 8018188:	801791c0 	call	801791c <__hi0bits>
 801818c:	00c00804 	movi	r3,32
 8018190:	1887c83a 	sub	r3,r3,r2
 8018194:	a0c00015 	stw	r3,0(r20)
 8018198:	00c00284 	movi	r3,10
 801819c:	84ffff04 	addi	r19,r16,-4
 80181a0:	18801216 	blt	r3,r2,80181ec <__b2d+0xa0>
 80181a4:	014002c4 	movi	r5,11
 80181a8:	2889c83a 	sub	r4,r5,r2
 80181ac:	9106d83a 	srl	r3,r18,r4
 80181b0:	18cffc34 	orhi	r3,r3,16368
 80181b4:	8cc0282e 	bgeu	r17,r19,8018258 <__b2d+0x10c>
 80181b8:	817ffe17 	ldw	r5,-8(r16)
 80181bc:	290ad83a 	srl	r5,r5,r4
 80181c0:	10800544 	addi	r2,r2,21
 80181c4:	9084983a 	sll	r2,r18,r2
 80181c8:	2884b03a 	or	r2,r5,r2
 80181cc:	dfc00517 	ldw	ra,20(sp)
 80181d0:	dd000417 	ldw	r20,16(sp)
 80181d4:	dcc00317 	ldw	r19,12(sp)
 80181d8:	dc800217 	ldw	r18,8(sp)
 80181dc:	dc400117 	ldw	r17,4(sp)
 80181e0:	dc000017 	ldw	r16,0(sp)
 80181e4:	dec00604 	addi	sp,sp,24
 80181e8:	f800283a 	ret
 80181ec:	113ffd44 	addi	r4,r2,-11
 80181f0:	8cc00f2e 	bgeu	r17,r19,8018230 <__b2d+0xe4>
 80181f4:	81bffe04 	addi	r6,r16,-8
 80181f8:	817ffe17 	ldw	r5,-8(r16)
 80181fc:	20001326 	beq	r4,zero,801824c <__b2d+0x100>
 8018200:	00c00ac4 	movi	r3,43
 8018204:	1885c83a 	sub	r2,r3,r2
 8018208:	2886d83a 	srl	r3,r5,r2
 801820c:	9124983a 	sll	r18,r18,r4
 8018210:	90e4b03a 	or	r18,r18,r3
 8018214:	90cffc34 	orhi	r3,r18,16368
 8018218:	8980112e 	bgeu	r17,r6,8018260 <__b2d+0x114>
 801821c:	81bffd17 	ldw	r6,-12(r16)
 8018220:	308cd83a 	srl	r6,r6,r2
 8018224:	2904983a 	sll	r2,r5,r4
 8018228:	1184b03a 	or	r2,r2,r6
 801822c:	003fe706 	br	80181cc <__alt_data_end+0xfc0181cc>
 8018230:	20000526 	beq	r4,zero,8018248 <__b2d+0xfc>
 8018234:	9124983a 	sll	r18,r18,r4
 8018238:	000d883a 	mov	r6,zero
 801823c:	000b883a 	mov	r5,zero
 8018240:	90cffc34 	orhi	r3,r18,16368
 8018244:	003ff706 	br	8018224 <__alt_data_end+0xfc018224>
 8018248:	000b883a 	mov	r5,zero
 801824c:	90cffc34 	orhi	r3,r18,16368
 8018250:	2805883a 	mov	r2,r5
 8018254:	003fdd06 	br	80181cc <__alt_data_end+0xfc0181cc>
 8018258:	000b883a 	mov	r5,zero
 801825c:	003fd806 	br	80181c0 <__alt_data_end+0xfc0181c0>
 8018260:	000d883a 	mov	r6,zero
 8018264:	003fef06 	br	8018224 <__alt_data_end+0xfc018224>

08018268 <__d2b>:
 8018268:	defff704 	addi	sp,sp,-36
 801826c:	dc000215 	stw	r16,8(sp)
 8018270:	3021883a 	mov	r16,r6
 8018274:	dc400315 	stw	r17,12(sp)
 8018278:	8022907a 	slli	r17,r16,1
 801827c:	dd400715 	stw	r21,28(sp)
 8018280:	282b883a 	mov	r21,r5
 8018284:	01400044 	movi	r5,1
 8018288:	dd000615 	stw	r20,24(sp)
 801828c:	dcc00515 	stw	r19,20(sp)
 8018290:	dc800415 	stw	r18,16(sp)
 8018294:	dfc00815 	stw	ra,32(sp)
 8018298:	3829883a 	mov	r20,r7
 801829c:	dc800917 	ldw	r18,36(sp)
 80182a0:	8822d57a 	srli	r17,r17,21
 80182a4:	80176340 	call	8017634 <_Balloc>
 80182a8:	1027883a 	mov	r19,r2
 80182ac:	00800434 	movhi	r2,16
 80182b0:	10bfffc4 	addi	r2,r2,-1
 80182b4:	808c703a 	and	r6,r16,r2
 80182b8:	88000126 	beq	r17,zero,80182c0 <__d2b+0x58>
 80182bc:	31800434 	orhi	r6,r6,16
 80182c0:	d9800015 	stw	r6,0(sp)
 80182c4:	a8001f26 	beq	r21,zero,8018344 <__d2b+0xdc>
 80182c8:	d9000104 	addi	r4,sp,4
 80182cc:	dd400115 	stw	r21,4(sp)
 80182d0:	80179840 	call	8017984 <__lo0bits>
 80182d4:	d8c00017 	ldw	r3,0(sp)
 80182d8:	1000291e 	bne	r2,zero,8018380 <__d2b+0x118>
 80182dc:	d9000117 	ldw	r4,4(sp)
 80182e0:	99000515 	stw	r4,20(r19)
 80182e4:	1820c03a 	cmpne	r16,r3,zero
 80182e8:	84000044 	addi	r16,r16,1
 80182ec:	98c00615 	stw	r3,24(r19)
 80182f0:	9c000415 	stw	r16,16(r19)
 80182f4:	88001b1e 	bne	r17,zero,8018364 <__d2b+0xfc>
 80182f8:	800690ba 	slli	r3,r16,2
 80182fc:	10bef384 	addi	r2,r2,-1074
 8018300:	a0800015 	stw	r2,0(r20)
 8018304:	98c5883a 	add	r2,r19,r3
 8018308:	11000417 	ldw	r4,16(r2)
 801830c:	8020917a 	slli	r16,r16,5
 8018310:	801791c0 	call	801791c <__hi0bits>
 8018314:	8085c83a 	sub	r2,r16,r2
 8018318:	90800015 	stw	r2,0(r18)
 801831c:	9805883a 	mov	r2,r19
 8018320:	dfc00817 	ldw	ra,32(sp)
 8018324:	dd400717 	ldw	r21,28(sp)
 8018328:	dd000617 	ldw	r20,24(sp)
 801832c:	dcc00517 	ldw	r19,20(sp)
 8018330:	dc800417 	ldw	r18,16(sp)
 8018334:	dc400317 	ldw	r17,12(sp)
 8018338:	dc000217 	ldw	r16,8(sp)
 801833c:	dec00904 	addi	sp,sp,36
 8018340:	f800283a 	ret
 8018344:	d809883a 	mov	r4,sp
 8018348:	80179840 	call	8017984 <__lo0bits>
 801834c:	d8c00017 	ldw	r3,0(sp)
 8018350:	04000044 	movi	r16,1
 8018354:	9c000415 	stw	r16,16(r19)
 8018358:	98c00515 	stw	r3,20(r19)
 801835c:	10800804 	addi	r2,r2,32
 8018360:	883fe526 	beq	r17,zero,80182f8 <__alt_data_end+0xfc0182f8>
 8018364:	8c7ef344 	addi	r17,r17,-1075
 8018368:	88a3883a 	add	r17,r17,r2
 801836c:	00c00d44 	movi	r3,53
 8018370:	a4400015 	stw	r17,0(r20)
 8018374:	1885c83a 	sub	r2,r3,r2
 8018378:	90800015 	stw	r2,0(r18)
 801837c:	003fe706 	br	801831c <__alt_data_end+0xfc01831c>
 8018380:	01000804 	movi	r4,32
 8018384:	2089c83a 	sub	r4,r4,r2
 8018388:	1908983a 	sll	r4,r3,r4
 801838c:	d9400117 	ldw	r5,4(sp)
 8018390:	1886d83a 	srl	r3,r3,r2
 8018394:	2148b03a 	or	r4,r4,r5
 8018398:	99000515 	stw	r4,20(r19)
 801839c:	d8c00015 	stw	r3,0(sp)
 80183a0:	003fd006 	br	80182e4 <__alt_data_end+0xfc0182e4>

080183a4 <__ratio>:
 80183a4:	defff904 	addi	sp,sp,-28
 80183a8:	dc400315 	stw	r17,12(sp)
 80183ac:	2823883a 	mov	r17,r5
 80183b0:	d9400104 	addi	r5,sp,4
 80183b4:	dfc00615 	stw	ra,24(sp)
 80183b8:	dcc00515 	stw	r19,20(sp)
 80183bc:	dc800415 	stw	r18,16(sp)
 80183c0:	2027883a 	mov	r19,r4
 80183c4:	dc000215 	stw	r16,8(sp)
 80183c8:	801814c0 	call	801814c <__b2d>
 80183cc:	8809883a 	mov	r4,r17
 80183d0:	d80b883a 	mov	r5,sp
 80183d4:	1025883a 	mov	r18,r2
 80183d8:	1821883a 	mov	r16,r3
 80183dc:	801814c0 	call	801814c <__b2d>
 80183e0:	8a400417 	ldw	r9,16(r17)
 80183e4:	9a000417 	ldw	r8,16(r19)
 80183e8:	100d883a 	mov	r6,r2
 80183ec:	d8800017 	ldw	r2,0(sp)
 80183f0:	4251c83a 	sub	r8,r8,r9
 80183f4:	4012917a 	slli	r9,r8,5
 80183f8:	da000117 	ldw	r8,4(sp)
 80183fc:	4091c83a 	sub	r8,r8,r2
 8018400:	4251883a 	add	r8,r8,r9
 8018404:	02000d0e 	bge	zero,r8,801843c <__ratio+0x98>
 8018408:	4010953a 	slli	r8,r8,20
 801840c:	4421883a 	add	r16,r8,r16
 8018410:	9009883a 	mov	r4,r18
 8018414:	800b883a 	mov	r5,r16
 8018418:	180f883a 	mov	r7,r3
 801841c:	800b7440 	call	800b744 <__divdf3>
 8018420:	dfc00617 	ldw	ra,24(sp)
 8018424:	dcc00517 	ldw	r19,20(sp)
 8018428:	dc800417 	ldw	r18,16(sp)
 801842c:	dc400317 	ldw	r17,12(sp)
 8018430:	dc000217 	ldw	r16,8(sp)
 8018434:	dec00704 	addi	sp,sp,28
 8018438:	f800283a 	ret
 801843c:	4010953a 	slli	r8,r8,20
 8018440:	1a07c83a 	sub	r3,r3,r8
 8018444:	003ff206 	br	8018410 <__alt_data_end+0xfc018410>

08018448 <_mprec_log10>:
 8018448:	defffe04 	addi	sp,sp,-8
 801844c:	dc000015 	stw	r16,0(sp)
 8018450:	dfc00115 	stw	ra,4(sp)
 8018454:	008005c4 	movi	r2,23
 8018458:	2021883a 	mov	r16,r4
 801845c:	11000d0e 	bge	r2,r4,8018494 <_mprec_log10+0x4c>
 8018460:	0005883a 	mov	r2,zero
 8018464:	00cffc34 	movhi	r3,16368
 8018468:	843fffc4 	addi	r16,r16,-1
 801846c:	1009883a 	mov	r4,r2
 8018470:	180b883a 	mov	r5,r3
 8018474:	000d883a 	mov	r6,zero
 8018478:	01d00934 	movhi	r7,16420
 801847c:	800c2540 	call	800c254 <__muldf3>
 8018480:	803ff91e 	bne	r16,zero,8018468 <__alt_data_end+0xfc018468>
 8018484:	dfc00117 	ldw	ra,4(sp)
 8018488:	dc000017 	ldw	r16,0(sp)
 801848c:	dec00204 	addi	sp,sp,8
 8018490:	f800283a 	ret
 8018494:	202090fa 	slli	r16,r4,3
 8018498:	008200f4 	movhi	r2,2051
 801849c:	10abf104 	addi	r2,r2,-20540
 80184a0:	1421883a 	add	r16,r2,r16
 80184a4:	80800017 	ldw	r2,0(r16)
 80184a8:	80c00117 	ldw	r3,4(r16)
 80184ac:	dfc00117 	ldw	ra,4(sp)
 80184b0:	dc000017 	ldw	r16,0(sp)
 80184b4:	dec00204 	addi	sp,sp,8
 80184b8:	f800283a 	ret

080184bc <__copybits>:
 80184bc:	297fffc4 	addi	r5,r5,-1
 80184c0:	280fd17a 	srai	r7,r5,5
 80184c4:	30c00417 	ldw	r3,16(r6)
 80184c8:	30800504 	addi	r2,r6,20
 80184cc:	39c00044 	addi	r7,r7,1
 80184d0:	18c7883a 	add	r3,r3,r3
 80184d4:	39cf883a 	add	r7,r7,r7
 80184d8:	18c7883a 	add	r3,r3,r3
 80184dc:	39cf883a 	add	r7,r7,r7
 80184e0:	10c7883a 	add	r3,r2,r3
 80184e4:	21cf883a 	add	r7,r4,r7
 80184e8:	10c00d2e 	bgeu	r2,r3,8018520 <__copybits+0x64>
 80184ec:	200b883a 	mov	r5,r4
 80184f0:	12000017 	ldw	r8,0(r2)
 80184f4:	29400104 	addi	r5,r5,4
 80184f8:	10800104 	addi	r2,r2,4
 80184fc:	2a3fff15 	stw	r8,-4(r5)
 8018500:	10fffb36 	bltu	r2,r3,80184f0 <__alt_data_end+0xfc0184f0>
 8018504:	1985c83a 	sub	r2,r3,r6
 8018508:	10bffac4 	addi	r2,r2,-21
 801850c:	1004d0ba 	srli	r2,r2,2
 8018510:	10800044 	addi	r2,r2,1
 8018514:	1085883a 	add	r2,r2,r2
 8018518:	1085883a 	add	r2,r2,r2
 801851c:	2089883a 	add	r4,r4,r2
 8018520:	21c0032e 	bgeu	r4,r7,8018530 <__copybits+0x74>
 8018524:	20000015 	stw	zero,0(r4)
 8018528:	21000104 	addi	r4,r4,4
 801852c:	21fffd36 	bltu	r4,r7,8018524 <__alt_data_end+0xfc018524>
 8018530:	f800283a 	ret

08018534 <__any_on>:
 8018534:	20c00417 	ldw	r3,16(r4)
 8018538:	2805d17a 	srai	r2,r5,5
 801853c:	21000504 	addi	r4,r4,20
 8018540:	18800d0e 	bge	r3,r2,8018578 <__any_on+0x44>
 8018544:	18c7883a 	add	r3,r3,r3
 8018548:	18c7883a 	add	r3,r3,r3
 801854c:	20c7883a 	add	r3,r4,r3
 8018550:	20c0192e 	bgeu	r4,r3,80185b8 <__any_on+0x84>
 8018554:	18bfff17 	ldw	r2,-4(r3)
 8018558:	18ffff04 	addi	r3,r3,-4
 801855c:	1000041e 	bne	r2,zero,8018570 <__any_on+0x3c>
 8018560:	20c0142e 	bgeu	r4,r3,80185b4 <__any_on+0x80>
 8018564:	18ffff04 	addi	r3,r3,-4
 8018568:	19400017 	ldw	r5,0(r3)
 801856c:	283ffc26 	beq	r5,zero,8018560 <__alt_data_end+0xfc018560>
 8018570:	00800044 	movi	r2,1
 8018574:	f800283a 	ret
 8018578:	10c00a0e 	bge	r2,r3,80185a4 <__any_on+0x70>
 801857c:	1085883a 	add	r2,r2,r2
 8018580:	1085883a 	add	r2,r2,r2
 8018584:	294007cc 	andi	r5,r5,31
 8018588:	2087883a 	add	r3,r4,r2
 801858c:	283ff026 	beq	r5,zero,8018550 <__alt_data_end+0xfc018550>
 8018590:	19800017 	ldw	r6,0(r3)
 8018594:	3144d83a 	srl	r2,r6,r5
 8018598:	114a983a 	sll	r5,r2,r5
 801859c:	29bff41e 	bne	r5,r6,8018570 <__alt_data_end+0xfc018570>
 80185a0:	003feb06 	br	8018550 <__alt_data_end+0xfc018550>
 80185a4:	1085883a 	add	r2,r2,r2
 80185a8:	1085883a 	add	r2,r2,r2
 80185ac:	2087883a 	add	r3,r4,r2
 80185b0:	003fe706 	br	8018550 <__alt_data_end+0xfc018550>
 80185b4:	f800283a 	ret
 80185b8:	0005883a 	mov	r2,zero
 80185bc:	f800283a 	ret

080185c0 <_putc_r>:
 80185c0:	defffc04 	addi	sp,sp,-16
 80185c4:	dc000215 	stw	r16,8(sp)
 80185c8:	dfc00315 	stw	ra,12(sp)
 80185cc:	2021883a 	mov	r16,r4
 80185d0:	20000226 	beq	r4,zero,80185dc <_putc_r+0x1c>
 80185d4:	20800e17 	ldw	r2,56(r4)
 80185d8:	10001b26 	beq	r2,zero,8018648 <_putc_r+0x88>
 80185dc:	30800217 	ldw	r2,8(r6)
 80185e0:	10bfffc4 	addi	r2,r2,-1
 80185e4:	30800215 	stw	r2,8(r6)
 80185e8:	10000a16 	blt	r2,zero,8018614 <_putc_r+0x54>
 80185ec:	30800017 	ldw	r2,0(r6)
 80185f0:	11400005 	stb	r5,0(r2)
 80185f4:	30800017 	ldw	r2,0(r6)
 80185f8:	10c00044 	addi	r3,r2,1
 80185fc:	30c00015 	stw	r3,0(r6)
 8018600:	10800003 	ldbu	r2,0(r2)
 8018604:	dfc00317 	ldw	ra,12(sp)
 8018608:	dc000217 	ldw	r16,8(sp)
 801860c:	dec00404 	addi	sp,sp,16
 8018610:	f800283a 	ret
 8018614:	30c00617 	ldw	r3,24(r6)
 8018618:	10c00616 	blt	r2,r3,8018634 <_putc_r+0x74>
 801861c:	30800017 	ldw	r2,0(r6)
 8018620:	00c00284 	movi	r3,10
 8018624:	11400005 	stb	r5,0(r2)
 8018628:	30800017 	ldw	r2,0(r6)
 801862c:	11400003 	ldbu	r5,0(r2)
 8018630:	28fff11e 	bne	r5,r3,80185f8 <__alt_data_end+0xfc0185f8>
 8018634:	8009883a 	mov	r4,r16
 8018638:	dfc00317 	ldw	ra,12(sp)
 801863c:	dc000217 	ldw	r16,8(sp)
 8018640:	dec00404 	addi	sp,sp,16
 8018644:	801afe81 	jmpi	801afe8 <__swbuf_r>
 8018648:	d9400015 	stw	r5,0(sp)
 801864c:	d9800115 	stw	r6,4(sp)
 8018650:	8015df80 	call	8015df8 <__sinit>
 8018654:	d9800117 	ldw	r6,4(sp)
 8018658:	d9400017 	ldw	r5,0(sp)
 801865c:	003fdf06 	br	80185dc <__alt_data_end+0xfc0185dc>

08018660 <putc>:
 8018660:	defffc04 	addi	sp,sp,-16
 8018664:	dc400115 	stw	r17,4(sp)
 8018668:	044200f4 	movhi	r17,2051
 801866c:	8c731604 	addi	r17,r17,-13224
 8018670:	dc800215 	stw	r18,8(sp)
 8018674:	2025883a 	mov	r18,r4
 8018678:	89000017 	ldw	r4,0(r17)
 801867c:	dc000015 	stw	r16,0(sp)
 8018680:	dfc00315 	stw	ra,12(sp)
 8018684:	2821883a 	mov	r16,r5
 8018688:	20000226 	beq	r4,zero,8018694 <putc+0x34>
 801868c:	20c00e17 	ldw	r3,56(r4)
 8018690:	18001a26 	beq	r3,zero,80186fc <putc+0x9c>
 8018694:	80800217 	ldw	r2,8(r16)
 8018698:	10bfffc4 	addi	r2,r2,-1
 801869c:	80800215 	stw	r2,8(r16)
 80186a0:	10000c16 	blt	r2,zero,80186d4 <putc+0x74>
 80186a4:	80800017 	ldw	r2,0(r16)
 80186a8:	14800005 	stb	r18,0(r2)
 80186ac:	80800017 	ldw	r2,0(r16)
 80186b0:	10c00044 	addi	r3,r2,1
 80186b4:	80c00015 	stw	r3,0(r16)
 80186b8:	10800003 	ldbu	r2,0(r2)
 80186bc:	dfc00317 	ldw	ra,12(sp)
 80186c0:	dc800217 	ldw	r18,8(sp)
 80186c4:	dc400117 	ldw	r17,4(sp)
 80186c8:	dc000017 	ldw	r16,0(sp)
 80186cc:	dec00404 	addi	sp,sp,16
 80186d0:	f800283a 	ret
 80186d4:	80c00617 	ldw	r3,24(r16)
 80186d8:	10c00a16 	blt	r2,r3,8018704 <putc+0xa4>
 80186dc:	80800017 	ldw	r2,0(r16)
 80186e0:	00c00284 	movi	r3,10
 80186e4:	14800005 	stb	r18,0(r2)
 80186e8:	80800017 	ldw	r2,0(r16)
 80186ec:	11400003 	ldbu	r5,0(r2)
 80186f0:	28ffef1e 	bne	r5,r3,80186b0 <__alt_data_end+0xfc0186b0>
 80186f4:	89000017 	ldw	r4,0(r17)
 80186f8:	00000406 	br	801870c <putc+0xac>
 80186fc:	8015df80 	call	8015df8 <__sinit>
 8018700:	003fe406 	br	8018694 <__alt_data_end+0xfc018694>
 8018704:	89000017 	ldw	r4,0(r17)
 8018708:	900b883a 	mov	r5,r18
 801870c:	800d883a 	mov	r6,r16
 8018710:	dfc00317 	ldw	ra,12(sp)
 8018714:	dc800217 	ldw	r18,8(sp)
 8018718:	dc400117 	ldw	r17,4(sp)
 801871c:	dc000017 	ldw	r16,0(sp)
 8018720:	dec00404 	addi	sp,sp,16
 8018724:	801afe81 	jmpi	801afe8 <__swbuf_r>

08018728 <__sread>:
 8018728:	defffe04 	addi	sp,sp,-8
 801872c:	dc000015 	stw	r16,0(sp)
 8018730:	2821883a 	mov	r16,r5
 8018734:	2940038f 	ldh	r5,14(r5)
 8018738:	dfc00115 	stw	ra,4(sp)
 801873c:	801bcc40 	call	801bcc4 <_read_r>
 8018740:	10000716 	blt	r2,zero,8018760 <__sread+0x38>
 8018744:	80c01417 	ldw	r3,80(r16)
 8018748:	1887883a 	add	r3,r3,r2
 801874c:	80c01415 	stw	r3,80(r16)
 8018750:	dfc00117 	ldw	ra,4(sp)
 8018754:	dc000017 	ldw	r16,0(sp)
 8018758:	dec00204 	addi	sp,sp,8
 801875c:	f800283a 	ret
 8018760:	80c0030b 	ldhu	r3,12(r16)
 8018764:	18fbffcc 	andi	r3,r3,61439
 8018768:	80c0030d 	sth	r3,12(r16)
 801876c:	dfc00117 	ldw	ra,4(sp)
 8018770:	dc000017 	ldw	r16,0(sp)
 8018774:	dec00204 	addi	sp,sp,8
 8018778:	f800283a 	ret

0801877c <__seofread>:
 801877c:	0005883a 	mov	r2,zero
 8018780:	f800283a 	ret

08018784 <__swrite>:
 8018784:	2880030b 	ldhu	r2,12(r5)
 8018788:	defffb04 	addi	sp,sp,-20
 801878c:	dcc00315 	stw	r19,12(sp)
 8018790:	dc800215 	stw	r18,8(sp)
 8018794:	dc400115 	stw	r17,4(sp)
 8018798:	dc000015 	stw	r16,0(sp)
 801879c:	dfc00415 	stw	ra,16(sp)
 80187a0:	10c0400c 	andi	r3,r2,256
 80187a4:	2821883a 	mov	r16,r5
 80187a8:	2027883a 	mov	r19,r4
 80187ac:	3025883a 	mov	r18,r6
 80187b0:	3823883a 	mov	r17,r7
 80187b4:	18000526 	beq	r3,zero,80187cc <__swrite+0x48>
 80187b8:	2940038f 	ldh	r5,14(r5)
 80187bc:	000d883a 	mov	r6,zero
 80187c0:	01c00084 	movi	r7,2
 80187c4:	801bb0c0 	call	801bb0c <_lseek_r>
 80187c8:	8080030b 	ldhu	r2,12(r16)
 80187cc:	8140038f 	ldh	r5,14(r16)
 80187d0:	10bbffcc 	andi	r2,r2,61439
 80187d4:	9809883a 	mov	r4,r19
 80187d8:	900d883a 	mov	r6,r18
 80187dc:	880f883a 	mov	r7,r17
 80187e0:	8080030d 	sth	r2,12(r16)
 80187e4:	dfc00417 	ldw	ra,16(sp)
 80187e8:	dcc00317 	ldw	r19,12(sp)
 80187ec:	dc800217 	ldw	r18,8(sp)
 80187f0:	dc400117 	ldw	r17,4(sp)
 80187f4:	dc000017 	ldw	r16,0(sp)
 80187f8:	dec00504 	addi	sp,sp,20
 80187fc:	801b1581 	jmpi	801b158 <_write_r>

08018800 <__sseek>:
 8018800:	defffe04 	addi	sp,sp,-8
 8018804:	dc000015 	stw	r16,0(sp)
 8018808:	2821883a 	mov	r16,r5
 801880c:	2940038f 	ldh	r5,14(r5)
 8018810:	dfc00115 	stw	ra,4(sp)
 8018814:	801bb0c0 	call	801bb0c <_lseek_r>
 8018818:	00ffffc4 	movi	r3,-1
 801881c:	10c00826 	beq	r2,r3,8018840 <__sseek+0x40>
 8018820:	80c0030b 	ldhu	r3,12(r16)
 8018824:	80801415 	stw	r2,80(r16)
 8018828:	18c40014 	ori	r3,r3,4096
 801882c:	80c0030d 	sth	r3,12(r16)
 8018830:	dfc00117 	ldw	ra,4(sp)
 8018834:	dc000017 	ldw	r16,0(sp)
 8018838:	dec00204 	addi	sp,sp,8
 801883c:	f800283a 	ret
 8018840:	80c0030b 	ldhu	r3,12(r16)
 8018844:	18fbffcc 	andi	r3,r3,61439
 8018848:	80c0030d 	sth	r3,12(r16)
 801884c:	dfc00117 	ldw	ra,4(sp)
 8018850:	dc000017 	ldw	r16,0(sp)
 8018854:	dec00204 	addi	sp,sp,8
 8018858:	f800283a 	ret

0801885c <__sclose>:
 801885c:	2940038f 	ldh	r5,14(r5)
 8018860:	801b1b41 	jmpi	801b1b4 <_close_r>

08018864 <strncmp>:
 8018864:	30002126 	beq	r6,zero,80188ec <strncmp+0x88>
 8018868:	2144b03a 	or	r2,r4,r5
 801886c:	108000cc 	andi	r2,r2,3
 8018870:	1000241e 	bne	r2,zero,8018904 <strncmp+0xa0>
 8018874:	024000c4 	movi	r9,3
 8018878:	4980222e 	bgeu	r9,r6,8018904 <strncmp+0xa0>
 801887c:	20800017 	ldw	r2,0(r4)
 8018880:	28c00017 	ldw	r3,0(r5)
 8018884:	10c01f1e 	bne	r2,r3,8018904 <strncmp+0xa0>
 8018888:	31bfff04 	addi	r6,r6,-4
 801888c:	30001726 	beq	r6,zero,80188ec <strncmp+0x88>
 8018890:	02ffbff4 	movhi	r11,65279
 8018894:	5affbfc4 	addi	r11,r11,-257
 8018898:	0086303a 	nor	r3,zero,r2
 801889c:	02a02074 	movhi	r10,32897
 80188a0:	12c5883a 	add	r2,r2,r11
 80188a4:	52a02004 	addi	r10,r10,-32640
 80188a8:	10c4703a 	and	r2,r2,r3
 80188ac:	1284703a 	and	r2,r2,r10
 80188b0:	10000226 	beq	r2,zero,80188bc <strncmp+0x58>
 80188b4:	00000d06 	br	80188ec <strncmp+0x88>
 80188b8:	10000c1e 	bne	r2,zero,80188ec <strncmp+0x88>
 80188bc:	21000104 	addi	r4,r4,4
 80188c0:	29400104 	addi	r5,r5,4
 80188c4:	49800f2e 	bgeu	r9,r6,8018904 <strncmp+0xa0>
 80188c8:	20c00017 	ldw	r3,0(r4)
 80188cc:	29c00017 	ldw	r7,0(r5)
 80188d0:	1ad1883a 	add	r8,r3,r11
 80188d4:	00c4303a 	nor	r2,zero,r3
 80188d8:	4084703a 	and	r2,r8,r2
 80188dc:	1284703a 	and	r2,r2,r10
 80188e0:	19c0081e 	bne	r3,r7,8018904 <strncmp+0xa0>
 80188e4:	31bfff04 	addi	r6,r6,-4
 80188e8:	303ff31e 	bne	r6,zero,80188b8 <__alt_data_end+0xfc0188b8>
 80188ec:	0005883a 	mov	r2,zero
 80188f0:	f800283a 	ret
 80188f4:	303ffd26 	beq	r6,zero,80188ec <__alt_data_end+0xfc0188ec>
 80188f8:	103ffc26 	beq	r2,zero,80188ec <__alt_data_end+0xfc0188ec>
 80188fc:	21000044 	addi	r4,r4,1
 8018900:	29400044 	addi	r5,r5,1
 8018904:	20800007 	ldb	r2,0(r4)
 8018908:	28c00007 	ldb	r3,0(r5)
 801890c:	31bfffc4 	addi	r6,r6,-1
 8018910:	10fff826 	beq	r2,r3,80188f4 <__alt_data_end+0xfc0188f4>
 8018914:	20800003 	ldbu	r2,0(r4)
 8018918:	28c00003 	ldbu	r3,0(r5)
 801891c:	10c5c83a 	sub	r2,r2,r3
 8018920:	f800283a 	ret

08018924 <__ssprint_r>:
 8018924:	30800217 	ldw	r2,8(r6)
 8018928:	defff604 	addi	sp,sp,-40
 801892c:	ddc00715 	stw	r23,28(sp)
 8018930:	dcc00315 	stw	r19,12(sp)
 8018934:	dfc00915 	stw	ra,36(sp)
 8018938:	df000815 	stw	fp,32(sp)
 801893c:	dd800615 	stw	r22,24(sp)
 8018940:	dd400515 	stw	r21,20(sp)
 8018944:	dd000415 	stw	r20,16(sp)
 8018948:	dc800215 	stw	r18,8(sp)
 801894c:	dc400115 	stw	r17,4(sp)
 8018950:	dc000015 	stw	r16,0(sp)
 8018954:	3027883a 	mov	r19,r6
 8018958:	35c00017 	ldw	r23,0(r6)
 801895c:	10005526 	beq	r2,zero,8018ab4 <__ssprint_r+0x190>
 8018960:	2029883a 	mov	r20,r4
 8018964:	29000017 	ldw	r4,0(r5)
 8018968:	2821883a 	mov	r16,r5
 801896c:	0039883a 	mov	fp,zero
 8018970:	0023883a 	mov	r17,zero
 8018974:	88003926 	beq	r17,zero,8018a5c <__ssprint_r+0x138>
 8018978:	84800217 	ldw	r18,8(r16)
 801897c:	902d883a 	mov	r22,r18
 8018980:	8c803a36 	bltu	r17,r18,8018a6c <__ssprint_r+0x148>
 8018984:	80c0030b 	ldhu	r3,12(r16)
 8018988:	1881200c 	andi	r2,r3,1152
 801898c:	10002626 	beq	r2,zero,8018a28 <__ssprint_r+0x104>
 8018990:	80800517 	ldw	r2,20(r16)
 8018994:	81400417 	ldw	r5,16(r16)
 8018998:	89c00044 	addi	r7,r17,1
 801899c:	108d883a 	add	r6,r2,r2
 80189a0:	3085883a 	add	r2,r6,r2
 80189a4:	100cd7fa 	srli	r6,r2,31
 80189a8:	216dc83a 	sub	r22,r4,r5
 80189ac:	3d89883a 	add	r4,r7,r22
 80189b0:	3085883a 	add	r2,r6,r2
 80189b4:	1025d07a 	srai	r18,r2,1
 80189b8:	900d883a 	mov	r6,r18
 80189bc:	9100022e 	bgeu	r18,r4,80189c8 <__ssprint_r+0xa4>
 80189c0:	2025883a 	mov	r18,r4
 80189c4:	200d883a 	mov	r6,r4
 80189c8:	18c1000c 	andi	r3,r3,1024
 80189cc:	a009883a 	mov	r4,r20
 80189d0:	18002926 	beq	r3,zero,8018a78 <__ssprint_r+0x154>
 80189d4:	300b883a 	mov	r5,r6
 80189d8:	800d7040 	call	800d704 <_malloc_r>
 80189dc:	102b883a 	mov	r21,r2
 80189e0:	10002b26 	beq	r2,zero,8018a90 <__ssprint_r+0x16c>
 80189e4:	81400417 	ldw	r5,16(r16)
 80189e8:	1009883a 	mov	r4,r2
 80189ec:	b00d883a 	mov	r6,r22
 80189f0:	80173d80 	call	80173d8 <memcpy>
 80189f4:	8080030b 	ldhu	r2,12(r16)
 80189f8:	00fedfc4 	movi	r3,-1153
 80189fc:	10c4703a 	and	r2,r2,r3
 8018a00:	10802014 	ori	r2,r2,128
 8018a04:	8080030d 	sth	r2,12(r16)
 8018a08:	ad89883a 	add	r4,r21,r22
 8018a0c:	95adc83a 	sub	r22,r18,r22
 8018a10:	84800515 	stw	r18,20(r16)
 8018a14:	85800215 	stw	r22,8(r16)
 8018a18:	85400415 	stw	r21,16(r16)
 8018a1c:	81000015 	stw	r4,0(r16)
 8018a20:	8825883a 	mov	r18,r17
 8018a24:	882d883a 	mov	r22,r17
 8018a28:	e00b883a 	mov	r5,fp
 8018a2c:	b00d883a 	mov	r6,r22
 8018a30:	801bb680 	call	801bb68 <memmove>
 8018a34:	80c00217 	ldw	r3,8(r16)
 8018a38:	81000017 	ldw	r4,0(r16)
 8018a3c:	98800217 	ldw	r2,8(r19)
 8018a40:	1ca5c83a 	sub	r18,r3,r18
 8018a44:	2589883a 	add	r4,r4,r22
 8018a48:	84800215 	stw	r18,8(r16)
 8018a4c:	81000015 	stw	r4,0(r16)
 8018a50:	1463c83a 	sub	r17,r2,r17
 8018a54:	9c400215 	stw	r17,8(r19)
 8018a58:	88001626 	beq	r17,zero,8018ab4 <__ssprint_r+0x190>
 8018a5c:	bf000017 	ldw	fp,0(r23)
 8018a60:	bc400117 	ldw	r17,4(r23)
 8018a64:	bdc00204 	addi	r23,r23,8
 8018a68:	003fc206 	br	8018974 <__alt_data_end+0xfc018974>
 8018a6c:	8825883a 	mov	r18,r17
 8018a70:	882d883a 	mov	r22,r17
 8018a74:	003fec06 	br	8018a28 <__alt_data_end+0xfc018a28>
 8018a78:	801bd200 	call	801bd20 <_realloc_r>
 8018a7c:	102b883a 	mov	r21,r2
 8018a80:	103fe11e 	bne	r2,zero,8018a08 <__alt_data_end+0xfc018a08>
 8018a84:	81400417 	ldw	r5,16(r16)
 8018a88:	a009883a 	mov	r4,r20
 8018a8c:	8015f6c0 	call	8015f6c <_free_r>
 8018a90:	80c0030b 	ldhu	r3,12(r16)
 8018a94:	00800304 	movi	r2,12
 8018a98:	a0800015 	stw	r2,0(r20)
 8018a9c:	18c01014 	ori	r3,r3,64
 8018aa0:	80c0030d 	sth	r3,12(r16)
 8018aa4:	00bfffc4 	movi	r2,-1
 8018aa8:	98000215 	stw	zero,8(r19)
 8018aac:	98000115 	stw	zero,4(r19)
 8018ab0:	00000206 	br	8018abc <__ssprint_r+0x198>
 8018ab4:	98000115 	stw	zero,4(r19)
 8018ab8:	0005883a 	mov	r2,zero
 8018abc:	dfc00917 	ldw	ra,36(sp)
 8018ac0:	df000817 	ldw	fp,32(sp)
 8018ac4:	ddc00717 	ldw	r23,28(sp)
 8018ac8:	dd800617 	ldw	r22,24(sp)
 8018acc:	dd400517 	ldw	r21,20(sp)
 8018ad0:	dd000417 	ldw	r20,16(sp)
 8018ad4:	dcc00317 	ldw	r19,12(sp)
 8018ad8:	dc800217 	ldw	r18,8(sp)
 8018adc:	dc400117 	ldw	r17,4(sp)
 8018ae0:	dc000017 	ldw	r16,0(sp)
 8018ae4:	dec00a04 	addi	sp,sp,40
 8018ae8:	f800283a 	ret

08018aec <___svfiprintf_internal_r>:
 8018aec:	2880030b 	ldhu	r2,12(r5)
 8018af0:	deffc904 	addi	sp,sp,-220
 8018af4:	dd403215 	stw	r21,200(sp)
 8018af8:	dfc03615 	stw	ra,216(sp)
 8018afc:	df003515 	stw	fp,212(sp)
 8018b00:	ddc03415 	stw	r23,208(sp)
 8018b04:	dd803315 	stw	r22,204(sp)
 8018b08:	dd003115 	stw	r20,196(sp)
 8018b0c:	dcc03015 	stw	r19,192(sp)
 8018b10:	dc802f15 	stw	r18,188(sp)
 8018b14:	dc402e15 	stw	r17,184(sp)
 8018b18:	dc002d15 	stw	r16,180(sp)
 8018b1c:	d9402715 	stw	r5,156(sp)
 8018b20:	d9002915 	stw	r4,164(sp)
 8018b24:	1080200c 	andi	r2,r2,128
 8018b28:	d9c02315 	stw	r7,140(sp)
 8018b2c:	302b883a 	mov	r21,r6
 8018b30:	10000226 	beq	r2,zero,8018b3c <___svfiprintf_internal_r+0x50>
 8018b34:	28800417 	ldw	r2,16(r5)
 8018b38:	1003ce26 	beq	r2,zero,8019a74 <___svfiprintf_internal_r+0xf88>
 8018b3c:	dac01a04 	addi	r11,sp,104
 8018b40:	da8019c4 	addi	r10,sp,103
 8018b44:	dc802917 	ldw	r18,164(sp)
 8018b48:	dd002717 	ldw	r20,156(sp)
 8018b4c:	04c200f4 	movhi	r19,2051
 8018b50:	dac01e15 	stw	r11,120(sp)
 8018b54:	5a97c83a 	sub	r11,r11,r10
 8018b58:	9cec2304 	addi	r19,r19,-20340
 8018b5c:	da801f15 	stw	r10,124(sp)
 8018b60:	dec01a15 	stw	sp,104(sp)
 8018b64:	d8001c15 	stw	zero,112(sp)
 8018b68:	d8001b15 	stw	zero,108(sp)
 8018b6c:	d8002a15 	stw	zero,168(sp)
 8018b70:	d8002415 	stw	zero,144(sp)
 8018b74:	d811883a 	mov	r8,sp
 8018b78:	dac02b15 	stw	r11,172(sp)
 8018b7c:	a8800007 	ldb	r2,0(r21)
 8018b80:	10026826 	beq	r2,zero,8019524 <___svfiprintf_internal_r+0xa38>
 8018b84:	01000944 	movi	r4,37
 8018b88:	11026626 	beq	r2,r4,8019524 <___svfiprintf_internal_r+0xa38>
 8018b8c:	a805883a 	mov	r2,r21
 8018b90:	00000106 	br	8018b98 <___svfiprintf_internal_r+0xac>
 8018b94:	19000326 	beq	r3,r4,8018ba4 <___svfiprintf_internal_r+0xb8>
 8018b98:	10800044 	addi	r2,r2,1
 8018b9c:	10c00007 	ldb	r3,0(r2)
 8018ba0:	183ffc1e 	bne	r3,zero,8018b94 <__alt_data_end+0xfc018b94>
 8018ba4:	1561c83a 	sub	r16,r2,r21
 8018ba8:	102d883a 	mov	r22,r2
 8018bac:	80000e26 	beq	r16,zero,8018be8 <___svfiprintf_internal_r+0xfc>
 8018bb0:	d8c01c17 	ldw	r3,112(sp)
 8018bb4:	d8801b17 	ldw	r2,108(sp)
 8018bb8:	45400015 	stw	r21,0(r8)
 8018bbc:	1c07883a 	add	r3,r3,r16
 8018bc0:	10800044 	addi	r2,r2,1
 8018bc4:	d8c01c15 	stw	r3,112(sp)
 8018bc8:	44000115 	stw	r16,4(r8)
 8018bcc:	d8801b15 	stw	r2,108(sp)
 8018bd0:	00c001c4 	movi	r3,7
 8018bd4:	1882d616 	blt	r3,r2,8019730 <___svfiprintf_internal_r+0xc44>
 8018bd8:	42000204 	addi	r8,r8,8
 8018bdc:	da802417 	ldw	r10,144(sp)
 8018be0:	5415883a 	add	r10,r10,r16
 8018be4:	da802415 	stw	r10,144(sp)
 8018be8:	b0800007 	ldb	r2,0(r22)
 8018bec:	10027326 	beq	r2,zero,80195bc <___svfiprintf_internal_r+0xad0>
 8018bf0:	b1000047 	ldb	r4,1(r22)
 8018bf4:	b5400044 	addi	r21,r22,1
 8018bf8:	d8001d85 	stb	zero,118(sp)
 8018bfc:	000d883a 	mov	r6,zero
 8018c00:	043fffc4 	movi	r16,-1
 8018c04:	d8002115 	stw	zero,132(sp)
 8018c08:	0023883a 	mov	r17,zero
 8018c0c:	00c01604 	movi	r3,88
 8018c10:	01400244 	movi	r5,9
 8018c14:	02400a84 	movi	r9,42
 8018c18:	01c01b04 	movi	r7,108
 8018c1c:	ad400044 	addi	r21,r21,1
 8018c20:	20bff804 	addi	r2,r4,-32
 8018c24:	18819536 	bltu	r3,r2,801927c <___svfiprintf_internal_r+0x790>
 8018c28:	100490ba 	slli	r2,r2,2
 8018c2c:	02c200b4 	movhi	r11,2050
 8018c30:	5ae31004 	addi	r11,r11,-29632
 8018c34:	12c5883a 	add	r2,r2,r11
 8018c38:	10800017 	ldw	r2,0(r2)
 8018c3c:	1000683a 	jmp	r2
 8018c40:	0801917c 	xorhi	zero,at,1605
 8018c44:	0801927c 	xorhi	zero,at,1609
 8018c48:	0801927c 	xorhi	zero,at,1609
 8018c4c:	08019170 	cmpltui	zero,at,1605
 8018c50:	0801927c 	xorhi	zero,at,1609
 8018c54:	0801927c 	xorhi	zero,at,1609
 8018c58:	0801927c 	xorhi	zero,at,1609
 8018c5c:	0801927c 	xorhi	zero,at,1609
 8018c60:	0801927c 	xorhi	zero,at,1609
 8018c64:	0801927c 	xorhi	zero,at,1609
 8018c68:	08018ea0 	cmpeqi	zero,at,1594
 8018c6c:	080192b0 	cmpltui	zero,at,1610
 8018c70:	0801927c 	xorhi	zero,at,1609
 8018c74:	08018ec8 	cmpgei	zero,at,1595
 8018c78:	080192bc 	xorhi	zero,at,1610
 8018c7c:	0801927c 	xorhi	zero,at,1609
 8018c80:	080192a4 	muli	zero,at,1610
 8018c84:	08019244 	addi	zero,at,1609
 8018c88:	08019244 	addi	zero,at,1609
 8018c8c:	08019244 	addi	zero,at,1609
 8018c90:	08019244 	addi	zero,at,1609
 8018c94:	08019244 	addi	zero,at,1609
 8018c98:	08019244 	addi	zero,at,1609
 8018c9c:	08019244 	addi	zero,at,1609
 8018ca0:	08019244 	addi	zero,at,1609
 8018ca4:	08019244 	addi	zero,at,1609
 8018ca8:	0801927c 	xorhi	zero,at,1609
 8018cac:	0801927c 	xorhi	zero,at,1609
 8018cb0:	0801927c 	xorhi	zero,at,1609
 8018cb4:	0801927c 	xorhi	zero,at,1609
 8018cb8:	0801927c 	xorhi	zero,at,1609
 8018cbc:	0801927c 	xorhi	zero,at,1609
 8018cc0:	0801927c 	xorhi	zero,at,1609
 8018cc4:	0801927c 	xorhi	zero,at,1609
 8018cc8:	0801927c 	xorhi	zero,at,1609
 8018ccc:	0801927c 	xorhi	zero,at,1609
 8018cd0:	080191dc 	xori	zero,at,1607
 8018cd4:	0801927c 	xorhi	zero,at,1609
 8018cd8:	0801927c 	xorhi	zero,at,1609
 8018cdc:	0801927c 	xorhi	zero,at,1609
 8018ce0:	0801927c 	xorhi	zero,at,1609
 8018ce4:	0801927c 	xorhi	zero,at,1609
 8018ce8:	0801927c 	xorhi	zero,at,1609
 8018cec:	0801927c 	xorhi	zero,at,1609
 8018cf0:	0801927c 	xorhi	zero,at,1609
 8018cf4:	0801927c 	xorhi	zero,at,1609
 8018cf8:	0801927c 	xorhi	zero,at,1609
 8018cfc:	08018e70 	cmpltui	zero,at,1593
 8018d00:	0801927c 	xorhi	zero,at,1609
 8018d04:	0801927c 	xorhi	zero,at,1609
 8018d08:	0801927c 	xorhi	zero,at,1609
 8018d0c:	0801927c 	xorhi	zero,at,1609
 8018d10:	0801927c 	xorhi	zero,at,1609
 8018d14:	08018da4 	muli	zero,at,1590
 8018d18:	0801927c 	xorhi	zero,at,1609
 8018d1c:	0801927c 	xorhi	zero,at,1609
 8018d20:	080190d0 	cmplti	zero,at,1603
 8018d24:	0801927c 	xorhi	zero,at,1609
 8018d28:	0801927c 	xorhi	zero,at,1609
 8018d2c:	0801927c 	xorhi	zero,at,1609
 8018d30:	0801927c 	xorhi	zero,at,1609
 8018d34:	0801927c 	xorhi	zero,at,1609
 8018d38:	0801927c 	xorhi	zero,at,1609
 8018d3c:	0801927c 	xorhi	zero,at,1609
 8018d40:	0801927c 	xorhi	zero,at,1609
 8018d44:	0801927c 	xorhi	zero,at,1609
 8018d48:	0801927c 	xorhi	zero,at,1609
 8018d4c:	08018fbc 	xorhi	zero,at,1598
 8018d50:	08018f7c 	xorhi	zero,at,1597
 8018d54:	0801927c 	xorhi	zero,at,1609
 8018d58:	0801927c 	xorhi	zero,at,1609
 8018d5c:	0801927c 	xorhi	zero,at,1609
 8018d60:	0801912c 	andhi	zero,at,1604
 8018d64:	08018f7c 	xorhi	zero,at,1597
 8018d68:	0801927c 	xorhi	zero,at,1609
 8018d6c:	0801927c 	xorhi	zero,at,1609
 8018d70:	08019118 	cmpnei	zero,at,1604
 8018d74:	0801927c 	xorhi	zero,at,1609
 8018d78:	08019138 	rdprs	zero,at,1604
 8018d7c:	08018e74 	orhi	zero,at,1593
 8018d80:	08018f3c 	xorhi	zero,at,1596
 8018d84:	08018f30 	cmpltui	zero,at,1596
 8018d88:	0801927c 	xorhi	zero,at,1609
 8018d8c:	08018ed4 	ori	zero,at,1595
 8018d90:	0801927c 	xorhi	zero,at,1609
 8018d94:	08018da8 	cmpgeui	zero,at,1590
 8018d98:	0801927c 	xorhi	zero,at,1609
 8018d9c:	0801927c 	xorhi	zero,at,1609
 8018da0:	08019198 	cmpnei	zero,at,1606
 8018da4:	8c400414 	ori	r17,r17,16
 8018da8:	88c0080c 	andi	r3,r17,32
 8018dac:	d8802317 	ldw	r2,140(sp)
 8018db0:	18029626 	beq	r3,zero,801980c <___svfiprintf_internal_r+0xd20>
 8018db4:	dac02317 	ldw	r11,140(sp)
 8018db8:	12400017 	ldw	r9,0(r2)
 8018dbc:	12800117 	ldw	r10,4(r2)
 8018dc0:	5ac00204 	addi	r11,r11,8
 8018dc4:	dac02315 	stw	r11,140(sp)
 8018dc8:	00800044 	movi	r2,1
 8018dcc:	4a86b03a 	or	r3,r9,r10
 8018dd0:	d8001d85 	stb	zero,118(sp)
 8018dd4:	8039883a 	mov	fp,r16
 8018dd8:	0017883a 	mov	r11,zero
 8018ddc:	80000216 	blt	r16,zero,8018de8 <___svfiprintf_internal_r+0x2fc>
 8018de0:	013fdfc4 	movi	r4,-129
 8018de4:	8922703a 	and	r17,r17,r4
 8018de8:	1801d01e 	bne	r3,zero,801952c <___svfiprintf_internal_r+0xa40>
 8018dec:	80024426 	beq	r16,zero,8019700 <___svfiprintf_internal_r+0xc14>
 8018df0:	10803fcc 	andi	r2,r2,255
 8018df4:	00c00044 	movi	r3,1
 8018df8:	10c2b326 	beq	r2,r3,80198c8 <___svfiprintf_internal_r+0xddc>
 8018dfc:	00c00084 	movi	r3,2
 8018e00:	10c25b26 	beq	r2,r3,8019770 <___svfiprintf_internal_r+0xc84>
 8018e04:	d8c01a04 	addi	r3,sp,104
 8018e08:	4808d0fa 	srli	r4,r9,3
 8018e0c:	500a977a 	slli	r5,r10,29
 8018e10:	5014d0fa 	srli	r10,r10,3
 8018e14:	4a4001cc 	andi	r9,r9,7
 8018e18:	48800c04 	addi	r2,r9,48
 8018e1c:	18ffffc4 	addi	r3,r3,-1
 8018e20:	2912b03a 	or	r9,r5,r4
 8018e24:	18800005 	stb	r2,0(r3)
 8018e28:	4a88b03a 	or	r4,r9,r10
 8018e2c:	203ff61e 	bne	r4,zero,8018e08 <__alt_data_end+0xfc018e08>
 8018e30:	8900004c 	andi	r4,r17,1
 8018e34:	d8c02615 	stw	r3,152(sp)
 8018e38:	2002951e 	bne	r4,zero,8019890 <___svfiprintf_internal_r+0xda4>
 8018e3c:	da801e17 	ldw	r10,120(sp)
 8018e40:	50f9c83a 	sub	fp,r10,r3
 8018e44:	df002015 	stw	fp,128(sp)
 8018e48:	e400010e 	bge	fp,r16,8018e50 <___svfiprintf_internal_r+0x364>
 8018e4c:	dc002015 	stw	r16,128(sp)
 8018e50:	5ac03fcc 	andi	r11,r11,255
 8018e54:	5ac0201c 	xori	r11,r11,128
 8018e58:	5affe004 	addi	r11,r11,-128
 8018e5c:	58006326 	beq	r11,zero,8018fec <___svfiprintf_internal_r+0x500>
 8018e60:	d8c02017 	ldw	r3,128(sp)
 8018e64:	18c00044 	addi	r3,r3,1
 8018e68:	d8c02015 	stw	r3,128(sp)
 8018e6c:	00005f06 	br	8018fec <___svfiprintf_internal_r+0x500>
 8018e70:	8c400414 	ori	r17,r17,16
 8018e74:	88c0080c 	andi	r3,r17,32
 8018e78:	d8802317 	ldw	r2,140(sp)
 8018e7c:	18027826 	beq	r3,zero,8019860 <___svfiprintf_internal_r+0xd74>
 8018e80:	dac02317 	ldw	r11,140(sp)
 8018e84:	12400017 	ldw	r9,0(r2)
 8018e88:	12800117 	ldw	r10,4(r2)
 8018e8c:	5ac00204 	addi	r11,r11,8
 8018e90:	dac02315 	stw	r11,140(sp)
 8018e94:	0005883a 	mov	r2,zero
 8018e98:	4a86b03a 	or	r3,r9,r10
 8018e9c:	003fcc06 	br	8018dd0 <__alt_data_end+0xfc018dd0>
 8018ea0:	da802317 	ldw	r10,140(sp)
 8018ea4:	dac02317 	ldw	r11,140(sp)
 8018ea8:	52800017 	ldw	r10,0(r10)
 8018eac:	58800104 	addi	r2,r11,4
 8018eb0:	da802115 	stw	r10,132(sp)
 8018eb4:	50028a0e 	bge	r10,zero,80198e0 <___svfiprintf_internal_r+0xdf4>
 8018eb8:	da802117 	ldw	r10,132(sp)
 8018ebc:	d8802315 	stw	r2,140(sp)
 8018ec0:	0295c83a 	sub	r10,zero,r10
 8018ec4:	da802115 	stw	r10,132(sp)
 8018ec8:	8c400114 	ori	r17,r17,4
 8018ecc:	a9000007 	ldb	r4,0(r21)
 8018ed0:	003f5206 	br	8018c1c <__alt_data_end+0xfc018c1c>
 8018ed4:	da802317 	ldw	r10,140(sp)
 8018ed8:	dac02317 	ldw	r11,140(sp)
 8018edc:	d8001d85 	stb	zero,118(sp)
 8018ee0:	52800017 	ldw	r10,0(r10)
 8018ee4:	5dc00104 	addi	r23,r11,4
 8018ee8:	da802615 	stw	r10,152(sp)
 8018eec:	5002eb26 	beq	r10,zero,8019a9c <___svfiprintf_internal_r+0xfb0>
 8018ef0:	d9002617 	ldw	r4,152(sp)
 8018ef4:	8002d716 	blt	r16,zero,8019a54 <___svfiprintf_internal_r+0xf68>
 8018ef8:	000b883a 	mov	r5,zero
 8018efc:	800d883a 	mov	r6,r16
 8018f00:	da002c15 	stw	r8,176(sp)
 8018f04:	80172f00 	call	80172f0 <memchr>
 8018f08:	da002c17 	ldw	r8,176(sp)
 8018f0c:	1002fb26 	beq	r2,zero,8019afc <___svfiprintf_internal_r+0x1010>
 8018f10:	d8c02617 	ldw	r3,152(sp)
 8018f14:	10f9c83a 	sub	fp,r2,r3
 8018f18:	8700010e 	bge	r16,fp,8018f20 <___svfiprintf_internal_r+0x434>
 8018f1c:	8039883a 	mov	fp,r16
 8018f20:	dac01d83 	ldbu	r11,118(sp)
 8018f24:	ddc02315 	stw	r23,140(sp)
 8018f28:	0021883a 	mov	r16,zero
 8018f2c:	003fc506 	br	8018e44 <__alt_data_end+0xfc018e44>
 8018f30:	8c400814 	ori	r17,r17,32
 8018f34:	a9000007 	ldb	r4,0(r21)
 8018f38:	003f3806 	br	8018c1c <__alt_data_end+0xfc018c1c>
 8018f3c:	dac02317 	ldw	r11,140(sp)
 8018f40:	00800c04 	movi	r2,48
 8018f44:	d8801d05 	stb	r2,116(sp)
 8018f48:	5a400017 	ldw	r9,0(r11)
 8018f4c:	00801e04 	movi	r2,120
 8018f50:	d8801d45 	stb	r2,117(sp)
 8018f54:	008200f4 	movhi	r2,2051
 8018f58:	10ab1404 	addi	r2,r2,-21424
 8018f5c:	5ac00104 	addi	r11,r11,4
 8018f60:	d8802a15 	stw	r2,168(sp)
 8018f64:	0015883a 	mov	r10,zero
 8018f68:	8c400094 	ori	r17,r17,2
 8018f6c:	dac02315 	stw	r11,140(sp)
 8018f70:	00800084 	movi	r2,2
 8018f74:	4807883a 	mov	r3,r9
 8018f78:	003f9506 	br	8018dd0 <__alt_data_end+0xfc018dd0>
 8018f7c:	d9801d85 	stb	r6,118(sp)
 8018f80:	8880080c 	andi	r2,r17,32
 8018f84:	d8c02317 	ldw	r3,140(sp)
 8018f88:	10009926 	beq	r2,zero,80191f0 <___svfiprintf_internal_r+0x704>
 8018f8c:	dac02317 	ldw	r11,140(sp)
 8018f90:	18800117 	ldw	r2,4(r3)
 8018f94:	1a400017 	ldw	r9,0(r3)
 8018f98:	5ac00204 	addi	r11,r11,8
 8018f9c:	dac02315 	stw	r11,140(sp)
 8018fa0:	1015883a 	mov	r10,r2
 8018fa4:	10009d16 	blt	r2,zero,801921c <___svfiprintf_internal_r+0x730>
 8018fa8:	dac01d83 	ldbu	r11,118(sp)
 8018fac:	8039883a 	mov	fp,r16
 8018fb0:	00800044 	movi	r2,1
 8018fb4:	4a86b03a 	or	r3,r9,r10
 8018fb8:	003f8806 	br	8018ddc <__alt_data_end+0xfc018ddc>
 8018fbc:	dac02317 	ldw	r11,140(sp)
 8018fc0:	00c00044 	movi	r3,1
 8018fc4:	da801004 	addi	r10,sp,64
 8018fc8:	58800017 	ldw	r2,0(r11)
 8018fcc:	5ac00104 	addi	r11,r11,4
 8018fd0:	d8c02015 	stw	r3,128(sp)
 8018fd4:	d8001d85 	stb	zero,118(sp)
 8018fd8:	d8801005 	stb	r2,64(sp)
 8018fdc:	dac02315 	stw	r11,140(sp)
 8018fe0:	1839883a 	mov	fp,r3
 8018fe4:	da802615 	stw	r10,152(sp)
 8018fe8:	0021883a 	mov	r16,zero
 8018fec:	8a80008c 	andi	r10,r17,2
 8018ff0:	da802215 	stw	r10,136(sp)
 8018ff4:	50000326 	beq	r10,zero,8019004 <___svfiprintf_internal_r+0x518>
 8018ff8:	dac02017 	ldw	r11,128(sp)
 8018ffc:	5ac00084 	addi	r11,r11,2
 8019000:	dac02015 	stw	r11,128(sp)
 8019004:	88c0210c 	andi	r3,r17,132
 8019008:	d8c02515 	stw	r3,148(sp)
 801900c:	1800bb1e 	bne	r3,zero,80192fc <___svfiprintf_internal_r+0x810>
 8019010:	da802117 	ldw	r10,132(sp)
 8019014:	dac02017 	ldw	r11,128(sp)
 8019018:	52edc83a 	sub	r22,r10,r11
 801901c:	0580b70e 	bge	zero,r22,80192fc <___svfiprintf_internal_r+0x810>
 8019020:	02400404 	movi	r9,16
 8019024:	d8c01c17 	ldw	r3,112(sp)
 8019028:	d8801b17 	ldw	r2,108(sp)
 801902c:	4d82a70e 	bge	r9,r22,8019acc <___svfiprintf_internal_r+0xfe0>
 8019030:	014200f4 	movhi	r5,2051
 8019034:	296c2704 	addi	r5,r5,-20324
 8019038:	d9402815 	stw	r5,160(sp)
 801903c:	05c001c4 	movi	r23,7
 8019040:	00000306 	br	8019050 <___svfiprintf_internal_r+0x564>
 8019044:	b5bffc04 	addi	r22,r22,-16
 8019048:	42000204 	addi	r8,r8,8
 801904c:	4d80150e 	bge	r9,r22,80190a4 <___svfiprintf_internal_r+0x5b8>
 8019050:	028200f4 	movhi	r10,2051
 8019054:	18c00404 	addi	r3,r3,16
 8019058:	10800044 	addi	r2,r2,1
 801905c:	52ac2704 	addi	r10,r10,-20324
 8019060:	42800015 	stw	r10,0(r8)
 8019064:	42400115 	stw	r9,4(r8)
 8019068:	d8c01c15 	stw	r3,112(sp)
 801906c:	d8801b15 	stw	r2,108(sp)
 8019070:	b8bff40e 	bge	r23,r2,8019044 <__alt_data_end+0xfc019044>
 8019074:	9009883a 	mov	r4,r18
 8019078:	a00b883a 	mov	r5,r20
 801907c:	d9801a04 	addi	r6,sp,104
 8019080:	da402c15 	stw	r9,176(sp)
 8019084:	80189240 	call	8018924 <__ssprint_r>
 8019088:	da402c17 	ldw	r9,176(sp)
 801908c:	1001511e 	bne	r2,zero,80195d4 <___svfiprintf_internal_r+0xae8>
 8019090:	b5bffc04 	addi	r22,r22,-16
 8019094:	d8c01c17 	ldw	r3,112(sp)
 8019098:	d8801b17 	ldw	r2,108(sp)
 801909c:	d811883a 	mov	r8,sp
 80190a0:	4dbfeb16 	blt	r9,r22,8019050 <__alt_data_end+0xfc019050>
 80190a4:	dac02817 	ldw	r11,160(sp)
 80190a8:	b0c7883a 	add	r3,r22,r3
 80190ac:	10800044 	addi	r2,r2,1
 80190b0:	42c00015 	stw	r11,0(r8)
 80190b4:	45800115 	stw	r22,4(r8)
 80190b8:	d8c01c15 	stw	r3,112(sp)
 80190bc:	d8801b15 	stw	r2,108(sp)
 80190c0:	010001c4 	movi	r4,7
 80190c4:	2081dd16 	blt	r4,r2,801983c <___svfiprintf_internal_r+0xd50>
 80190c8:	42000204 	addi	r8,r8,8
 80190cc:	00008d06 	br	8019304 <___svfiprintf_internal_r+0x818>
 80190d0:	00c200f4 	movhi	r3,2051
 80190d4:	18eb0f04 	addi	r3,r3,-21444
 80190d8:	d8c02a15 	stw	r3,168(sp)
 80190dc:	d9801d85 	stb	r6,118(sp)
 80190e0:	88c0080c 	andi	r3,r17,32
 80190e4:	d8802317 	ldw	r2,140(sp)
 80190e8:	18003226 	beq	r3,zero,80191b4 <___svfiprintf_internal_r+0x6c8>
 80190ec:	da802317 	ldw	r10,140(sp)
 80190f0:	12400017 	ldw	r9,0(r2)
 80190f4:	52800204 	addi	r10,r10,8
 80190f8:	da802315 	stw	r10,140(sp)
 80190fc:	12800117 	ldw	r10,4(r2)
 8019100:	8880004c 	andi	r2,r17,1
 8019104:	1001be26 	beq	r2,zero,8019800 <___svfiprintf_internal_r+0xd14>
 8019108:	4a86b03a 	or	r3,r9,r10
 801910c:	1802291e 	bne	r3,zero,80199b4 <___svfiprintf_internal_r+0xec8>
 8019110:	00800084 	movi	r2,2
 8019114:	003f2e06 	br	8018dd0 <__alt_data_end+0xfc018dd0>
 8019118:	a9000007 	ldb	r4,0(r21)
 801911c:	a805883a 	mov	r2,r21
 8019120:	21c22a26 	beq	r4,r7,80199cc <___svfiprintf_internal_r+0xee0>
 8019124:	8c400414 	ori	r17,r17,16
 8019128:	003ebc06 	br	8018c1c <__alt_data_end+0xfc018c1c>
 801912c:	8c401014 	ori	r17,r17,64
 8019130:	a9000007 	ldb	r4,0(r21)
 8019134:	003eb906 	br	8018c1c <__alt_data_end+0xfc018c1c>
 8019138:	d9801d85 	stb	r6,118(sp)
 801913c:	8880080c 	andi	r2,r17,32
 8019140:	1002131e 	bne	r2,zero,8019990 <___svfiprintf_internal_r+0xea4>
 8019144:	8880040c 	andi	r2,r17,16
 8019148:	1002241e 	bne	r2,zero,80199dc <___svfiprintf_internal_r+0xef0>
 801914c:	8c40100c 	andi	r17,r17,64
 8019150:	88022226 	beq	r17,zero,80199dc <___svfiprintf_internal_r+0xef0>
 8019154:	dac02317 	ldw	r11,140(sp)
 8019158:	da802417 	ldw	r10,144(sp)
 801915c:	58800017 	ldw	r2,0(r11)
 8019160:	5ac00104 	addi	r11,r11,4
 8019164:	dac02315 	stw	r11,140(sp)
 8019168:	1280000d 	sth	r10,0(r2)
 801916c:	003e8306 	br	8018b7c <__alt_data_end+0xfc018b7c>
 8019170:	8c400054 	ori	r17,r17,1
 8019174:	a9000007 	ldb	r4,0(r21)
 8019178:	003ea806 	br	8018c1c <__alt_data_end+0xfc018c1c>
 801917c:	30803fcc 	andi	r2,r6,255
 8019180:	1080201c 	xori	r2,r2,128
 8019184:	10bfe004 	addi	r2,r2,-128
 8019188:	1001ff1e 	bne	r2,zero,8019988 <___svfiprintf_internal_r+0xe9c>
 801918c:	01800804 	movi	r6,32
 8019190:	a9000007 	ldb	r4,0(r21)
 8019194:	003ea106 	br	8018c1c <__alt_data_end+0xfc018c1c>
 8019198:	02c200f4 	movhi	r11,2051
 801919c:	5aeb1404 	addi	r11,r11,-21424
 80191a0:	dac02a15 	stw	r11,168(sp)
 80191a4:	d9801d85 	stb	r6,118(sp)
 80191a8:	88c0080c 	andi	r3,r17,32
 80191ac:	d8802317 	ldw	r2,140(sp)
 80191b0:	183fce1e 	bne	r3,zero,80190ec <__alt_data_end+0xfc0190ec>
 80191b4:	88c0040c 	andi	r3,r17,16
 80191b8:	1801ed1e 	bne	r3,zero,8019970 <___svfiprintf_internal_r+0xe84>
 80191bc:	88c0100c 	andi	r3,r17,64
 80191c0:	18021a26 	beq	r3,zero,8019a2c <___svfiprintf_internal_r+0xf40>
 80191c4:	da802317 	ldw	r10,140(sp)
 80191c8:	1240000b 	ldhu	r9,0(r2)
 80191cc:	52800104 	addi	r10,r10,4
 80191d0:	da802315 	stw	r10,140(sp)
 80191d4:	0015883a 	mov	r10,zero
 80191d8:	003fc906 	br	8019100 <__alt_data_end+0xfc019100>
 80191dc:	8c400414 	ori	r17,r17,16
 80191e0:	d9801d85 	stb	r6,118(sp)
 80191e4:	8880080c 	andi	r2,r17,32
 80191e8:	d8c02317 	ldw	r3,140(sp)
 80191ec:	103f671e 	bne	r2,zero,8018f8c <__alt_data_end+0xfc018f8c>
 80191f0:	8880040c 	andi	r2,r17,16
 80191f4:	1001c71e 	bne	r2,zero,8019914 <___svfiprintf_internal_r+0xe28>
 80191f8:	8880100c 	andi	r2,r17,64
 80191fc:	1001c526 	beq	r2,zero,8019914 <___svfiprintf_internal_r+0xe28>
 8019200:	1a40000f 	ldh	r9,0(r3)
 8019204:	dac02317 	ldw	r11,140(sp)
 8019208:	4815d7fa 	srai	r10,r9,31
 801920c:	5ac00104 	addi	r11,r11,4
 8019210:	dac02315 	stw	r11,140(sp)
 8019214:	5005883a 	mov	r2,r10
 8019218:	103f630e 	bge	r2,zero,8018fa8 <__alt_data_end+0xfc018fa8>
 801921c:	0253c83a 	sub	r9,zero,r9
 8019220:	4804c03a 	cmpne	r2,r9,zero
 8019224:	0295c83a 	sub	r10,zero,r10
 8019228:	5095c83a 	sub	r10,r10,r2
 801922c:	02c00b44 	movi	r11,45
 8019230:	dac01d85 	stb	r11,118(sp)
 8019234:	8039883a 	mov	fp,r16
 8019238:	00800044 	movi	r2,1
 801923c:	4a86b03a 	or	r3,r9,r10
 8019240:	003ee606 	br	8018ddc <__alt_data_end+0xfc018ddc>
 8019244:	a815883a 	mov	r10,r21
 8019248:	d8002115 	stw	zero,132(sp)
 801924c:	20bff404 	addi	r2,r4,-48
 8019250:	51000007 	ldb	r4,0(r10)
 8019254:	da802117 	ldw	r10,132(sp)
 8019258:	ad400044 	addi	r21,r21,1
 801925c:	52c002a4 	muli	r11,r10,10
 8019260:	a815883a 	mov	r10,r21
 8019264:	5885883a 	add	r2,r11,r2
 8019268:	d8802115 	stw	r2,132(sp)
 801926c:	20bff404 	addi	r2,r4,-48
 8019270:	28bff72e 	bgeu	r5,r2,8019250 <__alt_data_end+0xfc019250>
 8019274:	20bff804 	addi	r2,r4,-32
 8019278:	18be6b2e 	bgeu	r3,r2,8018c28 <__alt_data_end+0xfc018c28>
 801927c:	d9801d85 	stb	r6,118(sp)
 8019280:	2000ce26 	beq	r4,zero,80195bc <___svfiprintf_internal_r+0xad0>
 8019284:	02800044 	movi	r10,1
 8019288:	dac01004 	addi	r11,sp,64
 801928c:	da802015 	stw	r10,128(sp)
 8019290:	d9001005 	stb	r4,64(sp)
 8019294:	d8001d85 	stb	zero,118(sp)
 8019298:	5039883a 	mov	fp,r10
 801929c:	dac02615 	stw	r11,152(sp)
 80192a0:	003f5106 	br	8018fe8 <__alt_data_end+0xfc018fe8>
 80192a4:	8c402014 	ori	r17,r17,128
 80192a8:	a9000007 	ldb	r4,0(r21)
 80192ac:	003e5b06 	br	8018c1c <__alt_data_end+0xfc018c1c>
 80192b0:	01800ac4 	movi	r6,43
 80192b4:	a9000007 	ldb	r4,0(r21)
 80192b8:	003e5806 	br	8018c1c <__alt_data_end+0xfc018c1c>
 80192bc:	a9000007 	ldb	r4,0(r21)
 80192c0:	aa800044 	addi	r10,r21,1
 80192c4:	22421426 	beq	r4,r9,8019b18 <___svfiprintf_internal_r+0x102c>
 80192c8:	20bff404 	addi	r2,r4,-48
 80192cc:	502b883a 	mov	r21,r10
 80192d0:	0021883a 	mov	r16,zero
 80192d4:	28be5236 	bltu	r5,r2,8018c20 <__alt_data_end+0xfc018c20>
 80192d8:	a9000007 	ldb	r4,0(r21)
 80192dc:	840002a4 	muli	r16,r16,10
 80192e0:	ad400044 	addi	r21,r21,1
 80192e4:	1421883a 	add	r16,r2,r16
 80192e8:	20bff404 	addi	r2,r4,-48
 80192ec:	28bffa2e 	bgeu	r5,r2,80192d8 <__alt_data_end+0xfc0192d8>
 80192f0:	803e4b0e 	bge	r16,zero,8018c20 <__alt_data_end+0xfc018c20>
 80192f4:	043fffc4 	movi	r16,-1
 80192f8:	003e4906 	br	8018c20 <__alt_data_end+0xfc018c20>
 80192fc:	d8c01c17 	ldw	r3,112(sp)
 8019300:	d8801b17 	ldw	r2,108(sp)
 8019304:	d9001d87 	ldb	r4,118(sp)
 8019308:	20000b26 	beq	r4,zero,8019338 <___svfiprintf_internal_r+0x84c>
 801930c:	d9001d84 	addi	r4,sp,118
 8019310:	18c00044 	addi	r3,r3,1
 8019314:	10800044 	addi	r2,r2,1
 8019318:	41000015 	stw	r4,0(r8)
 801931c:	01000044 	movi	r4,1
 8019320:	41000115 	stw	r4,4(r8)
 8019324:	d8c01c15 	stw	r3,112(sp)
 8019328:	d8801b15 	stw	r2,108(sp)
 801932c:	010001c4 	movi	r4,7
 8019330:	20811e16 	blt	r4,r2,80197ac <___svfiprintf_internal_r+0xcc0>
 8019334:	42000204 	addi	r8,r8,8
 8019338:	da802217 	ldw	r10,136(sp)
 801933c:	50000b26 	beq	r10,zero,801936c <___svfiprintf_internal_r+0x880>
 8019340:	d9001d04 	addi	r4,sp,116
 8019344:	18c00084 	addi	r3,r3,2
 8019348:	10800044 	addi	r2,r2,1
 801934c:	41000015 	stw	r4,0(r8)
 8019350:	01000084 	movi	r4,2
 8019354:	41000115 	stw	r4,4(r8)
 8019358:	d8c01c15 	stw	r3,112(sp)
 801935c:	d8801b15 	stw	r2,108(sp)
 8019360:	010001c4 	movi	r4,7
 8019364:	20811a16 	blt	r4,r2,80197d0 <___svfiprintf_internal_r+0xce4>
 8019368:	42000204 	addi	r8,r8,8
 801936c:	dac02517 	ldw	r11,148(sp)
 8019370:	01002004 	movi	r4,128
 8019374:	5900a826 	beq	r11,r4,8019618 <___svfiprintf_internal_r+0xb2c>
 8019378:	8721c83a 	sub	r16,r16,fp
 801937c:	0400260e 	bge	zero,r16,8019418 <___svfiprintf_internal_r+0x92c>
 8019380:	01c00404 	movi	r7,16
 8019384:	3c01a50e 	bge	r7,r16,8019a1c <___svfiprintf_internal_r+0xf30>
 8019388:	010200f4 	movhi	r4,2051
 801938c:	212c2304 	addi	r4,r4,-20340
 8019390:	d9002215 	stw	r4,136(sp)
 8019394:	382f883a 	mov	r23,r7
 8019398:	058001c4 	movi	r22,7
 801939c:	00000306 	br	80193ac <___svfiprintf_internal_r+0x8c0>
 80193a0:	843ffc04 	addi	r16,r16,-16
 80193a4:	42000204 	addi	r8,r8,8
 80193a8:	bc00110e 	bge	r23,r16,80193f0 <___svfiprintf_internal_r+0x904>
 80193ac:	18c00404 	addi	r3,r3,16
 80193b0:	10800044 	addi	r2,r2,1
 80193b4:	44c00015 	stw	r19,0(r8)
 80193b8:	45c00115 	stw	r23,4(r8)
 80193bc:	d8c01c15 	stw	r3,112(sp)
 80193c0:	d8801b15 	stw	r2,108(sp)
 80193c4:	b0bff60e 	bge	r22,r2,80193a0 <__alt_data_end+0xfc0193a0>
 80193c8:	9009883a 	mov	r4,r18
 80193cc:	a00b883a 	mov	r5,r20
 80193d0:	d9801a04 	addi	r6,sp,104
 80193d4:	80189240 	call	8018924 <__ssprint_r>
 80193d8:	10007e1e 	bne	r2,zero,80195d4 <___svfiprintf_internal_r+0xae8>
 80193dc:	843ffc04 	addi	r16,r16,-16
 80193e0:	d8c01c17 	ldw	r3,112(sp)
 80193e4:	d8801b17 	ldw	r2,108(sp)
 80193e8:	d811883a 	mov	r8,sp
 80193ec:	bc3fef16 	blt	r23,r16,80193ac <__alt_data_end+0xfc0193ac>
 80193f0:	da802217 	ldw	r10,136(sp)
 80193f4:	1c07883a 	add	r3,r3,r16
 80193f8:	10800044 	addi	r2,r2,1
 80193fc:	42800015 	stw	r10,0(r8)
 8019400:	44000115 	stw	r16,4(r8)
 8019404:	d8c01c15 	stw	r3,112(sp)
 8019408:	d8801b15 	stw	r2,108(sp)
 801940c:	010001c4 	movi	r4,7
 8019410:	2080ce16 	blt	r4,r2,801974c <___svfiprintf_internal_r+0xc60>
 8019414:	42000204 	addi	r8,r8,8
 8019418:	dac02617 	ldw	r11,152(sp)
 801941c:	e0c7883a 	add	r3,fp,r3
 8019420:	10800044 	addi	r2,r2,1
 8019424:	42c00015 	stw	r11,0(r8)
 8019428:	47000115 	stw	fp,4(r8)
 801942c:	d8c01c15 	stw	r3,112(sp)
 8019430:	d8801b15 	stw	r2,108(sp)
 8019434:	010001c4 	movi	r4,7
 8019438:	2080a316 	blt	r4,r2,80196c8 <___svfiprintf_internal_r+0xbdc>
 801943c:	42000204 	addi	r8,r8,8
 8019440:	8c40010c 	andi	r17,r17,4
 8019444:	88002b26 	beq	r17,zero,80194f4 <___svfiprintf_internal_r+0xa08>
 8019448:	da802117 	ldw	r10,132(sp)
 801944c:	dac02017 	ldw	r11,128(sp)
 8019450:	52e1c83a 	sub	r16,r10,r11
 8019454:	0400270e 	bge	zero,r16,80194f4 <___svfiprintf_internal_r+0xa08>
 8019458:	04400404 	movi	r17,16
 801945c:	d8801b17 	ldw	r2,108(sp)
 8019460:	8c019e0e 	bge	r17,r16,8019adc <___svfiprintf_internal_r+0xff0>
 8019464:	014200f4 	movhi	r5,2051
 8019468:	296c2704 	addi	r5,r5,-20324
 801946c:	d9402815 	stw	r5,160(sp)
 8019470:	070001c4 	movi	fp,7
 8019474:	00000306 	br	8019484 <___svfiprintf_internal_r+0x998>
 8019478:	843ffc04 	addi	r16,r16,-16
 801947c:	42000204 	addi	r8,r8,8
 8019480:	8c00130e 	bge	r17,r16,80194d0 <___svfiprintf_internal_r+0x9e4>
 8019484:	028200f4 	movhi	r10,2051
 8019488:	18c00404 	addi	r3,r3,16
 801948c:	10800044 	addi	r2,r2,1
 8019490:	52ac2704 	addi	r10,r10,-20324
 8019494:	42800015 	stw	r10,0(r8)
 8019498:	44400115 	stw	r17,4(r8)
 801949c:	d8c01c15 	stw	r3,112(sp)
 80194a0:	d8801b15 	stw	r2,108(sp)
 80194a4:	e0bff40e 	bge	fp,r2,8019478 <__alt_data_end+0xfc019478>
 80194a8:	9009883a 	mov	r4,r18
 80194ac:	a00b883a 	mov	r5,r20
 80194b0:	d9801a04 	addi	r6,sp,104
 80194b4:	80189240 	call	8018924 <__ssprint_r>
 80194b8:	1000461e 	bne	r2,zero,80195d4 <___svfiprintf_internal_r+0xae8>
 80194bc:	843ffc04 	addi	r16,r16,-16
 80194c0:	d8c01c17 	ldw	r3,112(sp)
 80194c4:	d8801b17 	ldw	r2,108(sp)
 80194c8:	d811883a 	mov	r8,sp
 80194cc:	8c3fed16 	blt	r17,r16,8019484 <__alt_data_end+0xfc019484>
 80194d0:	dac02817 	ldw	r11,160(sp)
 80194d4:	1c07883a 	add	r3,r3,r16
 80194d8:	10800044 	addi	r2,r2,1
 80194dc:	42c00015 	stw	r11,0(r8)
 80194e0:	44000115 	stw	r16,4(r8)
 80194e4:	d8c01c15 	stw	r3,112(sp)
 80194e8:	d8801b15 	stw	r2,108(sp)
 80194ec:	010001c4 	movi	r4,7
 80194f0:	2080fe16 	blt	r4,r2,80198ec <___svfiprintf_internal_r+0xe00>
 80194f4:	dd802017 	ldw	r22,128(sp)
 80194f8:	da802117 	ldw	r10,132(sp)
 80194fc:	b280010e 	bge	r22,r10,8019504 <___svfiprintf_internal_r+0xa18>
 8019500:	502d883a 	mov	r22,r10
 8019504:	dac02417 	ldw	r11,144(sp)
 8019508:	5d97883a 	add	r11,r11,r22
 801950c:	dac02415 	stw	r11,144(sp)
 8019510:	1800751e 	bne	r3,zero,80196e8 <___svfiprintf_internal_r+0xbfc>
 8019514:	a8800007 	ldb	r2,0(r21)
 8019518:	d8001b15 	stw	zero,108(sp)
 801951c:	d811883a 	mov	r8,sp
 8019520:	103d981e 	bne	r2,zero,8018b84 <__alt_data_end+0xfc018b84>
 8019524:	a82d883a 	mov	r22,r21
 8019528:	003daf06 	br	8018be8 <__alt_data_end+0xfc018be8>
 801952c:	10803fcc 	andi	r2,r2,255
 8019530:	00c00044 	movi	r3,1
 8019534:	10fe311e 	bne	r2,r3,8018dfc <__alt_data_end+0xfc018dfc>
 8019538:	5000e126 	beq	r10,zero,80198c0 <___svfiprintf_internal_r+0xdd4>
 801953c:	dc402015 	stw	r17,128(sp)
 8019540:	dc002215 	stw	r16,136(sp)
 8019544:	dd801a04 	addi	r22,sp,104
 8019548:	402f883a 	mov	r23,r8
 801954c:	5839883a 	mov	fp,r11
 8019550:	4821883a 	mov	r16,r9
 8019554:	5023883a 	mov	r17,r10
 8019558:	8009883a 	mov	r4,r16
 801955c:	880b883a 	mov	r5,r17
 8019560:	01800284 	movi	r6,10
 8019564:	000f883a 	mov	r7,zero
 8019568:	801caf40 	call	801caf4 <__umoddi3>
 801956c:	10800c04 	addi	r2,r2,48
 8019570:	b5bfffc4 	addi	r22,r22,-1
 8019574:	8009883a 	mov	r4,r16
 8019578:	880b883a 	mov	r5,r17
 801957c:	01800284 	movi	r6,10
 8019580:	000f883a 	mov	r7,zero
 8019584:	b0800005 	stb	r2,0(r22)
 8019588:	801c5340 	call	801c534 <__udivdi3>
 801958c:	1021883a 	mov	r16,r2
 8019590:	10c4b03a 	or	r2,r2,r3
 8019594:	1823883a 	mov	r17,r3
 8019598:	103fef1e 	bne	r2,zero,8019558 <__alt_data_end+0xfc019558>
 801959c:	da801e17 	ldw	r10,120(sp)
 80195a0:	e017883a 	mov	r11,fp
 80195a4:	b811883a 	mov	r8,r23
 80195a8:	dc402017 	ldw	r17,128(sp)
 80195ac:	dc002217 	ldw	r16,136(sp)
 80195b0:	dd802615 	stw	r22,152(sp)
 80195b4:	55b9c83a 	sub	fp,r10,r22
 80195b8:	003e2206 	br	8018e44 <__alt_data_end+0xfc018e44>
 80195bc:	d8801c17 	ldw	r2,112(sp)
 80195c0:	10000426 	beq	r2,zero,80195d4 <___svfiprintf_internal_r+0xae8>
 80195c4:	d9002917 	ldw	r4,164(sp)
 80195c8:	d9402717 	ldw	r5,156(sp)
 80195cc:	d9801a04 	addi	r6,sp,104
 80195d0:	80189240 	call	8018924 <__ssprint_r>
 80195d4:	da802717 	ldw	r10,156(sp)
 80195d8:	5080030b 	ldhu	r2,12(r10)
 80195dc:	1080100c 	andi	r2,r2,64
 80195e0:	1000511e 	bne	r2,zero,8019728 <___svfiprintf_internal_r+0xc3c>
 80195e4:	d8802417 	ldw	r2,144(sp)
 80195e8:	dfc03617 	ldw	ra,216(sp)
 80195ec:	df003517 	ldw	fp,212(sp)
 80195f0:	ddc03417 	ldw	r23,208(sp)
 80195f4:	dd803317 	ldw	r22,204(sp)
 80195f8:	dd403217 	ldw	r21,200(sp)
 80195fc:	dd003117 	ldw	r20,196(sp)
 8019600:	dcc03017 	ldw	r19,192(sp)
 8019604:	dc802f17 	ldw	r18,188(sp)
 8019608:	dc402e17 	ldw	r17,184(sp)
 801960c:	dc002d17 	ldw	r16,180(sp)
 8019610:	dec03704 	addi	sp,sp,220
 8019614:	f800283a 	ret
 8019618:	da802117 	ldw	r10,132(sp)
 801961c:	dac02017 	ldw	r11,128(sp)
 8019620:	52edc83a 	sub	r22,r10,r11
 8019624:	05bf540e 	bge	zero,r22,8019378 <__alt_data_end+0xfc019378>
 8019628:	02400404 	movi	r9,16
 801962c:	4d812f0e 	bge	r9,r22,8019aec <___svfiprintf_internal_r+0x1000>
 8019630:	014200f4 	movhi	r5,2051
 8019634:	296c2304 	addi	r5,r5,-20340
 8019638:	d9402215 	stw	r5,136(sp)
 801963c:	05c001c4 	movi	r23,7
 8019640:	00000306 	br	8019650 <___svfiprintf_internal_r+0xb64>
 8019644:	b5bffc04 	addi	r22,r22,-16
 8019648:	42000204 	addi	r8,r8,8
 801964c:	4d80130e 	bge	r9,r22,801969c <___svfiprintf_internal_r+0xbb0>
 8019650:	18c00404 	addi	r3,r3,16
 8019654:	10800044 	addi	r2,r2,1
 8019658:	44c00015 	stw	r19,0(r8)
 801965c:	42400115 	stw	r9,4(r8)
 8019660:	d8c01c15 	stw	r3,112(sp)
 8019664:	d8801b15 	stw	r2,108(sp)
 8019668:	b8bff60e 	bge	r23,r2,8019644 <__alt_data_end+0xfc019644>
 801966c:	9009883a 	mov	r4,r18
 8019670:	a00b883a 	mov	r5,r20
 8019674:	d9801a04 	addi	r6,sp,104
 8019678:	da402c15 	stw	r9,176(sp)
 801967c:	80189240 	call	8018924 <__ssprint_r>
 8019680:	da402c17 	ldw	r9,176(sp)
 8019684:	103fd31e 	bne	r2,zero,80195d4 <__alt_data_end+0xfc0195d4>
 8019688:	b5bffc04 	addi	r22,r22,-16
 801968c:	d8c01c17 	ldw	r3,112(sp)
 8019690:	d8801b17 	ldw	r2,108(sp)
 8019694:	d811883a 	mov	r8,sp
 8019698:	4dbfed16 	blt	r9,r22,8019650 <__alt_data_end+0xfc019650>
 801969c:	da802217 	ldw	r10,136(sp)
 80196a0:	1d87883a 	add	r3,r3,r22
 80196a4:	10800044 	addi	r2,r2,1
 80196a8:	42800015 	stw	r10,0(r8)
 80196ac:	45800115 	stw	r22,4(r8)
 80196b0:	d8c01c15 	stw	r3,112(sp)
 80196b4:	d8801b15 	stw	r2,108(sp)
 80196b8:	010001c4 	movi	r4,7
 80196bc:	2080ce16 	blt	r4,r2,80199f8 <___svfiprintf_internal_r+0xf0c>
 80196c0:	42000204 	addi	r8,r8,8
 80196c4:	003f2c06 	br	8019378 <__alt_data_end+0xfc019378>
 80196c8:	9009883a 	mov	r4,r18
 80196cc:	a00b883a 	mov	r5,r20
 80196d0:	d9801a04 	addi	r6,sp,104
 80196d4:	80189240 	call	8018924 <__ssprint_r>
 80196d8:	103fbe1e 	bne	r2,zero,80195d4 <__alt_data_end+0xfc0195d4>
 80196dc:	d8c01c17 	ldw	r3,112(sp)
 80196e0:	d811883a 	mov	r8,sp
 80196e4:	003f5606 	br	8019440 <__alt_data_end+0xfc019440>
 80196e8:	9009883a 	mov	r4,r18
 80196ec:	a00b883a 	mov	r5,r20
 80196f0:	d9801a04 	addi	r6,sp,104
 80196f4:	80189240 	call	8018924 <__ssprint_r>
 80196f8:	103f8626 	beq	r2,zero,8019514 <__alt_data_end+0xfc019514>
 80196fc:	003fb506 	br	80195d4 <__alt_data_end+0xfc0195d4>
 8019700:	10803fcc 	andi	r2,r2,255
 8019704:	10003b1e 	bne	r2,zero,80197f4 <___svfiprintf_internal_r+0xd08>
 8019708:	8880004c 	andi	r2,r17,1
 801970c:	10007e26 	beq	r2,zero,8019908 <___svfiprintf_internal_r+0xe1c>
 8019710:	00800c04 	movi	r2,48
 8019714:	d8c019c4 	addi	r3,sp,103
 8019718:	d88019c5 	stb	r2,103(sp)
 801971c:	df002b17 	ldw	fp,172(sp)
 8019720:	d8c02615 	stw	r3,152(sp)
 8019724:	003dc706 	br	8018e44 <__alt_data_end+0xfc018e44>
 8019728:	00bfffc4 	movi	r2,-1
 801972c:	003fae06 	br	80195e8 <__alt_data_end+0xfc0195e8>
 8019730:	9009883a 	mov	r4,r18
 8019734:	a00b883a 	mov	r5,r20
 8019738:	d9801a04 	addi	r6,sp,104
 801973c:	80189240 	call	8018924 <__ssprint_r>
 8019740:	103fa41e 	bne	r2,zero,80195d4 <__alt_data_end+0xfc0195d4>
 8019744:	d811883a 	mov	r8,sp
 8019748:	003d2406 	br	8018bdc <__alt_data_end+0xfc018bdc>
 801974c:	9009883a 	mov	r4,r18
 8019750:	a00b883a 	mov	r5,r20
 8019754:	d9801a04 	addi	r6,sp,104
 8019758:	80189240 	call	8018924 <__ssprint_r>
 801975c:	103f9d1e 	bne	r2,zero,80195d4 <__alt_data_end+0xfc0195d4>
 8019760:	d8c01c17 	ldw	r3,112(sp)
 8019764:	d8801b17 	ldw	r2,108(sp)
 8019768:	d811883a 	mov	r8,sp
 801976c:	003f2a06 	br	8019418 <__alt_data_end+0xfc019418>
 8019770:	d9402a17 	ldw	r5,168(sp)
 8019774:	d8c01a04 	addi	r3,sp,104
 8019778:	488003cc 	andi	r2,r9,15
 801977c:	5008973a 	slli	r4,r10,28
 8019780:	2885883a 	add	r2,r5,r2
 8019784:	4812d13a 	srli	r9,r9,4
 8019788:	10800003 	ldbu	r2,0(r2)
 801978c:	5014d13a 	srli	r10,r10,4
 8019790:	18ffffc4 	addi	r3,r3,-1
 8019794:	2252b03a 	or	r9,r4,r9
 8019798:	18800005 	stb	r2,0(r3)
 801979c:	4a84b03a 	or	r2,r9,r10
 80197a0:	103ff51e 	bne	r2,zero,8019778 <__alt_data_end+0xfc019778>
 80197a4:	d8c02615 	stw	r3,152(sp)
 80197a8:	003da406 	br	8018e3c <__alt_data_end+0xfc018e3c>
 80197ac:	9009883a 	mov	r4,r18
 80197b0:	a00b883a 	mov	r5,r20
 80197b4:	d9801a04 	addi	r6,sp,104
 80197b8:	80189240 	call	8018924 <__ssprint_r>
 80197bc:	103f851e 	bne	r2,zero,80195d4 <__alt_data_end+0xfc0195d4>
 80197c0:	d8c01c17 	ldw	r3,112(sp)
 80197c4:	d8801b17 	ldw	r2,108(sp)
 80197c8:	d811883a 	mov	r8,sp
 80197cc:	003eda06 	br	8019338 <__alt_data_end+0xfc019338>
 80197d0:	9009883a 	mov	r4,r18
 80197d4:	a00b883a 	mov	r5,r20
 80197d8:	d9801a04 	addi	r6,sp,104
 80197dc:	80189240 	call	8018924 <__ssprint_r>
 80197e0:	103f7c1e 	bne	r2,zero,80195d4 <__alt_data_end+0xfc0195d4>
 80197e4:	d8c01c17 	ldw	r3,112(sp)
 80197e8:	d8801b17 	ldw	r2,108(sp)
 80197ec:	d811883a 	mov	r8,sp
 80197f0:	003ede06 	br	801936c <__alt_data_end+0xfc01936c>
 80197f4:	da801a04 	addi	r10,sp,104
 80197f8:	da802615 	stw	r10,152(sp)
 80197fc:	003d9106 	br	8018e44 <__alt_data_end+0xfc018e44>
 8019800:	00800084 	movi	r2,2
 8019804:	4a86b03a 	or	r3,r9,r10
 8019808:	003d7106 	br	8018dd0 <__alt_data_end+0xfc018dd0>
 801980c:	88c0040c 	andi	r3,r17,16
 8019810:	18004f1e 	bne	r3,zero,8019950 <___svfiprintf_internal_r+0xe64>
 8019814:	88c0100c 	andi	r3,r17,64
 8019818:	18004d26 	beq	r3,zero,8019950 <___svfiprintf_internal_r+0xe64>
 801981c:	dac02317 	ldw	r11,140(sp)
 8019820:	1240000b 	ldhu	r9,0(r2)
 8019824:	0015883a 	mov	r10,zero
 8019828:	5ac00104 	addi	r11,r11,4
 801982c:	dac02315 	stw	r11,140(sp)
 8019830:	00800044 	movi	r2,1
 8019834:	4807883a 	mov	r3,r9
 8019838:	003d6506 	br	8018dd0 <__alt_data_end+0xfc018dd0>
 801983c:	9009883a 	mov	r4,r18
 8019840:	a00b883a 	mov	r5,r20
 8019844:	d9801a04 	addi	r6,sp,104
 8019848:	80189240 	call	8018924 <__ssprint_r>
 801984c:	103f611e 	bne	r2,zero,80195d4 <__alt_data_end+0xfc0195d4>
 8019850:	d8c01c17 	ldw	r3,112(sp)
 8019854:	d8801b17 	ldw	r2,108(sp)
 8019858:	d811883a 	mov	r8,sp
 801985c:	003ea906 	br	8019304 <__alt_data_end+0xfc019304>
 8019860:	88c0040c 	andi	r3,r17,16
 8019864:	1800321e 	bne	r3,zero,8019930 <___svfiprintf_internal_r+0xe44>
 8019868:	88c0100c 	andi	r3,r17,64
 801986c:	18003026 	beq	r3,zero,8019930 <___svfiprintf_internal_r+0xe44>
 8019870:	dac02317 	ldw	r11,140(sp)
 8019874:	1240000b 	ldhu	r9,0(r2)
 8019878:	0015883a 	mov	r10,zero
 801987c:	5ac00104 	addi	r11,r11,4
 8019880:	dac02315 	stw	r11,140(sp)
 8019884:	0005883a 	mov	r2,zero
 8019888:	4807883a 	mov	r3,r9
 801988c:	003d5006 	br	8018dd0 <__alt_data_end+0xfc018dd0>
 8019890:	10803fcc 	andi	r2,r2,255
 8019894:	1080201c 	xori	r2,r2,128
 8019898:	10bfe004 	addi	r2,r2,-128
 801989c:	01000c04 	movi	r4,48
 80198a0:	11006826 	beq	r2,r4,8019a44 <___svfiprintf_internal_r+0xf58>
 80198a4:	da802617 	ldw	r10,152(sp)
 80198a8:	d8801e17 	ldw	r2,120(sp)
 80198ac:	193fffc5 	stb	r4,-1(r3)
 80198b0:	52bfffc4 	addi	r10,r10,-1
 80198b4:	da802615 	stw	r10,152(sp)
 80198b8:	12b9c83a 	sub	fp,r2,r10
 80198bc:	003d6106 	br	8018e44 <__alt_data_end+0xfc018e44>
 80198c0:	00800244 	movi	r2,9
 80198c4:	127f1d36 	bltu	r2,r9,801953c <__alt_data_end+0xfc01953c>
 80198c8:	4a400c04 	addi	r9,r9,48
 80198cc:	d8c019c4 	addi	r3,sp,103
 80198d0:	da4019c5 	stb	r9,103(sp)
 80198d4:	df002b17 	ldw	fp,172(sp)
 80198d8:	d8c02615 	stw	r3,152(sp)
 80198dc:	003d5906 	br	8018e44 <__alt_data_end+0xfc018e44>
 80198e0:	d8802315 	stw	r2,140(sp)
 80198e4:	a9000007 	ldb	r4,0(r21)
 80198e8:	003ccc06 	br	8018c1c <__alt_data_end+0xfc018c1c>
 80198ec:	9009883a 	mov	r4,r18
 80198f0:	a00b883a 	mov	r5,r20
 80198f4:	d9801a04 	addi	r6,sp,104
 80198f8:	80189240 	call	8018924 <__ssprint_r>
 80198fc:	103f351e 	bne	r2,zero,80195d4 <__alt_data_end+0xfc0195d4>
 8019900:	d8c01c17 	ldw	r3,112(sp)
 8019904:	003efb06 	br	80194f4 <__alt_data_end+0xfc0194f4>
 8019908:	d8c01a04 	addi	r3,sp,104
 801990c:	d8c02615 	stw	r3,152(sp)
 8019910:	003d4c06 	br	8018e44 <__alt_data_end+0xfc018e44>
 8019914:	da802317 	ldw	r10,140(sp)
 8019918:	1a400017 	ldw	r9,0(r3)
 801991c:	52800104 	addi	r10,r10,4
 8019920:	da802315 	stw	r10,140(sp)
 8019924:	4815d7fa 	srai	r10,r9,31
 8019928:	5005883a 	mov	r2,r10
 801992c:	003d9d06 	br	8018fa4 <__alt_data_end+0xfc018fa4>
 8019930:	da802317 	ldw	r10,140(sp)
 8019934:	12400017 	ldw	r9,0(r2)
 8019938:	0005883a 	mov	r2,zero
 801993c:	52800104 	addi	r10,r10,4
 8019940:	da802315 	stw	r10,140(sp)
 8019944:	4807883a 	mov	r3,r9
 8019948:	0015883a 	mov	r10,zero
 801994c:	003d2006 	br	8018dd0 <__alt_data_end+0xfc018dd0>
 8019950:	da802317 	ldw	r10,140(sp)
 8019954:	12400017 	ldw	r9,0(r2)
 8019958:	00800044 	movi	r2,1
 801995c:	52800104 	addi	r10,r10,4
 8019960:	da802315 	stw	r10,140(sp)
 8019964:	4807883a 	mov	r3,r9
 8019968:	0015883a 	mov	r10,zero
 801996c:	003d1806 	br	8018dd0 <__alt_data_end+0xfc018dd0>
 8019970:	dac02317 	ldw	r11,140(sp)
 8019974:	12400017 	ldw	r9,0(r2)
 8019978:	0015883a 	mov	r10,zero
 801997c:	5ac00104 	addi	r11,r11,4
 8019980:	dac02315 	stw	r11,140(sp)
 8019984:	003dde06 	br	8019100 <__alt_data_end+0xfc019100>
 8019988:	a9000007 	ldb	r4,0(r21)
 801998c:	003ca306 	br	8018c1c <__alt_data_end+0xfc018c1c>
 8019990:	dac02317 	ldw	r11,140(sp)
 8019994:	da802417 	ldw	r10,144(sp)
 8019998:	58800017 	ldw	r2,0(r11)
 801999c:	5007d7fa 	srai	r3,r10,31
 80199a0:	5ac00104 	addi	r11,r11,4
 80199a4:	dac02315 	stw	r11,140(sp)
 80199a8:	12800015 	stw	r10,0(r2)
 80199ac:	10c00115 	stw	r3,4(r2)
 80199b0:	003c7206 	br	8018b7c <__alt_data_end+0xfc018b7c>
 80199b4:	00800c04 	movi	r2,48
 80199b8:	d8801d05 	stb	r2,116(sp)
 80199bc:	d9001d45 	stb	r4,117(sp)
 80199c0:	8c400094 	ori	r17,r17,2
 80199c4:	00800084 	movi	r2,2
 80199c8:	003d0106 	br	8018dd0 <__alt_data_end+0xfc018dd0>
 80199cc:	ad400044 	addi	r21,r21,1
 80199d0:	8c400814 	ori	r17,r17,32
 80199d4:	11000047 	ldb	r4,1(r2)
 80199d8:	003c9006 	br	8018c1c <__alt_data_end+0xfc018c1c>
 80199dc:	dac02317 	ldw	r11,140(sp)
 80199e0:	da802417 	ldw	r10,144(sp)
 80199e4:	58800017 	ldw	r2,0(r11)
 80199e8:	5ac00104 	addi	r11,r11,4
 80199ec:	dac02315 	stw	r11,140(sp)
 80199f0:	12800015 	stw	r10,0(r2)
 80199f4:	003c6106 	br	8018b7c <__alt_data_end+0xfc018b7c>
 80199f8:	9009883a 	mov	r4,r18
 80199fc:	a00b883a 	mov	r5,r20
 8019a00:	d9801a04 	addi	r6,sp,104
 8019a04:	80189240 	call	8018924 <__ssprint_r>
 8019a08:	103ef21e 	bne	r2,zero,80195d4 <__alt_data_end+0xfc0195d4>
 8019a0c:	d8c01c17 	ldw	r3,112(sp)
 8019a10:	d8801b17 	ldw	r2,108(sp)
 8019a14:	d811883a 	mov	r8,sp
 8019a18:	003e5706 	br	8019378 <__alt_data_end+0xfc019378>
 8019a1c:	02c200f4 	movhi	r11,2051
 8019a20:	5aec2304 	addi	r11,r11,-20340
 8019a24:	dac02215 	stw	r11,136(sp)
 8019a28:	003e7106 	br	80193f0 <__alt_data_end+0xfc0193f0>
 8019a2c:	dac02317 	ldw	r11,140(sp)
 8019a30:	12400017 	ldw	r9,0(r2)
 8019a34:	0015883a 	mov	r10,zero
 8019a38:	5ac00104 	addi	r11,r11,4
 8019a3c:	dac02315 	stw	r11,140(sp)
 8019a40:	003daf06 	br	8019100 <__alt_data_end+0xfc019100>
 8019a44:	da801e17 	ldw	r10,120(sp)
 8019a48:	d8c02617 	ldw	r3,152(sp)
 8019a4c:	50f9c83a 	sub	fp,r10,r3
 8019a50:	003cfc06 	br	8018e44 <__alt_data_end+0xfc018e44>
 8019a54:	da002c15 	stw	r8,176(sp)
 8019a58:	800e3c40 	call	800e3c4 <strlen>
 8019a5c:	1039883a 	mov	fp,r2
 8019a60:	dac01d83 	ldbu	r11,118(sp)
 8019a64:	ddc02315 	stw	r23,140(sp)
 8019a68:	0021883a 	mov	r16,zero
 8019a6c:	da002c17 	ldw	r8,176(sp)
 8019a70:	003cf406 	br	8018e44 <__alt_data_end+0xfc018e44>
 8019a74:	04001004 	movi	r16,64
 8019a78:	800b883a 	mov	r5,r16
 8019a7c:	800d7040 	call	800d704 <_malloc_r>
 8019a80:	da802717 	ldw	r10,156(sp)
 8019a84:	50800015 	stw	r2,0(r10)
 8019a88:	50800415 	stw	r2,16(r10)
 8019a8c:	10002c26 	beq	r2,zero,8019b40 <___svfiprintf_internal_r+0x1054>
 8019a90:	da802717 	ldw	r10,156(sp)
 8019a94:	54000515 	stw	r16,20(r10)
 8019a98:	003c2806 	br	8018b3c <__alt_data_end+0xfc018b3c>
 8019a9c:	00800184 	movi	r2,6
 8019aa0:	1400012e 	bgeu	r2,r16,8019aa8 <___svfiprintf_internal_r+0xfbc>
 8019aa4:	1021883a 	mov	r16,r2
 8019aa8:	8039883a 	mov	fp,r16
 8019aac:	802d883a 	mov	r22,r16
 8019ab0:	80001716 	blt	r16,zero,8019b10 <___svfiprintf_internal_r+0x1024>
 8019ab4:	008200f4 	movhi	r2,2051
 8019ab8:	10ab1904 	addi	r2,r2,-21404
 8019abc:	dd802015 	stw	r22,128(sp)
 8019ac0:	ddc02315 	stw	r23,140(sp)
 8019ac4:	d8802615 	stw	r2,152(sp)
 8019ac8:	003d4706 	br	8018fe8 <__alt_data_end+0xfc018fe8>
 8019acc:	010200f4 	movhi	r4,2051
 8019ad0:	212c2704 	addi	r4,r4,-20324
 8019ad4:	d9002815 	stw	r4,160(sp)
 8019ad8:	003d7206 	br	80190a4 <__alt_data_end+0xfc0190a4>
 8019adc:	010200f4 	movhi	r4,2051
 8019ae0:	212c2704 	addi	r4,r4,-20324
 8019ae4:	d9002815 	stw	r4,160(sp)
 8019ae8:	003e7906 	br	80194d0 <__alt_data_end+0xfc0194d0>
 8019aec:	010200f4 	movhi	r4,2051
 8019af0:	212c2304 	addi	r4,r4,-20340
 8019af4:	d9002215 	stw	r4,136(sp)
 8019af8:	003ee806 	br	801969c <__alt_data_end+0xfc01969c>
 8019afc:	8039883a 	mov	fp,r16
 8019b00:	dac01d83 	ldbu	r11,118(sp)
 8019b04:	ddc02315 	stw	r23,140(sp)
 8019b08:	0021883a 	mov	r16,zero
 8019b0c:	003ccd06 	br	8018e44 <__alt_data_end+0xfc018e44>
 8019b10:	002d883a 	mov	r22,zero
 8019b14:	003fe706 	br	8019ab4 <__alt_data_end+0xfc019ab4>
 8019b18:	dac02317 	ldw	r11,140(sp)
 8019b1c:	a805883a 	mov	r2,r21
 8019b20:	502b883a 	mov	r21,r10
 8019b24:	5c000017 	ldw	r16,0(r11)
 8019b28:	59000104 	addi	r4,r11,4
 8019b2c:	d9002315 	stw	r4,140(sp)
 8019b30:	803fa80e 	bge	r16,zero,80199d4 <__alt_data_end+0xfc0199d4>
 8019b34:	043fffc4 	movi	r16,-1
 8019b38:	11000047 	ldb	r4,1(r2)
 8019b3c:	003c3706 	br	8018c1c <__alt_data_end+0xfc018c1c>
 8019b40:	dac02917 	ldw	r11,164(sp)
 8019b44:	00800304 	movi	r2,12
 8019b48:	58800015 	stw	r2,0(r11)
 8019b4c:	00bfffc4 	movi	r2,-1
 8019b50:	003ea506 	br	80195e8 <__alt_data_end+0xfc0195e8>

08019b54 <__sprint_r.part.0>:
 8019b54:	28801917 	ldw	r2,100(r5)
 8019b58:	defff604 	addi	sp,sp,-40
 8019b5c:	dd400515 	stw	r21,20(sp)
 8019b60:	dcc00315 	stw	r19,12(sp)
 8019b64:	dfc00915 	stw	ra,36(sp)
 8019b68:	df000815 	stw	fp,32(sp)
 8019b6c:	ddc00715 	stw	r23,28(sp)
 8019b70:	dd800615 	stw	r22,24(sp)
 8019b74:	dd000415 	stw	r20,16(sp)
 8019b78:	dc800215 	stw	r18,8(sp)
 8019b7c:	dc400115 	stw	r17,4(sp)
 8019b80:	dc000015 	stw	r16,0(sp)
 8019b84:	1088000c 	andi	r2,r2,8192
 8019b88:	2827883a 	mov	r19,r5
 8019b8c:	302b883a 	mov	r21,r6
 8019b90:	10002d26 	beq	r2,zero,8019c48 <__sprint_r.part.0+0xf4>
 8019b94:	30800217 	ldw	r2,8(r6)
 8019b98:	35800017 	ldw	r22,0(r6)
 8019b9c:	10002826 	beq	r2,zero,8019c40 <__sprint_r.part.0+0xec>
 8019ba0:	2029883a 	mov	r20,r4
 8019ba4:	b5c00104 	addi	r23,r22,4
 8019ba8:	04bfffc4 	movi	r18,-1
 8019bac:	bc400017 	ldw	r17,0(r23)
 8019bb0:	b4000017 	ldw	r16,0(r22)
 8019bb4:	0039883a 	mov	fp,zero
 8019bb8:	8822d0ba 	srli	r17,r17,2
 8019bbc:	04400316 	blt	zero,r17,8019bcc <__sprint_r.part.0+0x78>
 8019bc0:	00001706 	br	8019c20 <__sprint_r.part.0+0xcc>
 8019bc4:	84000104 	addi	r16,r16,4
 8019bc8:	8f001526 	beq	r17,fp,8019c20 <__sprint_r.part.0+0xcc>
 8019bcc:	81400017 	ldw	r5,0(r16)
 8019bd0:	a009883a 	mov	r4,r20
 8019bd4:	980d883a 	mov	r6,r19
 8019bd8:	801b3e00 	call	801b3e0 <_fputwc_r>
 8019bdc:	e7000044 	addi	fp,fp,1
 8019be0:	14bff81e 	bne	r2,r18,8019bc4 <__alt_data_end+0xfc019bc4>
 8019be4:	9005883a 	mov	r2,r18
 8019be8:	a8000215 	stw	zero,8(r21)
 8019bec:	a8000115 	stw	zero,4(r21)
 8019bf0:	dfc00917 	ldw	ra,36(sp)
 8019bf4:	df000817 	ldw	fp,32(sp)
 8019bf8:	ddc00717 	ldw	r23,28(sp)
 8019bfc:	dd800617 	ldw	r22,24(sp)
 8019c00:	dd400517 	ldw	r21,20(sp)
 8019c04:	dd000417 	ldw	r20,16(sp)
 8019c08:	dcc00317 	ldw	r19,12(sp)
 8019c0c:	dc800217 	ldw	r18,8(sp)
 8019c10:	dc400117 	ldw	r17,4(sp)
 8019c14:	dc000017 	ldw	r16,0(sp)
 8019c18:	dec00a04 	addi	sp,sp,40
 8019c1c:	f800283a 	ret
 8019c20:	a8c00217 	ldw	r3,8(r21)
 8019c24:	8c63883a 	add	r17,r17,r17
 8019c28:	8c63883a 	add	r17,r17,r17
 8019c2c:	1c45c83a 	sub	r2,r3,r17
 8019c30:	a8800215 	stw	r2,8(r21)
 8019c34:	b5800204 	addi	r22,r22,8
 8019c38:	bdc00204 	addi	r23,r23,8
 8019c3c:	103fdb1e 	bne	r2,zero,8019bac <__alt_data_end+0xfc019bac>
 8019c40:	0005883a 	mov	r2,zero
 8019c44:	003fe806 	br	8019be8 <__alt_data_end+0xfc019be8>
 8019c48:	801b6140 	call	801b614 <__sfvwrite_r>
 8019c4c:	003fe606 	br	8019be8 <__alt_data_end+0xfc019be8>

08019c50 <__sprint_r>:
 8019c50:	30c00217 	ldw	r3,8(r6)
 8019c54:	18000126 	beq	r3,zero,8019c5c <__sprint_r+0xc>
 8019c58:	8019b541 	jmpi	8019b54 <__sprint_r.part.0>
 8019c5c:	30000115 	stw	zero,4(r6)
 8019c60:	0005883a 	mov	r2,zero
 8019c64:	f800283a 	ret

08019c68 <___vfiprintf_internal_r>:
 8019c68:	defeca04 	addi	sp,sp,-1240
 8019c6c:	dd813215 	stw	r22,1224(sp)
 8019c70:	dd013015 	stw	r20,1216(sp)
 8019c74:	dfc13515 	stw	ra,1236(sp)
 8019c78:	df013415 	stw	fp,1232(sp)
 8019c7c:	ddc13315 	stw	r23,1228(sp)
 8019c80:	dd413115 	stw	r21,1220(sp)
 8019c84:	dcc12f15 	stw	r19,1212(sp)
 8019c88:	dc812e15 	stw	r18,1208(sp)
 8019c8c:	dc412d15 	stw	r17,1204(sp)
 8019c90:	dc012c15 	stw	r16,1200(sp)
 8019c94:	d9012015 	stw	r4,1152(sp)
 8019c98:	d9c12115 	stw	r7,1156(sp)
 8019c9c:	2829883a 	mov	r20,r5
 8019ca0:	302d883a 	mov	r22,r6
 8019ca4:	20000226 	beq	r4,zero,8019cb0 <___vfiprintf_internal_r+0x48>
 8019ca8:	20800e17 	ldw	r2,56(r4)
 8019cac:	1001d326 	beq	r2,zero,801a3fc <___vfiprintf_internal_r+0x794>
 8019cb0:	a0c0030b 	ldhu	r3,12(r20)
 8019cb4:	1908000c 	andi	r4,r3,8192
 8019cb8:	1805883a 	mov	r2,r3
 8019cbc:	2000071e 	bne	r4,zero,8019cdc <___vfiprintf_internal_r+0x74>
 8019cc0:	a1001917 	ldw	r4,100(r20)
 8019cc4:	18880014 	ori	r2,r3,8192
 8019cc8:	00f7ffc4 	movi	r3,-8193
 8019ccc:	20c8703a 	and	r4,r4,r3
 8019cd0:	a080030d 	sth	r2,12(r20)
 8019cd4:	1007883a 	mov	r3,r2
 8019cd8:	a1001915 	stw	r4,100(r20)
 8019cdc:	1100020c 	andi	r4,r2,8
 8019ce0:	20018926 	beq	r4,zero,801a308 <___vfiprintf_internal_r+0x6a0>
 8019ce4:	a1000417 	ldw	r4,16(r20)
 8019ce8:	20018726 	beq	r4,zero,801a308 <___vfiprintf_internal_r+0x6a0>
 8019cec:	1080068c 	andi	r2,r2,26
 8019cf0:	01000284 	movi	r4,10
 8019cf4:	11018d26 	beq	r2,r4,801a32c <___vfiprintf_internal_r+0x6c4>
 8019cf8:	da810a04 	addi	r10,sp,1064
 8019cfc:	dac109c4 	addi	r11,sp,1063
 8019d00:	070200f4 	movhi	fp,2051
 8019d04:	05c200f4 	movhi	r23,2051
 8019d08:	da811e15 	stw	r10,1144(sp)
 8019d0c:	52d5c83a 	sub	r10,r10,r11
 8019d10:	e72c2f04 	addi	fp,fp,-20292
 8019d14:	bdec2b04 	addi	r23,r23,-20308
 8019d18:	dac11f15 	stw	r11,1148(sp)
 8019d1c:	dec11a15 	stw	sp,1128(sp)
 8019d20:	d8011c15 	stw	zero,1136(sp)
 8019d24:	d8011b15 	stw	zero,1132(sp)
 8019d28:	d8012615 	stw	zero,1176(sp)
 8019d2c:	d8012215 	stw	zero,1160(sp)
 8019d30:	da812715 	stw	r10,1180(sp)
 8019d34:	d811883a 	mov	r8,sp
 8019d38:	b021883a 	mov	r16,r22
 8019d3c:	80800007 	ldb	r2,0(r16)
 8019d40:	10039c26 	beq	r2,zero,801abb4 <___vfiprintf_internal_r+0xf4c>
 8019d44:	01000944 	movi	r4,37
 8019d48:	11039a26 	beq	r2,r4,801abb4 <___vfiprintf_internal_r+0xf4c>
 8019d4c:	8005883a 	mov	r2,r16
 8019d50:	00000106 	br	8019d58 <___vfiprintf_internal_r+0xf0>
 8019d54:	19000326 	beq	r3,r4,8019d64 <___vfiprintf_internal_r+0xfc>
 8019d58:	10800044 	addi	r2,r2,1
 8019d5c:	10c00007 	ldb	r3,0(r2)
 8019d60:	183ffc1e 	bne	r3,zero,8019d54 <__alt_data_end+0xfc019d54>
 8019d64:	1425c83a 	sub	r18,r2,r16
 8019d68:	1023883a 	mov	r17,r2
 8019d6c:	90001026 	beq	r18,zero,8019db0 <___vfiprintf_internal_r+0x148>
 8019d70:	d8c11c17 	ldw	r3,1136(sp)
 8019d74:	d8811b17 	ldw	r2,1132(sp)
 8019d78:	44000015 	stw	r16,0(r8)
 8019d7c:	90c7883a 	add	r3,r18,r3
 8019d80:	10800044 	addi	r2,r2,1
 8019d84:	44800115 	stw	r18,4(r8)
 8019d88:	d8c11c15 	stw	r3,1136(sp)
 8019d8c:	d8811b15 	stw	r2,1132(sp)
 8019d90:	010001c4 	movi	r4,7
 8019d94:	2080750e 	bge	r4,r2,8019f6c <___vfiprintf_internal_r+0x304>
 8019d98:	18039d1e 	bne	r3,zero,801ac10 <___vfiprintf_internal_r+0xfa8>
 8019d9c:	dac12217 	ldw	r11,1160(sp)
 8019da0:	d8011b15 	stw	zero,1132(sp)
 8019da4:	d811883a 	mov	r8,sp
 8019da8:	5c97883a 	add	r11,r11,r18
 8019dac:	dac12215 	stw	r11,1160(sp)
 8019db0:	88800007 	ldb	r2,0(r17)
 8019db4:	1002e026 	beq	r2,zero,801a938 <___vfiprintf_internal_r+0xcd0>
 8019db8:	88c00047 	ldb	r3,1(r17)
 8019dbc:	8c000044 	addi	r16,r17,1
 8019dc0:	d8011d85 	stb	zero,1142(sp)
 8019dc4:	000d883a 	mov	r6,zero
 8019dc8:	027fffc4 	movi	r9,-1
 8019dcc:	0027883a 	mov	r19,zero
 8019dd0:	002b883a 	mov	r21,zero
 8019dd4:	01001604 	movi	r4,88
 8019dd8:	01400244 	movi	r5,9
 8019ddc:	03000a84 	movi	r12,42
 8019de0:	01c01b04 	movi	r7,108
 8019de4:	84000044 	addi	r16,r16,1
 8019de8:	18bff804 	addi	r2,r3,-32
 8019dec:	20825f36 	bltu	r4,r2,801a76c <___vfiprintf_internal_r+0xb04>
 8019df0:	100490ba 	slli	r2,r2,2
 8019df4:	028200b4 	movhi	r10,2050
 8019df8:	52a78204 	addi	r10,r10,-25080
 8019dfc:	1285883a 	add	r2,r2,r10
 8019e00:	10800017 	ldw	r2,0(r2)
 8019e04:	1000683a 	jmp	r2
 8019e08:	0801a5dc 	xori	zero,at,1687
 8019e0c:	0801a76c 	andhi	zero,at,1693
 8019e10:	0801a76c 	andhi	zero,at,1693
 8019e14:	0801a760 	cmpeqi	zero,at,1693
 8019e18:	0801a76c 	andhi	zero,at,1693
 8019e1c:	0801a76c 	andhi	zero,at,1693
 8019e20:	0801a76c 	andhi	zero,at,1693
 8019e24:	0801a76c 	andhi	zero,at,1693
 8019e28:	0801a76c 	andhi	zero,at,1693
 8019e2c:	0801a76c 	andhi	zero,at,1693
 8019e30:	0801a738 	rdprs	zero,at,1692
 8019e34:	0801a754 	ori	zero,at,1693
 8019e38:	0801a76c 	andhi	zero,at,1693
 8019e3c:	0801a40c 	andi	zero,at,1680
 8019e40:	0801a56c 	andhi	zero,at,1685
 8019e44:	0801a76c 	andhi	zero,at,1693
 8019e48:	0801a4f0 	cmpltui	zero,at,1683
 8019e4c:	0801a4fc 	xorhi	zero,at,1683
 8019e50:	0801a4fc 	xorhi	zero,at,1683
 8019e54:	0801a4fc 	xorhi	zero,at,1683
 8019e58:	0801a4fc 	xorhi	zero,at,1683
 8019e5c:	0801a4fc 	xorhi	zero,at,1683
 8019e60:	0801a4fc 	xorhi	zero,at,1683
 8019e64:	0801a4fc 	xorhi	zero,at,1683
 8019e68:	0801a4fc 	xorhi	zero,at,1683
 8019e6c:	0801a4fc 	xorhi	zero,at,1683
 8019e70:	0801a76c 	andhi	zero,at,1693
 8019e74:	0801a76c 	andhi	zero,at,1693
 8019e78:	0801a76c 	andhi	zero,at,1693
 8019e7c:	0801a76c 	andhi	zero,at,1693
 8019e80:	0801a76c 	andhi	zero,at,1693
 8019e84:	0801a76c 	andhi	zero,at,1693
 8019e88:	0801a76c 	andhi	zero,at,1693
 8019e8c:	0801a76c 	andhi	zero,at,1693
 8019e90:	0801a76c 	andhi	zero,at,1693
 8019e94:	0801a76c 	andhi	zero,at,1693
 8019e98:	0801a528 	cmpgeui	zero,at,1684
 8019e9c:	0801a76c 	andhi	zero,at,1693
 8019ea0:	0801a76c 	andhi	zero,at,1693
 8019ea4:	0801a76c 	andhi	zero,at,1693
 8019ea8:	0801a76c 	andhi	zero,at,1693
 8019eac:	0801a76c 	andhi	zero,at,1693
 8019eb0:	0801a76c 	andhi	zero,at,1693
 8019eb4:	0801a76c 	andhi	zero,at,1693
 8019eb8:	0801a76c 	andhi	zero,at,1693
 8019ebc:	0801a76c 	andhi	zero,at,1693
 8019ec0:	0801a76c 	andhi	zero,at,1693
 8019ec4:	08019fbc 	xorhi	zero,at,1662
 8019ec8:	0801a76c 	andhi	zero,at,1693
 8019ecc:	0801a76c 	andhi	zero,at,1693
 8019ed0:	0801a76c 	andhi	zero,at,1693
 8019ed4:	0801a76c 	andhi	zero,at,1693
 8019ed8:	0801a76c 	andhi	zero,at,1693
 8019edc:	08019f80 	call	8019f8 <__alt_mem_sdram-0x77fe608>
 8019ee0:	0801a76c 	andhi	zero,at,1693
 8019ee4:	0801a76c 	andhi	zero,at,1693
 8019ee8:	0801a468 	cmpgeui	zero,at,1681
 8019eec:	0801a76c 	andhi	zero,at,1693
 8019ef0:	0801a76c 	andhi	zero,at,1693
 8019ef4:	0801a76c 	andhi	zero,at,1693
 8019ef8:	0801a76c 	andhi	zero,at,1693
 8019efc:	0801a76c 	andhi	zero,at,1693
 8019f00:	0801a76c 	andhi	zero,at,1693
 8019f04:	0801a76c 	andhi	zero,at,1693
 8019f08:	0801a76c 	andhi	zero,at,1693
 8019f0c:	0801a76c 	andhi	zero,at,1693
 8019f10:	0801a76c 	andhi	zero,at,1693
 8019f14:	0801a4c0 	call	801a4c <__alt_mem_sdram-0x77fe5b4>
 8019f18:	0801a658 	cmpnei	zero,at,1689
 8019f1c:	0801a76c 	andhi	zero,at,1693
 8019f20:	0801a76c 	andhi	zero,at,1693
 8019f24:	0801a76c 	andhi	zero,at,1693
 8019f28:	0801a6e0 	cmpeqi	zero,at,1691
 8019f2c:	0801a658 	cmpnei	zero,at,1689
 8019f30:	0801a76c 	andhi	zero,at,1693
 8019f34:	0801a76c 	andhi	zero,at,1693
 8019f38:	0801a6ec 	andhi	zero,at,1691
 8019f3c:	0801a76c 	andhi	zero,at,1693
 8019f40:	0801a5ac 	andhi	zero,at,1686
 8019f44:	08019fc0 	call	8019fc <__alt_mem_sdram-0x77fe604>
 8019f48:	0801a694 	ori	zero,at,1690
 8019f4c:	0801a6d4 	ori	zero,at,1691
 8019f50:	0801a76c 	andhi	zero,at,1693
 8019f54:	0801a5f8 	rdprs	zero,at,1687
 8019f58:	0801a76c 	andhi	zero,at,1693
 8019f5c:	08019f84 	addi	zero,at,1662
 8019f60:	0801a76c 	andhi	zero,at,1693
 8019f64:	0801a76c 	andhi	zero,at,1693
 8019f68:	0801a6fc 	xorhi	zero,at,1691
 8019f6c:	42000204 	addi	r8,r8,8
 8019f70:	dac12217 	ldw	r11,1160(sp)
 8019f74:	5c97883a 	add	r11,r11,r18
 8019f78:	dac12215 	stw	r11,1160(sp)
 8019f7c:	003f8c06 	br	8019db0 <__alt_data_end+0xfc019db0>
 8019f80:	ad400414 	ori	r21,r21,16
 8019f84:	a880080c 	andi	r2,r21,32
 8019f88:	10012f1e 	bne	r2,zero,801a448 <___vfiprintf_internal_r+0x7e0>
 8019f8c:	a880040c 	andi	r2,r21,16
 8019f90:	1001ff1e 	bne	r2,zero,801a790 <___vfiprintf_internal_r+0xb28>
 8019f94:	a880100c 	andi	r2,r21,64
 8019f98:	1001fd26 	beq	r2,zero,801a790 <___vfiprintf_internal_r+0xb28>
 8019f9c:	da812117 	ldw	r10,1156(sp)
 8019fa0:	002d883a 	mov	r22,zero
 8019fa4:	00800044 	movi	r2,1
 8019fa8:	5480000b 	ldhu	r18,0(r10)
 8019fac:	52800104 	addi	r10,r10,4
 8019fb0:	da812115 	stw	r10,1156(sp)
 8019fb4:	9009883a 	mov	r4,r18
 8019fb8:	00000a06 	br	8019fe4 <___vfiprintf_internal_r+0x37c>
 8019fbc:	ad400414 	ori	r21,r21,16
 8019fc0:	a880080c 	andi	r2,r21,32
 8019fc4:	10011426 	beq	r2,zero,801a418 <___vfiprintf_internal_r+0x7b0>
 8019fc8:	da812117 	ldw	r10,1156(sp)
 8019fcc:	0005883a 	mov	r2,zero
 8019fd0:	54800017 	ldw	r18,0(r10)
 8019fd4:	55800117 	ldw	r22,4(r10)
 8019fd8:	52800204 	addi	r10,r10,8
 8019fdc:	da812115 	stw	r10,1156(sp)
 8019fe0:	9588b03a 	or	r4,r18,r22
 8019fe4:	d8011d85 	stb	zero,1142(sp)
 8019fe8:	4823883a 	mov	r17,r9
 8019fec:	0019883a 	mov	r12,zero
 8019ff0:	48000216 	blt	r9,zero,8019ffc <___vfiprintf_internal_r+0x394>
 8019ff4:	00ffdfc4 	movi	r3,-129
 8019ff8:	a8ea703a 	and	r21,r21,r3
 8019ffc:	2002221e 	bne	r4,zero,801a888 <___vfiprintf_internal_r+0xc20>
 801a000:	4802c726 	beq	r9,zero,801ab20 <___vfiprintf_internal_r+0xeb8>
 801a004:	10803fcc 	andi	r2,r2,255
 801a008:	00c00044 	movi	r3,1
 801a00c:	10c24426 	beq	r2,r3,801a920 <___vfiprintf_internal_r+0xcb8>
 801a010:	00c00084 	movi	r3,2
 801a014:	10c2cc26 	beq	r2,r3,801ab48 <___vfiprintf_internal_r+0xee0>
 801a018:	d8c10a04 	addi	r3,sp,1064
 801a01c:	9008d0fa 	srli	r4,r18,3
 801a020:	b00a977a 	slli	r5,r22,29
 801a024:	b02cd0fa 	srli	r22,r22,3
 801a028:	948001cc 	andi	r18,r18,7
 801a02c:	90800c04 	addi	r2,r18,48
 801a030:	18ffffc4 	addi	r3,r3,-1
 801a034:	2924b03a 	or	r18,r5,r4
 801a038:	18800005 	stb	r2,0(r3)
 801a03c:	9588b03a 	or	r4,r18,r22
 801a040:	203ff61e 	bne	r4,zero,801a01c <__alt_data_end+0xfc01a01c>
 801a044:	a900004c 	andi	r4,r21,1
 801a048:	d8c12415 	stw	r3,1168(sp)
 801a04c:	2002fb1e 	bne	r4,zero,801ac3c <___vfiprintf_internal_r+0xfd4>
 801a050:	da811e17 	ldw	r10,1144(sp)
 801a054:	50e3c83a 	sub	r17,r10,r3
 801a058:	8825883a 	mov	r18,r17
 801a05c:	8a40010e 	bge	r17,r9,801a064 <___vfiprintf_internal_r+0x3fc>
 801a060:	4825883a 	mov	r18,r9
 801a064:	63003fcc 	andi	r12,r12,255
 801a068:	6300201c 	xori	r12,r12,128
 801a06c:	633fe004 	addi	r12,r12,-128
 801a070:	60000126 	beq	r12,zero,801a078 <___vfiprintf_internal_r+0x410>
 801a074:	94800044 	addi	r18,r18,1
 801a078:	ab80008c 	andi	r14,r21,2
 801a07c:	70000126 	beq	r14,zero,801a084 <___vfiprintf_internal_r+0x41c>
 801a080:	94800084 	addi	r18,r18,2
 801a084:	ad80210c 	andi	r22,r21,132
 801a088:	b001df1e 	bne	r22,zero,801a808 <___vfiprintf_internal_r+0xba0>
 801a08c:	9c8fc83a 	sub	r7,r19,r18
 801a090:	01c1dd0e 	bge	zero,r7,801a808 <___vfiprintf_internal_r+0xba0>
 801a094:	03000404 	movi	r12,16
 801a098:	d8811c17 	ldw	r2,1136(sp)
 801a09c:	61c3920e 	bge	r12,r7,801aee8 <___vfiprintf_internal_r+0x1280>
 801a0a0:	028200f4 	movhi	r10,2051
 801a0a4:	52ac2f04 	addi	r10,r10,-20292
 801a0a8:	dc012915 	stw	r16,1188(sp)
 801a0ac:	d9811b17 	ldw	r6,1132(sp)
 801a0b0:	da812315 	stw	r10,1164(sp)
 801a0b4:	00c001c4 	movi	r3,7
 801a0b8:	da412515 	stw	r9,1172(sp)
 801a0bc:	db812815 	stw	r14,1184(sp)
 801a0c0:	3821883a 	mov	r16,r7
 801a0c4:	00000506 	br	801a0dc <___vfiprintf_internal_r+0x474>
 801a0c8:	31400084 	addi	r5,r6,2
 801a0cc:	42000204 	addi	r8,r8,8
 801a0d0:	200d883a 	mov	r6,r4
 801a0d4:	843ffc04 	addi	r16,r16,-16
 801a0d8:	64000d0e 	bge	r12,r16,801a110 <___vfiprintf_internal_r+0x4a8>
 801a0dc:	10800404 	addi	r2,r2,16
 801a0e0:	31000044 	addi	r4,r6,1
 801a0e4:	47000015 	stw	fp,0(r8)
 801a0e8:	43000115 	stw	r12,4(r8)
 801a0ec:	d8811c15 	stw	r2,1136(sp)
 801a0f0:	d9011b15 	stw	r4,1132(sp)
 801a0f4:	193ff40e 	bge	r3,r4,801a0c8 <__alt_data_end+0xfc01a0c8>
 801a0f8:	1001b51e 	bne	r2,zero,801a7d0 <___vfiprintf_internal_r+0xb68>
 801a0fc:	843ffc04 	addi	r16,r16,-16
 801a100:	000d883a 	mov	r6,zero
 801a104:	01400044 	movi	r5,1
 801a108:	d811883a 	mov	r8,sp
 801a10c:	643ff316 	blt	r12,r16,801a0dc <__alt_data_end+0xfc01a0dc>
 801a110:	800f883a 	mov	r7,r16
 801a114:	da412517 	ldw	r9,1172(sp)
 801a118:	db812817 	ldw	r14,1184(sp)
 801a11c:	dc012917 	ldw	r16,1188(sp)
 801a120:	dac12317 	ldw	r11,1164(sp)
 801a124:	3887883a 	add	r3,r7,r2
 801a128:	41c00115 	stw	r7,4(r8)
 801a12c:	42c00015 	stw	r11,0(r8)
 801a130:	d8c11c15 	stw	r3,1136(sp)
 801a134:	d9411b15 	stw	r5,1132(sp)
 801a138:	008001c4 	movi	r2,7
 801a13c:	11429316 	blt	r2,r5,801ab8c <___vfiprintf_internal_r+0xf24>
 801a140:	d9011d87 	ldb	r4,1142(sp)
 801a144:	42000204 	addi	r8,r8,8
 801a148:	28800044 	addi	r2,r5,1
 801a14c:	2001b31e 	bne	r4,zero,801a81c <___vfiprintf_internal_r+0xbb4>
 801a150:	70000c26 	beq	r14,zero,801a184 <___vfiprintf_internal_r+0x51c>
 801a154:	d9011d04 	addi	r4,sp,1140
 801a158:	18c00084 	addi	r3,r3,2
 801a15c:	41000015 	stw	r4,0(r8)
 801a160:	01000084 	movi	r4,2
 801a164:	41000115 	stw	r4,4(r8)
 801a168:	d8c11c15 	stw	r3,1136(sp)
 801a16c:	d8811b15 	stw	r2,1132(sp)
 801a170:	010001c4 	movi	r4,7
 801a174:	20826516 	blt	r4,r2,801ab0c <___vfiprintf_internal_r+0xea4>
 801a178:	100b883a 	mov	r5,r2
 801a17c:	42000204 	addi	r8,r8,8
 801a180:	10800044 	addi	r2,r2,1
 801a184:	01002004 	movi	r4,128
 801a188:	b1021a26 	beq	r22,r4,801a9f4 <___vfiprintf_internal_r+0xd8c>
 801a18c:	4c6dc83a 	sub	r22,r9,r17
 801a190:	0580230e 	bge	zero,r22,801a220 <___vfiprintf_internal_r+0x5b8>
 801a194:	01c00404 	movi	r7,16
 801a198:	3d83300e 	bge	r7,r22,801ae5c <___vfiprintf_internal_r+0x11f4>
 801a19c:	008200f4 	movhi	r2,2051
 801a1a0:	10ac2b04 	addi	r2,r2,-20308
 801a1a4:	d8812315 	stw	r2,1164(sp)
 801a1a8:	030001c4 	movi	r12,7
 801a1ac:	00000506 	br	801a1c4 <___vfiprintf_internal_r+0x55c>
 801a1b0:	28800084 	addi	r2,r5,2
 801a1b4:	42000204 	addi	r8,r8,8
 801a1b8:	200b883a 	mov	r5,r4
 801a1bc:	b5bffc04 	addi	r22,r22,-16
 801a1c0:	3d800d0e 	bge	r7,r22,801a1f8 <___vfiprintf_internal_r+0x590>
 801a1c4:	18c00404 	addi	r3,r3,16
 801a1c8:	29000044 	addi	r4,r5,1
 801a1cc:	45c00015 	stw	r23,0(r8)
 801a1d0:	41c00115 	stw	r7,4(r8)
 801a1d4:	d8c11c15 	stw	r3,1136(sp)
 801a1d8:	d9011b15 	stw	r4,1132(sp)
 801a1dc:	613ff40e 	bge	r12,r4,801a1b0 <__alt_data_end+0xfc01a1b0>
 801a1e0:	18019b1e 	bne	r3,zero,801a850 <___vfiprintf_internal_r+0xbe8>
 801a1e4:	b5bffc04 	addi	r22,r22,-16
 801a1e8:	000b883a 	mov	r5,zero
 801a1ec:	00800044 	movi	r2,1
 801a1f0:	d811883a 	mov	r8,sp
 801a1f4:	3dbff316 	blt	r7,r22,801a1c4 <__alt_data_end+0xfc01a1c4>
 801a1f8:	da812317 	ldw	r10,1164(sp)
 801a1fc:	1d87883a 	add	r3,r3,r22
 801a200:	45800115 	stw	r22,4(r8)
 801a204:	42800015 	stw	r10,0(r8)
 801a208:	d8c11c15 	stw	r3,1136(sp)
 801a20c:	d8811b15 	stw	r2,1132(sp)
 801a210:	010001c4 	movi	r4,7
 801a214:	2081dd16 	blt	r4,r2,801a98c <___vfiprintf_internal_r+0xd24>
 801a218:	42000204 	addi	r8,r8,8
 801a21c:	10800044 	addi	r2,r2,1
 801a220:	da812417 	ldw	r10,1168(sp)
 801a224:	1c47883a 	add	r3,r3,r17
 801a228:	44400115 	stw	r17,4(r8)
 801a22c:	42800015 	stw	r10,0(r8)
 801a230:	d8c11c15 	stw	r3,1136(sp)
 801a234:	d8811b15 	stw	r2,1132(sp)
 801a238:	010001c4 	movi	r4,7
 801a23c:	2081dc0e 	bge	r4,r2,801a9b0 <___vfiprintf_internal_r+0xd48>
 801a240:	1802611e 	bne	r3,zero,801abc8 <___vfiprintf_internal_r+0xf60>
 801a244:	d8011b15 	stw	zero,1132(sp)
 801a248:	aac0010c 	andi	r11,r21,4
 801a24c:	58002726 	beq	r11,zero,801a2ec <___vfiprintf_internal_r+0x684>
 801a250:	9ca3c83a 	sub	r17,r19,r18
 801a254:	d811883a 	mov	r8,sp
 801a258:	0443510e 	bge	zero,r17,801afa0 <___vfiprintf_internal_r+0x1338>
 801a25c:	01c00404 	movi	r7,16
 801a260:	3c43320e 	bge	r7,r17,801af2c <___vfiprintf_internal_r+0x12c4>
 801a264:	008200f4 	movhi	r2,2051
 801a268:	10ac2f04 	addi	r2,r2,-20292
 801a26c:	d9011b17 	ldw	r4,1132(sp)
 801a270:	d8812315 	stw	r2,1164(sp)
 801a274:	382d883a 	mov	r22,r7
 801a278:	054001c4 	movi	r21,7
 801a27c:	00000506 	br	801a294 <___vfiprintf_internal_r+0x62c>
 801a280:	21400084 	addi	r5,r4,2
 801a284:	42000204 	addi	r8,r8,8
 801a288:	1009883a 	mov	r4,r2
 801a28c:	8c7ffc04 	addi	r17,r17,-16
 801a290:	b4400d0e 	bge	r22,r17,801a2c8 <___vfiprintf_internal_r+0x660>
 801a294:	18c00404 	addi	r3,r3,16
 801a298:	20800044 	addi	r2,r4,1
 801a29c:	47000015 	stw	fp,0(r8)
 801a2a0:	45800115 	stw	r22,4(r8)
 801a2a4:	d8c11c15 	stw	r3,1136(sp)
 801a2a8:	d8811b15 	stw	r2,1132(sp)
 801a2ac:	a8bff40e 	bge	r21,r2,801a280 <__alt_data_end+0xfc01a280>
 801a2b0:	1801ac1e 	bne	r3,zero,801a964 <___vfiprintf_internal_r+0xcfc>
 801a2b4:	8c7ffc04 	addi	r17,r17,-16
 801a2b8:	0009883a 	mov	r4,zero
 801a2bc:	01400044 	movi	r5,1
 801a2c0:	d811883a 	mov	r8,sp
 801a2c4:	b47ff316 	blt	r22,r17,801a294 <__alt_data_end+0xfc01a294>
 801a2c8:	da812317 	ldw	r10,1164(sp)
 801a2cc:	1c47883a 	add	r3,r3,r17
 801a2d0:	44400115 	stw	r17,4(r8)
 801a2d4:	42800015 	stw	r10,0(r8)
 801a2d8:	d8c11c15 	stw	r3,1136(sp)
 801a2dc:	d9411b15 	stw	r5,1132(sp)
 801a2e0:	008001c4 	movi	r2,7
 801a2e4:	1141b70e 	bge	r2,r5,801a9c4 <___vfiprintf_internal_r+0xd5c>
 801a2e8:	1802cf1e 	bne	r3,zero,801ae28 <___vfiprintf_internal_r+0x11c0>
 801a2ec:	94c2ca16 	blt	r18,r19,801ae18 <___vfiprintf_internal_r+0x11b0>
 801a2f0:	dac12217 	ldw	r11,1160(sp)
 801a2f4:	5c97883a 	add	r11,r11,r18
 801a2f8:	dac12215 	stw	r11,1160(sp)
 801a2fc:	d8011b15 	stw	zero,1132(sp)
 801a300:	d811883a 	mov	r8,sp
 801a304:	003e8d06 	br	8019d3c <__alt_data_end+0xfc019d3c>
 801a308:	d9012017 	ldw	r4,1152(sp)
 801a30c:	a00b883a 	mov	r5,r20
 801a310:	8013df80 	call	8013df8 <__swsetup_r>
 801a314:	10002c1e 	bne	r2,zero,801a3c8 <___vfiprintf_internal_r+0x760>
 801a318:	a0c0030b 	ldhu	r3,12(r20)
 801a31c:	01000284 	movi	r4,10
 801a320:	1805883a 	mov	r2,r3
 801a324:	1080068c 	andi	r2,r2,26
 801a328:	113e731e 	bne	r2,r4,8019cf8 <__alt_data_end+0xfc019cf8>
 801a32c:	a080038b 	ldhu	r2,14(r20)
 801a330:	113fffcc 	andi	r4,r2,65535
 801a334:	2120001c 	xori	r4,r4,32768
 801a338:	21200004 	addi	r4,r4,-32768
 801a33c:	203e6e16 	blt	r4,zero,8019cf8 <__alt_data_end+0xfc019cf8>
 801a340:	a3001917 	ldw	r12,100(r20)
 801a344:	a2c00717 	ldw	r11,28(r20)
 801a348:	a2800917 	ldw	r10,36(r20)
 801a34c:	d9012017 	ldw	r4,1152(sp)
 801a350:	d9c12117 	ldw	r7,1156(sp)
 801a354:	02410004 	movi	r9,1024
 801a358:	18ffff4c 	andi	r3,r3,65533
 801a35c:	da4b883a 	add	r5,sp,r9
 801a360:	b00d883a 	mov	r6,r22
 801a364:	d8c1030d 	sth	r3,1036(sp)
 801a368:	db011915 	stw	r12,1124(sp)
 801a36c:	d881038d 	sth	r2,1038(sp)
 801a370:	dac10715 	stw	r11,1052(sp)
 801a374:	da810915 	stw	r10,1060(sp)
 801a378:	dec10015 	stw	sp,1024(sp)
 801a37c:	dec10415 	stw	sp,1040(sp)
 801a380:	da410215 	stw	r9,1032(sp)
 801a384:	da410515 	stw	r9,1044(sp)
 801a388:	d8010615 	stw	zero,1048(sp)
 801a38c:	8019c680 	call	8019c68 <___vfiprintf_internal_r>
 801a390:	1021883a 	mov	r16,r2
 801a394:	10000416 	blt	r2,zero,801a3a8 <___vfiprintf_internal_r+0x740>
 801a398:	d9012017 	ldw	r4,1152(sp)
 801a39c:	d9410004 	addi	r5,sp,1024
 801a3a0:	80158500 	call	8015850 <_fflush_r>
 801a3a4:	1002fc1e 	bne	r2,zero,801af98 <___vfiprintf_internal_r+0x1330>
 801a3a8:	d881030b 	ldhu	r2,1036(sp)
 801a3ac:	1080100c 	andi	r2,r2,64
 801a3b0:	10000326 	beq	r2,zero,801a3c0 <___vfiprintf_internal_r+0x758>
 801a3b4:	a080030b 	ldhu	r2,12(r20)
 801a3b8:	10801014 	ori	r2,r2,64
 801a3bc:	a080030d 	sth	r2,12(r20)
 801a3c0:	8005883a 	mov	r2,r16
 801a3c4:	00000106 	br	801a3cc <___vfiprintf_internal_r+0x764>
 801a3c8:	00bfffc4 	movi	r2,-1
 801a3cc:	dfc13517 	ldw	ra,1236(sp)
 801a3d0:	df013417 	ldw	fp,1232(sp)
 801a3d4:	ddc13317 	ldw	r23,1228(sp)
 801a3d8:	dd813217 	ldw	r22,1224(sp)
 801a3dc:	dd413117 	ldw	r21,1220(sp)
 801a3e0:	dd013017 	ldw	r20,1216(sp)
 801a3e4:	dcc12f17 	ldw	r19,1212(sp)
 801a3e8:	dc812e17 	ldw	r18,1208(sp)
 801a3ec:	dc412d17 	ldw	r17,1204(sp)
 801a3f0:	dc012c17 	ldw	r16,1200(sp)
 801a3f4:	dec13604 	addi	sp,sp,1240
 801a3f8:	f800283a 	ret
 801a3fc:	8015df80 	call	8015df8 <__sinit>
 801a400:	003e2b06 	br	8019cb0 <__alt_data_end+0xfc019cb0>
 801a404:	04e7c83a 	sub	r19,zero,r19
 801a408:	d8812115 	stw	r2,1156(sp)
 801a40c:	ad400114 	ori	r21,r21,4
 801a410:	80c00007 	ldb	r3,0(r16)
 801a414:	003e7306 	br	8019de4 <__alt_data_end+0xfc019de4>
 801a418:	a880040c 	andi	r2,r21,16
 801a41c:	1000e41e 	bne	r2,zero,801a7b0 <___vfiprintf_internal_r+0xb48>
 801a420:	a880100c 	andi	r2,r21,64
 801a424:	1000e226 	beq	r2,zero,801a7b0 <___vfiprintf_internal_r+0xb48>
 801a428:	da812117 	ldw	r10,1156(sp)
 801a42c:	002d883a 	mov	r22,zero
 801a430:	0005883a 	mov	r2,zero
 801a434:	5480000b 	ldhu	r18,0(r10)
 801a438:	52800104 	addi	r10,r10,4
 801a43c:	da812115 	stw	r10,1156(sp)
 801a440:	9009883a 	mov	r4,r18
 801a444:	003ee706 	br	8019fe4 <__alt_data_end+0xfc019fe4>
 801a448:	da812117 	ldw	r10,1156(sp)
 801a44c:	00800044 	movi	r2,1
 801a450:	54800017 	ldw	r18,0(r10)
 801a454:	55800117 	ldw	r22,4(r10)
 801a458:	52800204 	addi	r10,r10,8
 801a45c:	da812115 	stw	r10,1156(sp)
 801a460:	9588b03a 	or	r4,r18,r22
 801a464:	003edf06 	br	8019fe4 <__alt_data_end+0xfc019fe4>
 801a468:	02c200f4 	movhi	r11,2051
 801a46c:	5aeb0f04 	addi	r11,r11,-21444
 801a470:	d9811d85 	stb	r6,1142(sp)
 801a474:	dac12615 	stw	r11,1176(sp)
 801a478:	a900080c 	andi	r4,r21,32
 801a47c:	d8812117 	ldw	r2,1156(sp)
 801a480:	2000a526 	beq	r4,zero,801a718 <___vfiprintf_internal_r+0xab0>
 801a484:	da812117 	ldw	r10,1156(sp)
 801a488:	14800017 	ldw	r18,0(r2)
 801a48c:	15800117 	ldw	r22,4(r2)
 801a490:	52800204 	addi	r10,r10,8
 801a494:	da812115 	stw	r10,1156(sp)
 801a498:	a880004c 	andi	r2,r21,1
 801a49c:	1001d926 	beq	r2,zero,801ac04 <___vfiprintf_internal_r+0xf9c>
 801a4a0:	9588b03a 	or	r4,r18,r22
 801a4a4:	20024426 	beq	r4,zero,801adb8 <___vfiprintf_internal_r+0x1150>
 801a4a8:	00800c04 	movi	r2,48
 801a4ac:	d8811d05 	stb	r2,1140(sp)
 801a4b0:	d8c11d45 	stb	r3,1141(sp)
 801a4b4:	ad400094 	ori	r21,r21,2
 801a4b8:	00800084 	movi	r2,2
 801a4bc:	003ec906 	br	8019fe4 <__alt_data_end+0xfc019fe4>
 801a4c0:	da812117 	ldw	r10,1156(sp)
 801a4c4:	04800044 	movi	r18,1
 801a4c8:	dac10004 	addi	r11,sp,1024
 801a4cc:	50800017 	ldw	r2,0(r10)
 801a4d0:	52800104 	addi	r10,r10,4
 801a4d4:	d8011d85 	stb	zero,1142(sp)
 801a4d8:	d8810005 	stb	r2,1024(sp)
 801a4dc:	da812115 	stw	r10,1156(sp)
 801a4e0:	9023883a 	mov	r17,r18
 801a4e4:	dac12415 	stw	r11,1168(sp)
 801a4e8:	0013883a 	mov	r9,zero
 801a4ec:	003ee206 	br	801a078 <__alt_data_end+0xfc01a078>
 801a4f0:	ad402014 	ori	r21,r21,128
 801a4f4:	80c00007 	ldb	r3,0(r16)
 801a4f8:	003e3a06 	br	8019de4 <__alt_data_end+0xfc019de4>
 801a4fc:	8015883a 	mov	r10,r16
 801a500:	0027883a 	mov	r19,zero
 801a504:	18bff404 	addi	r2,r3,-48
 801a508:	50c00007 	ldb	r3,0(r10)
 801a50c:	9cc002a4 	muli	r19,r19,10
 801a510:	84000044 	addi	r16,r16,1
 801a514:	8015883a 	mov	r10,r16
 801a518:	98a7883a 	add	r19,r19,r2
 801a51c:	18bff404 	addi	r2,r3,-48
 801a520:	28bff92e 	bgeu	r5,r2,801a508 <__alt_data_end+0xfc01a508>
 801a524:	003e3006 	br	8019de8 <__alt_data_end+0xfc019de8>
 801a528:	ad400414 	ori	r21,r21,16
 801a52c:	d9811d85 	stb	r6,1142(sp)
 801a530:	a880080c 	andi	r2,r21,32
 801a534:	d8c12117 	ldw	r3,1156(sp)
 801a538:	10004b26 	beq	r2,zero,801a668 <___vfiprintf_internal_r+0xa00>
 801a53c:	da812117 	ldw	r10,1156(sp)
 801a540:	18800117 	ldw	r2,4(r3)
 801a544:	1c800017 	ldw	r18,0(r3)
 801a548:	52800204 	addi	r10,r10,8
 801a54c:	da812115 	stw	r10,1156(sp)
 801a550:	102d883a 	mov	r22,r2
 801a554:	1001f116 	blt	r2,zero,801ad1c <___vfiprintf_internal_r+0x10b4>
 801a558:	db011d83 	ldbu	r12,1142(sp)
 801a55c:	4823883a 	mov	r17,r9
 801a560:	00800044 	movi	r2,1
 801a564:	9588b03a 	or	r4,r18,r22
 801a568:	003ea106 	br	8019ff0 <__alt_data_end+0xfc019ff0>
 801a56c:	80c00007 	ldb	r3,0(r16)
 801a570:	82800044 	addi	r10,r16,1
 801a574:	1b027f26 	beq	r3,r12,801af74 <___vfiprintf_internal_r+0x130c>
 801a578:	18bff404 	addi	r2,r3,-48
 801a57c:	5021883a 	mov	r16,r10
 801a580:	0013883a 	mov	r9,zero
 801a584:	28be1836 	bltu	r5,r2,8019de8 <__alt_data_end+0xfc019de8>
 801a588:	80c00007 	ldb	r3,0(r16)
 801a58c:	4a4002a4 	muli	r9,r9,10
 801a590:	84000044 	addi	r16,r16,1
 801a594:	1253883a 	add	r9,r2,r9
 801a598:	18bff404 	addi	r2,r3,-48
 801a59c:	28bffa2e 	bgeu	r5,r2,801a588 <__alt_data_end+0xfc01a588>
 801a5a0:	483e110e 	bge	r9,zero,8019de8 <__alt_data_end+0xfc019de8>
 801a5a4:	027fffc4 	movi	r9,-1
 801a5a8:	003e0f06 	br	8019de8 <__alt_data_end+0xfc019de8>
 801a5ac:	d9811d85 	stb	r6,1142(sp)
 801a5b0:	a880080c 	andi	r2,r21,32
 801a5b4:	1001ee26 	beq	r2,zero,801ad70 <___vfiprintf_internal_r+0x1108>
 801a5b8:	da812117 	ldw	r10,1156(sp)
 801a5bc:	dac12217 	ldw	r11,1160(sp)
 801a5c0:	50800017 	ldw	r2,0(r10)
 801a5c4:	5807d7fa 	srai	r3,r11,31
 801a5c8:	52800104 	addi	r10,r10,4
 801a5cc:	da812115 	stw	r10,1156(sp)
 801a5d0:	12c00015 	stw	r11,0(r2)
 801a5d4:	10c00115 	stw	r3,4(r2)
 801a5d8:	003dd806 	br	8019d3c <__alt_data_end+0xfc019d3c>
 801a5dc:	30803fcc 	andi	r2,r6,255
 801a5e0:	1080201c 	xori	r2,r2,128
 801a5e4:	10bfe004 	addi	r2,r2,-128
 801a5e8:	1001df1e 	bne	r2,zero,801ad68 <___vfiprintf_internal_r+0x1100>
 801a5ec:	01800804 	movi	r6,32
 801a5f0:	80c00007 	ldb	r3,0(r16)
 801a5f4:	003dfb06 	br	8019de4 <__alt_data_end+0xfc019de4>
 801a5f8:	da812117 	ldw	r10,1156(sp)
 801a5fc:	dac12117 	ldw	r11,1156(sp)
 801a600:	d8011d85 	stb	zero,1142(sp)
 801a604:	52800017 	ldw	r10,0(r10)
 801a608:	5d800104 	addi	r22,r11,4
 801a60c:	da812415 	stw	r10,1168(sp)
 801a610:	50023b26 	beq	r10,zero,801af00 <___vfiprintf_internal_r+0x1298>
 801a614:	d9012417 	ldw	r4,1168(sp)
 801a618:	48021f16 	blt	r9,zero,801ae98 <___vfiprintf_internal_r+0x1230>
 801a61c:	480d883a 	mov	r6,r9
 801a620:	000b883a 	mov	r5,zero
 801a624:	da012a15 	stw	r8,1192(sp)
 801a628:	da412b15 	stw	r9,1196(sp)
 801a62c:	80172f00 	call	80172f0 <memchr>
 801a630:	da012a17 	ldw	r8,1192(sp)
 801a634:	da412b17 	ldw	r9,1196(sp)
 801a638:	10024726 	beq	r2,zero,801af58 <___vfiprintf_internal_r+0x12f0>
 801a63c:	d8c12417 	ldw	r3,1168(sp)
 801a640:	10e3c83a 	sub	r17,r2,r3
 801a644:	4c41f616 	blt	r9,r17,801ae20 <___vfiprintf_internal_r+0x11b8>
 801a648:	db011d83 	ldbu	r12,1142(sp)
 801a64c:	dd812115 	stw	r22,1156(sp)
 801a650:	0013883a 	mov	r9,zero
 801a654:	003e8006 	br	801a058 <__alt_data_end+0xfc01a058>
 801a658:	d9811d85 	stb	r6,1142(sp)
 801a65c:	a880080c 	andi	r2,r21,32
 801a660:	d8c12117 	ldw	r3,1156(sp)
 801a664:	103fb51e 	bne	r2,zero,801a53c <__alt_data_end+0xfc01a53c>
 801a668:	a880040c 	andi	r2,r21,16
 801a66c:	10015e1e 	bne	r2,zero,801abe8 <___vfiprintf_internal_r+0xf80>
 801a670:	a880100c 	andi	r2,r21,64
 801a674:	10015c26 	beq	r2,zero,801abe8 <___vfiprintf_internal_r+0xf80>
 801a678:	1c80000f 	ldh	r18,0(r3)
 801a67c:	da812117 	ldw	r10,1156(sp)
 801a680:	902dd7fa 	srai	r22,r18,31
 801a684:	52800104 	addi	r10,r10,4
 801a688:	da812115 	stw	r10,1156(sp)
 801a68c:	b005883a 	mov	r2,r22
 801a690:	003fb006 	br	801a554 <__alt_data_end+0xfc01a554>
 801a694:	da812117 	ldw	r10,1156(sp)
 801a698:	00800c04 	movi	r2,48
 801a69c:	02c200f4 	movhi	r11,2051
 801a6a0:	54800017 	ldw	r18,0(r10)
 801a6a4:	d8811d05 	stb	r2,1140(sp)
 801a6a8:	52800104 	addi	r10,r10,4
 801a6ac:	00801e04 	movi	r2,120
 801a6b0:	5aeb1404 	addi	r11,r11,-21424
 801a6b4:	d8811d45 	stb	r2,1141(sp)
 801a6b8:	002d883a 	mov	r22,zero
 801a6bc:	ad400094 	ori	r21,r21,2
 801a6c0:	da812115 	stw	r10,1156(sp)
 801a6c4:	dac12615 	stw	r11,1176(sp)
 801a6c8:	00800084 	movi	r2,2
 801a6cc:	9009883a 	mov	r4,r18
 801a6d0:	003e4406 	br	8019fe4 <__alt_data_end+0xfc019fe4>
 801a6d4:	ad400814 	ori	r21,r21,32
 801a6d8:	80c00007 	ldb	r3,0(r16)
 801a6dc:	003dc106 	br	8019de4 <__alt_data_end+0xfc019de4>
 801a6e0:	ad401014 	ori	r21,r21,64
 801a6e4:	80c00007 	ldb	r3,0(r16)
 801a6e8:	003dbe06 	br	8019de4 <__alt_data_end+0xfc019de4>
 801a6ec:	80c00007 	ldb	r3,0(r16)
 801a6f0:	19c1de26 	beq	r3,r7,801ae6c <___vfiprintf_internal_r+0x1204>
 801a6f4:	ad400414 	ori	r21,r21,16
 801a6f8:	003dba06 	br	8019de4 <__alt_data_end+0xfc019de4>
 801a6fc:	008200f4 	movhi	r2,2051
 801a700:	10ab1404 	addi	r2,r2,-21424
 801a704:	d8812615 	stw	r2,1176(sp)
 801a708:	d9811d85 	stb	r6,1142(sp)
 801a70c:	a900080c 	andi	r4,r21,32
 801a710:	d8812117 	ldw	r2,1156(sp)
 801a714:	203f5b1e 	bne	r4,zero,801a484 <__alt_data_end+0xfc01a484>
 801a718:	a900040c 	andi	r4,r21,16
 801a71c:	2001a826 	beq	r4,zero,801adc0 <___vfiprintf_internal_r+0x1158>
 801a720:	dac12117 	ldw	r11,1156(sp)
 801a724:	14800017 	ldw	r18,0(r2)
 801a728:	002d883a 	mov	r22,zero
 801a72c:	5ac00104 	addi	r11,r11,4
 801a730:	dac12115 	stw	r11,1156(sp)
 801a734:	003f5806 	br	801a498 <__alt_data_end+0xfc01a498>
 801a738:	da812117 	ldw	r10,1156(sp)
 801a73c:	54c00017 	ldw	r19,0(r10)
 801a740:	50800104 	addi	r2,r10,4
 801a744:	983f2f16 	blt	r19,zero,801a404 <__alt_data_end+0xfc01a404>
 801a748:	d8812115 	stw	r2,1156(sp)
 801a74c:	80c00007 	ldb	r3,0(r16)
 801a750:	003da406 	br	8019de4 <__alt_data_end+0xfc019de4>
 801a754:	01800ac4 	movi	r6,43
 801a758:	80c00007 	ldb	r3,0(r16)
 801a75c:	003da106 	br	8019de4 <__alt_data_end+0xfc019de4>
 801a760:	ad400054 	ori	r21,r21,1
 801a764:	80c00007 	ldb	r3,0(r16)
 801a768:	003d9e06 	br	8019de4 <__alt_data_end+0xfc019de4>
 801a76c:	d9811d85 	stb	r6,1142(sp)
 801a770:	18007126 	beq	r3,zero,801a938 <___vfiprintf_internal_r+0xcd0>
 801a774:	04800044 	movi	r18,1
 801a778:	d8c10005 	stb	r3,1024(sp)
 801a77c:	d8c10004 	addi	r3,sp,1024
 801a780:	d8011d85 	stb	zero,1142(sp)
 801a784:	9023883a 	mov	r17,r18
 801a788:	d8c12415 	stw	r3,1168(sp)
 801a78c:	003f5606 	br	801a4e8 <__alt_data_end+0xfc01a4e8>
 801a790:	dac12117 	ldw	r11,1156(sp)
 801a794:	002d883a 	mov	r22,zero
 801a798:	00800044 	movi	r2,1
 801a79c:	5c800017 	ldw	r18,0(r11)
 801a7a0:	5ac00104 	addi	r11,r11,4
 801a7a4:	dac12115 	stw	r11,1156(sp)
 801a7a8:	9009883a 	mov	r4,r18
 801a7ac:	003e0d06 	br	8019fe4 <__alt_data_end+0xfc019fe4>
 801a7b0:	dac12117 	ldw	r11,1156(sp)
 801a7b4:	002d883a 	mov	r22,zero
 801a7b8:	0005883a 	mov	r2,zero
 801a7bc:	5c800017 	ldw	r18,0(r11)
 801a7c0:	5ac00104 	addi	r11,r11,4
 801a7c4:	dac12115 	stw	r11,1156(sp)
 801a7c8:	9009883a 	mov	r4,r18
 801a7cc:	003e0506 	br	8019fe4 <__alt_data_end+0xfc019fe4>
 801a7d0:	d9012017 	ldw	r4,1152(sp)
 801a7d4:	a00b883a 	mov	r5,r20
 801a7d8:	d9811a04 	addi	r6,sp,1128
 801a7dc:	d8c12a15 	stw	r3,1192(sp)
 801a7e0:	db012b15 	stw	r12,1196(sp)
 801a7e4:	8019b540 	call	8019b54 <__sprint_r.part.0>
 801a7e8:	d8c12a17 	ldw	r3,1192(sp)
 801a7ec:	db012b17 	ldw	r12,1196(sp)
 801a7f0:	1000571e 	bne	r2,zero,801a950 <___vfiprintf_internal_r+0xce8>
 801a7f4:	d9811b17 	ldw	r6,1132(sp)
 801a7f8:	d8811c17 	ldw	r2,1136(sp)
 801a7fc:	d811883a 	mov	r8,sp
 801a800:	31400044 	addi	r5,r6,1
 801a804:	003e3306 	br	801a0d4 <__alt_data_end+0xfc01a0d4>
 801a808:	d9411b17 	ldw	r5,1132(sp)
 801a80c:	d8c11c17 	ldw	r3,1136(sp)
 801a810:	28800044 	addi	r2,r5,1
 801a814:	d9011d87 	ldb	r4,1142(sp)
 801a818:	203e4d26 	beq	r4,zero,801a150 <__alt_data_end+0xfc01a150>
 801a81c:	01000044 	movi	r4,1
 801a820:	d9411d84 	addi	r5,sp,1142
 801a824:	1907883a 	add	r3,r3,r4
 801a828:	41400015 	stw	r5,0(r8)
 801a82c:	41000115 	stw	r4,4(r8)
 801a830:	d8c11c15 	stw	r3,1136(sp)
 801a834:	d8811b15 	stw	r2,1132(sp)
 801a838:	014001c4 	movi	r5,7
 801a83c:	2880aa16 	blt	r5,r2,801aae8 <___vfiprintf_internal_r+0xe80>
 801a840:	100b883a 	mov	r5,r2
 801a844:	42000204 	addi	r8,r8,8
 801a848:	10800044 	addi	r2,r2,1
 801a84c:	003e4006 	br	801a150 <__alt_data_end+0xfc01a150>
 801a850:	d9012017 	ldw	r4,1152(sp)
 801a854:	a00b883a 	mov	r5,r20
 801a858:	d9811a04 	addi	r6,sp,1128
 801a85c:	d9c12a15 	stw	r7,1192(sp)
 801a860:	db012b15 	stw	r12,1196(sp)
 801a864:	8019b540 	call	8019b54 <__sprint_r.part.0>
 801a868:	d9c12a17 	ldw	r7,1192(sp)
 801a86c:	db012b17 	ldw	r12,1196(sp)
 801a870:	1000371e 	bne	r2,zero,801a950 <___vfiprintf_internal_r+0xce8>
 801a874:	d9411b17 	ldw	r5,1132(sp)
 801a878:	d8c11c17 	ldw	r3,1136(sp)
 801a87c:	d811883a 	mov	r8,sp
 801a880:	28800044 	addi	r2,r5,1
 801a884:	003e4d06 	br	801a1bc <__alt_data_end+0xfc01a1bc>
 801a888:	10803fcc 	andi	r2,r2,255
 801a88c:	00c00044 	movi	r3,1
 801a890:	10fddf1e 	bne	r2,r3,801a010 <__alt_data_end+0xfc01a010>
 801a894:	b000021e 	bne	r22,zero,801a8a0 <___vfiprintf_internal_r+0xc38>
 801a898:	00800244 	movi	r2,9
 801a89c:	1480202e 	bgeu	r2,r18,801a920 <___vfiprintf_internal_r+0xcb8>
 801a8a0:	dc012515 	stw	r16,1172(sp)
 801a8a4:	dc410a04 	addi	r17,sp,1064
 801a8a8:	9021883a 	mov	r16,r18
 801a8ac:	da012415 	stw	r8,1168(sp)
 801a8b0:	b025883a 	mov	r18,r22
 801a8b4:	da412315 	stw	r9,1164(sp)
 801a8b8:	602d883a 	mov	r22,r12
 801a8bc:	8009883a 	mov	r4,r16
 801a8c0:	900b883a 	mov	r5,r18
 801a8c4:	01800284 	movi	r6,10
 801a8c8:	000f883a 	mov	r7,zero
 801a8cc:	801caf40 	call	801caf4 <__umoddi3>
 801a8d0:	10800c04 	addi	r2,r2,48
 801a8d4:	8c7fffc4 	addi	r17,r17,-1
 801a8d8:	8009883a 	mov	r4,r16
 801a8dc:	900b883a 	mov	r5,r18
 801a8e0:	01800284 	movi	r6,10
 801a8e4:	000f883a 	mov	r7,zero
 801a8e8:	88800005 	stb	r2,0(r17)
 801a8ec:	801c5340 	call	801c534 <__udivdi3>
 801a8f0:	1021883a 	mov	r16,r2
 801a8f4:	10c4b03a 	or	r2,r2,r3
 801a8f8:	1825883a 	mov	r18,r3
 801a8fc:	103fef1e 	bne	r2,zero,801a8bc <__alt_data_end+0xfc01a8bc>
 801a900:	da811e17 	ldw	r10,1144(sp)
 801a904:	da012417 	ldw	r8,1168(sp)
 801a908:	da412317 	ldw	r9,1164(sp)
 801a90c:	dc412415 	stw	r17,1168(sp)
 801a910:	b019883a 	mov	r12,r22
 801a914:	dc012517 	ldw	r16,1172(sp)
 801a918:	5463c83a 	sub	r17,r10,r17
 801a91c:	003dce06 	br	801a058 <__alt_data_end+0xfc01a058>
 801a920:	94800c04 	addi	r18,r18,48
 801a924:	d8c109c4 	addi	r3,sp,1063
 801a928:	dc8109c5 	stb	r18,1063(sp)
 801a92c:	dc412717 	ldw	r17,1180(sp)
 801a930:	d8c12415 	stw	r3,1168(sp)
 801a934:	003dc806 	br	801a058 <__alt_data_end+0xfc01a058>
 801a938:	d8811c17 	ldw	r2,1136(sp)
 801a93c:	10000426 	beq	r2,zero,801a950 <___vfiprintf_internal_r+0xce8>
 801a940:	d9012017 	ldw	r4,1152(sp)
 801a944:	a00b883a 	mov	r5,r20
 801a948:	d9811a04 	addi	r6,sp,1128
 801a94c:	8019b540 	call	8019b54 <__sprint_r.part.0>
 801a950:	a080030b 	ldhu	r2,12(r20)
 801a954:	1080100c 	andi	r2,r2,64
 801a958:	103e9b1e 	bne	r2,zero,801a3c8 <__alt_data_end+0xfc01a3c8>
 801a95c:	d8812217 	ldw	r2,1160(sp)
 801a960:	003e9a06 	br	801a3cc <__alt_data_end+0xfc01a3cc>
 801a964:	d9012017 	ldw	r4,1152(sp)
 801a968:	a00b883a 	mov	r5,r20
 801a96c:	d9811a04 	addi	r6,sp,1128
 801a970:	8019b540 	call	8019b54 <__sprint_r.part.0>
 801a974:	103ff61e 	bne	r2,zero,801a950 <__alt_data_end+0xfc01a950>
 801a978:	d9011b17 	ldw	r4,1132(sp)
 801a97c:	d8c11c17 	ldw	r3,1136(sp)
 801a980:	d811883a 	mov	r8,sp
 801a984:	21400044 	addi	r5,r4,1
 801a988:	003e4006 	br	801a28c <__alt_data_end+0xfc01a28c>
 801a98c:	1800d61e 	bne	r3,zero,801ace8 <___vfiprintf_internal_r+0x1080>
 801a990:	dac12417 	ldw	r11,1168(sp)
 801a994:	00800044 	movi	r2,1
 801a998:	dc400115 	stw	r17,4(sp)
 801a99c:	dac00015 	stw	r11,0(sp)
 801a9a0:	dc411c15 	stw	r17,1136(sp)
 801a9a4:	d8811b15 	stw	r2,1132(sp)
 801a9a8:	8807883a 	mov	r3,r17
 801a9ac:	d811883a 	mov	r8,sp
 801a9b0:	42000204 	addi	r8,r8,8
 801a9b4:	aac0010c 	andi	r11,r21,4
 801a9b8:	58000226 	beq	r11,zero,801a9c4 <___vfiprintf_internal_r+0xd5c>
 801a9bc:	9ca3c83a 	sub	r17,r19,r18
 801a9c0:	047e2616 	blt	zero,r17,801a25c <__alt_data_end+0xfc01a25c>
 801a9c4:	94c0010e 	bge	r18,r19,801a9cc <___vfiprintf_internal_r+0xd64>
 801a9c8:	9825883a 	mov	r18,r19
 801a9cc:	da812217 	ldw	r10,1160(sp)
 801a9d0:	5495883a 	add	r10,r10,r18
 801a9d4:	da812215 	stw	r10,1160(sp)
 801a9d8:	183e4826 	beq	r3,zero,801a2fc <__alt_data_end+0xfc01a2fc>
 801a9dc:	d9012017 	ldw	r4,1152(sp)
 801a9e0:	a00b883a 	mov	r5,r20
 801a9e4:	d9811a04 	addi	r6,sp,1128
 801a9e8:	8019b540 	call	8019b54 <__sprint_r.part.0>
 801a9ec:	103e4326 	beq	r2,zero,801a2fc <__alt_data_end+0xfc01a2fc>
 801a9f0:	003fd706 	br	801a950 <__alt_data_end+0xfc01a950>
 801a9f4:	9cadc83a 	sub	r22,r19,r18
 801a9f8:	05bde40e 	bge	zero,r22,801a18c <__alt_data_end+0xfc01a18c>
 801a9fc:	03000404 	movi	r12,16
 801aa00:	6581500e 	bge	r12,r22,801af44 <___vfiprintf_internal_r+0x12dc>
 801aa04:	008200f4 	movhi	r2,2051
 801aa08:	10ac2b04 	addi	r2,r2,-20308
 801aa0c:	d8812315 	stw	r2,1164(sp)
 801aa10:	8005883a 	mov	r2,r16
 801aa14:	038001c4 	movi	r14,7
 801aa18:	b021883a 	mov	r16,r22
 801aa1c:	da412515 	stw	r9,1172(sp)
 801aa20:	102d883a 	mov	r22,r2
 801aa24:	00000506 	br	801aa3c <___vfiprintf_internal_r+0xdd4>
 801aa28:	29000084 	addi	r4,r5,2
 801aa2c:	42000204 	addi	r8,r8,8
 801aa30:	100b883a 	mov	r5,r2
 801aa34:	843ffc04 	addi	r16,r16,-16
 801aa38:	64000d0e 	bge	r12,r16,801aa70 <___vfiprintf_internal_r+0xe08>
 801aa3c:	18c00404 	addi	r3,r3,16
 801aa40:	28800044 	addi	r2,r5,1
 801aa44:	45c00015 	stw	r23,0(r8)
 801aa48:	43000115 	stw	r12,4(r8)
 801aa4c:	d8c11c15 	stw	r3,1136(sp)
 801aa50:	d8811b15 	stw	r2,1132(sp)
 801aa54:	70bff40e 	bge	r14,r2,801aa28 <__alt_data_end+0xfc01aa28>
 801aa58:	1800151e 	bne	r3,zero,801aab0 <___vfiprintf_internal_r+0xe48>
 801aa5c:	843ffc04 	addi	r16,r16,-16
 801aa60:	000b883a 	mov	r5,zero
 801aa64:	01000044 	movi	r4,1
 801aa68:	d811883a 	mov	r8,sp
 801aa6c:	643ff316 	blt	r12,r16,801aa3c <__alt_data_end+0xfc01aa3c>
 801aa70:	da412517 	ldw	r9,1172(sp)
 801aa74:	b005883a 	mov	r2,r22
 801aa78:	802d883a 	mov	r22,r16
 801aa7c:	1021883a 	mov	r16,r2
 801aa80:	da812317 	ldw	r10,1164(sp)
 801aa84:	1d87883a 	add	r3,r3,r22
 801aa88:	45800115 	stw	r22,4(r8)
 801aa8c:	42800015 	stw	r10,0(r8)
 801aa90:	d8c11c15 	stw	r3,1136(sp)
 801aa94:	d9011b15 	stw	r4,1132(sp)
 801aa98:	008001c4 	movi	r2,7
 801aa9c:	11008d16 	blt	r2,r4,801acd4 <___vfiprintf_internal_r+0x106c>
 801aaa0:	42000204 	addi	r8,r8,8
 801aaa4:	20800044 	addi	r2,r4,1
 801aaa8:	200b883a 	mov	r5,r4
 801aaac:	003db706 	br	801a18c <__alt_data_end+0xfc01a18c>
 801aab0:	d9012017 	ldw	r4,1152(sp)
 801aab4:	a00b883a 	mov	r5,r20
 801aab8:	d9811a04 	addi	r6,sp,1128
 801aabc:	db012b15 	stw	r12,1196(sp)
 801aac0:	db812a15 	stw	r14,1192(sp)
 801aac4:	8019b540 	call	8019b54 <__sprint_r.part.0>
 801aac8:	db012b17 	ldw	r12,1196(sp)
 801aacc:	db812a17 	ldw	r14,1192(sp)
 801aad0:	103f9f1e 	bne	r2,zero,801a950 <__alt_data_end+0xfc01a950>
 801aad4:	d9411b17 	ldw	r5,1132(sp)
 801aad8:	d8c11c17 	ldw	r3,1136(sp)
 801aadc:	d811883a 	mov	r8,sp
 801aae0:	29000044 	addi	r4,r5,1
 801aae4:	003fd306 	br	801aa34 <__alt_data_end+0xfc01aa34>
 801aae8:	18006c1e 	bne	r3,zero,801ac9c <___vfiprintf_internal_r+0x1034>
 801aaec:	70004f26 	beq	r14,zero,801ac2c <___vfiprintf_internal_r+0xfc4>
 801aaf0:	d8811d04 	addi	r2,sp,1140
 801aaf4:	00c00084 	movi	r3,2
 801aaf8:	d8800015 	stw	r2,0(sp)
 801aafc:	d8c00115 	stw	r3,4(sp)
 801ab00:	2005883a 	mov	r2,r4
 801ab04:	d811883a 	mov	r8,sp
 801ab08:	003d9b06 	br	801a178 <__alt_data_end+0xfc01a178>
 801ab0c:	1800571e 	bne	r3,zero,801ac6c <___vfiprintf_internal_r+0x1004>
 801ab10:	000b883a 	mov	r5,zero
 801ab14:	00800044 	movi	r2,1
 801ab18:	d811883a 	mov	r8,sp
 801ab1c:	003d9906 	br	801a184 <__alt_data_end+0xfc01a184>
 801ab20:	10803fcc 	andi	r2,r2,255
 801ab24:	1000251e 	bne	r2,zero,801abbc <___vfiprintf_internal_r+0xf54>
 801ab28:	a880004c 	andi	r2,r21,1
 801ab2c:	10007826 	beq	r2,zero,801ad10 <___vfiprintf_internal_r+0x10a8>
 801ab30:	00800c04 	movi	r2,48
 801ab34:	d8c109c4 	addi	r3,sp,1063
 801ab38:	d88109c5 	stb	r2,1063(sp)
 801ab3c:	dc412717 	ldw	r17,1180(sp)
 801ab40:	d8c12415 	stw	r3,1168(sp)
 801ab44:	003d4406 	br	801a058 <__alt_data_end+0xfc01a058>
 801ab48:	d9012617 	ldw	r4,1176(sp)
 801ab4c:	dc410a04 	addi	r17,sp,1064
 801ab50:	908003cc 	andi	r2,r18,15
 801ab54:	b006973a 	slli	r3,r22,28
 801ab58:	2085883a 	add	r2,r4,r2
 801ab5c:	9024d13a 	srli	r18,r18,4
 801ab60:	10800003 	ldbu	r2,0(r2)
 801ab64:	b02cd13a 	srli	r22,r22,4
 801ab68:	8c7fffc4 	addi	r17,r17,-1
 801ab6c:	1ca4b03a 	or	r18,r3,r18
 801ab70:	88800005 	stb	r2,0(r17)
 801ab74:	9584b03a 	or	r2,r18,r22
 801ab78:	103ff51e 	bne	r2,zero,801ab50 <__alt_data_end+0xfc01ab50>
 801ab7c:	dac11e17 	ldw	r11,1144(sp)
 801ab80:	dc412415 	stw	r17,1168(sp)
 801ab84:	5c63c83a 	sub	r17,r11,r17
 801ab88:	003d3306 	br	801a058 <__alt_data_end+0xfc01a058>
 801ab8c:	1800941e 	bne	r3,zero,801ade0 <___vfiprintf_internal_r+0x1178>
 801ab90:	d8811d87 	ldb	r2,1142(sp)
 801ab94:	10006b26 	beq	r2,zero,801ad44 <___vfiprintf_internal_r+0x10dc>
 801ab98:	00c00044 	movi	r3,1
 801ab9c:	d9011d84 	addi	r4,sp,1142
 801aba0:	1805883a 	mov	r2,r3
 801aba4:	d9000015 	stw	r4,0(sp)
 801aba8:	d8c00115 	stw	r3,4(sp)
 801abac:	d811883a 	mov	r8,sp
 801abb0:	003f2306 	br	801a840 <__alt_data_end+0xfc01a840>
 801abb4:	8023883a 	mov	r17,r16
 801abb8:	003c7d06 	br	8019db0 <__alt_data_end+0xfc019db0>
 801abbc:	da810a04 	addi	r10,sp,1064
 801abc0:	da812415 	stw	r10,1168(sp)
 801abc4:	003d2406 	br	801a058 <__alt_data_end+0xfc01a058>
 801abc8:	d9012017 	ldw	r4,1152(sp)
 801abcc:	a00b883a 	mov	r5,r20
 801abd0:	d9811a04 	addi	r6,sp,1128
 801abd4:	8019b540 	call	8019b54 <__sprint_r.part.0>
 801abd8:	103f5d1e 	bne	r2,zero,801a950 <__alt_data_end+0xfc01a950>
 801abdc:	d8c11c17 	ldw	r3,1136(sp)
 801abe0:	d811883a 	mov	r8,sp
 801abe4:	003f7306 	br	801a9b4 <__alt_data_end+0xfc01a9b4>
 801abe8:	1c800017 	ldw	r18,0(r3)
 801abec:	dac12117 	ldw	r11,1156(sp)
 801abf0:	902dd7fa 	srai	r22,r18,31
 801abf4:	5ac00104 	addi	r11,r11,4
 801abf8:	dac12115 	stw	r11,1156(sp)
 801abfc:	b005883a 	mov	r2,r22
 801ac00:	003e5406 	br	801a554 <__alt_data_end+0xfc01a554>
 801ac04:	00800084 	movi	r2,2
 801ac08:	9588b03a 	or	r4,r18,r22
 801ac0c:	003cf506 	br	8019fe4 <__alt_data_end+0xfc019fe4>
 801ac10:	d9012017 	ldw	r4,1152(sp)
 801ac14:	a00b883a 	mov	r5,r20
 801ac18:	d9811a04 	addi	r6,sp,1128
 801ac1c:	8019b540 	call	8019b54 <__sprint_r.part.0>
 801ac20:	103f4b1e 	bne	r2,zero,801a950 <__alt_data_end+0xfc01a950>
 801ac24:	d811883a 	mov	r8,sp
 801ac28:	003cd106 	br	8019f70 <__alt_data_end+0xfc019f70>
 801ac2c:	000b883a 	mov	r5,zero
 801ac30:	2005883a 	mov	r2,r4
 801ac34:	d811883a 	mov	r8,sp
 801ac38:	003d5206 	br	801a184 <__alt_data_end+0xfc01a184>
 801ac3c:	10803fcc 	andi	r2,r2,255
 801ac40:	1080201c 	xori	r2,r2,128
 801ac44:	10bfe004 	addi	r2,r2,-128
 801ac48:	01000c04 	movi	r4,48
 801ac4c:	11008e26 	beq	r2,r4,801ae88 <___vfiprintf_internal_r+0x1220>
 801ac50:	da812417 	ldw	r10,1168(sp)
 801ac54:	dac11e17 	ldw	r11,1144(sp)
 801ac58:	193fffc5 	stb	r4,-1(r3)
 801ac5c:	52bfffc4 	addi	r10,r10,-1
 801ac60:	da812415 	stw	r10,1168(sp)
 801ac64:	5aa3c83a 	sub	r17,r11,r10
 801ac68:	003cfb06 	br	801a058 <__alt_data_end+0xfc01a058>
 801ac6c:	d9012017 	ldw	r4,1152(sp)
 801ac70:	a00b883a 	mov	r5,r20
 801ac74:	d9811a04 	addi	r6,sp,1128
 801ac78:	da412b15 	stw	r9,1196(sp)
 801ac7c:	8019b540 	call	8019b54 <__sprint_r.part.0>
 801ac80:	da412b17 	ldw	r9,1196(sp)
 801ac84:	103f321e 	bne	r2,zero,801a950 <__alt_data_end+0xfc01a950>
 801ac88:	d9411b17 	ldw	r5,1132(sp)
 801ac8c:	d8c11c17 	ldw	r3,1136(sp)
 801ac90:	d811883a 	mov	r8,sp
 801ac94:	28800044 	addi	r2,r5,1
 801ac98:	003d3a06 	br	801a184 <__alt_data_end+0xfc01a184>
 801ac9c:	d9012017 	ldw	r4,1152(sp)
 801aca0:	a00b883a 	mov	r5,r20
 801aca4:	d9811a04 	addi	r6,sp,1128
 801aca8:	da412b15 	stw	r9,1196(sp)
 801acac:	db812a15 	stw	r14,1192(sp)
 801acb0:	8019b540 	call	8019b54 <__sprint_r.part.0>
 801acb4:	da412b17 	ldw	r9,1196(sp)
 801acb8:	db812a17 	ldw	r14,1192(sp)
 801acbc:	103f241e 	bne	r2,zero,801a950 <__alt_data_end+0xfc01a950>
 801acc0:	d9411b17 	ldw	r5,1132(sp)
 801acc4:	d8c11c17 	ldw	r3,1136(sp)
 801acc8:	d811883a 	mov	r8,sp
 801accc:	28800044 	addi	r2,r5,1
 801acd0:	003d1f06 	br	801a150 <__alt_data_end+0xfc01a150>
 801acd4:	1800781e 	bne	r3,zero,801aeb8 <___vfiprintf_internal_r+0x1250>
 801acd8:	000b883a 	mov	r5,zero
 801acdc:	00800044 	movi	r2,1
 801ace0:	d811883a 	mov	r8,sp
 801ace4:	003d2906 	br	801a18c <__alt_data_end+0xfc01a18c>
 801ace8:	d9012017 	ldw	r4,1152(sp)
 801acec:	a00b883a 	mov	r5,r20
 801acf0:	d9811a04 	addi	r6,sp,1128
 801acf4:	8019b540 	call	8019b54 <__sprint_r.part.0>
 801acf8:	103f151e 	bne	r2,zero,801a950 <__alt_data_end+0xfc01a950>
 801acfc:	d8811b17 	ldw	r2,1132(sp)
 801ad00:	d8c11c17 	ldw	r3,1136(sp)
 801ad04:	d811883a 	mov	r8,sp
 801ad08:	10800044 	addi	r2,r2,1
 801ad0c:	003d4406 	br	801a220 <__alt_data_end+0xfc01a220>
 801ad10:	dac10a04 	addi	r11,sp,1064
 801ad14:	dac12415 	stw	r11,1168(sp)
 801ad18:	003ccf06 	br	801a058 <__alt_data_end+0xfc01a058>
 801ad1c:	04a5c83a 	sub	r18,zero,r18
 801ad20:	9004c03a 	cmpne	r2,r18,zero
 801ad24:	05adc83a 	sub	r22,zero,r22
 801ad28:	b0adc83a 	sub	r22,r22,r2
 801ad2c:	03000b44 	movi	r12,45
 801ad30:	db011d85 	stb	r12,1142(sp)
 801ad34:	4823883a 	mov	r17,r9
 801ad38:	00800044 	movi	r2,1
 801ad3c:	9588b03a 	or	r4,r18,r22
 801ad40:	003cab06 	br	8019ff0 <__alt_data_end+0xfc019ff0>
 801ad44:	000b883a 	mov	r5,zero
 801ad48:	00800044 	movi	r2,1
 801ad4c:	d811883a 	mov	r8,sp
 801ad50:	703d0c26 	beq	r14,zero,801a184 <__alt_data_end+0xfc01a184>
 801ad54:	00c00084 	movi	r3,2
 801ad58:	d9011d04 	addi	r4,sp,1140
 801ad5c:	d9000015 	stw	r4,0(sp)
 801ad60:	d8c00115 	stw	r3,4(sp)
 801ad64:	003d0406 	br	801a178 <__alt_data_end+0xfc01a178>
 801ad68:	80c00007 	ldb	r3,0(r16)
 801ad6c:	003c1d06 	br	8019de4 <__alt_data_end+0xfc019de4>
 801ad70:	a880040c 	andi	r2,r21,16
 801ad74:	1000091e 	bne	r2,zero,801ad9c <___vfiprintf_internal_r+0x1134>
 801ad78:	aac0100c 	andi	r11,r21,64
 801ad7c:	58000726 	beq	r11,zero,801ad9c <___vfiprintf_internal_r+0x1134>
 801ad80:	da812117 	ldw	r10,1156(sp)
 801ad84:	dac12217 	ldw	r11,1160(sp)
 801ad88:	50800017 	ldw	r2,0(r10)
 801ad8c:	52800104 	addi	r10,r10,4
 801ad90:	da812115 	stw	r10,1156(sp)
 801ad94:	12c0000d 	sth	r11,0(r2)
 801ad98:	003be806 	br	8019d3c <__alt_data_end+0xfc019d3c>
 801ad9c:	da812117 	ldw	r10,1156(sp)
 801ada0:	dac12217 	ldw	r11,1160(sp)
 801ada4:	50800017 	ldw	r2,0(r10)
 801ada8:	52800104 	addi	r10,r10,4
 801adac:	da812115 	stw	r10,1156(sp)
 801adb0:	12c00015 	stw	r11,0(r2)
 801adb4:	003be106 	br	8019d3c <__alt_data_end+0xfc019d3c>
 801adb8:	00800084 	movi	r2,2
 801adbc:	003c8906 	br	8019fe4 <__alt_data_end+0xfc019fe4>
 801adc0:	a900100c 	andi	r4,r21,64
 801adc4:	20001f26 	beq	r4,zero,801ae44 <___vfiprintf_internal_r+0x11dc>
 801adc8:	da812117 	ldw	r10,1156(sp)
 801adcc:	1480000b 	ldhu	r18,0(r2)
 801add0:	002d883a 	mov	r22,zero
 801add4:	52800104 	addi	r10,r10,4
 801add8:	da812115 	stw	r10,1156(sp)
 801addc:	003dae06 	br	801a498 <__alt_data_end+0xfc01a498>
 801ade0:	d9012017 	ldw	r4,1152(sp)
 801ade4:	a00b883a 	mov	r5,r20
 801ade8:	d9811a04 	addi	r6,sp,1128
 801adec:	da412b15 	stw	r9,1196(sp)
 801adf0:	db812a15 	stw	r14,1192(sp)
 801adf4:	8019b540 	call	8019b54 <__sprint_r.part.0>
 801adf8:	da412b17 	ldw	r9,1196(sp)
 801adfc:	db812a17 	ldw	r14,1192(sp)
 801ae00:	103ed31e 	bne	r2,zero,801a950 <__alt_data_end+0xfc01a950>
 801ae04:	d9411b17 	ldw	r5,1132(sp)
 801ae08:	d8c11c17 	ldw	r3,1136(sp)
 801ae0c:	d811883a 	mov	r8,sp
 801ae10:	28800044 	addi	r2,r5,1
 801ae14:	003e7f06 	br	801a814 <__alt_data_end+0xfc01a814>
 801ae18:	9825883a 	mov	r18,r19
 801ae1c:	003d3406 	br	801a2f0 <__alt_data_end+0xfc01a2f0>
 801ae20:	4823883a 	mov	r17,r9
 801ae24:	003e0806 	br	801a648 <__alt_data_end+0xfc01a648>
 801ae28:	d9012017 	ldw	r4,1152(sp)
 801ae2c:	a00b883a 	mov	r5,r20
 801ae30:	d9811a04 	addi	r6,sp,1128
 801ae34:	8019b540 	call	8019b54 <__sprint_r.part.0>
 801ae38:	103ec51e 	bne	r2,zero,801a950 <__alt_data_end+0xfc01a950>
 801ae3c:	d8c11c17 	ldw	r3,1136(sp)
 801ae40:	003ee006 	br	801a9c4 <__alt_data_end+0xfc01a9c4>
 801ae44:	dac12117 	ldw	r11,1156(sp)
 801ae48:	14800017 	ldw	r18,0(r2)
 801ae4c:	002d883a 	mov	r22,zero
 801ae50:	5ac00104 	addi	r11,r11,4
 801ae54:	dac12115 	stw	r11,1156(sp)
 801ae58:	003d8f06 	br	801a498 <__alt_data_end+0xfc01a498>
 801ae5c:	02c200f4 	movhi	r11,2051
 801ae60:	5aec2b04 	addi	r11,r11,-20308
 801ae64:	dac12315 	stw	r11,1164(sp)
 801ae68:	003ce306 	br	801a1f8 <__alt_data_end+0xfc01a1f8>
 801ae6c:	80c00043 	ldbu	r3,1(r16)
 801ae70:	ad400814 	ori	r21,r21,32
 801ae74:	84000044 	addi	r16,r16,1
 801ae78:	18c03fcc 	andi	r3,r3,255
 801ae7c:	18c0201c 	xori	r3,r3,128
 801ae80:	18ffe004 	addi	r3,r3,-128
 801ae84:	003bd706 	br	8019de4 <__alt_data_end+0xfc019de4>
 801ae88:	dac11e17 	ldw	r11,1144(sp)
 801ae8c:	d8c12417 	ldw	r3,1168(sp)
 801ae90:	58e3c83a 	sub	r17,r11,r3
 801ae94:	003c7006 	br	801a058 <__alt_data_end+0xfc01a058>
 801ae98:	da012a15 	stw	r8,1192(sp)
 801ae9c:	800e3c40 	call	800e3c4 <strlen>
 801aea0:	1023883a 	mov	r17,r2
 801aea4:	db011d83 	ldbu	r12,1142(sp)
 801aea8:	dd812115 	stw	r22,1156(sp)
 801aeac:	0013883a 	mov	r9,zero
 801aeb0:	da012a17 	ldw	r8,1192(sp)
 801aeb4:	003c6806 	br	801a058 <__alt_data_end+0xfc01a058>
 801aeb8:	d9012017 	ldw	r4,1152(sp)
 801aebc:	a00b883a 	mov	r5,r20
 801aec0:	d9811a04 	addi	r6,sp,1128
 801aec4:	da412b15 	stw	r9,1196(sp)
 801aec8:	8019b540 	call	8019b54 <__sprint_r.part.0>
 801aecc:	da412b17 	ldw	r9,1196(sp)
 801aed0:	103e9f1e 	bne	r2,zero,801a950 <__alt_data_end+0xfc01a950>
 801aed4:	d9411b17 	ldw	r5,1132(sp)
 801aed8:	d8c11c17 	ldw	r3,1136(sp)
 801aedc:	d811883a 	mov	r8,sp
 801aee0:	28800044 	addi	r2,r5,1
 801aee4:	003ca906 	br	801a18c <__alt_data_end+0xfc01a18c>
 801aee8:	d9411b17 	ldw	r5,1132(sp)
 801aeec:	010200f4 	movhi	r4,2051
 801aef0:	212c2f04 	addi	r4,r4,-20292
 801aef4:	d9012315 	stw	r4,1164(sp)
 801aef8:	29400044 	addi	r5,r5,1
 801aefc:	003c8806 	br	801a120 <__alt_data_end+0xfc01a120>
 801af00:	00800184 	movi	r2,6
 801af04:	1240012e 	bgeu	r2,r9,801af0c <___vfiprintf_internal_r+0x12a4>
 801af08:	1013883a 	mov	r9,r2
 801af0c:	4823883a 	mov	r17,r9
 801af10:	4825883a 	mov	r18,r9
 801af14:	48001516 	blt	r9,zero,801af6c <___vfiprintf_internal_r+0x1304>
 801af18:	008200f4 	movhi	r2,2051
 801af1c:	10ab1904 	addi	r2,r2,-21404
 801af20:	dd812115 	stw	r22,1156(sp)
 801af24:	d8812415 	stw	r2,1168(sp)
 801af28:	003d6f06 	br	801a4e8 <__alt_data_end+0xfc01a4e8>
 801af2c:	d9411b17 	ldw	r5,1132(sp)
 801af30:	02c200f4 	movhi	r11,2051
 801af34:	5aec2f04 	addi	r11,r11,-20292
 801af38:	dac12315 	stw	r11,1164(sp)
 801af3c:	29400044 	addi	r5,r5,1
 801af40:	003ce106 	br	801a2c8 <__alt_data_end+0xfc01a2c8>
 801af44:	010200f4 	movhi	r4,2051
 801af48:	212c2b04 	addi	r4,r4,-20308
 801af4c:	d9012315 	stw	r4,1164(sp)
 801af50:	1009883a 	mov	r4,r2
 801af54:	003eca06 	br	801aa80 <__alt_data_end+0xfc01aa80>
 801af58:	4823883a 	mov	r17,r9
 801af5c:	db011d83 	ldbu	r12,1142(sp)
 801af60:	dd812115 	stw	r22,1156(sp)
 801af64:	0013883a 	mov	r9,zero
 801af68:	003c3b06 	br	801a058 <__alt_data_end+0xfc01a058>
 801af6c:	0025883a 	mov	r18,zero
 801af70:	003fe906 	br	801af18 <__alt_data_end+0xfc01af18>
 801af74:	dac12117 	ldw	r11,1156(sp)
 801af78:	8005883a 	mov	r2,r16
 801af7c:	5021883a 	mov	r16,r10
 801af80:	5a400017 	ldw	r9,0(r11)
 801af84:	58c00104 	addi	r3,r11,4
 801af88:	d8c12115 	stw	r3,1156(sp)
 801af8c:	48000a16 	blt	r9,zero,801afb8 <___vfiprintf_internal_r+0x1350>
 801af90:	10c00047 	ldb	r3,1(r2)
 801af94:	003b9306 	br	8019de4 <__alt_data_end+0xfc019de4>
 801af98:	043fffc4 	movi	r16,-1
 801af9c:	003d0206 	br	801a3a8 <__alt_data_end+0xfc01a3a8>
 801afa0:	94c0010e 	bge	r18,r19,801afa8 <___vfiprintf_internal_r+0x1340>
 801afa4:	9825883a 	mov	r18,r19
 801afa8:	da812217 	ldw	r10,1160(sp)
 801afac:	5495883a 	add	r10,r10,r18
 801afb0:	da812215 	stw	r10,1160(sp)
 801afb4:	003cd106 	br	801a2fc <__alt_data_end+0xfc01a2fc>
 801afb8:	027fffc4 	movi	r9,-1
 801afbc:	10c00047 	ldb	r3,1(r2)
 801afc0:	003b8806 	br	8019de4 <__alt_data_end+0xfc019de4>

0801afc4 <__vfiprintf_internal>:
 801afc4:	2007883a 	mov	r3,r4
 801afc8:	010200f4 	movhi	r4,2051
 801afcc:	21331604 	addi	r4,r4,-13224
 801afd0:	21000017 	ldw	r4,0(r4)
 801afd4:	2805883a 	mov	r2,r5
 801afd8:	300f883a 	mov	r7,r6
 801afdc:	180b883a 	mov	r5,r3
 801afe0:	100d883a 	mov	r6,r2
 801afe4:	8019c681 	jmpi	8019c68 <___vfiprintf_internal_r>

0801afe8 <__swbuf_r>:
 801afe8:	defffc04 	addi	sp,sp,-16
 801afec:	dc800215 	stw	r18,8(sp)
 801aff0:	dc400115 	stw	r17,4(sp)
 801aff4:	dc000015 	stw	r16,0(sp)
 801aff8:	dfc00315 	stw	ra,12(sp)
 801affc:	2025883a 	mov	r18,r4
 801b000:	2823883a 	mov	r17,r5
 801b004:	3021883a 	mov	r16,r6
 801b008:	20000226 	beq	r4,zero,801b014 <__swbuf_r+0x2c>
 801b00c:	20800e17 	ldw	r2,56(r4)
 801b010:	10004126 	beq	r2,zero,801b118 <__swbuf_r+0x130>
 801b014:	80c00617 	ldw	r3,24(r16)
 801b018:	8180030b 	ldhu	r6,12(r16)
 801b01c:	80c00215 	stw	r3,8(r16)
 801b020:	30c0020c 	andi	r3,r6,8
 801b024:	18003526 	beq	r3,zero,801b0fc <__swbuf_r+0x114>
 801b028:	80c00417 	ldw	r3,16(r16)
 801b02c:	18003326 	beq	r3,zero,801b0fc <__swbuf_r+0x114>
 801b030:	3088000c 	andi	r2,r6,8192
 801b034:	8c403fcc 	andi	r17,r17,255
 801b038:	10001726 	beq	r2,zero,801b098 <__swbuf_r+0xb0>
 801b03c:	80800017 	ldw	r2,0(r16)
 801b040:	81000517 	ldw	r4,20(r16)
 801b044:	10c7c83a 	sub	r3,r2,r3
 801b048:	19001d0e 	bge	r3,r4,801b0c0 <__swbuf_r+0xd8>
 801b04c:	18c00044 	addi	r3,r3,1
 801b050:	81400217 	ldw	r5,8(r16)
 801b054:	11000044 	addi	r4,r2,1
 801b058:	81000015 	stw	r4,0(r16)
 801b05c:	297fffc4 	addi	r5,r5,-1
 801b060:	81400215 	stw	r5,8(r16)
 801b064:	14400005 	stb	r17,0(r2)
 801b068:	80800517 	ldw	r2,20(r16)
 801b06c:	10c01d26 	beq	r2,r3,801b0e4 <__swbuf_r+0xfc>
 801b070:	8080030b 	ldhu	r2,12(r16)
 801b074:	1080004c 	andi	r2,r2,1
 801b078:	1000181e 	bne	r2,zero,801b0dc <__swbuf_r+0xf4>
 801b07c:	8805883a 	mov	r2,r17
 801b080:	dfc00317 	ldw	ra,12(sp)
 801b084:	dc800217 	ldw	r18,8(sp)
 801b088:	dc400117 	ldw	r17,4(sp)
 801b08c:	dc000017 	ldw	r16,0(sp)
 801b090:	dec00404 	addi	sp,sp,16
 801b094:	f800283a 	ret
 801b098:	81001917 	ldw	r4,100(r16)
 801b09c:	00b7ffc4 	movi	r2,-8193
 801b0a0:	31880014 	ori	r6,r6,8192
 801b0a4:	2084703a 	and	r2,r4,r2
 801b0a8:	80801915 	stw	r2,100(r16)
 801b0ac:	80800017 	ldw	r2,0(r16)
 801b0b0:	81000517 	ldw	r4,20(r16)
 801b0b4:	8180030d 	sth	r6,12(r16)
 801b0b8:	10c7c83a 	sub	r3,r2,r3
 801b0bc:	193fe316 	blt	r3,r4,801b04c <__alt_data_end+0xfc01b04c>
 801b0c0:	9009883a 	mov	r4,r18
 801b0c4:	800b883a 	mov	r5,r16
 801b0c8:	80158500 	call	8015850 <_fflush_r>
 801b0cc:	1000091e 	bne	r2,zero,801b0f4 <__swbuf_r+0x10c>
 801b0d0:	80800017 	ldw	r2,0(r16)
 801b0d4:	00c00044 	movi	r3,1
 801b0d8:	003fdd06 	br	801b050 <__alt_data_end+0xfc01b050>
 801b0dc:	00800284 	movi	r2,10
 801b0e0:	88bfe61e 	bne	r17,r2,801b07c <__alt_data_end+0xfc01b07c>
 801b0e4:	9009883a 	mov	r4,r18
 801b0e8:	800b883a 	mov	r5,r16
 801b0ec:	80158500 	call	8015850 <_fflush_r>
 801b0f0:	103fe226 	beq	r2,zero,801b07c <__alt_data_end+0xfc01b07c>
 801b0f4:	00bfffc4 	movi	r2,-1
 801b0f8:	003fe106 	br	801b080 <__alt_data_end+0xfc01b080>
 801b0fc:	9009883a 	mov	r4,r18
 801b100:	800b883a 	mov	r5,r16
 801b104:	8013df80 	call	8013df8 <__swsetup_r>
 801b108:	1000051e 	bne	r2,zero,801b120 <__swbuf_r+0x138>
 801b10c:	8180030b 	ldhu	r6,12(r16)
 801b110:	80c00417 	ldw	r3,16(r16)
 801b114:	003fc606 	br	801b030 <__alt_data_end+0xfc01b030>
 801b118:	8015df80 	call	8015df8 <__sinit>
 801b11c:	003fbd06 	br	801b014 <__alt_data_end+0xfc01b014>
 801b120:	80c0030b 	ldhu	r3,12(r16)
 801b124:	00bfffc4 	movi	r2,-1
 801b128:	18c01014 	ori	r3,r3,64
 801b12c:	80c0030d 	sth	r3,12(r16)
 801b130:	00c00244 	movi	r3,9
 801b134:	90c00015 	stw	r3,0(r18)
 801b138:	003fd106 	br	801b080 <__alt_data_end+0xfc01b080>

0801b13c <__swbuf>:
 801b13c:	00c200f4 	movhi	r3,2051
 801b140:	18f31604 	addi	r3,r3,-13224
 801b144:	2005883a 	mov	r2,r4
 801b148:	19000017 	ldw	r4,0(r3)
 801b14c:	280d883a 	mov	r6,r5
 801b150:	100b883a 	mov	r5,r2
 801b154:	801afe81 	jmpi	801afe8 <__swbuf_r>

0801b158 <_write_r>:
 801b158:	defffd04 	addi	sp,sp,-12
 801b15c:	dc000015 	stw	r16,0(sp)
 801b160:	040200f4 	movhi	r16,2051
 801b164:	dc400115 	stw	r17,4(sp)
 801b168:	843a0e04 	addi	r16,r16,-6088
 801b16c:	2023883a 	mov	r17,r4
 801b170:	2809883a 	mov	r4,r5
 801b174:	300b883a 	mov	r5,r6
 801b178:	380d883a 	mov	r6,r7
 801b17c:	dfc00215 	stw	ra,8(sp)
 801b180:	80000015 	stw	zero,0(r16)
 801b184:	80010a00 	call	80010a0 <write>
 801b188:	00ffffc4 	movi	r3,-1
 801b18c:	10c00526 	beq	r2,r3,801b1a4 <_write_r+0x4c>
 801b190:	dfc00217 	ldw	ra,8(sp)
 801b194:	dc400117 	ldw	r17,4(sp)
 801b198:	dc000017 	ldw	r16,0(sp)
 801b19c:	dec00304 	addi	sp,sp,12
 801b1a0:	f800283a 	ret
 801b1a4:	80c00017 	ldw	r3,0(r16)
 801b1a8:	183ff926 	beq	r3,zero,801b190 <__alt_data_end+0xfc01b190>
 801b1ac:	88c00015 	stw	r3,0(r17)
 801b1b0:	003ff706 	br	801b190 <__alt_data_end+0xfc01b190>

0801b1b4 <_close_r>:
 801b1b4:	defffd04 	addi	sp,sp,-12
 801b1b8:	dc000015 	stw	r16,0(sp)
 801b1bc:	040200f4 	movhi	r16,2051
 801b1c0:	dc400115 	stw	r17,4(sp)
 801b1c4:	843a0e04 	addi	r16,r16,-6088
 801b1c8:	2023883a 	mov	r17,r4
 801b1cc:	2809883a 	mov	r4,r5
 801b1d0:	dfc00215 	stw	ra,8(sp)
 801b1d4:	80000015 	stw	zero,0(r16)
 801b1d8:	801d35c0 	call	801d35c <close>
 801b1dc:	00ffffc4 	movi	r3,-1
 801b1e0:	10c00526 	beq	r2,r3,801b1f8 <_close_r+0x44>
 801b1e4:	dfc00217 	ldw	ra,8(sp)
 801b1e8:	dc400117 	ldw	r17,4(sp)
 801b1ec:	dc000017 	ldw	r16,0(sp)
 801b1f0:	dec00304 	addi	sp,sp,12
 801b1f4:	f800283a 	ret
 801b1f8:	80c00017 	ldw	r3,0(r16)
 801b1fc:	183ff926 	beq	r3,zero,801b1e4 <__alt_data_end+0xfc01b1e4>
 801b200:	88c00015 	stw	r3,0(r17)
 801b204:	003ff706 	br	801b1e4 <__alt_data_end+0xfc01b1e4>

0801b208 <_calloc_r>:
 801b208:	298b383a 	mul	r5,r5,r6
 801b20c:	defffe04 	addi	sp,sp,-8
 801b210:	dc000015 	stw	r16,0(sp)
 801b214:	dfc00115 	stw	ra,4(sp)
 801b218:	800d7040 	call	800d704 <_malloc_r>
 801b21c:	1021883a 	mov	r16,r2
 801b220:	10002826 	beq	r2,zero,801b2c4 <_calloc_r+0xbc>
 801b224:	11bfff17 	ldw	r6,-4(r2)
 801b228:	00bfff04 	movi	r2,-4
 801b22c:	00c00904 	movi	r3,36
 801b230:	308c703a 	and	r6,r6,r2
 801b234:	308d883a 	add	r6,r6,r2
 801b238:	19801436 	bltu	r3,r6,801b28c <_calloc_r+0x84>
 801b23c:	008004c4 	movi	r2,19
 801b240:	11800936 	bltu	r2,r6,801b268 <_calloc_r+0x60>
 801b244:	8005883a 	mov	r2,r16
 801b248:	10000015 	stw	zero,0(r2)
 801b24c:	10000115 	stw	zero,4(r2)
 801b250:	10000215 	stw	zero,8(r2)
 801b254:	8005883a 	mov	r2,r16
 801b258:	dfc00117 	ldw	ra,4(sp)
 801b25c:	dc000017 	ldw	r16,0(sp)
 801b260:	dec00204 	addi	sp,sp,8
 801b264:	f800283a 	ret
 801b268:	80000015 	stw	zero,0(r16)
 801b26c:	80000115 	stw	zero,4(r16)
 801b270:	008006c4 	movi	r2,27
 801b274:	11800d2e 	bgeu	r2,r6,801b2ac <_calloc_r+0xa4>
 801b278:	80000215 	stw	zero,8(r16)
 801b27c:	80000315 	stw	zero,12(r16)
 801b280:	30c00c26 	beq	r6,r3,801b2b4 <_calloc_r+0xac>
 801b284:	80800404 	addi	r2,r16,16
 801b288:	003fef06 	br	801b248 <__alt_data_end+0xfc01b248>
 801b28c:	8009883a 	mov	r4,r16
 801b290:	000b883a 	mov	r5,zero
 801b294:	80175100 	call	8017510 <memset>
 801b298:	8005883a 	mov	r2,r16
 801b29c:	dfc00117 	ldw	ra,4(sp)
 801b2a0:	dc000017 	ldw	r16,0(sp)
 801b2a4:	dec00204 	addi	sp,sp,8
 801b2a8:	f800283a 	ret
 801b2ac:	80800204 	addi	r2,r16,8
 801b2b0:	003fe506 	br	801b248 <__alt_data_end+0xfc01b248>
 801b2b4:	80000415 	stw	zero,16(r16)
 801b2b8:	80800604 	addi	r2,r16,24
 801b2bc:	80000515 	stw	zero,20(r16)
 801b2c0:	003fe106 	br	801b248 <__alt_data_end+0xfc01b248>
 801b2c4:	0005883a 	mov	r2,zero
 801b2c8:	003fe306 	br	801b258 <__alt_data_end+0xfc01b258>

0801b2cc <_fclose_r>:
 801b2cc:	28003226 	beq	r5,zero,801b398 <_fclose_r+0xcc>
 801b2d0:	defffc04 	addi	sp,sp,-16
 801b2d4:	dc400115 	stw	r17,4(sp)
 801b2d8:	2023883a 	mov	r17,r4
 801b2dc:	dc000015 	stw	r16,0(sp)
 801b2e0:	dfc00315 	stw	ra,12(sp)
 801b2e4:	dc800215 	stw	r18,8(sp)
 801b2e8:	2821883a 	mov	r16,r5
 801b2ec:	8015e080 	call	8015e08 <__sfp_lock_acquire>
 801b2f0:	88000226 	beq	r17,zero,801b2fc <_fclose_r+0x30>
 801b2f4:	88800e17 	ldw	r2,56(r17)
 801b2f8:	10002926 	beq	r2,zero,801b3a0 <_fclose_r+0xd4>
 801b2fc:	8080030f 	ldh	r2,12(r16)
 801b300:	10002226 	beq	r2,zero,801b38c <_fclose_r+0xc0>
 801b304:	8809883a 	mov	r4,r17
 801b308:	800b883a 	mov	r5,r16
 801b30c:	80158500 	call	8015850 <_fflush_r>
 801b310:	1025883a 	mov	r18,r2
 801b314:	80800b17 	ldw	r2,44(r16)
 801b318:	10000426 	beq	r2,zero,801b32c <_fclose_r+0x60>
 801b31c:	81400717 	ldw	r5,28(r16)
 801b320:	8809883a 	mov	r4,r17
 801b324:	103ee83a 	callr	r2
 801b328:	10002616 	blt	r2,zero,801b3c4 <_fclose_r+0xf8>
 801b32c:	8080030b 	ldhu	r2,12(r16)
 801b330:	1080200c 	andi	r2,r2,128
 801b334:	10001f1e 	bne	r2,zero,801b3b4 <_fclose_r+0xe8>
 801b338:	81400c17 	ldw	r5,48(r16)
 801b33c:	28000526 	beq	r5,zero,801b354 <_fclose_r+0x88>
 801b340:	80801004 	addi	r2,r16,64
 801b344:	28800226 	beq	r5,r2,801b350 <_fclose_r+0x84>
 801b348:	8809883a 	mov	r4,r17
 801b34c:	8015f6c0 	call	8015f6c <_free_r>
 801b350:	80000c15 	stw	zero,48(r16)
 801b354:	81401117 	ldw	r5,68(r16)
 801b358:	28000326 	beq	r5,zero,801b368 <_fclose_r+0x9c>
 801b35c:	8809883a 	mov	r4,r17
 801b360:	8015f6c0 	call	8015f6c <_free_r>
 801b364:	80001115 	stw	zero,68(r16)
 801b368:	8000030d 	sth	zero,12(r16)
 801b36c:	8015e0c0 	call	8015e0c <__sfp_lock_release>
 801b370:	9005883a 	mov	r2,r18
 801b374:	dfc00317 	ldw	ra,12(sp)
 801b378:	dc800217 	ldw	r18,8(sp)
 801b37c:	dc400117 	ldw	r17,4(sp)
 801b380:	dc000017 	ldw	r16,0(sp)
 801b384:	dec00404 	addi	sp,sp,16
 801b388:	f800283a 	ret
 801b38c:	8015e0c0 	call	8015e0c <__sfp_lock_release>
 801b390:	0005883a 	mov	r2,zero
 801b394:	003ff706 	br	801b374 <__alt_data_end+0xfc01b374>
 801b398:	0005883a 	mov	r2,zero
 801b39c:	f800283a 	ret
 801b3a0:	8809883a 	mov	r4,r17
 801b3a4:	8015df80 	call	8015df8 <__sinit>
 801b3a8:	8080030f 	ldh	r2,12(r16)
 801b3ac:	103fd51e 	bne	r2,zero,801b304 <__alt_data_end+0xfc01b304>
 801b3b0:	003ff606 	br	801b38c <__alt_data_end+0xfc01b38c>
 801b3b4:	81400417 	ldw	r5,16(r16)
 801b3b8:	8809883a 	mov	r4,r17
 801b3bc:	8015f6c0 	call	8015f6c <_free_r>
 801b3c0:	003fdd06 	br	801b338 <__alt_data_end+0xfc01b338>
 801b3c4:	04bfffc4 	movi	r18,-1
 801b3c8:	003fd806 	br	801b32c <__alt_data_end+0xfc01b32c>

0801b3cc <fclose>:
 801b3cc:	008200f4 	movhi	r2,2051
 801b3d0:	10b31604 	addi	r2,r2,-13224
 801b3d4:	200b883a 	mov	r5,r4
 801b3d8:	11000017 	ldw	r4,0(r2)
 801b3dc:	801b2cc1 	jmpi	801b2cc <_fclose_r>

0801b3e0 <_fputwc_r>:
 801b3e0:	3080030b 	ldhu	r2,12(r6)
 801b3e4:	defff804 	addi	sp,sp,-32
 801b3e8:	dcc00415 	stw	r19,16(sp)
 801b3ec:	dc800315 	stw	r18,12(sp)
 801b3f0:	dc000115 	stw	r16,4(sp)
 801b3f4:	dfc00715 	stw	ra,28(sp)
 801b3f8:	dd400615 	stw	r21,24(sp)
 801b3fc:	dd000515 	stw	r20,20(sp)
 801b400:	dc400215 	stw	r17,8(sp)
 801b404:	10c8000c 	andi	r3,r2,8192
 801b408:	3021883a 	mov	r16,r6
 801b40c:	2027883a 	mov	r19,r4
 801b410:	2825883a 	mov	r18,r5
 801b414:	1800051e 	bne	r3,zero,801b42c <_fputwc_r+0x4c>
 801b418:	30c01917 	ldw	r3,100(r6)
 801b41c:	10880014 	ori	r2,r2,8192
 801b420:	3080030d 	sth	r2,12(r6)
 801b424:	18880014 	ori	r2,r3,8192
 801b428:	30801915 	stw	r2,100(r6)
 801b42c:	80170e00 	call	80170e0 <__locale_mb_cur_max>
 801b430:	00c00044 	movi	r3,1
 801b434:	10c03e26 	beq	r2,r3,801b530 <_fputwc_r+0x150>
 801b438:	9809883a 	mov	r4,r19
 801b43c:	d80b883a 	mov	r5,sp
 801b440:	900d883a 	mov	r6,r18
 801b444:	81c01704 	addi	r7,r16,92
 801b448:	801c2c00 	call	801c2c0 <_wcrtomb_r>
 801b44c:	1029883a 	mov	r20,r2
 801b450:	00bfffc4 	movi	r2,-1
 801b454:	a0802026 	beq	r20,r2,801b4d8 <_fputwc_r+0xf8>
 801b458:	d9400003 	ldbu	r5,0(sp)
 801b45c:	a0001c26 	beq	r20,zero,801b4d0 <_fputwc_r+0xf0>
 801b460:	0023883a 	mov	r17,zero
 801b464:	05400284 	movi	r21,10
 801b468:	00000906 	br	801b490 <_fputwc_r+0xb0>
 801b46c:	80800017 	ldw	r2,0(r16)
 801b470:	11400005 	stb	r5,0(r2)
 801b474:	80c00017 	ldw	r3,0(r16)
 801b478:	18c00044 	addi	r3,r3,1
 801b47c:	80c00015 	stw	r3,0(r16)
 801b480:	8c400044 	addi	r17,r17,1
 801b484:	dc45883a 	add	r2,sp,r17
 801b488:	8d00112e 	bgeu	r17,r20,801b4d0 <_fputwc_r+0xf0>
 801b48c:	11400003 	ldbu	r5,0(r2)
 801b490:	80c00217 	ldw	r3,8(r16)
 801b494:	18ffffc4 	addi	r3,r3,-1
 801b498:	80c00215 	stw	r3,8(r16)
 801b49c:	183ff30e 	bge	r3,zero,801b46c <__alt_data_end+0xfc01b46c>
 801b4a0:	80800617 	ldw	r2,24(r16)
 801b4a4:	18801916 	blt	r3,r2,801b50c <_fputwc_r+0x12c>
 801b4a8:	80800017 	ldw	r2,0(r16)
 801b4ac:	11400005 	stb	r5,0(r2)
 801b4b0:	80800017 	ldw	r2,0(r16)
 801b4b4:	10c00003 	ldbu	r3,0(r2)
 801b4b8:	10800044 	addi	r2,r2,1
 801b4bc:	1d402326 	beq	r3,r21,801b54c <_fputwc_r+0x16c>
 801b4c0:	80800015 	stw	r2,0(r16)
 801b4c4:	8c400044 	addi	r17,r17,1
 801b4c8:	dc45883a 	add	r2,sp,r17
 801b4cc:	8d3fef36 	bltu	r17,r20,801b48c <__alt_data_end+0xfc01b48c>
 801b4d0:	9005883a 	mov	r2,r18
 801b4d4:	00000406 	br	801b4e8 <_fputwc_r+0x108>
 801b4d8:	80c0030b 	ldhu	r3,12(r16)
 801b4dc:	a005883a 	mov	r2,r20
 801b4e0:	18c01014 	ori	r3,r3,64
 801b4e4:	80c0030d 	sth	r3,12(r16)
 801b4e8:	dfc00717 	ldw	ra,28(sp)
 801b4ec:	dd400617 	ldw	r21,24(sp)
 801b4f0:	dd000517 	ldw	r20,20(sp)
 801b4f4:	dcc00417 	ldw	r19,16(sp)
 801b4f8:	dc800317 	ldw	r18,12(sp)
 801b4fc:	dc400217 	ldw	r17,8(sp)
 801b500:	dc000117 	ldw	r16,4(sp)
 801b504:	dec00804 	addi	sp,sp,32
 801b508:	f800283a 	ret
 801b50c:	9809883a 	mov	r4,r19
 801b510:	29403fcc 	andi	r5,r5,255
 801b514:	800d883a 	mov	r6,r16
 801b518:	801afe80 	call	801afe8 <__swbuf_r>
 801b51c:	10bfffe0 	cmpeqi	r2,r2,-1
 801b520:	10803fcc 	andi	r2,r2,255
 801b524:	103fd626 	beq	r2,zero,801b480 <__alt_data_end+0xfc01b480>
 801b528:	00bfffc4 	movi	r2,-1
 801b52c:	003fee06 	br	801b4e8 <__alt_data_end+0xfc01b4e8>
 801b530:	90ffffc4 	addi	r3,r18,-1
 801b534:	01003f84 	movi	r4,254
 801b538:	20ffbf36 	bltu	r4,r3,801b438 <__alt_data_end+0xfc01b438>
 801b53c:	900b883a 	mov	r5,r18
 801b540:	dc800005 	stb	r18,0(sp)
 801b544:	1029883a 	mov	r20,r2
 801b548:	003fc506 	br	801b460 <__alt_data_end+0xfc01b460>
 801b54c:	9809883a 	mov	r4,r19
 801b550:	a80b883a 	mov	r5,r21
 801b554:	800d883a 	mov	r6,r16
 801b558:	801afe80 	call	801afe8 <__swbuf_r>
 801b55c:	10bfffe0 	cmpeqi	r2,r2,-1
 801b560:	003fef06 	br	801b520 <__alt_data_end+0xfc01b520>

0801b564 <fputwc>:
 801b564:	defffc04 	addi	sp,sp,-16
 801b568:	dc000115 	stw	r16,4(sp)
 801b56c:	040200f4 	movhi	r16,2051
 801b570:	84331604 	addi	r16,r16,-13224
 801b574:	dc400215 	stw	r17,8(sp)
 801b578:	2023883a 	mov	r17,r4
 801b57c:	81000017 	ldw	r4,0(r16)
 801b580:	dfc00315 	stw	ra,12(sp)
 801b584:	280d883a 	mov	r6,r5
 801b588:	20000626 	beq	r4,zero,801b5a4 <fputwc+0x40>
 801b58c:	20800e17 	ldw	r2,56(r4)
 801b590:	1000041e 	bne	r2,zero,801b5a4 <fputwc+0x40>
 801b594:	d9400015 	stw	r5,0(sp)
 801b598:	8015df80 	call	8015df8 <__sinit>
 801b59c:	81000017 	ldw	r4,0(r16)
 801b5a0:	d9800017 	ldw	r6,0(sp)
 801b5a4:	880b883a 	mov	r5,r17
 801b5a8:	dfc00317 	ldw	ra,12(sp)
 801b5ac:	dc400217 	ldw	r17,8(sp)
 801b5b0:	dc000117 	ldw	r16,4(sp)
 801b5b4:	dec00404 	addi	sp,sp,16
 801b5b8:	801b3e01 	jmpi	801b3e0 <_fputwc_r>

0801b5bc <_fstat_r>:
 801b5bc:	defffd04 	addi	sp,sp,-12
 801b5c0:	dc000015 	stw	r16,0(sp)
 801b5c4:	040200f4 	movhi	r16,2051
 801b5c8:	dc400115 	stw	r17,4(sp)
 801b5cc:	843a0e04 	addi	r16,r16,-6088
 801b5d0:	2023883a 	mov	r17,r4
 801b5d4:	2809883a 	mov	r4,r5
 801b5d8:	300b883a 	mov	r5,r6
 801b5dc:	dfc00215 	stw	ra,8(sp)
 801b5e0:	80000015 	stw	zero,0(r16)
 801b5e4:	801d4a80 	call	801d4a8 <fstat>
 801b5e8:	00ffffc4 	movi	r3,-1
 801b5ec:	10c00526 	beq	r2,r3,801b604 <_fstat_r+0x48>
 801b5f0:	dfc00217 	ldw	ra,8(sp)
 801b5f4:	dc400117 	ldw	r17,4(sp)
 801b5f8:	dc000017 	ldw	r16,0(sp)
 801b5fc:	dec00304 	addi	sp,sp,12
 801b600:	f800283a 	ret
 801b604:	80c00017 	ldw	r3,0(r16)
 801b608:	183ff926 	beq	r3,zero,801b5f0 <__alt_data_end+0xfc01b5f0>
 801b60c:	88c00015 	stw	r3,0(r17)
 801b610:	003ff706 	br	801b5f0 <__alt_data_end+0xfc01b5f0>

0801b614 <__sfvwrite_r>:
 801b614:	30800217 	ldw	r2,8(r6)
 801b618:	10004526 	beq	r2,zero,801b730 <__sfvwrite_r+0x11c>
 801b61c:	28c0030b 	ldhu	r3,12(r5)
 801b620:	defff404 	addi	sp,sp,-48
 801b624:	dd400715 	stw	r21,28(sp)
 801b628:	dcc00515 	stw	r19,20(sp)
 801b62c:	dc000215 	stw	r16,8(sp)
 801b630:	dfc00b15 	stw	ra,44(sp)
 801b634:	df000a15 	stw	fp,40(sp)
 801b638:	ddc00915 	stw	r23,36(sp)
 801b63c:	dd800815 	stw	r22,32(sp)
 801b640:	dd000615 	stw	r20,24(sp)
 801b644:	dc800415 	stw	r18,16(sp)
 801b648:	dc400315 	stw	r17,12(sp)
 801b64c:	1880020c 	andi	r2,r3,8
 801b650:	2821883a 	mov	r16,r5
 801b654:	202b883a 	mov	r21,r4
 801b658:	3027883a 	mov	r19,r6
 801b65c:	10002526 	beq	r2,zero,801b6f4 <__sfvwrite_r+0xe0>
 801b660:	28800417 	ldw	r2,16(r5)
 801b664:	10002326 	beq	r2,zero,801b6f4 <__sfvwrite_r+0xe0>
 801b668:	1880008c 	andi	r2,r3,2
 801b66c:	9c400017 	ldw	r17,0(r19)
 801b670:	10003126 	beq	r2,zero,801b738 <__sfvwrite_r+0x124>
 801b674:	0029883a 	mov	r20,zero
 801b678:	0025883a 	mov	r18,zero
 801b67c:	05810004 	movi	r22,1024
 801b680:	a00d883a 	mov	r6,r20
 801b684:	a809883a 	mov	r4,r21
 801b688:	90002526 	beq	r18,zero,801b720 <__sfvwrite_r+0x10c>
 801b68c:	900f883a 	mov	r7,r18
 801b690:	81400717 	ldw	r5,28(r16)
 801b694:	b480012e 	bgeu	r22,r18,801b69c <__sfvwrite_r+0x88>
 801b698:	01c10004 	movi	r7,1024
 801b69c:	80800917 	ldw	r2,36(r16)
 801b6a0:	103ee83a 	callr	r2
 801b6a4:	0080510e 	bge	zero,r2,801b7ec <__sfvwrite_r+0x1d8>
 801b6a8:	98c00217 	ldw	r3,8(r19)
 801b6ac:	a0a9883a 	add	r20,r20,r2
 801b6b0:	90a5c83a 	sub	r18,r18,r2
 801b6b4:	1885c83a 	sub	r2,r3,r2
 801b6b8:	98800215 	stw	r2,8(r19)
 801b6bc:	103ff01e 	bne	r2,zero,801b680 <__alt_data_end+0xfc01b680>
 801b6c0:	0005883a 	mov	r2,zero
 801b6c4:	dfc00b17 	ldw	ra,44(sp)
 801b6c8:	df000a17 	ldw	fp,40(sp)
 801b6cc:	ddc00917 	ldw	r23,36(sp)
 801b6d0:	dd800817 	ldw	r22,32(sp)
 801b6d4:	dd400717 	ldw	r21,28(sp)
 801b6d8:	dd000617 	ldw	r20,24(sp)
 801b6dc:	dcc00517 	ldw	r19,20(sp)
 801b6e0:	dc800417 	ldw	r18,16(sp)
 801b6e4:	dc400317 	ldw	r17,12(sp)
 801b6e8:	dc000217 	ldw	r16,8(sp)
 801b6ec:	dec00c04 	addi	sp,sp,48
 801b6f0:	f800283a 	ret
 801b6f4:	a809883a 	mov	r4,r21
 801b6f8:	800b883a 	mov	r5,r16
 801b6fc:	8013df80 	call	8013df8 <__swsetup_r>
 801b700:	80c0030b 	ldhu	r3,12(r16)
 801b704:	103fd826 	beq	r2,zero,801b668 <__alt_data_end+0xfc01b668>
 801b708:	18c01014 	ori	r3,r3,64
 801b70c:	80c0030d 	sth	r3,12(r16)
 801b710:	00c00244 	movi	r3,9
 801b714:	00bfffc4 	movi	r2,-1
 801b718:	a8c00015 	stw	r3,0(r21)
 801b71c:	003fe906 	br	801b6c4 <__alt_data_end+0xfc01b6c4>
 801b720:	8d000017 	ldw	r20,0(r17)
 801b724:	8c800117 	ldw	r18,4(r17)
 801b728:	8c400204 	addi	r17,r17,8
 801b72c:	003fd406 	br	801b680 <__alt_data_end+0xfc01b680>
 801b730:	0005883a 	mov	r2,zero
 801b734:	f800283a 	ret
 801b738:	1880004c 	andi	r2,r3,1
 801b73c:	1000301e 	bne	r2,zero,801b800 <__sfvwrite_r+0x1ec>
 801b740:	002f883a 	mov	r23,zero
 801b744:	0025883a 	mov	r18,zero
 801b748:	90001c26 	beq	r18,zero,801b7bc <__sfvwrite_r+0x1a8>
 801b74c:	1880800c 	andi	r2,r3,512
 801b750:	85000217 	ldw	r20,8(r16)
 801b754:	10006c26 	beq	r2,zero,801b908 <__sfvwrite_r+0x2f4>
 801b758:	a02d883a 	mov	r22,r20
 801b75c:	95008536 	bltu	r18,r20,801b974 <__sfvwrite_r+0x360>
 801b760:	1881200c 	andi	r2,r3,1152
 801b764:	10009d1e 	bne	r2,zero,801b9dc <__sfvwrite_r+0x3c8>
 801b768:	81000017 	ldw	r4,0(r16)
 801b76c:	a039883a 	mov	fp,r20
 801b770:	9029883a 	mov	r20,r18
 801b774:	b80b883a 	mov	r5,r23
 801b778:	b00d883a 	mov	r6,r22
 801b77c:	801bb680 	call	801bb68 <memmove>
 801b780:	80c00217 	ldw	r3,8(r16)
 801b784:	81000017 	ldw	r4,0(r16)
 801b788:	9005883a 	mov	r2,r18
 801b78c:	1f39c83a 	sub	fp,r3,fp
 801b790:	258f883a 	add	r7,r4,r22
 801b794:	87000215 	stw	fp,8(r16)
 801b798:	81c00015 	stw	r7,0(r16)
 801b79c:	98c00217 	ldw	r3,8(r19)
 801b7a0:	b8af883a 	add	r23,r23,r2
 801b7a4:	90a5c83a 	sub	r18,r18,r2
 801b7a8:	1d05c83a 	sub	r2,r3,r20
 801b7ac:	98800215 	stw	r2,8(r19)
 801b7b0:	103fc326 	beq	r2,zero,801b6c0 <__alt_data_end+0xfc01b6c0>
 801b7b4:	80c0030b 	ldhu	r3,12(r16)
 801b7b8:	903fe41e 	bne	r18,zero,801b74c <__alt_data_end+0xfc01b74c>
 801b7bc:	8dc00017 	ldw	r23,0(r17)
 801b7c0:	8c800117 	ldw	r18,4(r17)
 801b7c4:	8c400204 	addi	r17,r17,8
 801b7c8:	003fdf06 	br	801b748 <__alt_data_end+0xfc01b748>
 801b7cc:	801bd200 	call	801bd20 <_realloc_r>
 801b7d0:	102d883a 	mov	r22,r2
 801b7d4:	1000a01e 	bne	r2,zero,801ba58 <__sfvwrite_r+0x444>
 801b7d8:	81400417 	ldw	r5,16(r16)
 801b7dc:	a809883a 	mov	r4,r21
 801b7e0:	8015f6c0 	call	8015f6c <_free_r>
 801b7e4:	00800304 	movi	r2,12
 801b7e8:	a8800015 	stw	r2,0(r21)
 801b7ec:	80c0030b 	ldhu	r3,12(r16)
 801b7f0:	00bfffc4 	movi	r2,-1
 801b7f4:	18c01014 	ori	r3,r3,64
 801b7f8:	80c0030d 	sth	r3,12(r16)
 801b7fc:	003fb106 	br	801b6c4 <__alt_data_end+0xfc01b6c4>
 801b800:	0029883a 	mov	r20,zero
 801b804:	0011883a 	mov	r8,zero
 801b808:	0039883a 	mov	fp,zero
 801b80c:	0025883a 	mov	r18,zero
 801b810:	90001f26 	beq	r18,zero,801b890 <__sfvwrite_r+0x27c>
 801b814:	40006826 	beq	r8,zero,801b9b8 <__sfvwrite_r+0x3a4>
 801b818:	a02f883a 	mov	r23,r20
 801b81c:	9500012e 	bgeu	r18,r20,801b824 <__sfvwrite_r+0x210>
 801b820:	902f883a 	mov	r23,r18
 801b824:	81000017 	ldw	r4,0(r16)
 801b828:	80800417 	ldw	r2,16(r16)
 801b82c:	b82d883a 	mov	r22,r23
 801b830:	81800217 	ldw	r6,8(r16)
 801b834:	81c00517 	ldw	r7,20(r16)
 801b838:	1100022e 	bgeu	r2,r4,801b844 <__sfvwrite_r+0x230>
 801b83c:	31c7883a 	add	r3,r6,r7
 801b840:	1dc01816 	blt	r3,r23,801b8a4 <__sfvwrite_r+0x290>
 801b844:	b9c03f16 	blt	r23,r7,801b944 <__sfvwrite_r+0x330>
 801b848:	80800917 	ldw	r2,36(r16)
 801b84c:	81400717 	ldw	r5,28(r16)
 801b850:	a809883a 	mov	r4,r21
 801b854:	da000115 	stw	r8,4(sp)
 801b858:	e00d883a 	mov	r6,fp
 801b85c:	103ee83a 	callr	r2
 801b860:	102d883a 	mov	r22,r2
 801b864:	da000117 	ldw	r8,4(sp)
 801b868:	00bfe00e 	bge	zero,r2,801b7ec <__alt_data_end+0xfc01b7ec>
 801b86c:	a5a9c83a 	sub	r20,r20,r22
 801b870:	a0001f26 	beq	r20,zero,801b8f0 <__sfvwrite_r+0x2dc>
 801b874:	98800217 	ldw	r2,8(r19)
 801b878:	e5b9883a 	add	fp,fp,r22
 801b87c:	95a5c83a 	sub	r18,r18,r22
 801b880:	15adc83a 	sub	r22,r2,r22
 801b884:	9d800215 	stw	r22,8(r19)
 801b888:	b03f8d26 	beq	r22,zero,801b6c0 <__alt_data_end+0xfc01b6c0>
 801b88c:	903fe11e 	bne	r18,zero,801b814 <__alt_data_end+0xfc01b814>
 801b890:	8f000017 	ldw	fp,0(r17)
 801b894:	8c800117 	ldw	r18,4(r17)
 801b898:	0011883a 	mov	r8,zero
 801b89c:	8c400204 	addi	r17,r17,8
 801b8a0:	003fdb06 	br	801b810 <__alt_data_end+0xfc01b810>
 801b8a4:	180d883a 	mov	r6,r3
 801b8a8:	e00b883a 	mov	r5,fp
 801b8ac:	da000115 	stw	r8,4(sp)
 801b8b0:	d8c00015 	stw	r3,0(sp)
 801b8b4:	801bb680 	call	801bb68 <memmove>
 801b8b8:	d8c00017 	ldw	r3,0(sp)
 801b8bc:	80800017 	ldw	r2,0(r16)
 801b8c0:	a809883a 	mov	r4,r21
 801b8c4:	800b883a 	mov	r5,r16
 801b8c8:	10c5883a 	add	r2,r2,r3
 801b8cc:	80800015 	stw	r2,0(r16)
 801b8d0:	d8c00015 	stw	r3,0(sp)
 801b8d4:	80158500 	call	8015850 <_fflush_r>
 801b8d8:	d8c00017 	ldw	r3,0(sp)
 801b8dc:	da000117 	ldw	r8,4(sp)
 801b8e0:	103fc21e 	bne	r2,zero,801b7ec <__alt_data_end+0xfc01b7ec>
 801b8e4:	182d883a 	mov	r22,r3
 801b8e8:	a5a9c83a 	sub	r20,r20,r22
 801b8ec:	a03fe11e 	bne	r20,zero,801b874 <__alt_data_end+0xfc01b874>
 801b8f0:	a809883a 	mov	r4,r21
 801b8f4:	800b883a 	mov	r5,r16
 801b8f8:	80158500 	call	8015850 <_fflush_r>
 801b8fc:	103fbb1e 	bne	r2,zero,801b7ec <__alt_data_end+0xfc01b7ec>
 801b900:	0011883a 	mov	r8,zero
 801b904:	003fdb06 	br	801b874 <__alt_data_end+0xfc01b874>
 801b908:	81000017 	ldw	r4,0(r16)
 801b90c:	80800417 	ldw	r2,16(r16)
 801b910:	1100012e 	bgeu	r2,r4,801b918 <__sfvwrite_r+0x304>
 801b914:	a4805a36 	bltu	r20,r18,801ba80 <__sfvwrite_r+0x46c>
 801b918:	81c00517 	ldw	r7,20(r16)
 801b91c:	91c01a36 	bltu	r18,r7,801b988 <__sfvwrite_r+0x374>
 801b920:	80800917 	ldw	r2,36(r16)
 801b924:	81400717 	ldw	r5,28(r16)
 801b928:	a809883a 	mov	r4,r21
 801b92c:	b80d883a 	mov	r6,r23
 801b930:	103ee83a 	callr	r2
 801b934:	1029883a 	mov	r20,r2
 801b938:	00bfac0e 	bge	zero,r2,801b7ec <__alt_data_end+0xfc01b7ec>
 801b93c:	a005883a 	mov	r2,r20
 801b940:	003f9606 	br	801b79c <__alt_data_end+0xfc01b79c>
 801b944:	b80d883a 	mov	r6,r23
 801b948:	e00b883a 	mov	r5,fp
 801b94c:	da000115 	stw	r8,4(sp)
 801b950:	801bb680 	call	801bb68 <memmove>
 801b954:	80800217 	ldw	r2,8(r16)
 801b958:	80c00017 	ldw	r3,0(r16)
 801b95c:	da000117 	ldw	r8,4(sp)
 801b960:	15c5c83a 	sub	r2,r2,r23
 801b964:	1def883a 	add	r23,r3,r23
 801b968:	80800215 	stw	r2,8(r16)
 801b96c:	85c00015 	stw	r23,0(r16)
 801b970:	003fbe06 	br	801b86c <__alt_data_end+0xfc01b86c>
 801b974:	81000017 	ldw	r4,0(r16)
 801b978:	9039883a 	mov	fp,r18
 801b97c:	9029883a 	mov	r20,r18
 801b980:	902d883a 	mov	r22,r18
 801b984:	003f7b06 	br	801b774 <__alt_data_end+0xfc01b774>
 801b988:	b80b883a 	mov	r5,r23
 801b98c:	900d883a 	mov	r6,r18
 801b990:	801bb680 	call	801bb68 <memmove>
 801b994:	80c00217 	ldw	r3,8(r16)
 801b998:	80800017 	ldw	r2,0(r16)
 801b99c:	9029883a 	mov	r20,r18
 801b9a0:	1c87c83a 	sub	r3,r3,r18
 801b9a4:	1485883a 	add	r2,r2,r18
 801b9a8:	80800015 	stw	r2,0(r16)
 801b9ac:	80c00215 	stw	r3,8(r16)
 801b9b0:	9005883a 	mov	r2,r18
 801b9b4:	003f7906 	br	801b79c <__alt_data_end+0xfc01b79c>
 801b9b8:	e009883a 	mov	r4,fp
 801b9bc:	01400284 	movi	r5,10
 801b9c0:	900d883a 	mov	r6,r18
 801b9c4:	80172f00 	call	80172f0 <memchr>
 801b9c8:	10003826 	beq	r2,zero,801baac <__sfvwrite_r+0x498>
 801b9cc:	10800044 	addi	r2,r2,1
 801b9d0:	1729c83a 	sub	r20,r2,fp
 801b9d4:	02000044 	movi	r8,1
 801b9d8:	003f8f06 	br	801b818 <__alt_data_end+0xfc01b818>
 801b9dc:	80800517 	ldw	r2,20(r16)
 801b9e0:	81400417 	ldw	r5,16(r16)
 801b9e4:	87000017 	ldw	fp,0(r16)
 801b9e8:	10a9883a 	add	r20,r2,r2
 801b9ec:	a085883a 	add	r2,r20,r2
 801b9f0:	1028d7fa 	srli	r20,r2,31
 801b9f4:	e179c83a 	sub	fp,fp,r5
 801b9f8:	e1000044 	addi	r4,fp,1
 801b9fc:	a085883a 	add	r2,r20,r2
 801ba00:	1029d07a 	srai	r20,r2,1
 801ba04:	2485883a 	add	r2,r4,r18
 801ba08:	a00d883a 	mov	r6,r20
 801ba0c:	a080022e 	bgeu	r20,r2,801ba18 <__sfvwrite_r+0x404>
 801ba10:	1029883a 	mov	r20,r2
 801ba14:	100d883a 	mov	r6,r2
 801ba18:	18c1000c 	andi	r3,r3,1024
 801ba1c:	a809883a 	mov	r4,r21
 801ba20:	183f6a26 	beq	r3,zero,801b7cc <__alt_data_end+0xfc01b7cc>
 801ba24:	300b883a 	mov	r5,r6
 801ba28:	800d7040 	call	800d704 <_malloc_r>
 801ba2c:	102d883a 	mov	r22,r2
 801ba30:	103f6c26 	beq	r2,zero,801b7e4 <__alt_data_end+0xfc01b7e4>
 801ba34:	81400417 	ldw	r5,16(r16)
 801ba38:	1009883a 	mov	r4,r2
 801ba3c:	e00d883a 	mov	r6,fp
 801ba40:	80173d80 	call	80173d8 <memcpy>
 801ba44:	8080030b 	ldhu	r2,12(r16)
 801ba48:	00fedfc4 	movi	r3,-1153
 801ba4c:	10c4703a 	and	r2,r2,r3
 801ba50:	10802014 	ori	r2,r2,128
 801ba54:	8080030d 	sth	r2,12(r16)
 801ba58:	b709883a 	add	r4,r22,fp
 801ba5c:	a707c83a 	sub	r3,r20,fp
 801ba60:	85800415 	stw	r22,16(r16)
 801ba64:	85000515 	stw	r20,20(r16)
 801ba68:	81000015 	stw	r4,0(r16)
 801ba6c:	9039883a 	mov	fp,r18
 801ba70:	80c00215 	stw	r3,8(r16)
 801ba74:	9029883a 	mov	r20,r18
 801ba78:	902d883a 	mov	r22,r18
 801ba7c:	003f3d06 	br	801b774 <__alt_data_end+0xfc01b774>
 801ba80:	b80b883a 	mov	r5,r23
 801ba84:	a00d883a 	mov	r6,r20
 801ba88:	801bb680 	call	801bb68 <memmove>
 801ba8c:	80800017 	ldw	r2,0(r16)
 801ba90:	a809883a 	mov	r4,r21
 801ba94:	800b883a 	mov	r5,r16
 801ba98:	1505883a 	add	r2,r2,r20
 801ba9c:	80800015 	stw	r2,0(r16)
 801baa0:	80158500 	call	8015850 <_fflush_r>
 801baa4:	103fa526 	beq	r2,zero,801b93c <__alt_data_end+0xfc01b93c>
 801baa8:	003f5006 	br	801b7ec <__alt_data_end+0xfc01b7ec>
 801baac:	95000044 	addi	r20,r18,1
 801bab0:	02000044 	movi	r8,1
 801bab4:	003f5806 	br	801b818 <__alt_data_end+0xfc01b818>

0801bab8 <_isatty_r>:
 801bab8:	defffd04 	addi	sp,sp,-12
 801babc:	dc000015 	stw	r16,0(sp)
 801bac0:	040200f4 	movhi	r16,2051
 801bac4:	dc400115 	stw	r17,4(sp)
 801bac8:	843a0e04 	addi	r16,r16,-6088
 801bacc:	2023883a 	mov	r17,r4
 801bad0:	2809883a 	mov	r4,r5
 801bad4:	dfc00215 	stw	ra,8(sp)
 801bad8:	80000015 	stw	zero,0(r16)
 801badc:	801d79c0 	call	801d79c <isatty>
 801bae0:	00ffffc4 	movi	r3,-1
 801bae4:	10c00526 	beq	r2,r3,801bafc <_isatty_r+0x44>
 801bae8:	dfc00217 	ldw	ra,8(sp)
 801baec:	dc400117 	ldw	r17,4(sp)
 801baf0:	dc000017 	ldw	r16,0(sp)
 801baf4:	dec00304 	addi	sp,sp,12
 801baf8:	f800283a 	ret
 801bafc:	80c00017 	ldw	r3,0(r16)
 801bb00:	183ff926 	beq	r3,zero,801bae8 <__alt_data_end+0xfc01bae8>
 801bb04:	88c00015 	stw	r3,0(r17)
 801bb08:	003ff706 	br	801bae8 <__alt_data_end+0xfc01bae8>

0801bb0c <_lseek_r>:
 801bb0c:	defffd04 	addi	sp,sp,-12
 801bb10:	dc000015 	stw	r16,0(sp)
 801bb14:	040200f4 	movhi	r16,2051
 801bb18:	dc400115 	stw	r17,4(sp)
 801bb1c:	843a0e04 	addi	r16,r16,-6088
 801bb20:	2023883a 	mov	r17,r4
 801bb24:	2809883a 	mov	r4,r5
 801bb28:	300b883a 	mov	r5,r6
 801bb2c:	380d883a 	mov	r6,r7
 801bb30:	dfc00215 	stw	ra,8(sp)
 801bb34:	80000015 	stw	zero,0(r16)
 801bb38:	801d9740 	call	801d974 <lseek>
 801bb3c:	00ffffc4 	movi	r3,-1
 801bb40:	10c00526 	beq	r2,r3,801bb58 <_lseek_r+0x4c>
 801bb44:	dfc00217 	ldw	ra,8(sp)
 801bb48:	dc400117 	ldw	r17,4(sp)
 801bb4c:	dc000017 	ldw	r16,0(sp)
 801bb50:	dec00304 	addi	sp,sp,12
 801bb54:	f800283a 	ret
 801bb58:	80c00017 	ldw	r3,0(r16)
 801bb5c:	183ff926 	beq	r3,zero,801bb44 <__alt_data_end+0xfc01bb44>
 801bb60:	88c00015 	stw	r3,0(r17)
 801bb64:	003ff706 	br	801bb44 <__alt_data_end+0xfc01bb44>

0801bb68 <memmove>:
 801bb68:	2005883a 	mov	r2,r4
 801bb6c:	29000b2e 	bgeu	r5,r4,801bb9c <memmove+0x34>
 801bb70:	298f883a 	add	r7,r5,r6
 801bb74:	21c0092e 	bgeu	r4,r7,801bb9c <memmove+0x34>
 801bb78:	2187883a 	add	r3,r4,r6
 801bb7c:	198bc83a 	sub	r5,r3,r6
 801bb80:	30004b26 	beq	r6,zero,801bcb0 <memmove+0x148>
 801bb84:	39ffffc4 	addi	r7,r7,-1
 801bb88:	39000003 	ldbu	r4,0(r7)
 801bb8c:	18ffffc4 	addi	r3,r3,-1
 801bb90:	19000005 	stb	r4,0(r3)
 801bb94:	197ffb1e 	bne	r3,r5,801bb84 <__alt_data_end+0xfc01bb84>
 801bb98:	f800283a 	ret
 801bb9c:	00c003c4 	movi	r3,15
 801bba0:	1980412e 	bgeu	r3,r6,801bca8 <memmove+0x140>
 801bba4:	1146b03a 	or	r3,r2,r5
 801bba8:	18c000cc 	andi	r3,r3,3
 801bbac:	1800411e 	bne	r3,zero,801bcb4 <memmove+0x14c>
 801bbb0:	33fffc04 	addi	r15,r6,-16
 801bbb4:	781ed13a 	srli	r15,r15,4
 801bbb8:	28c00104 	addi	r3,r5,4
 801bbbc:	13400104 	addi	r13,r2,4
 801bbc0:	781c913a 	slli	r14,r15,4
 801bbc4:	2b000204 	addi	r12,r5,8
 801bbc8:	12c00204 	addi	r11,r2,8
 801bbcc:	73800504 	addi	r14,r14,20
 801bbd0:	2a800304 	addi	r10,r5,12
 801bbd4:	12400304 	addi	r9,r2,12
 801bbd8:	2b9d883a 	add	r14,r5,r14
 801bbdc:	2811883a 	mov	r8,r5
 801bbe0:	100f883a 	mov	r7,r2
 801bbe4:	41000017 	ldw	r4,0(r8)
 801bbe8:	39c00404 	addi	r7,r7,16
 801bbec:	18c00404 	addi	r3,r3,16
 801bbf0:	393ffc15 	stw	r4,-16(r7)
 801bbf4:	193ffc17 	ldw	r4,-16(r3)
 801bbf8:	6b400404 	addi	r13,r13,16
 801bbfc:	5ac00404 	addi	r11,r11,16
 801bc00:	693ffc15 	stw	r4,-16(r13)
 801bc04:	61000017 	ldw	r4,0(r12)
 801bc08:	4a400404 	addi	r9,r9,16
 801bc0c:	42000404 	addi	r8,r8,16
 801bc10:	593ffc15 	stw	r4,-16(r11)
 801bc14:	51000017 	ldw	r4,0(r10)
 801bc18:	63000404 	addi	r12,r12,16
 801bc1c:	52800404 	addi	r10,r10,16
 801bc20:	493ffc15 	stw	r4,-16(r9)
 801bc24:	1bbfef1e 	bne	r3,r14,801bbe4 <__alt_data_end+0xfc01bbe4>
 801bc28:	79000044 	addi	r4,r15,1
 801bc2c:	2008913a 	slli	r4,r4,4
 801bc30:	328003cc 	andi	r10,r6,15
 801bc34:	02c000c4 	movi	r11,3
 801bc38:	1107883a 	add	r3,r2,r4
 801bc3c:	290b883a 	add	r5,r5,r4
 801bc40:	5a801e2e 	bgeu	r11,r10,801bcbc <memmove+0x154>
 801bc44:	1813883a 	mov	r9,r3
 801bc48:	2811883a 	mov	r8,r5
 801bc4c:	500f883a 	mov	r7,r10
 801bc50:	41000017 	ldw	r4,0(r8)
 801bc54:	4a400104 	addi	r9,r9,4
 801bc58:	39ffff04 	addi	r7,r7,-4
 801bc5c:	493fff15 	stw	r4,-4(r9)
 801bc60:	42000104 	addi	r8,r8,4
 801bc64:	59fffa36 	bltu	r11,r7,801bc50 <__alt_data_end+0xfc01bc50>
 801bc68:	513fff04 	addi	r4,r10,-4
 801bc6c:	2008d0ba 	srli	r4,r4,2
 801bc70:	318000cc 	andi	r6,r6,3
 801bc74:	21000044 	addi	r4,r4,1
 801bc78:	2109883a 	add	r4,r4,r4
 801bc7c:	2109883a 	add	r4,r4,r4
 801bc80:	1907883a 	add	r3,r3,r4
 801bc84:	290b883a 	add	r5,r5,r4
 801bc88:	30000926 	beq	r6,zero,801bcb0 <memmove+0x148>
 801bc8c:	198d883a 	add	r6,r3,r6
 801bc90:	29c00003 	ldbu	r7,0(r5)
 801bc94:	18c00044 	addi	r3,r3,1
 801bc98:	29400044 	addi	r5,r5,1
 801bc9c:	19ffffc5 	stb	r7,-1(r3)
 801bca0:	19bffb1e 	bne	r3,r6,801bc90 <__alt_data_end+0xfc01bc90>
 801bca4:	f800283a 	ret
 801bca8:	1007883a 	mov	r3,r2
 801bcac:	003ff606 	br	801bc88 <__alt_data_end+0xfc01bc88>
 801bcb0:	f800283a 	ret
 801bcb4:	1007883a 	mov	r3,r2
 801bcb8:	003ff406 	br	801bc8c <__alt_data_end+0xfc01bc8c>
 801bcbc:	500d883a 	mov	r6,r10
 801bcc0:	003ff106 	br	801bc88 <__alt_data_end+0xfc01bc88>

0801bcc4 <_read_r>:
 801bcc4:	defffd04 	addi	sp,sp,-12
 801bcc8:	dc000015 	stw	r16,0(sp)
 801bccc:	040200f4 	movhi	r16,2051
 801bcd0:	dc400115 	stw	r17,4(sp)
 801bcd4:	843a0e04 	addi	r16,r16,-6088
 801bcd8:	2023883a 	mov	r17,r4
 801bcdc:	2809883a 	mov	r4,r5
 801bce0:	300b883a 	mov	r5,r6
 801bce4:	380d883a 	mov	r6,r7
 801bce8:	dfc00215 	stw	ra,8(sp)
 801bcec:	80000015 	stw	zero,0(r16)
 801bcf0:	801db500 	call	801db50 <read>
 801bcf4:	00ffffc4 	movi	r3,-1
 801bcf8:	10c00526 	beq	r2,r3,801bd10 <_read_r+0x4c>
 801bcfc:	dfc00217 	ldw	ra,8(sp)
 801bd00:	dc400117 	ldw	r17,4(sp)
 801bd04:	dc000017 	ldw	r16,0(sp)
 801bd08:	dec00304 	addi	sp,sp,12
 801bd0c:	f800283a 	ret
 801bd10:	80c00017 	ldw	r3,0(r16)
 801bd14:	183ff926 	beq	r3,zero,801bcfc <__alt_data_end+0xfc01bcfc>
 801bd18:	88c00015 	stw	r3,0(r17)
 801bd1c:	003ff706 	br	801bcfc <__alt_data_end+0xfc01bcfc>

0801bd20 <_realloc_r>:
 801bd20:	defff604 	addi	sp,sp,-40
 801bd24:	dcc00315 	stw	r19,12(sp)
 801bd28:	dc400115 	stw	r17,4(sp)
 801bd2c:	dfc00915 	stw	ra,36(sp)
 801bd30:	df000815 	stw	fp,32(sp)
 801bd34:	ddc00715 	stw	r23,28(sp)
 801bd38:	dd800615 	stw	r22,24(sp)
 801bd3c:	dd400515 	stw	r21,20(sp)
 801bd40:	dd000415 	stw	r20,16(sp)
 801bd44:	dc800215 	stw	r18,8(sp)
 801bd48:	dc000015 	stw	r16,0(sp)
 801bd4c:	2827883a 	mov	r19,r5
 801bd50:	3023883a 	mov	r17,r6
 801bd54:	2800bf26 	beq	r5,zero,801c054 <_realloc_r+0x334>
 801bd58:	2025883a 	mov	r18,r4
 801bd5c:	801dac00 	call	801dac0 <__malloc_lock>
 801bd60:	98ffff17 	ldw	r3,-4(r19)
 801bd64:	01bfff04 	movi	r6,-4
 801bd68:	890002c4 	addi	r4,r17,11
 801bd6c:	01c00584 	movi	r7,22
 801bd70:	9d7ffe04 	addi	r21,r19,-8
 801bd74:	19a0703a 	and	r16,r3,r6
 801bd78:	39003f2e 	bgeu	r7,r4,801be78 <_realloc_r+0x158>
 801bd7c:	053ffe04 	movi	r20,-8
 801bd80:	2528703a 	and	r20,r4,r20
 801bd84:	a00f883a 	mov	r7,r20
 801bd88:	a0008216 	blt	r20,zero,801bf94 <_realloc_r+0x274>
 801bd8c:	a4408136 	bltu	r20,r17,801bf94 <_realloc_r+0x274>
 801bd90:	81c03c0e 	bge	r16,r7,801be84 <_realloc_r+0x164>
 801bd94:	070200f4 	movhi	fp,2051
 801bd98:	e72d5904 	addi	fp,fp,-19100
 801bd9c:	e1000217 	ldw	r4,8(fp)
 801bda0:	ac05883a 	add	r2,r21,r16
 801bda4:	2080bf26 	beq	r4,r2,801c0a4 <_realloc_r+0x384>
 801bda8:	11000117 	ldw	r4,4(r2)
 801bdac:	023fff84 	movi	r8,-2
 801bdb0:	2210703a 	and	r8,r4,r8
 801bdb4:	1211883a 	add	r8,r2,r8
 801bdb8:	41400117 	ldw	r5,4(r8)
 801bdbc:	2940004c 	andi	r5,r5,1
 801bdc0:	28004a1e 	bne	r5,zero,801beec <_realloc_r+0x1cc>
 801bdc4:	017fff04 	movi	r5,-4
 801bdc8:	2148703a 	and	r4,r4,r5
 801bdcc:	2409883a 	add	r4,r4,r16
 801bdd0:	21c0ad0e 	bge	r4,r7,801c088 <_realloc_r+0x368>
 801bdd4:	18c0004c 	andi	r3,r3,1
 801bdd8:	18007f1e 	bne	r3,zero,801bfd8 <_realloc_r+0x2b8>
 801bddc:	9dfffe17 	ldw	r23,-8(r19)
 801bde0:	adefc83a 	sub	r23,r21,r23
 801bde4:	bd800117 	ldw	r22,4(r23)
 801bde8:	b14a703a 	and	r5,r22,r5
 801bdec:	216d883a 	add	r22,r4,r5
 801bdf0:	b1c04516 	blt	r22,r7,801bf08 <_realloc_r+0x1e8>
 801bdf4:	10c00317 	ldw	r3,12(r2)
 801bdf8:	10800217 	ldw	r2,8(r2)
 801bdfc:	81bfff04 	addi	r6,r16,-4
 801be00:	bc400204 	addi	r17,r23,8
 801be04:	10c00315 	stw	r3,12(r2)
 801be08:	18800215 	stw	r2,8(r3)
 801be0c:	b9400217 	ldw	r5,8(r23)
 801be10:	b8c00317 	ldw	r3,12(r23)
 801be14:	00800904 	movi	r2,36
 801be18:	28c00315 	stw	r3,12(r5)
 801be1c:	19400215 	stw	r5,8(r3)
 801be20:	1180ef36 	bltu	r2,r6,801c1e0 <_realloc_r+0x4c0>
 801be24:	008004c4 	movi	r2,19
 801be28:	1180da2e 	bgeu	r2,r6,801c194 <_realloc_r+0x474>
 801be2c:	98800017 	ldw	r2,0(r19)
 801be30:	b8800215 	stw	r2,8(r23)
 801be34:	98800117 	ldw	r2,4(r19)
 801be38:	b8800315 	stw	r2,12(r23)
 801be3c:	008006c4 	movi	r2,27
 801be40:	1180fc2e 	bgeu	r2,r6,801c234 <_realloc_r+0x514>
 801be44:	98800217 	ldw	r2,8(r19)
 801be48:	b8800415 	stw	r2,16(r23)
 801be4c:	98800317 	ldw	r2,12(r19)
 801be50:	b8800515 	stw	r2,20(r23)
 801be54:	00800904 	movi	r2,36
 801be58:	3080421e 	bne	r6,r2,801bf64 <_realloc_r+0x244>
 801be5c:	98800417 	ldw	r2,16(r19)
 801be60:	9cc00604 	addi	r19,r19,24
 801be64:	b8c00804 	addi	r3,r23,32
 801be68:	b8800615 	stw	r2,24(r23)
 801be6c:	98bfff17 	ldw	r2,-4(r19)
 801be70:	b8800715 	stw	r2,28(r23)
 801be74:	00003d06 	br	801bf6c <_realloc_r+0x24c>
 801be78:	01c00404 	movi	r7,16
 801be7c:	3829883a 	mov	r20,r7
 801be80:	003fc206 	br	801bd8c <__alt_data_end+0xfc01bd8c>
 801be84:	9823883a 	mov	r17,r19
 801be88:	850fc83a 	sub	r7,r16,r20
 801be8c:	008003c4 	movi	r2,15
 801be90:	18c0004c 	andi	r3,r3,1
 801be94:	11c04336 	bltu	r2,r7,801bfa4 <_realloc_r+0x284>
 801be98:	1c06b03a 	or	r3,r3,r16
 801be9c:	a8c00115 	stw	r3,4(r21)
 801bea0:	ac21883a 	add	r16,r21,r16
 801bea4:	80c00117 	ldw	r3,4(r16)
 801bea8:	18c00054 	ori	r3,r3,1
 801beac:	80c00115 	stw	r3,4(r16)
 801beb0:	9009883a 	mov	r4,r18
 801beb4:	801dae00 	call	801dae0 <__malloc_unlock>
 801beb8:	8805883a 	mov	r2,r17
 801bebc:	dfc00917 	ldw	ra,36(sp)
 801bec0:	df000817 	ldw	fp,32(sp)
 801bec4:	ddc00717 	ldw	r23,28(sp)
 801bec8:	dd800617 	ldw	r22,24(sp)
 801becc:	dd400517 	ldw	r21,20(sp)
 801bed0:	dd000417 	ldw	r20,16(sp)
 801bed4:	dcc00317 	ldw	r19,12(sp)
 801bed8:	dc800217 	ldw	r18,8(sp)
 801bedc:	dc400117 	ldw	r17,4(sp)
 801bee0:	dc000017 	ldw	r16,0(sp)
 801bee4:	dec00a04 	addi	sp,sp,40
 801bee8:	f800283a 	ret
 801beec:	18c0004c 	andi	r3,r3,1
 801bef0:	1800391e 	bne	r3,zero,801bfd8 <_realloc_r+0x2b8>
 801bef4:	9dfffe17 	ldw	r23,-8(r19)
 801bef8:	00bfff04 	movi	r2,-4
 801befc:	adefc83a 	sub	r23,r21,r23
 801bf00:	b9400117 	ldw	r5,4(r23)
 801bf04:	288a703a 	and	r5,r5,r2
 801bf08:	2c2d883a 	add	r22,r5,r16
 801bf0c:	b1c03216 	blt	r22,r7,801bfd8 <_realloc_r+0x2b8>
 801bf10:	b8800317 	ldw	r2,12(r23)
 801bf14:	b8c00217 	ldw	r3,8(r23)
 801bf18:	81bfff04 	addi	r6,r16,-4
 801bf1c:	01000904 	movi	r4,36
 801bf20:	18800315 	stw	r2,12(r3)
 801bf24:	10c00215 	stw	r3,8(r2)
 801bf28:	bc400204 	addi	r17,r23,8
 801bf2c:	2180ac36 	bltu	r4,r6,801c1e0 <_realloc_r+0x4c0>
 801bf30:	008004c4 	movi	r2,19
 801bf34:	1180972e 	bgeu	r2,r6,801c194 <_realloc_r+0x474>
 801bf38:	98800017 	ldw	r2,0(r19)
 801bf3c:	b8800215 	stw	r2,8(r23)
 801bf40:	98800117 	ldw	r2,4(r19)
 801bf44:	b8800315 	stw	r2,12(r23)
 801bf48:	008006c4 	movi	r2,27
 801bf4c:	1180b92e 	bgeu	r2,r6,801c234 <_realloc_r+0x514>
 801bf50:	98800217 	ldw	r2,8(r19)
 801bf54:	b8800415 	stw	r2,16(r23)
 801bf58:	98800317 	ldw	r2,12(r19)
 801bf5c:	b8800515 	stw	r2,20(r23)
 801bf60:	313fbe26 	beq	r6,r4,801be5c <__alt_data_end+0xfc01be5c>
 801bf64:	b8c00604 	addi	r3,r23,24
 801bf68:	9cc00404 	addi	r19,r19,16
 801bf6c:	98800017 	ldw	r2,0(r19)
 801bf70:	b021883a 	mov	r16,r22
 801bf74:	b82b883a 	mov	r21,r23
 801bf78:	18800015 	stw	r2,0(r3)
 801bf7c:	98800117 	ldw	r2,4(r19)
 801bf80:	18800115 	stw	r2,4(r3)
 801bf84:	98800217 	ldw	r2,8(r19)
 801bf88:	18800215 	stw	r2,8(r3)
 801bf8c:	b8c00117 	ldw	r3,4(r23)
 801bf90:	003fbd06 	br	801be88 <__alt_data_end+0xfc01be88>
 801bf94:	00800304 	movi	r2,12
 801bf98:	90800015 	stw	r2,0(r18)
 801bf9c:	0005883a 	mov	r2,zero
 801bfa0:	003fc606 	br	801bebc <__alt_data_end+0xfc01bebc>
 801bfa4:	1d06b03a 	or	r3,r3,r20
 801bfa8:	ad0b883a 	add	r5,r21,r20
 801bfac:	a8c00115 	stw	r3,4(r21)
 801bfb0:	38800054 	ori	r2,r7,1
 801bfb4:	28800115 	stw	r2,4(r5)
 801bfb8:	29cf883a 	add	r7,r5,r7
 801bfbc:	38800117 	ldw	r2,4(r7)
 801bfc0:	9009883a 	mov	r4,r18
 801bfc4:	29400204 	addi	r5,r5,8
 801bfc8:	10800054 	ori	r2,r2,1
 801bfcc:	38800115 	stw	r2,4(r7)
 801bfd0:	8015f6c0 	call	8015f6c <_free_r>
 801bfd4:	003fb606 	br	801beb0 <__alt_data_end+0xfc01beb0>
 801bfd8:	880b883a 	mov	r5,r17
 801bfdc:	9009883a 	mov	r4,r18
 801bfe0:	800d7040 	call	800d704 <_malloc_r>
 801bfe4:	1023883a 	mov	r17,r2
 801bfe8:	1000aa26 	beq	r2,zero,801c294 <_realloc_r+0x574>
 801bfec:	98ffff17 	ldw	r3,-4(r19)
 801bff0:	113ffe04 	addi	r4,r2,-8
 801bff4:	00bfff84 	movi	r2,-2
 801bff8:	1884703a 	and	r2,r3,r2
 801bffc:	a885883a 	add	r2,r21,r2
 801c000:	20808626 	beq	r4,r2,801c21c <_realloc_r+0x4fc>
 801c004:	81bfff04 	addi	r6,r16,-4
 801c008:	00800904 	movi	r2,36
 801c00c:	11807036 	bltu	r2,r6,801c1d0 <_realloc_r+0x4b0>
 801c010:	00c004c4 	movi	r3,19
 801c014:	19805636 	bltu	r3,r6,801c170 <_realloc_r+0x450>
 801c018:	8805883a 	mov	r2,r17
 801c01c:	9807883a 	mov	r3,r19
 801c020:	19000017 	ldw	r4,0(r3)
 801c024:	11000015 	stw	r4,0(r2)
 801c028:	19000117 	ldw	r4,4(r3)
 801c02c:	11000115 	stw	r4,4(r2)
 801c030:	18c00217 	ldw	r3,8(r3)
 801c034:	10c00215 	stw	r3,8(r2)
 801c038:	980b883a 	mov	r5,r19
 801c03c:	9009883a 	mov	r4,r18
 801c040:	8015f6c0 	call	8015f6c <_free_r>
 801c044:	9009883a 	mov	r4,r18
 801c048:	801dae00 	call	801dae0 <__malloc_unlock>
 801c04c:	8805883a 	mov	r2,r17
 801c050:	003f9a06 	br	801bebc <__alt_data_end+0xfc01bebc>
 801c054:	300b883a 	mov	r5,r6
 801c058:	dfc00917 	ldw	ra,36(sp)
 801c05c:	df000817 	ldw	fp,32(sp)
 801c060:	ddc00717 	ldw	r23,28(sp)
 801c064:	dd800617 	ldw	r22,24(sp)
 801c068:	dd400517 	ldw	r21,20(sp)
 801c06c:	dd000417 	ldw	r20,16(sp)
 801c070:	dcc00317 	ldw	r19,12(sp)
 801c074:	dc800217 	ldw	r18,8(sp)
 801c078:	dc400117 	ldw	r17,4(sp)
 801c07c:	dc000017 	ldw	r16,0(sp)
 801c080:	dec00a04 	addi	sp,sp,40
 801c084:	800d7041 	jmpi	800d704 <_malloc_r>
 801c088:	11400317 	ldw	r5,12(r2)
 801c08c:	10800217 	ldw	r2,8(r2)
 801c090:	9823883a 	mov	r17,r19
 801c094:	2021883a 	mov	r16,r4
 801c098:	11400315 	stw	r5,12(r2)
 801c09c:	28800215 	stw	r2,8(r5)
 801c0a0:	003f7906 	br	801be88 <__alt_data_end+0xfc01be88>
 801c0a4:	21000117 	ldw	r4,4(r4)
 801c0a8:	00bfff04 	movi	r2,-4
 801c0ac:	a1800404 	addi	r6,r20,16
 801c0b0:	2088703a 	and	r4,r4,r2
 801c0b4:	2409883a 	add	r4,r4,r16
 801c0b8:	2180380e 	bge	r4,r6,801c19c <_realloc_r+0x47c>
 801c0bc:	18c0004c 	andi	r3,r3,1
 801c0c0:	183fc51e 	bne	r3,zero,801bfd8 <__alt_data_end+0xfc01bfd8>
 801c0c4:	9dfffe17 	ldw	r23,-8(r19)
 801c0c8:	adefc83a 	sub	r23,r21,r23
 801c0cc:	b9400117 	ldw	r5,4(r23)
 801c0d0:	288a703a 	and	r5,r5,r2
 801c0d4:	216d883a 	add	r22,r4,r5
 801c0d8:	b1bf8b16 	blt	r22,r6,801bf08 <__alt_data_end+0xfc01bf08>
 801c0dc:	b8800317 	ldw	r2,12(r23)
 801c0e0:	b8c00217 	ldw	r3,8(r23)
 801c0e4:	81bfff04 	addi	r6,r16,-4
 801c0e8:	01000904 	movi	r4,36
 801c0ec:	18800315 	stw	r2,12(r3)
 801c0f0:	10c00215 	stw	r3,8(r2)
 801c0f4:	bc400204 	addi	r17,r23,8
 801c0f8:	21805a36 	bltu	r4,r6,801c264 <_realloc_r+0x544>
 801c0fc:	008004c4 	movi	r2,19
 801c100:	1180562e 	bgeu	r2,r6,801c25c <_realloc_r+0x53c>
 801c104:	98800017 	ldw	r2,0(r19)
 801c108:	b8800215 	stw	r2,8(r23)
 801c10c:	98800117 	ldw	r2,4(r19)
 801c110:	b8800315 	stw	r2,12(r23)
 801c114:	008006c4 	movi	r2,27
 801c118:	11805636 	bltu	r2,r6,801c274 <_realloc_r+0x554>
 801c11c:	b8800404 	addi	r2,r23,16
 801c120:	9cc00204 	addi	r19,r19,8
 801c124:	98c00017 	ldw	r3,0(r19)
 801c128:	10c00015 	stw	r3,0(r2)
 801c12c:	98c00117 	ldw	r3,4(r19)
 801c130:	10c00115 	stw	r3,4(r2)
 801c134:	98c00217 	ldw	r3,8(r19)
 801c138:	10c00215 	stw	r3,8(r2)
 801c13c:	bd07883a 	add	r3,r23,r20
 801c140:	b505c83a 	sub	r2,r22,r20
 801c144:	e0c00215 	stw	r3,8(fp)
 801c148:	10800054 	ori	r2,r2,1
 801c14c:	18800115 	stw	r2,4(r3)
 801c150:	b8800117 	ldw	r2,4(r23)
 801c154:	9009883a 	mov	r4,r18
 801c158:	1080004c 	andi	r2,r2,1
 801c15c:	a0a8b03a 	or	r20,r20,r2
 801c160:	bd000115 	stw	r20,4(r23)
 801c164:	801dae00 	call	801dae0 <__malloc_unlock>
 801c168:	8805883a 	mov	r2,r17
 801c16c:	003f5306 	br	801bebc <__alt_data_end+0xfc01bebc>
 801c170:	98c00017 	ldw	r3,0(r19)
 801c174:	88c00015 	stw	r3,0(r17)
 801c178:	98c00117 	ldw	r3,4(r19)
 801c17c:	88c00115 	stw	r3,4(r17)
 801c180:	00c006c4 	movi	r3,27
 801c184:	19801d36 	bltu	r3,r6,801c1fc <_realloc_r+0x4dc>
 801c188:	88800204 	addi	r2,r17,8
 801c18c:	98c00204 	addi	r3,r19,8
 801c190:	003fa306 	br	801c020 <__alt_data_end+0xfc01c020>
 801c194:	8807883a 	mov	r3,r17
 801c198:	003f7406 	br	801bf6c <__alt_data_end+0xfc01bf6c>
 801c19c:	ad2b883a 	add	r21,r21,r20
 801c1a0:	2505c83a 	sub	r2,r4,r20
 801c1a4:	e5400215 	stw	r21,8(fp)
 801c1a8:	10800054 	ori	r2,r2,1
 801c1ac:	a8800115 	stw	r2,4(r21)
 801c1b0:	98bfff17 	ldw	r2,-4(r19)
 801c1b4:	9009883a 	mov	r4,r18
 801c1b8:	1080004c 	andi	r2,r2,1
 801c1bc:	a0a8b03a 	or	r20,r20,r2
 801c1c0:	9d3fff15 	stw	r20,-4(r19)
 801c1c4:	801dae00 	call	801dae0 <__malloc_unlock>
 801c1c8:	9805883a 	mov	r2,r19
 801c1cc:	003f3b06 	br	801bebc <__alt_data_end+0xfc01bebc>
 801c1d0:	8809883a 	mov	r4,r17
 801c1d4:	980b883a 	mov	r5,r19
 801c1d8:	801bb680 	call	801bb68 <memmove>
 801c1dc:	003f9606 	br	801c038 <__alt_data_end+0xfc01c038>
 801c1e0:	8809883a 	mov	r4,r17
 801c1e4:	980b883a 	mov	r5,r19
 801c1e8:	801bb680 	call	801bb68 <memmove>
 801c1ec:	b8c00117 	ldw	r3,4(r23)
 801c1f0:	b021883a 	mov	r16,r22
 801c1f4:	b82b883a 	mov	r21,r23
 801c1f8:	003f2306 	br	801be88 <__alt_data_end+0xfc01be88>
 801c1fc:	98c00217 	ldw	r3,8(r19)
 801c200:	88c00215 	stw	r3,8(r17)
 801c204:	98c00317 	ldw	r3,12(r19)
 801c208:	88c00315 	stw	r3,12(r17)
 801c20c:	30800c26 	beq	r6,r2,801c240 <_realloc_r+0x520>
 801c210:	88800404 	addi	r2,r17,16
 801c214:	98c00404 	addi	r3,r19,16
 801c218:	003f8106 	br	801c020 <__alt_data_end+0xfc01c020>
 801c21c:	893fff17 	ldw	r4,-4(r17)
 801c220:	00bfff04 	movi	r2,-4
 801c224:	9823883a 	mov	r17,r19
 801c228:	2084703a 	and	r2,r4,r2
 801c22c:	80a1883a 	add	r16,r16,r2
 801c230:	003f1506 	br	801be88 <__alt_data_end+0xfc01be88>
 801c234:	b8c00404 	addi	r3,r23,16
 801c238:	9cc00204 	addi	r19,r19,8
 801c23c:	003f4b06 	br	801bf6c <__alt_data_end+0xfc01bf6c>
 801c240:	99000417 	ldw	r4,16(r19)
 801c244:	88800604 	addi	r2,r17,24
 801c248:	98c00604 	addi	r3,r19,24
 801c24c:	89000415 	stw	r4,16(r17)
 801c250:	99000517 	ldw	r4,20(r19)
 801c254:	89000515 	stw	r4,20(r17)
 801c258:	003f7106 	br	801c020 <__alt_data_end+0xfc01c020>
 801c25c:	8805883a 	mov	r2,r17
 801c260:	003fb006 	br	801c124 <__alt_data_end+0xfc01c124>
 801c264:	8809883a 	mov	r4,r17
 801c268:	980b883a 	mov	r5,r19
 801c26c:	801bb680 	call	801bb68 <memmove>
 801c270:	003fb206 	br	801c13c <__alt_data_end+0xfc01c13c>
 801c274:	98800217 	ldw	r2,8(r19)
 801c278:	b8800415 	stw	r2,16(r23)
 801c27c:	98800317 	ldw	r2,12(r19)
 801c280:	b8800515 	stw	r2,20(r23)
 801c284:	31000726 	beq	r6,r4,801c2a4 <_realloc_r+0x584>
 801c288:	b8800604 	addi	r2,r23,24
 801c28c:	9cc00404 	addi	r19,r19,16
 801c290:	003fa406 	br	801c124 <__alt_data_end+0xfc01c124>
 801c294:	9009883a 	mov	r4,r18
 801c298:	801dae00 	call	801dae0 <__malloc_unlock>
 801c29c:	0005883a 	mov	r2,zero
 801c2a0:	003f0606 	br	801bebc <__alt_data_end+0xfc01bebc>
 801c2a4:	98c00417 	ldw	r3,16(r19)
 801c2a8:	9cc00604 	addi	r19,r19,24
 801c2ac:	b8800804 	addi	r2,r23,32
 801c2b0:	b8c00615 	stw	r3,24(r23)
 801c2b4:	98ffff17 	ldw	r3,-4(r19)
 801c2b8:	b8c00715 	stw	r3,28(r23)
 801c2bc:	003f9906 	br	801c124 <__alt_data_end+0xfc01c124>

0801c2c0 <_wcrtomb_r>:
 801c2c0:	defff604 	addi	sp,sp,-40
 801c2c4:	008200f4 	movhi	r2,2051
 801c2c8:	dc800815 	stw	r18,32(sp)
 801c2cc:	dc400715 	stw	r17,28(sp)
 801c2d0:	dc000615 	stw	r16,24(sp)
 801c2d4:	10b31b04 	addi	r2,r2,-13204
 801c2d8:	dfc00915 	stw	ra,36(sp)
 801c2dc:	2021883a 	mov	r16,r4
 801c2e0:	3823883a 	mov	r17,r7
 801c2e4:	14800017 	ldw	r18,0(r2)
 801c2e8:	28001426 	beq	r5,zero,801c33c <_wcrtomb_r+0x7c>
 801c2ec:	d9400415 	stw	r5,16(sp)
 801c2f0:	d9800515 	stw	r6,20(sp)
 801c2f4:	80170d40 	call	80170d4 <__locale_charset>
 801c2f8:	d9400417 	ldw	r5,16(sp)
 801c2fc:	d9800517 	ldw	r6,20(sp)
 801c300:	8009883a 	mov	r4,r16
 801c304:	dc400015 	stw	r17,0(sp)
 801c308:	100f883a 	mov	r7,r2
 801c30c:	903ee83a 	callr	r18
 801c310:	00ffffc4 	movi	r3,-1
 801c314:	10c0031e 	bne	r2,r3,801c324 <_wcrtomb_r+0x64>
 801c318:	88000015 	stw	zero,0(r17)
 801c31c:	00c02284 	movi	r3,138
 801c320:	80c00015 	stw	r3,0(r16)
 801c324:	dfc00917 	ldw	ra,36(sp)
 801c328:	dc800817 	ldw	r18,32(sp)
 801c32c:	dc400717 	ldw	r17,28(sp)
 801c330:	dc000617 	ldw	r16,24(sp)
 801c334:	dec00a04 	addi	sp,sp,40
 801c338:	f800283a 	ret
 801c33c:	80170d40 	call	80170d4 <__locale_charset>
 801c340:	8009883a 	mov	r4,r16
 801c344:	dc400015 	stw	r17,0(sp)
 801c348:	d9400104 	addi	r5,sp,4
 801c34c:	000d883a 	mov	r6,zero
 801c350:	100f883a 	mov	r7,r2
 801c354:	903ee83a 	callr	r18
 801c358:	003fed06 	br	801c310 <__alt_data_end+0xfc01c310>

0801c35c <wcrtomb>:
 801c35c:	defff504 	addi	sp,sp,-44
 801c360:	dc400515 	stw	r17,20(sp)
 801c364:	dc000415 	stw	r16,16(sp)
 801c368:	dfc00a15 	stw	ra,40(sp)
 801c36c:	dd400915 	stw	r21,36(sp)
 801c370:	dd000815 	stw	r20,32(sp)
 801c374:	dcc00715 	stw	r19,28(sp)
 801c378:	dc800615 	stw	r18,24(sp)
 801c37c:	2021883a 	mov	r16,r4
 801c380:	3023883a 	mov	r17,r6
 801c384:	20001d26 	beq	r4,zero,801c3fc <wcrtomb+0xa0>
 801c388:	048200f4 	movhi	r18,2051
 801c38c:	94b31604 	addi	r18,r18,-13224
 801c390:	008200f4 	movhi	r2,2051
 801c394:	95400017 	ldw	r21,0(r18)
 801c398:	10b31b04 	addi	r2,r2,-13204
 801c39c:	15000017 	ldw	r20,0(r2)
 801c3a0:	2827883a 	mov	r19,r5
 801c3a4:	80170d40 	call	80170d4 <__locale_charset>
 801c3a8:	a809883a 	mov	r4,r21
 801c3ac:	dc400015 	stw	r17,0(sp)
 801c3b0:	800b883a 	mov	r5,r16
 801c3b4:	980d883a 	mov	r6,r19
 801c3b8:	100f883a 	mov	r7,r2
 801c3bc:	a03ee83a 	callr	r20
 801c3c0:	00ffffc4 	movi	r3,-1
 801c3c4:	10c0041e 	bne	r2,r3,801c3d8 <wcrtomb+0x7c>
 801c3c8:	90c00017 	ldw	r3,0(r18)
 801c3cc:	01002284 	movi	r4,138
 801c3d0:	88000015 	stw	zero,0(r17)
 801c3d4:	19000015 	stw	r4,0(r3)
 801c3d8:	dfc00a17 	ldw	ra,40(sp)
 801c3dc:	dd400917 	ldw	r21,36(sp)
 801c3e0:	dd000817 	ldw	r20,32(sp)
 801c3e4:	dcc00717 	ldw	r19,28(sp)
 801c3e8:	dc800617 	ldw	r18,24(sp)
 801c3ec:	dc400517 	ldw	r17,20(sp)
 801c3f0:	dc000417 	ldw	r16,16(sp)
 801c3f4:	dec00b04 	addi	sp,sp,44
 801c3f8:	f800283a 	ret
 801c3fc:	048200f4 	movhi	r18,2051
 801c400:	94b31604 	addi	r18,r18,-13224
 801c404:	008200f4 	movhi	r2,2051
 801c408:	94c00017 	ldw	r19,0(r18)
 801c40c:	10b31b04 	addi	r2,r2,-13204
 801c410:	14000017 	ldw	r16,0(r2)
 801c414:	80170d40 	call	80170d4 <__locale_charset>
 801c418:	9809883a 	mov	r4,r19
 801c41c:	dc400015 	stw	r17,0(sp)
 801c420:	d9400104 	addi	r5,sp,4
 801c424:	000d883a 	mov	r6,zero
 801c428:	100f883a 	mov	r7,r2
 801c42c:	803ee83a 	callr	r16
 801c430:	003fe306 	br	801c3c0 <__alt_data_end+0xfc01c3c0>

0801c434 <__ascii_wctomb>:
 801c434:	28000526 	beq	r5,zero,801c44c <__ascii_wctomb+0x18>
 801c438:	00803fc4 	movi	r2,255
 801c43c:	11800536 	bltu	r2,r6,801c454 <__ascii_wctomb+0x20>
 801c440:	29800005 	stb	r6,0(r5)
 801c444:	00800044 	movi	r2,1
 801c448:	f800283a 	ret
 801c44c:	0005883a 	mov	r2,zero
 801c450:	f800283a 	ret
 801c454:	00802284 	movi	r2,138
 801c458:	20800015 	stw	r2,0(r4)
 801c45c:	00bfffc4 	movi	r2,-1
 801c460:	f800283a 	ret

0801c464 <_wctomb_r>:
 801c464:	008200f4 	movhi	r2,2051
 801c468:	defff904 	addi	sp,sp,-28
 801c46c:	10b31b04 	addi	r2,r2,-13204
 801c470:	dfc00615 	stw	ra,24(sp)
 801c474:	dc400515 	stw	r17,20(sp)
 801c478:	dc000415 	stw	r16,16(sp)
 801c47c:	3823883a 	mov	r17,r7
 801c480:	14000017 	ldw	r16,0(r2)
 801c484:	d9000115 	stw	r4,4(sp)
 801c488:	d9400215 	stw	r5,8(sp)
 801c48c:	d9800315 	stw	r6,12(sp)
 801c490:	80170d40 	call	80170d4 <__locale_charset>
 801c494:	d9000117 	ldw	r4,4(sp)
 801c498:	d9400217 	ldw	r5,8(sp)
 801c49c:	d9800317 	ldw	r6,12(sp)
 801c4a0:	dc400015 	stw	r17,0(sp)
 801c4a4:	100f883a 	mov	r7,r2
 801c4a8:	803ee83a 	callr	r16
 801c4ac:	dfc00617 	ldw	ra,24(sp)
 801c4b0:	dc400517 	ldw	r17,20(sp)
 801c4b4:	dc000417 	ldw	r16,16(sp)
 801c4b8:	dec00704 	addi	sp,sp,28
 801c4bc:	f800283a 	ret

0801c4c0 <__fixunsdfsi>:
 801c4c0:	defffd04 	addi	sp,sp,-12
 801c4c4:	000d883a 	mov	r6,zero
 801c4c8:	01d07834 	movhi	r7,16864
 801c4cc:	dc400115 	stw	r17,4(sp)
 801c4d0:	dc000015 	stw	r16,0(sp)
 801c4d4:	dfc00215 	stw	ra,8(sp)
 801c4d8:	2023883a 	mov	r17,r4
 801c4dc:	2821883a 	mov	r16,r5
 801c4e0:	800c0940 	call	800c094 <__gedf2>
 801c4e4:	1000080e 	bge	r2,zero,801c508 <__fixunsdfsi+0x48>
 801c4e8:	8809883a 	mov	r4,r17
 801c4ec:	800b883a 	mov	r5,r16
 801c4f0:	800d2480 	call	800d248 <__fixdfsi>
 801c4f4:	dfc00217 	ldw	ra,8(sp)
 801c4f8:	dc400117 	ldw	r17,4(sp)
 801c4fc:	dc000017 	ldw	r16,0(sp)
 801c500:	dec00304 	addi	sp,sp,12
 801c504:	f800283a 	ret
 801c508:	000d883a 	mov	r6,zero
 801c50c:	01d07834 	movhi	r7,16864
 801c510:	8809883a 	mov	r4,r17
 801c514:	800b883a 	mov	r5,r16
 801c518:	800c9780 	call	800c978 <__subdf3>
 801c51c:	180b883a 	mov	r5,r3
 801c520:	1009883a 	mov	r4,r2
 801c524:	800d2480 	call	800d248 <__fixdfsi>
 801c528:	00e00034 	movhi	r3,32768
 801c52c:	10c5883a 	add	r2,r2,r3
 801c530:	003ff006 	br	801c4f4 <__alt_data_end+0xfc01c4f4>

0801c534 <__udivdi3>:
 801c534:	defff504 	addi	sp,sp,-44
 801c538:	dcc00415 	stw	r19,16(sp)
 801c53c:	dc000115 	stw	r16,4(sp)
 801c540:	dfc00a15 	stw	ra,40(sp)
 801c544:	df000915 	stw	fp,36(sp)
 801c548:	ddc00815 	stw	r23,32(sp)
 801c54c:	dd800715 	stw	r22,28(sp)
 801c550:	dd400615 	stw	r21,24(sp)
 801c554:	dd000515 	stw	r20,20(sp)
 801c558:	dc800315 	stw	r18,12(sp)
 801c55c:	dc400215 	stw	r17,8(sp)
 801c560:	2027883a 	mov	r19,r4
 801c564:	2821883a 	mov	r16,r5
 801c568:	3800421e 	bne	r7,zero,801c674 <__udivdi3+0x140>
 801c56c:	3025883a 	mov	r18,r6
 801c570:	2023883a 	mov	r17,r4
 801c574:	2980542e 	bgeu	r5,r6,801c6c8 <__udivdi3+0x194>
 801c578:	00bfffd4 	movui	r2,65535
 801c57c:	282d883a 	mov	r22,r5
 801c580:	1180a836 	bltu	r2,r6,801c824 <__udivdi3+0x2f0>
 801c584:	00803fc4 	movi	r2,255
 801c588:	1181422e 	bgeu	r2,r6,801ca94 <__udivdi3+0x560>
 801c58c:	00800204 	movi	r2,8
 801c590:	1007883a 	mov	r3,r2
 801c594:	3084d83a 	srl	r2,r6,r2
 801c598:	010200f4 	movhi	r4,2051
 801c59c:	212abc04 	addi	r4,r4,-21776
 801c5a0:	2085883a 	add	r2,r4,r2
 801c5a4:	10800003 	ldbu	r2,0(r2)
 801c5a8:	10c7883a 	add	r3,r2,r3
 801c5ac:	00800804 	movi	r2,32
 801c5b0:	10c5c83a 	sub	r2,r2,r3
 801c5b4:	10000526 	beq	r2,zero,801c5cc <__udivdi3+0x98>
 801c5b8:	80a0983a 	sll	r16,r16,r2
 801c5bc:	98c6d83a 	srl	r3,r19,r3
 801c5c0:	30a4983a 	sll	r18,r6,r2
 801c5c4:	98a2983a 	sll	r17,r19,r2
 801c5c8:	80ecb03a 	or	r22,r16,r3
 801c5cc:	902ad43a 	srli	r21,r18,16
 801c5d0:	b009883a 	mov	r4,r22
 801c5d4:	953fffcc 	andi	r20,r18,65535
 801c5d8:	a80b883a 	mov	r5,r21
 801c5dc:	800a9c00 	call	800a9c0 <__umodsi3>
 801c5e0:	b009883a 	mov	r4,r22
 801c5e4:	a80b883a 	mov	r5,r21
 801c5e8:	1027883a 	mov	r19,r2
 801c5ec:	800a9b80 	call	800a9b8 <__udivsi3>
 801c5f0:	1021883a 	mov	r16,r2
 801c5f4:	8806d43a 	srli	r3,r17,16
 801c5f8:	9804943a 	slli	r2,r19,16
 801c5fc:	8527383a 	mul	r19,r16,r20
 801c600:	10c4b03a 	or	r2,r2,r3
 801c604:	14c0052e 	bgeu	r2,r19,801c61c <__udivdi3+0xe8>
 801c608:	1485883a 	add	r2,r2,r18
 801c60c:	80ffffc4 	addi	r3,r16,-1
 801c610:	14800136 	bltu	r2,r18,801c618 <__udivdi3+0xe4>
 801c614:	14c13436 	bltu	r2,r19,801cae8 <__udivdi3+0x5b4>
 801c618:	1821883a 	mov	r16,r3
 801c61c:	14e7c83a 	sub	r19,r2,r19
 801c620:	9809883a 	mov	r4,r19
 801c624:	a80b883a 	mov	r5,r21
 801c628:	800a9c00 	call	800a9c0 <__umodsi3>
 801c62c:	102d883a 	mov	r22,r2
 801c630:	9809883a 	mov	r4,r19
 801c634:	a80b883a 	mov	r5,r21
 801c638:	800a9b80 	call	800a9b8 <__udivsi3>
 801c63c:	b02c943a 	slli	r22,r22,16
 801c640:	1529383a 	mul	r20,r2,r20
 801c644:	8c7fffcc 	andi	r17,r17,65535
 801c648:	b462b03a 	or	r17,r22,r17
 801c64c:	8d00052e 	bgeu	r17,r20,801c664 <__udivdi3+0x130>
 801c650:	8ca3883a 	add	r17,r17,r18
 801c654:	10ffffc4 	addi	r3,r2,-1
 801c658:	8c80f636 	bltu	r17,r18,801ca34 <__udivdi3+0x500>
 801c65c:	8d00f52e 	bgeu	r17,r20,801ca34 <__udivdi3+0x500>
 801c660:	10bfff84 	addi	r2,r2,-2
 801c664:	8020943a 	slli	r16,r16,16
 801c668:	0007883a 	mov	r3,zero
 801c66c:	1404b03a 	or	r2,r2,r16
 801c670:	00005b06 	br	801c7e0 <__udivdi3+0x2ac>
 801c674:	29c05836 	bltu	r5,r7,801c7d8 <__udivdi3+0x2a4>
 801c678:	00bfffd4 	movui	r2,65535
 801c67c:	11c0642e 	bgeu	r2,r7,801c810 <__udivdi3+0x2dc>
 801c680:	00804034 	movhi	r2,256
 801c684:	10bfffc4 	addi	r2,r2,-1
 801c688:	11c0f32e 	bgeu	r2,r7,801ca58 <__udivdi3+0x524>
 801c68c:	00c00604 	movi	r3,24
 801c690:	180b883a 	mov	r5,r3
 801c694:	38c6d83a 	srl	r3,r7,r3
 801c698:	008200f4 	movhi	r2,2051
 801c69c:	10aabc04 	addi	r2,r2,-21776
 801c6a0:	10c7883a 	add	r3,r2,r3
 801c6a4:	18c00003 	ldbu	r3,0(r3)
 801c6a8:	01000804 	movi	r4,32
 801c6ac:	1947883a 	add	r3,r3,r5
 801c6b0:	20e5c83a 	sub	r18,r4,r3
 801c6b4:	9000661e 	bne	r18,zero,801c850 <__udivdi3+0x31c>
 801c6b8:	3c00f936 	bltu	r7,r16,801caa0 <__udivdi3+0x56c>
 801c6bc:	9985403a 	cmpgeu	r2,r19,r6
 801c6c0:	0007883a 	mov	r3,zero
 801c6c4:	00004606 	br	801c7e0 <__udivdi3+0x2ac>
 801c6c8:	3000041e 	bne	r6,zero,801c6dc <__udivdi3+0x1a8>
 801c6cc:	01000044 	movi	r4,1
 801c6d0:	000b883a 	mov	r5,zero
 801c6d4:	800a9b80 	call	800a9b8 <__udivsi3>
 801c6d8:	1025883a 	mov	r18,r2
 801c6dc:	00bfffd4 	movui	r2,65535
 801c6e0:	1480562e 	bgeu	r2,r18,801c83c <__udivdi3+0x308>
 801c6e4:	00804034 	movhi	r2,256
 801c6e8:	10bfffc4 	addi	r2,r2,-1
 801c6ec:	1480e32e 	bgeu	r2,r18,801ca7c <__udivdi3+0x548>
 801c6f0:	00800604 	movi	r2,24
 801c6f4:	1007883a 	mov	r3,r2
 801c6f8:	9084d83a 	srl	r2,r18,r2
 801c6fc:	010200f4 	movhi	r4,2051
 801c700:	212abc04 	addi	r4,r4,-21776
 801c704:	2085883a 	add	r2,r4,r2
 801c708:	10800003 	ldbu	r2,0(r2)
 801c70c:	10c5883a 	add	r2,r2,r3
 801c710:	00c00804 	movi	r3,32
 801c714:	1887c83a 	sub	r3,r3,r2
 801c718:	1800911e 	bne	r3,zero,801c960 <__udivdi3+0x42c>
 801c71c:	9028d43a 	srli	r20,r18,16
 801c720:	84a1c83a 	sub	r16,r16,r18
 801c724:	957fffcc 	andi	r21,r18,65535
 801c728:	00c00044 	movi	r3,1
 801c72c:	8009883a 	mov	r4,r16
 801c730:	a00b883a 	mov	r5,r20
 801c734:	d8c00015 	stw	r3,0(sp)
 801c738:	800a9c00 	call	800a9c0 <__umodsi3>
 801c73c:	8009883a 	mov	r4,r16
 801c740:	a00b883a 	mov	r5,r20
 801c744:	1027883a 	mov	r19,r2
 801c748:	800a9b80 	call	800a9b8 <__udivsi3>
 801c74c:	1021883a 	mov	r16,r2
 801c750:	880cd43a 	srli	r6,r17,16
 801c754:	9804943a 	slli	r2,r19,16
 801c758:	8567383a 	mul	r19,r16,r21
 801c75c:	d8c00017 	ldw	r3,0(sp)
 801c760:	1188b03a 	or	r4,r2,r6
 801c764:	24c0052e 	bgeu	r4,r19,801c77c <__udivdi3+0x248>
 801c768:	2489883a 	add	r4,r4,r18
 801c76c:	80bfffc4 	addi	r2,r16,-1
 801c770:	24800136 	bltu	r4,r18,801c778 <__udivdi3+0x244>
 801c774:	24c0d936 	bltu	r4,r19,801cadc <__udivdi3+0x5a8>
 801c778:	1021883a 	mov	r16,r2
 801c77c:	24e7c83a 	sub	r19,r4,r19
 801c780:	9809883a 	mov	r4,r19
 801c784:	a00b883a 	mov	r5,r20
 801c788:	d8c00015 	stw	r3,0(sp)
 801c78c:	800a9c00 	call	800a9c0 <__umodsi3>
 801c790:	102d883a 	mov	r22,r2
 801c794:	9809883a 	mov	r4,r19
 801c798:	a00b883a 	mov	r5,r20
 801c79c:	800a9b80 	call	800a9b8 <__udivsi3>
 801c7a0:	b02c943a 	slli	r22,r22,16
 801c7a4:	156b383a 	mul	r21,r2,r21
 801c7a8:	8c7fffcc 	andi	r17,r17,65535
 801c7ac:	b462b03a 	or	r17,r22,r17
 801c7b0:	d8c00017 	ldw	r3,0(sp)
 801c7b4:	8d40052e 	bgeu	r17,r21,801c7cc <__udivdi3+0x298>
 801c7b8:	8ca3883a 	add	r17,r17,r18
 801c7bc:	113fffc4 	addi	r4,r2,-1
 801c7c0:	8c809a36 	bltu	r17,r18,801ca2c <__udivdi3+0x4f8>
 801c7c4:	8d40992e 	bgeu	r17,r21,801ca2c <__udivdi3+0x4f8>
 801c7c8:	10bfff84 	addi	r2,r2,-2
 801c7cc:	8020943a 	slli	r16,r16,16
 801c7d0:	1404b03a 	or	r2,r2,r16
 801c7d4:	00000206 	br	801c7e0 <__udivdi3+0x2ac>
 801c7d8:	0007883a 	mov	r3,zero
 801c7dc:	0005883a 	mov	r2,zero
 801c7e0:	dfc00a17 	ldw	ra,40(sp)
 801c7e4:	df000917 	ldw	fp,36(sp)
 801c7e8:	ddc00817 	ldw	r23,32(sp)
 801c7ec:	dd800717 	ldw	r22,28(sp)
 801c7f0:	dd400617 	ldw	r21,24(sp)
 801c7f4:	dd000517 	ldw	r20,20(sp)
 801c7f8:	dcc00417 	ldw	r19,16(sp)
 801c7fc:	dc800317 	ldw	r18,12(sp)
 801c800:	dc400217 	ldw	r17,8(sp)
 801c804:	dc000117 	ldw	r16,4(sp)
 801c808:	dec00b04 	addi	sp,sp,44
 801c80c:	f800283a 	ret
 801c810:	00803fc4 	movi	r2,255
 801c814:	11c0932e 	bgeu	r2,r7,801ca64 <__udivdi3+0x530>
 801c818:	00c00204 	movi	r3,8
 801c81c:	180b883a 	mov	r5,r3
 801c820:	003f9c06 	br	801c694 <__alt_data_end+0xfc01c694>
 801c824:	00804034 	movhi	r2,256
 801c828:	10bfffc4 	addi	r2,r2,-1
 801c82c:	1180902e 	bgeu	r2,r6,801ca70 <__udivdi3+0x53c>
 801c830:	00800604 	movi	r2,24
 801c834:	1007883a 	mov	r3,r2
 801c838:	003f5606 	br	801c594 <__alt_data_end+0xfc01c594>
 801c83c:	00803fc4 	movi	r2,255
 801c840:	1480912e 	bgeu	r2,r18,801ca88 <__udivdi3+0x554>
 801c844:	00800204 	movi	r2,8
 801c848:	1007883a 	mov	r3,r2
 801c84c:	003faa06 	br	801c6f8 <__alt_data_end+0xfc01c6f8>
 801c850:	30eed83a 	srl	r23,r6,r3
 801c854:	3c8e983a 	sll	r7,r7,r18
 801c858:	80f8d83a 	srl	fp,r16,r3
 801c85c:	98c6d83a 	srl	r3,r19,r3
 801c860:	3deeb03a 	or	r23,r7,r23
 801c864:	b828d43a 	srli	r20,r23,16
 801c868:	84a0983a 	sll	r16,r16,r18
 801c86c:	e009883a 	mov	r4,fp
 801c870:	a00b883a 	mov	r5,r20
 801c874:	80e2b03a 	or	r17,r16,r3
 801c878:	34aa983a 	sll	r21,r6,r18
 801c87c:	800a9c00 	call	800a9c0 <__umodsi3>
 801c880:	e009883a 	mov	r4,fp
 801c884:	a00b883a 	mov	r5,r20
 801c888:	102d883a 	mov	r22,r2
 801c88c:	800a9b80 	call	800a9b8 <__udivsi3>
 801c890:	1021883a 	mov	r16,r2
 801c894:	bf3fffcc 	andi	fp,r23,65535
 801c898:	b004943a 	slli	r2,r22,16
 801c89c:	8808d43a 	srli	r4,r17,16
 801c8a0:	872d383a 	mul	r22,r16,fp
 801c8a4:	1104b03a 	or	r2,r2,r4
 801c8a8:	1580042e 	bgeu	r2,r22,801c8bc <__udivdi3+0x388>
 801c8ac:	15c5883a 	add	r2,r2,r23
 801c8b0:	80ffffc4 	addi	r3,r16,-1
 801c8b4:	15c0812e 	bgeu	r2,r23,801cabc <__udivdi3+0x588>
 801c8b8:	1821883a 	mov	r16,r3
 801c8bc:	15adc83a 	sub	r22,r2,r22
 801c8c0:	b009883a 	mov	r4,r22
 801c8c4:	a00b883a 	mov	r5,r20
 801c8c8:	800a9c00 	call	800a9c0 <__umodsi3>
 801c8cc:	a00b883a 	mov	r5,r20
 801c8d0:	b009883a 	mov	r4,r22
 801c8d4:	d8800015 	stw	r2,0(sp)
 801c8d8:	800a9b80 	call	800a9b8 <__udivsi3>
 801c8dc:	d8c00017 	ldw	r3,0(sp)
 801c8e0:	170b383a 	mul	r5,r2,fp
 801c8e4:	8c7fffcc 	andi	r17,r17,65535
 801c8e8:	1806943a 	slli	r3,r3,16
 801c8ec:	1c46b03a 	or	r3,r3,r17
 801c8f0:	1940042e 	bgeu	r3,r5,801c904 <__udivdi3+0x3d0>
 801c8f4:	1dc7883a 	add	r3,r3,r23
 801c8f8:	113fffc4 	addi	r4,r2,-1
 801c8fc:	1dc06b2e 	bgeu	r3,r23,801caac <__udivdi3+0x578>
 801c900:	2005883a 	mov	r2,r4
 801c904:	8020943a 	slli	r16,r16,16
 801c908:	a9ffffcc 	andi	r7,r21,65535
 801c90c:	a82ad43a 	srli	r21,r21,16
 801c910:	1404b03a 	or	r2,r2,r16
 801c914:	113fffcc 	andi	r4,r2,65535
 801c918:	100cd43a 	srli	r6,r2,16
 801c91c:	21d3383a 	mul	r9,r4,r7
 801c920:	2549383a 	mul	r4,r4,r21
 801c924:	31cf383a 	mul	r7,r6,r7
 801c928:	4810d43a 	srli	r8,r9,16
 801c92c:	1947c83a 	sub	r3,r3,r5
 801c930:	3909883a 	add	r4,r7,r4
 801c934:	2209883a 	add	r4,r4,r8
 801c938:	354d383a 	mul	r6,r6,r21
 801c93c:	21c0022e 	bgeu	r4,r7,801c948 <__udivdi3+0x414>
 801c940:	01400074 	movhi	r5,1
 801c944:	314d883a 	add	r6,r6,r5
 801c948:	202ad43a 	srli	r21,r4,16
 801c94c:	354d883a 	add	r6,r6,r21
 801c950:	19803f36 	bltu	r3,r6,801ca50 <__udivdi3+0x51c>
 801c954:	19803926 	beq	r3,r6,801ca3c <__udivdi3+0x508>
 801c958:	0007883a 	mov	r3,zero
 801c95c:	003fa006 	br	801c7e0 <__alt_data_end+0xfc01c7e0>
 801c960:	90e4983a 	sll	r18,r18,r3
 801c964:	80aad83a 	srl	r21,r16,r2
 801c968:	80e0983a 	sll	r16,r16,r3
 801c96c:	9028d43a 	srli	r20,r18,16
 801c970:	9884d83a 	srl	r2,r19,r2
 801c974:	a809883a 	mov	r4,r21
 801c978:	a00b883a 	mov	r5,r20
 801c97c:	80acb03a 	or	r22,r16,r2
 801c980:	98e2983a 	sll	r17,r19,r3
 801c984:	800a9c00 	call	800a9c0 <__umodsi3>
 801c988:	a809883a 	mov	r4,r21
 801c98c:	a00b883a 	mov	r5,r20
 801c990:	1021883a 	mov	r16,r2
 801c994:	800a9b80 	call	800a9b8 <__udivsi3>
 801c998:	957fffcc 	andi	r21,r18,65535
 801c99c:	8020943a 	slli	r16,r16,16
 801c9a0:	b00ad43a 	srli	r5,r22,16
 801c9a4:	1567383a 	mul	r19,r2,r21
 801c9a8:	102f883a 	mov	r23,r2
 801c9ac:	8148b03a 	or	r4,r16,r5
 801c9b0:	24c0062e 	bgeu	r4,r19,801c9cc <__udivdi3+0x498>
 801c9b4:	2489883a 	add	r4,r4,r18
 801c9b8:	10bfffc4 	addi	r2,r2,-1
 801c9bc:	24804536 	bltu	r4,r18,801cad4 <__udivdi3+0x5a0>
 801c9c0:	24c0442e 	bgeu	r4,r19,801cad4 <__udivdi3+0x5a0>
 801c9c4:	bdffff84 	addi	r23,r23,-2
 801c9c8:	2489883a 	add	r4,r4,r18
 801c9cc:	24e7c83a 	sub	r19,r4,r19
 801c9d0:	9809883a 	mov	r4,r19
 801c9d4:	a00b883a 	mov	r5,r20
 801c9d8:	800a9c00 	call	800a9c0 <__umodsi3>
 801c9dc:	1021883a 	mov	r16,r2
 801c9e0:	9809883a 	mov	r4,r19
 801c9e4:	a00b883a 	mov	r5,r20
 801c9e8:	800a9b80 	call	800a9b8 <__udivsi3>
 801c9ec:	8020943a 	slli	r16,r16,16
 801c9f0:	1007883a 	mov	r3,r2
 801c9f4:	1545383a 	mul	r2,r2,r21
 801c9f8:	b13fffcc 	andi	r4,r22,65535
 801c9fc:	8108b03a 	or	r4,r16,r4
 801ca00:	2080062e 	bgeu	r4,r2,801ca1c <__udivdi3+0x4e8>
 801ca04:	2489883a 	add	r4,r4,r18
 801ca08:	197fffc4 	addi	r5,r3,-1
 801ca0c:	24802f36 	bltu	r4,r18,801cacc <__udivdi3+0x598>
 801ca10:	20802e2e 	bgeu	r4,r2,801cacc <__udivdi3+0x598>
 801ca14:	18ffff84 	addi	r3,r3,-2
 801ca18:	2489883a 	add	r4,r4,r18
 801ca1c:	b82e943a 	slli	r23,r23,16
 801ca20:	20a1c83a 	sub	r16,r4,r2
 801ca24:	1dc6b03a 	or	r3,r3,r23
 801ca28:	003f4006 	br	801c72c <__alt_data_end+0xfc01c72c>
 801ca2c:	2005883a 	mov	r2,r4
 801ca30:	003f6606 	br	801c7cc <__alt_data_end+0xfc01c7cc>
 801ca34:	1805883a 	mov	r2,r3
 801ca38:	003f0a06 	br	801c664 <__alt_data_end+0xfc01c664>
 801ca3c:	2006943a 	slli	r3,r4,16
 801ca40:	9c88983a 	sll	r4,r19,r18
 801ca44:	4a7fffcc 	andi	r9,r9,65535
 801ca48:	1a47883a 	add	r3,r3,r9
 801ca4c:	20ffc22e 	bgeu	r4,r3,801c958 <__alt_data_end+0xfc01c958>
 801ca50:	10bfffc4 	addi	r2,r2,-1
 801ca54:	003fc006 	br	801c958 <__alt_data_end+0xfc01c958>
 801ca58:	00c00404 	movi	r3,16
 801ca5c:	180b883a 	mov	r5,r3
 801ca60:	003f0c06 	br	801c694 <__alt_data_end+0xfc01c694>
 801ca64:	0007883a 	mov	r3,zero
 801ca68:	000b883a 	mov	r5,zero
 801ca6c:	003f0906 	br	801c694 <__alt_data_end+0xfc01c694>
 801ca70:	00800404 	movi	r2,16
 801ca74:	1007883a 	mov	r3,r2
 801ca78:	003ec606 	br	801c594 <__alt_data_end+0xfc01c594>
 801ca7c:	00800404 	movi	r2,16
 801ca80:	1007883a 	mov	r3,r2
 801ca84:	003f1c06 	br	801c6f8 <__alt_data_end+0xfc01c6f8>
 801ca88:	0005883a 	mov	r2,zero
 801ca8c:	0007883a 	mov	r3,zero
 801ca90:	003f1906 	br	801c6f8 <__alt_data_end+0xfc01c6f8>
 801ca94:	0005883a 	mov	r2,zero
 801ca98:	0007883a 	mov	r3,zero
 801ca9c:	003ebd06 	br	801c594 <__alt_data_end+0xfc01c594>
 801caa0:	0007883a 	mov	r3,zero
 801caa4:	00800044 	movi	r2,1
 801caa8:	003f4d06 	br	801c7e0 <__alt_data_end+0xfc01c7e0>
 801caac:	197f942e 	bgeu	r3,r5,801c900 <__alt_data_end+0xfc01c900>
 801cab0:	10bfff84 	addi	r2,r2,-2
 801cab4:	1dc7883a 	add	r3,r3,r23
 801cab8:	003f9206 	br	801c904 <__alt_data_end+0xfc01c904>
 801cabc:	15bf7e2e 	bgeu	r2,r22,801c8b8 <__alt_data_end+0xfc01c8b8>
 801cac0:	843fff84 	addi	r16,r16,-2
 801cac4:	15c5883a 	add	r2,r2,r23
 801cac8:	003f7c06 	br	801c8bc <__alt_data_end+0xfc01c8bc>
 801cacc:	2807883a 	mov	r3,r5
 801cad0:	003fd206 	br	801ca1c <__alt_data_end+0xfc01ca1c>
 801cad4:	102f883a 	mov	r23,r2
 801cad8:	003fbc06 	br	801c9cc <__alt_data_end+0xfc01c9cc>
 801cadc:	843fff84 	addi	r16,r16,-2
 801cae0:	2489883a 	add	r4,r4,r18
 801cae4:	003f2506 	br	801c77c <__alt_data_end+0xfc01c77c>
 801cae8:	843fff84 	addi	r16,r16,-2
 801caec:	1485883a 	add	r2,r2,r18
 801caf0:	003eca06 	br	801c61c <__alt_data_end+0xfc01c61c>

0801caf4 <__umoddi3>:
 801caf4:	defff404 	addi	sp,sp,-48
 801caf8:	ddc00915 	stw	r23,36(sp)
 801cafc:	dc400315 	stw	r17,12(sp)
 801cb00:	dc000215 	stw	r16,8(sp)
 801cb04:	dfc00b15 	stw	ra,44(sp)
 801cb08:	df000a15 	stw	fp,40(sp)
 801cb0c:	dd800815 	stw	r22,32(sp)
 801cb10:	dd400715 	stw	r21,28(sp)
 801cb14:	dd000615 	stw	r20,24(sp)
 801cb18:	dcc00515 	stw	r19,20(sp)
 801cb1c:	dc800415 	stw	r18,16(sp)
 801cb20:	2021883a 	mov	r16,r4
 801cb24:	2823883a 	mov	r17,r5
 801cb28:	282f883a 	mov	r23,r5
 801cb2c:	3800381e 	bne	r7,zero,801cc10 <__umoddi3+0x11c>
 801cb30:	3027883a 	mov	r19,r6
 801cb34:	2029883a 	mov	r20,r4
 801cb38:	29804e2e 	bgeu	r5,r6,801cc74 <__umoddi3+0x180>
 801cb3c:	00bfffd4 	movui	r2,65535
 801cb40:	11809c36 	bltu	r2,r6,801cdb4 <__umoddi3+0x2c0>
 801cb44:	00803fc4 	movi	r2,255
 801cb48:	11813b2e 	bgeu	r2,r6,801d038 <__umoddi3+0x544>
 801cb4c:	01400204 	movi	r5,8
 801cb50:	2805883a 	mov	r2,r5
 801cb54:	314ad83a 	srl	r5,r6,r5
 801cb58:	00c200f4 	movhi	r3,2051
 801cb5c:	18eabc04 	addi	r3,r3,-21776
 801cb60:	194b883a 	add	r5,r3,r5
 801cb64:	29000003 	ldbu	r4,0(r5)
 801cb68:	2089883a 	add	r4,r4,r2
 801cb6c:	00800804 	movi	r2,32
 801cb70:	1105c83a 	sub	r2,r2,r4
 801cb74:	1000ec26 	beq	r2,zero,801cf28 <__umoddi3+0x434>
 801cb78:	88a2983a 	sll	r17,r17,r2
 801cb7c:	8108d83a 	srl	r4,r16,r4
 801cb80:	30a6983a 	sll	r19,r6,r2
 801cb84:	80a8983a 	sll	r20,r16,r2
 801cb88:	1025883a 	mov	r18,r2
 801cb8c:	892eb03a 	or	r23,r17,r4
 801cb90:	982cd43a 	srli	r22,r19,16
 801cb94:	b809883a 	mov	r4,r23
 801cb98:	9d7fffcc 	andi	r21,r19,65535
 801cb9c:	b00b883a 	mov	r5,r22
 801cba0:	800a9c00 	call	800a9c0 <__umodsi3>
 801cba4:	b809883a 	mov	r4,r23
 801cba8:	b00b883a 	mov	r5,r22
 801cbac:	1021883a 	mov	r16,r2
 801cbb0:	800a9b80 	call	800a9b8 <__udivsi3>
 801cbb4:	8020943a 	slli	r16,r16,16
 801cbb8:	a00cd43a 	srli	r6,r20,16
 801cbbc:	1545383a 	mul	r2,r2,r21
 801cbc0:	8188b03a 	or	r4,r16,r6
 801cbc4:	2080042e 	bgeu	r4,r2,801cbd8 <__umoddi3+0xe4>
 801cbc8:	24c9883a 	add	r4,r4,r19
 801cbcc:	24c00236 	bltu	r4,r19,801cbd8 <__umoddi3+0xe4>
 801cbd0:	2080012e 	bgeu	r4,r2,801cbd8 <__umoddi3+0xe4>
 801cbd4:	24c9883a 	add	r4,r4,r19
 801cbd8:	20a3c83a 	sub	r17,r4,r2
 801cbdc:	8809883a 	mov	r4,r17
 801cbe0:	b00b883a 	mov	r5,r22
 801cbe4:	800a9c00 	call	800a9c0 <__umodsi3>
 801cbe8:	8809883a 	mov	r4,r17
 801cbec:	b00b883a 	mov	r5,r22
 801cbf0:	1021883a 	mov	r16,r2
 801cbf4:	800a9b80 	call	800a9b8 <__udivsi3>
 801cbf8:	8006943a 	slli	r3,r16,16
 801cbfc:	1545383a 	mul	r2,r2,r21
 801cc00:	a13fffcc 	andi	r4,r20,65535
 801cc04:	1906b03a 	or	r3,r3,r4
 801cc08:	1880532e 	bgeu	r3,r2,801cd58 <__umoddi3+0x264>
 801cc0c:	00004e06 	br	801cd48 <__umoddi3+0x254>
 801cc10:	29c05536 	bltu	r5,r7,801cd68 <__umoddi3+0x274>
 801cc14:	00bfffd4 	movui	r2,65535
 801cc18:	11c0612e 	bgeu	r2,r7,801cda0 <__umoddi3+0x2ac>
 801cc1c:	00804034 	movhi	r2,256
 801cc20:	10bfffc4 	addi	r2,r2,-1
 801cc24:	11c0f82e 	bgeu	r2,r7,801d008 <__umoddi3+0x514>
 801cc28:	01400604 	movi	r5,24
 801cc2c:	282b883a 	mov	r21,r5
 801cc30:	394ad83a 	srl	r5,r7,r5
 801cc34:	00c200f4 	movhi	r3,2051
 801cc38:	18eabc04 	addi	r3,r3,-21776
 801cc3c:	194b883a 	add	r5,r3,r5
 801cc40:	28800003 	ldbu	r2,0(r5)
 801cc44:	00c00804 	movi	r3,32
 801cc48:	156b883a 	add	r21,r2,r21
 801cc4c:	1d69c83a 	sub	r20,r3,r21
 801cc50:	a000631e 	bne	r20,zero,801cde0 <__umoddi3+0x2ec>
 801cc54:	3c400136 	bltu	r7,r17,801cc5c <__umoddi3+0x168>
 801cc58:	81810436 	bltu	r16,r6,801d06c <__umoddi3+0x578>
 801cc5c:	8185c83a 	sub	r2,r16,r6
 801cc60:	89e3c83a 	sub	r17,r17,r7
 801cc64:	8087803a 	cmpltu	r3,r16,r2
 801cc68:	88efc83a 	sub	r23,r17,r3
 801cc6c:	b807883a 	mov	r3,r23
 801cc70:	00003f06 	br	801cd70 <__umoddi3+0x27c>
 801cc74:	3000041e 	bne	r6,zero,801cc88 <__umoddi3+0x194>
 801cc78:	01000044 	movi	r4,1
 801cc7c:	000b883a 	mov	r5,zero
 801cc80:	800a9b80 	call	800a9b8 <__udivsi3>
 801cc84:	1027883a 	mov	r19,r2
 801cc88:	00bfffd4 	movui	r2,65535
 801cc8c:	14c04f2e 	bgeu	r2,r19,801cdcc <__umoddi3+0x2d8>
 801cc90:	00804034 	movhi	r2,256
 801cc94:	10bfffc4 	addi	r2,r2,-1
 801cc98:	14c0e42e 	bgeu	r2,r19,801d02c <__umoddi3+0x538>
 801cc9c:	00800604 	movi	r2,24
 801cca0:	1007883a 	mov	r3,r2
 801cca4:	9884d83a 	srl	r2,r19,r2
 801cca8:	010200f4 	movhi	r4,2051
 801ccac:	212abc04 	addi	r4,r4,-21776
 801ccb0:	2085883a 	add	r2,r4,r2
 801ccb4:	11000003 	ldbu	r4,0(r2)
 801ccb8:	00800804 	movi	r2,32
 801ccbc:	20c7883a 	add	r3,r4,r3
 801ccc0:	10c5c83a 	sub	r2,r2,r3
 801ccc4:	10009a1e 	bne	r2,zero,801cf30 <__umoddi3+0x43c>
 801ccc8:	982cd43a 	srli	r22,r19,16
 801cccc:	8ce3c83a 	sub	r17,r17,r19
 801ccd0:	9c3fffcc 	andi	r16,r19,65535
 801ccd4:	0025883a 	mov	r18,zero
 801ccd8:	8809883a 	mov	r4,r17
 801ccdc:	b00b883a 	mov	r5,r22
 801cce0:	800a9c00 	call	800a9c0 <__umodsi3>
 801cce4:	8809883a 	mov	r4,r17
 801cce8:	b00b883a 	mov	r5,r22
 801ccec:	102b883a 	mov	r21,r2
 801ccf0:	800a9b80 	call	800a9b8 <__udivsi3>
 801ccf4:	a806943a 	slli	r3,r21,16
 801ccf8:	a008d43a 	srli	r4,r20,16
 801ccfc:	1405383a 	mul	r2,r2,r16
 801cd00:	190cb03a 	or	r6,r3,r4
 801cd04:	3080032e 	bgeu	r6,r2,801cd14 <__umoddi3+0x220>
 801cd08:	34cd883a 	add	r6,r6,r19
 801cd0c:	34c00136 	bltu	r6,r19,801cd14 <__umoddi3+0x220>
 801cd10:	3080d436 	bltu	r6,r2,801d064 <__umoddi3+0x570>
 801cd14:	30abc83a 	sub	r21,r6,r2
 801cd18:	a809883a 	mov	r4,r21
 801cd1c:	b00b883a 	mov	r5,r22
 801cd20:	800a9c00 	call	800a9c0 <__umodsi3>
 801cd24:	1023883a 	mov	r17,r2
 801cd28:	a809883a 	mov	r4,r21
 801cd2c:	b00b883a 	mov	r5,r22
 801cd30:	800a9b80 	call	800a9b8 <__udivsi3>
 801cd34:	8822943a 	slli	r17,r17,16
 801cd38:	1405383a 	mul	r2,r2,r16
 801cd3c:	a13fffcc 	andi	r4,r20,65535
 801cd40:	8906b03a 	or	r3,r17,r4
 801cd44:	1880042e 	bgeu	r3,r2,801cd58 <__umoddi3+0x264>
 801cd48:	1cc7883a 	add	r3,r3,r19
 801cd4c:	1cc00236 	bltu	r3,r19,801cd58 <__umoddi3+0x264>
 801cd50:	1880012e 	bgeu	r3,r2,801cd58 <__umoddi3+0x264>
 801cd54:	1cc7883a 	add	r3,r3,r19
 801cd58:	1887c83a 	sub	r3,r3,r2
 801cd5c:	1c84d83a 	srl	r2,r3,r18
 801cd60:	0007883a 	mov	r3,zero
 801cd64:	00000206 	br	801cd70 <__umoddi3+0x27c>
 801cd68:	2005883a 	mov	r2,r4
 801cd6c:	2807883a 	mov	r3,r5
 801cd70:	dfc00b17 	ldw	ra,44(sp)
 801cd74:	df000a17 	ldw	fp,40(sp)
 801cd78:	ddc00917 	ldw	r23,36(sp)
 801cd7c:	dd800817 	ldw	r22,32(sp)
 801cd80:	dd400717 	ldw	r21,28(sp)
 801cd84:	dd000617 	ldw	r20,24(sp)
 801cd88:	dcc00517 	ldw	r19,20(sp)
 801cd8c:	dc800417 	ldw	r18,16(sp)
 801cd90:	dc400317 	ldw	r17,12(sp)
 801cd94:	dc000217 	ldw	r16,8(sp)
 801cd98:	dec00c04 	addi	sp,sp,48
 801cd9c:	f800283a 	ret
 801cda0:	00803fc4 	movi	r2,255
 801cda4:	11c0952e 	bgeu	r2,r7,801cffc <__umoddi3+0x508>
 801cda8:	01400204 	movi	r5,8
 801cdac:	282b883a 	mov	r21,r5
 801cdb0:	003f9f06 	br	801cc30 <__alt_data_end+0xfc01cc30>
 801cdb4:	00804034 	movhi	r2,256
 801cdb8:	10bfffc4 	addi	r2,r2,-1
 801cdbc:	1180952e 	bgeu	r2,r6,801d014 <__umoddi3+0x520>
 801cdc0:	01400604 	movi	r5,24
 801cdc4:	2805883a 	mov	r2,r5
 801cdc8:	003f6206 	br	801cb54 <__alt_data_end+0xfc01cb54>
 801cdcc:	00803fc4 	movi	r2,255
 801cdd0:	14c0932e 	bgeu	r2,r19,801d020 <__umoddi3+0x52c>
 801cdd4:	00800204 	movi	r2,8
 801cdd8:	1007883a 	mov	r3,r2
 801cddc:	003fb106 	br	801cca4 <__alt_data_end+0xfc01cca4>
 801cde0:	3548d83a 	srl	r4,r6,r21
 801cde4:	3d0e983a 	sll	r7,r7,r20
 801cde8:	8d10983a 	sll	r8,r17,r20
 801cdec:	8d6cd83a 	srl	r22,r17,r21
 801cdf0:	3922b03a 	or	r17,r7,r4
 801cdf4:	882ed43a 	srli	r23,r17,16
 801cdf8:	8564d83a 	srl	r18,r16,r21
 801cdfc:	b009883a 	mov	r4,r22
 801ce00:	b80b883a 	mov	r5,r23
 801ce04:	44a4b03a 	or	r18,r8,r18
 801ce08:	3526983a 	sll	r19,r6,r20
 801ce0c:	800a9c00 	call	800a9c0 <__umodsi3>
 801ce10:	b009883a 	mov	r4,r22
 801ce14:	b80b883a 	mov	r5,r23
 801ce18:	1039883a 	mov	fp,r2
 801ce1c:	800a9b80 	call	800a9b8 <__udivsi3>
 801ce20:	102d883a 	mov	r22,r2
 801ce24:	8a3fffcc 	andi	r8,r17,65535
 801ce28:	e004943a 	slli	r2,fp,16
 801ce2c:	900cd43a 	srli	r6,r18,16
 801ce30:	b239383a 	mul	fp,r22,r8
 801ce34:	8520983a 	sll	r16,r16,r20
 801ce38:	118ab03a 	or	r5,r2,r6
 801ce3c:	2f00042e 	bgeu	r5,fp,801ce50 <__umoddi3+0x35c>
 801ce40:	2c4b883a 	add	r5,r5,r17
 801ce44:	b0bfffc4 	addi	r2,r22,-1
 801ce48:	2c40822e 	bgeu	r5,r17,801d054 <__umoddi3+0x560>
 801ce4c:	102d883a 	mov	r22,r2
 801ce50:	2f39c83a 	sub	fp,r5,fp
 801ce54:	e009883a 	mov	r4,fp
 801ce58:	b80b883a 	mov	r5,r23
 801ce5c:	da000115 	stw	r8,4(sp)
 801ce60:	800a9c00 	call	800a9c0 <__umodsi3>
 801ce64:	e009883a 	mov	r4,fp
 801ce68:	b80b883a 	mov	r5,r23
 801ce6c:	d8800015 	stw	r2,0(sp)
 801ce70:	800a9b80 	call	800a9b8 <__udivsi3>
 801ce74:	d9800017 	ldw	r6,0(sp)
 801ce78:	da000117 	ldw	r8,4(sp)
 801ce7c:	94bfffcc 	andi	r18,r18,65535
 801ce80:	300c943a 	slli	r6,r6,16
 801ce84:	1209383a 	mul	r4,r2,r8
 801ce88:	3490b03a 	or	r8,r6,r18
 801ce8c:	4100042e 	bgeu	r8,r4,801cea0 <__umoddi3+0x3ac>
 801ce90:	4451883a 	add	r8,r8,r17
 801ce94:	10ffffc4 	addi	r3,r2,-1
 801ce98:	44406a2e 	bgeu	r8,r17,801d044 <__umoddi3+0x550>
 801ce9c:	1805883a 	mov	r2,r3
 801cea0:	b012943a 	slli	r9,r22,16
 801cea4:	9abfffcc 	andi	r10,r19,65535
 801cea8:	980ed43a 	srli	r7,r19,16
 801ceac:	124ab03a 	or	r5,r2,r9
 801ceb0:	2a7fffcc 	andi	r9,r5,65535
 801ceb4:	280ad43a 	srli	r5,r5,16
 801ceb8:	4a8d383a 	mul	r6,r9,r10
 801cebc:	49d3383a 	mul	r9,r9,r7
 801cec0:	2a95383a 	mul	r10,r5,r10
 801cec4:	3004d43a 	srli	r2,r6,16
 801cec8:	4111c83a 	sub	r8,r8,r4
 801cecc:	5253883a 	add	r9,r10,r9
 801ced0:	4893883a 	add	r9,r9,r2
 801ced4:	29cb383a 	mul	r5,r5,r7
 801ced8:	4a80022e 	bgeu	r9,r10,801cee4 <__umoddi3+0x3f0>
 801cedc:	00800074 	movhi	r2,1
 801cee0:	288b883a 	add	r5,r5,r2
 801cee4:	4808d43a 	srli	r4,r9,16
 801cee8:	4812943a 	slli	r9,r9,16
 801ceec:	31bfffcc 	andi	r6,r6,65535
 801cef0:	290b883a 	add	r5,r5,r4
 801cef4:	498d883a 	add	r6,r9,r6
 801cef8:	41403a36 	bltu	r8,r5,801cfe4 <__umoddi3+0x4f0>
 801cefc:	41405d26 	beq	r8,r5,801d074 <__umoddi3+0x580>
 801cf00:	4149c83a 	sub	r4,r8,r5
 801cf04:	300f883a 	mov	r7,r6
 801cf08:	81cfc83a 	sub	r7,r16,r7
 801cf0c:	81c7803a 	cmpltu	r3,r16,r7
 801cf10:	20c7c83a 	sub	r3,r4,r3
 801cf14:	1d44983a 	sll	r2,r3,r21
 801cf18:	3d0ed83a 	srl	r7,r7,r20
 801cf1c:	1d06d83a 	srl	r3,r3,r20
 801cf20:	11c4b03a 	or	r2,r2,r7
 801cf24:	003f9206 	br	801cd70 <__alt_data_end+0xfc01cd70>
 801cf28:	0025883a 	mov	r18,zero
 801cf2c:	003f1806 	br	801cb90 <__alt_data_end+0xfc01cb90>
 801cf30:	98a6983a 	sll	r19,r19,r2
 801cf34:	88e8d83a 	srl	r20,r17,r3
 801cf38:	80c6d83a 	srl	r3,r16,r3
 801cf3c:	982cd43a 	srli	r22,r19,16
 801cf40:	88a2983a 	sll	r17,r17,r2
 801cf44:	a009883a 	mov	r4,r20
 801cf48:	b00b883a 	mov	r5,r22
 801cf4c:	88eab03a 	or	r21,r17,r3
 801cf50:	1025883a 	mov	r18,r2
 801cf54:	800a9c00 	call	800a9c0 <__umodsi3>
 801cf58:	a009883a 	mov	r4,r20
 801cf5c:	b00b883a 	mov	r5,r22
 801cf60:	1023883a 	mov	r17,r2
 801cf64:	800a9b80 	call	800a9b8 <__udivsi3>
 801cf68:	9f3fffcc 	andi	fp,r19,65535
 801cf6c:	8822943a 	slli	r17,r17,16
 801cf70:	a80ad43a 	srli	r5,r21,16
 801cf74:	1705383a 	mul	r2,r2,fp
 801cf78:	84a8983a 	sll	r20,r16,r18
 801cf7c:	8948b03a 	or	r4,r17,r5
 801cf80:	2080042e 	bgeu	r4,r2,801cf94 <__umoddi3+0x4a0>
 801cf84:	24c9883a 	add	r4,r4,r19
 801cf88:	24c00236 	bltu	r4,r19,801cf94 <__umoddi3+0x4a0>
 801cf8c:	2080012e 	bgeu	r4,r2,801cf94 <__umoddi3+0x4a0>
 801cf90:	24c9883a 	add	r4,r4,r19
 801cf94:	20afc83a 	sub	r23,r4,r2
 801cf98:	b809883a 	mov	r4,r23
 801cf9c:	b00b883a 	mov	r5,r22
 801cfa0:	800a9c00 	call	800a9c0 <__umodsi3>
 801cfa4:	1023883a 	mov	r17,r2
 801cfa8:	b809883a 	mov	r4,r23
 801cfac:	b00b883a 	mov	r5,r22
 801cfb0:	800a9b80 	call	800a9b8 <__udivsi3>
 801cfb4:	8822943a 	slli	r17,r17,16
 801cfb8:	1705383a 	mul	r2,r2,fp
 801cfbc:	a93fffcc 	andi	r4,r21,65535
 801cfc0:	8908b03a 	or	r4,r17,r4
 801cfc4:	2080042e 	bgeu	r4,r2,801cfd8 <__umoddi3+0x4e4>
 801cfc8:	24c9883a 	add	r4,r4,r19
 801cfcc:	24c00236 	bltu	r4,r19,801cfd8 <__umoddi3+0x4e4>
 801cfd0:	2080012e 	bgeu	r4,r2,801cfd8 <__umoddi3+0x4e4>
 801cfd4:	24c9883a 	add	r4,r4,r19
 801cfd8:	20a3c83a 	sub	r17,r4,r2
 801cfdc:	e021883a 	mov	r16,fp
 801cfe0:	003f3d06 	br	801ccd8 <__alt_data_end+0xfc01ccd8>
 801cfe4:	34cfc83a 	sub	r7,r6,r19
 801cfe8:	2c4bc83a 	sub	r5,r5,r17
 801cfec:	31cd803a 	cmpltu	r6,r6,r7
 801cff0:	298dc83a 	sub	r6,r5,r6
 801cff4:	4189c83a 	sub	r4,r8,r6
 801cff8:	003fc306 	br	801cf08 <__alt_data_end+0xfc01cf08>
 801cffc:	000b883a 	mov	r5,zero
 801d000:	002b883a 	mov	r21,zero
 801d004:	003f0a06 	br	801cc30 <__alt_data_end+0xfc01cc30>
 801d008:	01400404 	movi	r5,16
 801d00c:	282b883a 	mov	r21,r5
 801d010:	003f0706 	br	801cc30 <__alt_data_end+0xfc01cc30>
 801d014:	01400404 	movi	r5,16
 801d018:	2805883a 	mov	r2,r5
 801d01c:	003ecd06 	br	801cb54 <__alt_data_end+0xfc01cb54>
 801d020:	0005883a 	mov	r2,zero
 801d024:	0007883a 	mov	r3,zero
 801d028:	003f1e06 	br	801cca4 <__alt_data_end+0xfc01cca4>
 801d02c:	00800404 	movi	r2,16
 801d030:	1007883a 	mov	r3,r2
 801d034:	003f1b06 	br	801cca4 <__alt_data_end+0xfc01cca4>
 801d038:	000b883a 	mov	r5,zero
 801d03c:	0005883a 	mov	r2,zero
 801d040:	003ec406 	br	801cb54 <__alt_data_end+0xfc01cb54>
 801d044:	413f952e 	bgeu	r8,r4,801ce9c <__alt_data_end+0xfc01ce9c>
 801d048:	10bfff84 	addi	r2,r2,-2
 801d04c:	4451883a 	add	r8,r8,r17
 801d050:	003f9306 	br	801cea0 <__alt_data_end+0xfc01cea0>
 801d054:	2f3f7d2e 	bgeu	r5,fp,801ce4c <__alt_data_end+0xfc01ce4c>
 801d058:	b5bfff84 	addi	r22,r22,-2
 801d05c:	2c4b883a 	add	r5,r5,r17
 801d060:	003f7b06 	br	801ce50 <__alt_data_end+0xfc01ce50>
 801d064:	34cd883a 	add	r6,r6,r19
 801d068:	003f2a06 	br	801cd14 <__alt_data_end+0xfc01cd14>
 801d06c:	8005883a 	mov	r2,r16
 801d070:	003efe06 	br	801cc6c <__alt_data_end+0xfc01cc6c>
 801d074:	81bfdb36 	bltu	r16,r6,801cfe4 <__alt_data_end+0xfc01cfe4>
 801d078:	300f883a 	mov	r7,r6
 801d07c:	0009883a 	mov	r4,zero
 801d080:	003fa106 	br	801cf08 <__alt_data_end+0xfc01cf08>

0801d084 <__eqsf2>:
 801d084:	2006d5fa 	srli	r3,r4,23
 801d088:	280cd5fa 	srli	r6,r5,23
 801d08c:	01c02034 	movhi	r7,128
 801d090:	39ffffc4 	addi	r7,r7,-1
 801d094:	18c03fcc 	andi	r3,r3,255
 801d098:	02003fc4 	movi	r8,255
 801d09c:	3904703a 	and	r2,r7,r4
 801d0a0:	31803fcc 	andi	r6,r6,255
 801d0a4:	394e703a 	and	r7,r7,r5
 801d0a8:	2008d7fa 	srli	r4,r4,31
 801d0ac:	280ad7fa 	srli	r5,r5,31
 801d0b0:	1a000c26 	beq	r3,r8,801d0e4 <__eqsf2+0x60>
 801d0b4:	02003fc4 	movi	r8,255
 801d0b8:	32000326 	beq	r6,r8,801d0c8 <__eqsf2+0x44>
 801d0bc:	19800426 	beq	r3,r6,801d0d0 <__eqsf2+0x4c>
 801d0c0:	00800044 	movi	r2,1
 801d0c4:	f800283a 	ret
 801d0c8:	383ffd1e 	bne	r7,zero,801d0c0 <__alt_data_end+0xfc01d0c0>
 801d0cc:	19bffc1e 	bne	r3,r6,801d0c0 <__alt_data_end+0xfc01d0c0>
 801d0d0:	11fffb1e 	bne	r2,r7,801d0c0 <__alt_data_end+0xfc01d0c0>
 801d0d4:	21400626 	beq	r4,r5,801d0f0 <__eqsf2+0x6c>
 801d0d8:	183ff91e 	bne	r3,zero,801d0c0 <__alt_data_end+0xfc01d0c0>
 801d0dc:	1004c03a 	cmpne	r2,r2,zero
 801d0e0:	f800283a 	ret
 801d0e4:	103ff326 	beq	r2,zero,801d0b4 <__alt_data_end+0xfc01d0b4>
 801d0e8:	00800044 	movi	r2,1
 801d0ec:	f800283a 	ret
 801d0f0:	0005883a 	mov	r2,zero
 801d0f4:	f800283a 	ret

0801d0f8 <__gesf2>:
 801d0f8:	2004d5fa 	srli	r2,r4,23
 801d0fc:	2806d5fa 	srli	r3,r5,23
 801d100:	01802034 	movhi	r6,128
 801d104:	31bfffc4 	addi	r6,r6,-1
 801d108:	10803fcc 	andi	r2,r2,255
 801d10c:	01c03fc4 	movi	r7,255
 801d110:	3110703a 	and	r8,r6,r4
 801d114:	18c03fcc 	andi	r3,r3,255
 801d118:	314c703a 	and	r6,r6,r5
 801d11c:	2008d7fa 	srli	r4,r4,31
 801d120:	280ad7fa 	srli	r5,r5,31
 801d124:	11c00926 	beq	r2,r7,801d14c <__gesf2+0x54>
 801d128:	19c01226 	beq	r3,r7,801d174 <__gesf2+0x7c>
 801d12c:	1000091e 	bne	r2,zero,801d154 <__gesf2+0x5c>
 801d130:	4013003a 	cmpeq	r9,r8,zero
 801d134:	480f883a 	mov	r7,r9
 801d138:	1800091e 	bne	r3,zero,801d160 <__gesf2+0x68>
 801d13c:	3000081e 	bne	r6,zero,801d160 <__gesf2+0x68>
 801d140:	48001026 	beq	r9,zero,801d184 <__gesf2+0x8c>
 801d144:	0005883a 	mov	r2,zero
 801d148:	f800283a 	ret
 801d14c:	4000161e 	bne	r8,zero,801d1a8 <__gesf2+0xb0>
 801d150:	18800826 	beq	r3,r2,801d174 <__gesf2+0x7c>
 801d154:	1800091e 	bne	r3,zero,801d17c <__gesf2+0x84>
 801d158:	000f883a 	mov	r7,zero
 801d15c:	30000926 	beq	r6,zero,801d184 <__gesf2+0x8c>
 801d160:	29403fcc 	andi	r5,r5,255
 801d164:	38000626 	beq	r7,zero,801d180 <__gesf2+0x88>
 801d168:	2800071e 	bne	r5,zero,801d188 <__gesf2+0x90>
 801d16c:	00bfffc4 	movi	r2,-1
 801d170:	f800283a 	ret
 801d174:	30000c1e 	bne	r6,zero,801d1a8 <__gesf2+0xb0>
 801d178:	103fed26 	beq	r2,zero,801d130 <__alt_data_end+0xfc01d130>
 801d17c:	29403fcc 	andi	r5,r5,255
 801d180:	21400326 	beq	r4,r5,801d190 <__gesf2+0x98>
 801d184:	203ff91e 	bne	r4,zero,801d16c <__alt_data_end+0xfc01d16c>
 801d188:	00800044 	movi	r2,1
 801d18c:	f800283a 	ret
 801d190:	18bffc16 	blt	r3,r2,801d184 <__alt_data_end+0xfc01d184>
 801d194:	10c00216 	blt	r2,r3,801d1a0 <__gesf2+0xa8>
 801d198:	323ffa36 	bltu	r6,r8,801d184 <__alt_data_end+0xfc01d184>
 801d19c:	41bfe92e 	bgeu	r8,r6,801d144 <__alt_data_end+0xfc01d144>
 801d1a0:	203ff226 	beq	r4,zero,801d16c <__alt_data_end+0xfc01d16c>
 801d1a4:	003ff806 	br	801d188 <__alt_data_end+0xfc01d188>
 801d1a8:	00bfff84 	movi	r2,-2
 801d1ac:	f800283a 	ret

0801d1b0 <__lesf2>:
 801d1b0:	2004d5fa 	srli	r2,r4,23
 801d1b4:	280cd5fa 	srli	r6,r5,23
 801d1b8:	00c02034 	movhi	r3,128
 801d1bc:	18ffffc4 	addi	r3,r3,-1
 801d1c0:	10803fcc 	andi	r2,r2,255
 801d1c4:	01c03fc4 	movi	r7,255
 801d1c8:	1910703a 	and	r8,r3,r4
 801d1cc:	31803fcc 	andi	r6,r6,255
 801d1d0:	1946703a 	and	r3,r3,r5
 801d1d4:	2008d7fa 	srli	r4,r4,31
 801d1d8:	280ad7fa 	srli	r5,r5,31
 801d1dc:	11c00a26 	beq	r2,r7,801d208 <__lesf2+0x58>
 801d1e0:	31c01526 	beq	r6,r7,801d238 <__lesf2+0x88>
 801d1e4:	10000a1e 	bne	r2,zero,801d210 <__lesf2+0x60>
 801d1e8:	4013003a 	cmpeq	r9,r8,zero
 801d1ec:	480f883a 	mov	r7,r9
 801d1f0:	30000d26 	beq	r6,zero,801d228 <__lesf2+0x78>
 801d1f4:	29403fcc 	andi	r5,r5,255
 801d1f8:	38001426 	beq	r7,zero,801d24c <__lesf2+0x9c>
 801d1fc:	2800081e 	bne	r5,zero,801d220 <__lesf2+0x70>
 801d200:	00bfffc4 	movi	r2,-1
 801d204:	f800283a 	ret
 801d208:	40000c1e 	bne	r8,zero,801d23c <__lesf2+0x8c>
 801d20c:	30800a26 	beq	r6,r2,801d238 <__lesf2+0x88>
 801d210:	30000d1e 	bne	r6,zero,801d248 <__lesf2+0x98>
 801d214:	000f883a 	mov	r7,zero
 801d218:	183ff61e 	bne	r3,zero,801d1f4 <__alt_data_end+0xfc01d1f4>
 801d21c:	203ff81e 	bne	r4,zero,801d200 <__alt_data_end+0xfc01d200>
 801d220:	00800044 	movi	r2,1
 801d224:	f800283a 	ret
 801d228:	183ff21e 	bne	r3,zero,801d1f4 <__alt_data_end+0xfc01d1f4>
 801d22c:	483ffb26 	beq	r9,zero,801d21c <__alt_data_end+0xfc01d21c>
 801d230:	0005883a 	mov	r2,zero
 801d234:	f800283a 	ret
 801d238:	18000226 	beq	r3,zero,801d244 <__lesf2+0x94>
 801d23c:	00800084 	movi	r2,2
 801d240:	f800283a 	ret
 801d244:	103fe826 	beq	r2,zero,801d1e8 <__alt_data_end+0xfc01d1e8>
 801d248:	29403fcc 	andi	r5,r5,255
 801d24c:	217ff31e 	bne	r4,r5,801d21c <__alt_data_end+0xfc01d21c>
 801d250:	30bff216 	blt	r6,r2,801d21c <__alt_data_end+0xfc01d21c>
 801d254:	11800216 	blt	r2,r6,801d260 <__lesf2+0xb0>
 801d258:	1a3ff036 	bltu	r3,r8,801d21c <__alt_data_end+0xfc01d21c>
 801d25c:	40fff42e 	bgeu	r8,r3,801d230 <__alt_data_end+0xfc01d230>
 801d260:	203fe726 	beq	r4,zero,801d200 <__alt_data_end+0xfc01d200>
 801d264:	003fee06 	br	801d220 <__alt_data_end+0xfc01d220>

0801d268 <__floatunsidf>:
 801d268:	defffe04 	addi	sp,sp,-8
 801d26c:	dc000015 	stw	r16,0(sp)
 801d270:	dfc00115 	stw	ra,4(sp)
 801d274:	2021883a 	mov	r16,r4
 801d278:	20001026 	beq	r4,zero,801d2bc <__floatunsidf+0x54>
 801d27c:	800d6480 	call	800d648 <__clzsi2>
 801d280:	01410784 	movi	r5,1054
 801d284:	100d883a 	mov	r6,r2
 801d288:	288bc83a 	sub	r5,r5,r2
 801d28c:	00800284 	movi	r2,10
 801d290:	11801616 	blt	r2,r6,801d2ec <__floatunsidf+0x84>
 801d294:	008002c4 	movi	r2,11
 801d298:	1185c83a 	sub	r2,r2,r6
 801d29c:	8084d83a 	srl	r2,r16,r2
 801d2a0:	00c00434 	movhi	r3,16
 801d2a4:	31c00544 	addi	r7,r6,21
 801d2a8:	18ffffc4 	addi	r3,r3,-1
 801d2ac:	81e0983a 	sll	r16,r16,r7
 801d2b0:	10cc703a 	and	r6,r2,r3
 801d2b4:	2941ffcc 	andi	r5,r5,2047
 801d2b8:	00000206 	br	801d2c4 <__floatunsidf+0x5c>
 801d2bc:	000b883a 	mov	r5,zero
 801d2c0:	000d883a 	mov	r6,zero
 801d2c4:	280a953a 	slli	r5,r5,20
 801d2c8:	00c00434 	movhi	r3,16
 801d2cc:	18ffffc4 	addi	r3,r3,-1
 801d2d0:	30c6703a 	and	r3,r6,r3
 801d2d4:	8005883a 	mov	r2,r16
 801d2d8:	1946b03a 	or	r3,r3,r5
 801d2dc:	dfc00117 	ldw	ra,4(sp)
 801d2e0:	dc000017 	ldw	r16,0(sp)
 801d2e4:	dec00204 	addi	sp,sp,8
 801d2e8:	f800283a 	ret
 801d2ec:	31bffd44 	addi	r6,r6,-11
 801d2f0:	818c983a 	sll	r6,r16,r6
 801d2f4:	00800434 	movhi	r2,16
 801d2f8:	10bfffc4 	addi	r2,r2,-1
 801d2fc:	2941ffcc 	andi	r5,r5,2047
 801d300:	0021883a 	mov	r16,zero
 801d304:	308c703a 	and	r6,r6,r2
 801d308:	003fee06 	br	801d2c4 <__alt_data_end+0xfc01d2c4>

0801d30c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801d30c:	defffe04 	addi	sp,sp,-8
 801d310:	dfc00115 	stw	ra,4(sp)
 801d314:	df000015 	stw	fp,0(sp)
 801d318:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801d31c:	008200f4 	movhi	r2,2051
 801d320:	10b32104 	addi	r2,r2,-13180
 801d324:	10800017 	ldw	r2,0(r2)
 801d328:	10000526 	beq	r2,zero,801d340 <alt_get_errno+0x34>
 801d32c:	008200f4 	movhi	r2,2051
 801d330:	10b32104 	addi	r2,r2,-13180
 801d334:	10800017 	ldw	r2,0(r2)
 801d338:	103ee83a 	callr	r2
 801d33c:	00000206 	br	801d348 <alt_get_errno+0x3c>
 801d340:	008200f4 	movhi	r2,2051
 801d344:	10ba0e04 	addi	r2,r2,-6088
}
 801d348:	e037883a 	mov	sp,fp
 801d34c:	dfc00117 	ldw	ra,4(sp)
 801d350:	df000017 	ldw	fp,0(sp)
 801d354:	dec00204 	addi	sp,sp,8
 801d358:	f800283a 	ret

0801d35c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 801d35c:	defffb04 	addi	sp,sp,-20
 801d360:	dfc00415 	stw	ra,16(sp)
 801d364:	df000315 	stw	fp,12(sp)
 801d368:	df000304 	addi	fp,sp,12
 801d36c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 801d370:	e0bfff17 	ldw	r2,-4(fp)
 801d374:	10000616 	blt	r2,zero,801d390 <close+0x34>
 801d378:	e0bfff17 	ldw	r2,-4(fp)
 801d37c:	10c00324 	muli	r3,r2,12
 801d380:	008200f4 	movhi	r2,2051
 801d384:	10ae8d04 	addi	r2,r2,-17868
 801d388:	1885883a 	add	r2,r3,r2
 801d38c:	00000106 	br	801d394 <close+0x38>
 801d390:	0005883a 	mov	r2,zero
 801d394:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 801d398:	e0bffd17 	ldw	r2,-12(fp)
 801d39c:	10001926 	beq	r2,zero,801d404 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 801d3a0:	e0bffd17 	ldw	r2,-12(fp)
 801d3a4:	10800017 	ldw	r2,0(r2)
 801d3a8:	10800417 	ldw	r2,16(r2)
 801d3ac:	10000626 	beq	r2,zero,801d3c8 <close+0x6c>
 801d3b0:	e0bffd17 	ldw	r2,-12(fp)
 801d3b4:	10800017 	ldw	r2,0(r2)
 801d3b8:	10800417 	ldw	r2,16(r2)
 801d3bc:	e13ffd17 	ldw	r4,-12(fp)
 801d3c0:	103ee83a 	callr	r2
 801d3c4:	00000106 	br	801d3cc <close+0x70>
 801d3c8:	0005883a 	mov	r2,zero
 801d3cc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 801d3d0:	e13fff17 	ldw	r4,-4(fp)
 801d3d4:	801dc4c0 	call	801dc4c <alt_release_fd>
    if (rval < 0)
 801d3d8:	e0bffe17 	ldw	r2,-8(fp)
 801d3dc:	1000070e 	bge	r2,zero,801d3fc <close+0xa0>
    {
      ALT_ERRNO = -rval;
 801d3e0:	801d30c0 	call	801d30c <alt_get_errno>
 801d3e4:	1007883a 	mov	r3,r2
 801d3e8:	e0bffe17 	ldw	r2,-8(fp)
 801d3ec:	0085c83a 	sub	r2,zero,r2
 801d3f0:	18800015 	stw	r2,0(r3)
      return -1;
 801d3f4:	00bfffc4 	movi	r2,-1
 801d3f8:	00000706 	br	801d418 <close+0xbc>
    }
    return 0;
 801d3fc:	0005883a 	mov	r2,zero
 801d400:	00000506 	br	801d418 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 801d404:	801d30c0 	call	801d30c <alt_get_errno>
 801d408:	1007883a 	mov	r3,r2
 801d40c:	00801444 	movi	r2,81
 801d410:	18800015 	stw	r2,0(r3)
    return -1;
 801d414:	00bfffc4 	movi	r2,-1
  }
}
 801d418:	e037883a 	mov	sp,fp
 801d41c:	dfc00117 	ldw	ra,4(sp)
 801d420:	df000017 	ldw	fp,0(sp)
 801d424:	dec00204 	addi	sp,sp,8
 801d428:	f800283a 	ret

0801d42c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 801d42c:	defffc04 	addi	sp,sp,-16
 801d430:	df000315 	stw	fp,12(sp)
 801d434:	df000304 	addi	fp,sp,12
 801d438:	e13ffd15 	stw	r4,-12(fp)
 801d43c:	e17ffe15 	stw	r5,-8(fp)
 801d440:	e1bfff15 	stw	r6,-4(fp)
  return len;
 801d444:	e0bfff17 	ldw	r2,-4(fp)
}
 801d448:	e037883a 	mov	sp,fp
 801d44c:	df000017 	ldw	fp,0(sp)
 801d450:	dec00104 	addi	sp,sp,4
 801d454:	f800283a 	ret

0801d458 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801d458:	defffe04 	addi	sp,sp,-8
 801d45c:	dfc00115 	stw	ra,4(sp)
 801d460:	df000015 	stw	fp,0(sp)
 801d464:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801d468:	008200f4 	movhi	r2,2051
 801d46c:	10b32104 	addi	r2,r2,-13180
 801d470:	10800017 	ldw	r2,0(r2)
 801d474:	10000526 	beq	r2,zero,801d48c <alt_get_errno+0x34>
 801d478:	008200f4 	movhi	r2,2051
 801d47c:	10b32104 	addi	r2,r2,-13180
 801d480:	10800017 	ldw	r2,0(r2)
 801d484:	103ee83a 	callr	r2
 801d488:	00000206 	br	801d494 <alt_get_errno+0x3c>
 801d48c:	008200f4 	movhi	r2,2051
 801d490:	10ba0e04 	addi	r2,r2,-6088
}
 801d494:	e037883a 	mov	sp,fp
 801d498:	dfc00117 	ldw	ra,4(sp)
 801d49c:	df000017 	ldw	fp,0(sp)
 801d4a0:	dec00204 	addi	sp,sp,8
 801d4a4:	f800283a 	ret

0801d4a8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 801d4a8:	defffb04 	addi	sp,sp,-20
 801d4ac:	dfc00415 	stw	ra,16(sp)
 801d4b0:	df000315 	stw	fp,12(sp)
 801d4b4:	df000304 	addi	fp,sp,12
 801d4b8:	e13ffe15 	stw	r4,-8(fp)
 801d4bc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 801d4c0:	e0bffe17 	ldw	r2,-8(fp)
 801d4c4:	10000616 	blt	r2,zero,801d4e0 <fstat+0x38>
 801d4c8:	e0bffe17 	ldw	r2,-8(fp)
 801d4cc:	10c00324 	muli	r3,r2,12
 801d4d0:	008200f4 	movhi	r2,2051
 801d4d4:	10ae8d04 	addi	r2,r2,-17868
 801d4d8:	1885883a 	add	r2,r3,r2
 801d4dc:	00000106 	br	801d4e4 <fstat+0x3c>
 801d4e0:	0005883a 	mov	r2,zero
 801d4e4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 801d4e8:	e0bffd17 	ldw	r2,-12(fp)
 801d4ec:	10001026 	beq	r2,zero,801d530 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 801d4f0:	e0bffd17 	ldw	r2,-12(fp)
 801d4f4:	10800017 	ldw	r2,0(r2)
 801d4f8:	10800817 	ldw	r2,32(r2)
 801d4fc:	10000726 	beq	r2,zero,801d51c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 801d500:	e0bffd17 	ldw	r2,-12(fp)
 801d504:	10800017 	ldw	r2,0(r2)
 801d508:	10800817 	ldw	r2,32(r2)
 801d50c:	e13ffd17 	ldw	r4,-12(fp)
 801d510:	e17fff17 	ldw	r5,-4(fp)
 801d514:	103ee83a 	callr	r2
 801d518:	00000a06 	br	801d544 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 801d51c:	e0bfff17 	ldw	r2,-4(fp)
 801d520:	00c80004 	movi	r3,8192
 801d524:	10c00115 	stw	r3,4(r2)
      return 0;
 801d528:	0005883a 	mov	r2,zero
 801d52c:	00000506 	br	801d544 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 801d530:	801d4580 	call	801d458 <alt_get_errno>
 801d534:	1007883a 	mov	r3,r2
 801d538:	00801444 	movi	r2,81
 801d53c:	18800015 	stw	r2,0(r3)
    return -1;
 801d540:	00bfffc4 	movi	r2,-1
  }
}
 801d544:	e037883a 	mov	sp,fp
 801d548:	dfc00117 	ldw	ra,4(sp)
 801d54c:	df000017 	ldw	fp,0(sp)
 801d550:	dec00204 	addi	sp,sp,8
 801d554:	f800283a 	ret

0801d558 <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 801d558:	defff804 	addi	sp,sp,-32
 801d55c:	dfc00715 	stw	ra,28(sp)
 801d560:	df000615 	stw	fp,24(sp)
 801d564:	dc000515 	stw	r16,20(sp)
 801d568:	df000604 	addi	fp,sp,24
 801d56c:	e13ffd15 	stw	r4,-12(fp)
 801d570:	e17ffe15 	stw	r5,-8(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 801d574:	e0bffe17 	ldw	r2,-8(fp)
 801d578:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 801d57c:	008200f4 	movhi	r2,2051
 801d580:	10ba1a04 	addi	r2,r2,-6040
 801d584:	10800017 	ldw	r2,0(r2)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 801d588:	e0bffb15 	stw	r2,-20(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 801d58c:	008200f4 	movhi	r2,2051
 801d590:	10ba1904 	addi	r2,r2,-6044
 801d594:	10800017 	ldw	r2,0(r2)
  alt_u32 tick_rate = alt_ticks_per_second ();
 801d598:	e0bffc15 	stw	r2,-16(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 801d59c:	e0bffc17 	ldw	r2,-16(fp)
 801d5a0:	10006326 	beq	r2,zero,801d730 <gettimeofday+0x1d8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 801d5a4:	d0a70417 	ldw	r2,-25584(gp)
 801d5a8:	1009883a 	mov	r4,r2
 801d5ac:	e0fffb17 	ldw	r3,-20(fp)
 801d5b0:	e0bffc17 	ldw	r2,-16(fp)
 801d5b4:	1885203a 	divu	r2,r3,r2
 801d5b8:	2085883a 	add	r2,r4,r2
 801d5bc:	1007883a 	mov	r3,r2
 801d5c0:	e0bffd17 	ldw	r2,-12(fp)
 801d5c4:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 801d5c8:	d0a70504 	addi	r2,gp,-25580
 801d5cc:	10800017 	ldw	r2,0(r2)
 801d5d0:	1021883a 	mov	r16,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 801d5d4:	e0bffb17 	ldw	r2,-20(fp)
 801d5d8:	1013883a 	mov	r9,r2
 801d5dc:	0015883a 	mov	r10,zero
 801d5e0:	008003f4 	movhi	r2,15
 801d5e4:	10909004 	addi	r2,r2,16960
 801d5e8:	e0fffc17 	ldw	r3,-16(fp)
 801d5ec:	10c5203a 	divu	r2,r2,r3
 801d5f0:	100f883a 	mov	r7,r2
 801d5f4:	0011883a 	mov	r8,zero
 801d5f8:	4809883a 	mov	r4,r9
 801d5fc:	500b883a 	mov	r5,r10
 801d600:	380d883a 	mov	r6,r7
 801d604:	400f883a 	mov	r7,r8
 801d608:	802001c0 	call	802001c <__muldi3>
 801d60c:	100f883a 	mov	r7,r2
 801d610:	1811883a 	mov	r8,r3
 801d614:	380b883a 	mov	r5,r7
 801d618:	400d883a 	mov	r6,r8
 801d61c:	008003f4 	movhi	r2,15
 801d620:	10909004 	addi	r2,r2,16960
 801d624:	0007883a 	mov	r3,zero
 801d628:	2809883a 	mov	r4,r5
 801d62c:	300b883a 	mov	r5,r6
 801d630:	100d883a 	mov	r6,r2
 801d634:	180f883a 	mov	r7,r3
 801d638:	801caf40 	call	801caf4 <__umoddi3>
 801d63c:	1009883a 	mov	r4,r2
 801d640:	180b883a 	mov	r5,r3
 801d644:	2005883a 	mov	r2,r4
 801d648:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 801d64c:	8085883a 	add	r2,r16,r2
 801d650:	1007883a 	mov	r3,r2
 801d654:	e0bffd17 	ldw	r2,-12(fp)
 801d658:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 801d65c:	00001406 	br	801d6b0 <gettimeofday+0x158>
      if (ptimeval->tv_sec <= 0)
 801d660:	e0bffd17 	ldw	r2,-12(fp)
 801d664:	10800017 	ldw	r2,0(r2)
 801d668:	00800516 	blt	zero,r2,801d680 <gettimeofday+0x128>
      {
          ptimeval->tv_sec = 0;
 801d66c:	e0bffd17 	ldw	r2,-12(fp)
 801d670:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 801d674:	e0bffd17 	ldw	r2,-12(fp)
 801d678:	10000115 	stw	zero,4(r2)
          break;
 801d67c:	00000f06 	br	801d6bc <gettimeofday+0x164>
      }
      else
      {
          ptimeval->tv_sec--;
 801d680:	e0bffd17 	ldw	r2,-12(fp)
 801d684:	10800017 	ldw	r2,0(r2)
 801d688:	10ffffc4 	addi	r3,r2,-1
 801d68c:	e0bffd17 	ldw	r2,-12(fp)
 801d690:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 801d694:	e0bffd17 	ldw	r2,-12(fp)
 801d698:	10c00117 	ldw	r3,4(r2)
 801d69c:	008003f4 	movhi	r2,15
 801d6a0:	10909004 	addi	r2,r2,16960
 801d6a4:	1887883a 	add	r3,r3,r2
 801d6a8:	e0bffd17 	ldw	r2,-12(fp)
 801d6ac:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 801d6b0:	e0bffd17 	ldw	r2,-12(fp)
 801d6b4:	10800117 	ldw	r2,4(r2)
 801d6b8:	103fe916 	blt	r2,zero,801d660 <__alt_data_end+0xfc01d660>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 801d6bc:	00000c06 	br	801d6f0 <gettimeofday+0x198>
      ptimeval->tv_sec++;
 801d6c0:	e0bffd17 	ldw	r2,-12(fp)
 801d6c4:	10800017 	ldw	r2,0(r2)
 801d6c8:	10c00044 	addi	r3,r2,1
 801d6cc:	e0bffd17 	ldw	r2,-12(fp)
 801d6d0:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 801d6d4:	e0bffd17 	ldw	r2,-12(fp)
 801d6d8:	10c00117 	ldw	r3,4(r2)
 801d6dc:	00bffc74 	movhi	r2,65521
 801d6e0:	10af7004 	addi	r2,r2,-16960
 801d6e4:	1887883a 	add	r3,r3,r2
 801d6e8:	e0bffd17 	ldw	r2,-12(fp)
 801d6ec:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 801d6f0:	e0bffd17 	ldw	r2,-12(fp)
 801d6f4:	10c00117 	ldw	r3,4(r2)
 801d6f8:	008003f4 	movhi	r2,15
 801d6fc:	10908fc4 	addi	r2,r2,16959
 801d700:	10ffef16 	blt	r2,r3,801d6c0 <__alt_data_end+0xfc01d6c0>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 801d704:	e0bffa17 	ldw	r2,-24(fp)
 801d708:	10000726 	beq	r2,zero,801d728 <gettimeofday+0x1d0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 801d70c:	d0e70217 	ldw	r3,-25592(gp)
 801d710:	e0bffa17 	ldw	r2,-24(fp)
 801d714:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 801d718:	d0a70304 	addi	r2,gp,-25588
 801d71c:	10c00017 	ldw	r3,0(r2)
 801d720:	e0bffa17 	ldw	r2,-24(fp)
 801d724:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 801d728:	0005883a 	mov	r2,zero
 801d72c:	00000106 	br	801d734 <gettimeofday+0x1dc>
  }

  return -ENOTSUP;
 801d730:	00bfde84 	movi	r2,-134
}
 801d734:	e6ffff04 	addi	sp,fp,-4
 801d738:	dfc00217 	ldw	ra,8(sp)
 801d73c:	df000117 	ldw	fp,4(sp)
 801d740:	dc000017 	ldw	r16,0(sp)
 801d744:	dec00304 	addi	sp,sp,12
 801d748:	f800283a 	ret

0801d74c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801d74c:	defffe04 	addi	sp,sp,-8
 801d750:	dfc00115 	stw	ra,4(sp)
 801d754:	df000015 	stw	fp,0(sp)
 801d758:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801d75c:	008200f4 	movhi	r2,2051
 801d760:	10b32104 	addi	r2,r2,-13180
 801d764:	10800017 	ldw	r2,0(r2)
 801d768:	10000526 	beq	r2,zero,801d780 <alt_get_errno+0x34>
 801d76c:	008200f4 	movhi	r2,2051
 801d770:	10b32104 	addi	r2,r2,-13180
 801d774:	10800017 	ldw	r2,0(r2)
 801d778:	103ee83a 	callr	r2
 801d77c:	00000206 	br	801d788 <alt_get_errno+0x3c>
 801d780:	008200f4 	movhi	r2,2051
 801d784:	10ba0e04 	addi	r2,r2,-6088
}
 801d788:	e037883a 	mov	sp,fp
 801d78c:	dfc00117 	ldw	ra,4(sp)
 801d790:	df000017 	ldw	fp,0(sp)
 801d794:	dec00204 	addi	sp,sp,8
 801d798:	f800283a 	ret

0801d79c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 801d79c:	deffed04 	addi	sp,sp,-76
 801d7a0:	dfc01215 	stw	ra,72(sp)
 801d7a4:	df001115 	stw	fp,68(sp)
 801d7a8:	df001104 	addi	fp,sp,68
 801d7ac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 801d7b0:	e0bfff17 	ldw	r2,-4(fp)
 801d7b4:	10000616 	blt	r2,zero,801d7d0 <isatty+0x34>
 801d7b8:	e0bfff17 	ldw	r2,-4(fp)
 801d7bc:	10c00324 	muli	r3,r2,12
 801d7c0:	008200f4 	movhi	r2,2051
 801d7c4:	10ae8d04 	addi	r2,r2,-17868
 801d7c8:	1885883a 	add	r2,r3,r2
 801d7cc:	00000106 	br	801d7d4 <isatty+0x38>
 801d7d0:	0005883a 	mov	r2,zero
 801d7d4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 801d7d8:	e0bfef17 	ldw	r2,-68(fp)
 801d7dc:	10000e26 	beq	r2,zero,801d818 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 801d7e0:	e0bfef17 	ldw	r2,-68(fp)
 801d7e4:	10800017 	ldw	r2,0(r2)
 801d7e8:	10800817 	ldw	r2,32(r2)
 801d7ec:	1000021e 	bne	r2,zero,801d7f8 <isatty+0x5c>
    {
      return 1;
 801d7f0:	00800044 	movi	r2,1
 801d7f4:	00000d06 	br	801d82c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 801d7f8:	e0bff004 	addi	r2,fp,-64
 801d7fc:	e13fff17 	ldw	r4,-4(fp)
 801d800:	100b883a 	mov	r5,r2
 801d804:	801d4a80 	call	801d4a8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 801d808:	e0bff117 	ldw	r2,-60(fp)
 801d80c:	10880020 	cmpeqi	r2,r2,8192
 801d810:	10803fcc 	andi	r2,r2,255
 801d814:	00000506 	br	801d82c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 801d818:	801d74c0 	call	801d74c <alt_get_errno>
 801d81c:	1007883a 	mov	r3,r2
 801d820:	00801444 	movi	r2,81
 801d824:	18800015 	stw	r2,0(r3)
    return 0;
 801d828:	0005883a 	mov	r2,zero
  }
}
 801d82c:	e037883a 	mov	sp,fp
 801d830:	dfc00117 	ldw	ra,4(sp)
 801d834:	df000017 	ldw	fp,0(sp)
 801d838:	dec00204 	addi	sp,sp,8
 801d83c:	f800283a 	ret

0801d840 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 801d840:	defffc04 	addi	sp,sp,-16
 801d844:	df000315 	stw	fp,12(sp)
 801d848:	df000304 	addi	fp,sp,12
 801d84c:	e13ffd15 	stw	r4,-12(fp)
 801d850:	e17ffe15 	stw	r5,-8(fp)
 801d854:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 801d858:	e0fffe17 	ldw	r3,-8(fp)
 801d85c:	e0bffd17 	ldw	r2,-12(fp)
 801d860:	18800c26 	beq	r3,r2,801d894 <alt_load_section+0x54>
  {
    while( to != end )
 801d864:	00000806 	br	801d888 <alt_load_section+0x48>
    {
      *to++ = *from++;
 801d868:	e0bffe17 	ldw	r2,-8(fp)
 801d86c:	10c00104 	addi	r3,r2,4
 801d870:	e0fffe15 	stw	r3,-8(fp)
 801d874:	e0fffd17 	ldw	r3,-12(fp)
 801d878:	19000104 	addi	r4,r3,4
 801d87c:	e13ffd15 	stw	r4,-12(fp)
 801d880:	18c00017 	ldw	r3,0(r3)
 801d884:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 801d888:	e0fffe17 	ldw	r3,-8(fp)
 801d88c:	e0bfff17 	ldw	r2,-4(fp)
 801d890:	18bff51e 	bne	r3,r2,801d868 <__alt_data_end+0xfc01d868>
    {
      *to++ = *from++;
    }
  }
}
 801d894:	e037883a 	mov	sp,fp
 801d898:	df000017 	ldw	fp,0(sp)
 801d89c:	dec00104 	addi	sp,sp,4
 801d8a0:	f800283a 	ret

0801d8a4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 801d8a4:	defffe04 	addi	sp,sp,-8
 801d8a8:	dfc00115 	stw	ra,4(sp)
 801d8ac:	df000015 	stw	fp,0(sp)
 801d8b0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 801d8b4:	010200f4 	movhi	r4,2051
 801d8b8:	21332604 	addi	r4,r4,-13160
 801d8bc:	014200f4 	movhi	r5,2051
 801d8c0:	296c4604 	addi	r5,r5,-20200
 801d8c4:	018200f4 	movhi	r6,2051
 801d8c8:	31b32604 	addi	r6,r6,-13160
 801d8cc:	801d8400 	call	801d840 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 801d8d0:	01020034 	movhi	r4,2048
 801d8d4:	21000804 	addi	r4,r4,32
 801d8d8:	01420034 	movhi	r5,2048
 801d8dc:	29400804 	addi	r5,r5,32
 801d8e0:	01820034 	movhi	r6,2048
 801d8e4:	31806f04 	addi	r6,r6,444
 801d8e8:	801d8400 	call	801d840 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 801d8ec:	010200b4 	movhi	r4,2050
 801d8f0:	21002c04 	addi	r4,r4,176
 801d8f4:	014200b4 	movhi	r5,2050
 801d8f8:	29402c04 	addi	r5,r5,176
 801d8fc:	018200f4 	movhi	r6,2051
 801d900:	31ac4604 	addi	r6,r6,-20200
 801d904:	801d8400 	call	801d840 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 801d908:	801f1340 	call	801f134 <alt_dcache_flush_all>
  alt_icache_flush_all();
 801d90c:	801f38c0 	call	801f38c <alt_icache_flush_all>
}
 801d910:	e037883a 	mov	sp,fp
 801d914:	dfc00117 	ldw	ra,4(sp)
 801d918:	df000017 	ldw	fp,0(sp)
 801d91c:	dec00204 	addi	sp,sp,8
 801d920:	f800283a 	ret

0801d924 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801d924:	defffe04 	addi	sp,sp,-8
 801d928:	dfc00115 	stw	ra,4(sp)
 801d92c:	df000015 	stw	fp,0(sp)
 801d930:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801d934:	008200f4 	movhi	r2,2051
 801d938:	10b32104 	addi	r2,r2,-13180
 801d93c:	10800017 	ldw	r2,0(r2)
 801d940:	10000526 	beq	r2,zero,801d958 <alt_get_errno+0x34>
 801d944:	008200f4 	movhi	r2,2051
 801d948:	10b32104 	addi	r2,r2,-13180
 801d94c:	10800017 	ldw	r2,0(r2)
 801d950:	103ee83a 	callr	r2
 801d954:	00000206 	br	801d960 <alt_get_errno+0x3c>
 801d958:	008200f4 	movhi	r2,2051
 801d95c:	10ba0e04 	addi	r2,r2,-6088
}
 801d960:	e037883a 	mov	sp,fp
 801d964:	dfc00117 	ldw	ra,4(sp)
 801d968:	df000017 	ldw	fp,0(sp)
 801d96c:	dec00204 	addi	sp,sp,8
 801d970:	f800283a 	ret

0801d974 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 801d974:	defff904 	addi	sp,sp,-28
 801d978:	dfc00615 	stw	ra,24(sp)
 801d97c:	df000515 	stw	fp,20(sp)
 801d980:	df000504 	addi	fp,sp,20
 801d984:	e13ffd15 	stw	r4,-12(fp)
 801d988:	e17ffe15 	stw	r5,-8(fp)
 801d98c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 801d990:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 801d994:	e0bffd17 	ldw	r2,-12(fp)
 801d998:	10000616 	blt	r2,zero,801d9b4 <lseek+0x40>
 801d99c:	e0bffd17 	ldw	r2,-12(fp)
 801d9a0:	10c00324 	muli	r3,r2,12
 801d9a4:	008200f4 	movhi	r2,2051
 801d9a8:	10ae8d04 	addi	r2,r2,-17868
 801d9ac:	1885883a 	add	r2,r3,r2
 801d9b0:	00000106 	br	801d9b8 <lseek+0x44>
 801d9b4:	0005883a 	mov	r2,zero
 801d9b8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 801d9bc:	e0bffc17 	ldw	r2,-16(fp)
 801d9c0:	10001026 	beq	r2,zero,801da04 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 801d9c4:	e0bffc17 	ldw	r2,-16(fp)
 801d9c8:	10800017 	ldw	r2,0(r2)
 801d9cc:	10800717 	ldw	r2,28(r2)
 801d9d0:	10000926 	beq	r2,zero,801d9f8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 801d9d4:	e0bffc17 	ldw	r2,-16(fp)
 801d9d8:	10800017 	ldw	r2,0(r2)
 801d9dc:	10800717 	ldw	r2,28(r2)
 801d9e0:	e13ffc17 	ldw	r4,-16(fp)
 801d9e4:	e17ffe17 	ldw	r5,-8(fp)
 801d9e8:	e1bfff17 	ldw	r6,-4(fp)
 801d9ec:	103ee83a 	callr	r2
 801d9f0:	e0bffb15 	stw	r2,-20(fp)
 801d9f4:	00000506 	br	801da0c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 801d9f8:	00bfde84 	movi	r2,-134
 801d9fc:	e0bffb15 	stw	r2,-20(fp)
 801da00:	00000206 	br	801da0c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 801da04:	00bfebc4 	movi	r2,-81
 801da08:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 801da0c:	e0bffb17 	ldw	r2,-20(fp)
 801da10:	1000070e 	bge	r2,zero,801da30 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 801da14:	801d9240 	call	801d924 <alt_get_errno>
 801da18:	1007883a 	mov	r3,r2
 801da1c:	e0bffb17 	ldw	r2,-20(fp)
 801da20:	0085c83a 	sub	r2,zero,r2
 801da24:	18800015 	stw	r2,0(r3)
    rc = -1;
 801da28:	00bfffc4 	movi	r2,-1
 801da2c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 801da30:	e0bffb17 	ldw	r2,-20(fp)
}
 801da34:	e037883a 	mov	sp,fp
 801da38:	dfc00117 	ldw	ra,4(sp)
 801da3c:	df000017 	ldw	fp,0(sp)
 801da40:	dec00204 	addi	sp,sp,8
 801da44:	f800283a 	ret

0801da48 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 801da48:	defffd04 	addi	sp,sp,-12
 801da4c:	dfc00215 	stw	ra,8(sp)
 801da50:	df000115 	stw	fp,4(sp)
 801da54:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 801da58:	0009883a 	mov	r4,zero
 801da5c:	801df300 	call	801df30 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 801da60:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 801da64:	801df640 	call	801df64 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 801da68:	010200f4 	movhi	r4,2051
 801da6c:	212c3604 	addi	r4,r4,-20264
 801da70:	014200f4 	movhi	r5,2051
 801da74:	296c3604 	addi	r5,r5,-20264
 801da78:	018200f4 	movhi	r6,2051
 801da7c:	31ac3604 	addi	r6,r6,-20264
 801da80:	801f74c0 	call	801f74c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 801da84:	801f2440 	call	801f244 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 801da88:	010200b4 	movhi	r4,2050
 801da8c:	213ca804 	addi	r4,r4,-3424
 801da90:	801fcac0 	call	801fcac <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 801da94:	d1270617 	ldw	r4,-25576(gp)
 801da98:	d0e70717 	ldw	r3,-25572(gp)
 801da9c:	d0a70817 	ldw	r2,-25568(gp)
 801daa0:	180b883a 	mov	r5,r3
 801daa4:	100d883a 	mov	r6,r2
 801daa8:	8004ab00 	call	8004ab0 <main>
 801daac:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 801dab0:	01000044 	movi	r4,1
 801dab4:	801d35c0 	call	801d35c <close>
  exit (result);
 801dab8:	e13fff17 	ldw	r4,-4(fp)
 801dabc:	801fcc00 	call	801fcc0 <exit>

0801dac0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 801dac0:	defffe04 	addi	sp,sp,-8
 801dac4:	df000115 	stw	fp,4(sp)
 801dac8:	df000104 	addi	fp,sp,4
 801dacc:	e13fff15 	stw	r4,-4(fp)
}
 801dad0:	e037883a 	mov	sp,fp
 801dad4:	df000017 	ldw	fp,0(sp)
 801dad8:	dec00104 	addi	sp,sp,4
 801dadc:	f800283a 	ret

0801dae0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 801dae0:	defffe04 	addi	sp,sp,-8
 801dae4:	df000115 	stw	fp,4(sp)
 801dae8:	df000104 	addi	fp,sp,4
 801daec:	e13fff15 	stw	r4,-4(fp)
}
 801daf0:	e037883a 	mov	sp,fp
 801daf4:	df000017 	ldw	fp,0(sp)
 801daf8:	dec00104 	addi	sp,sp,4
 801dafc:	f800283a 	ret

0801db00 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801db00:	defffe04 	addi	sp,sp,-8
 801db04:	dfc00115 	stw	ra,4(sp)
 801db08:	df000015 	stw	fp,0(sp)
 801db0c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801db10:	008200f4 	movhi	r2,2051
 801db14:	10b32104 	addi	r2,r2,-13180
 801db18:	10800017 	ldw	r2,0(r2)
 801db1c:	10000526 	beq	r2,zero,801db34 <alt_get_errno+0x34>
 801db20:	008200f4 	movhi	r2,2051
 801db24:	10b32104 	addi	r2,r2,-13180
 801db28:	10800017 	ldw	r2,0(r2)
 801db2c:	103ee83a 	callr	r2
 801db30:	00000206 	br	801db3c <alt_get_errno+0x3c>
 801db34:	008200f4 	movhi	r2,2051
 801db38:	10ba0e04 	addi	r2,r2,-6088
}
 801db3c:	e037883a 	mov	sp,fp
 801db40:	dfc00117 	ldw	ra,4(sp)
 801db44:	df000017 	ldw	fp,0(sp)
 801db48:	dec00204 	addi	sp,sp,8
 801db4c:	f800283a 	ret

0801db50 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 801db50:	defff904 	addi	sp,sp,-28
 801db54:	dfc00615 	stw	ra,24(sp)
 801db58:	df000515 	stw	fp,20(sp)
 801db5c:	df000504 	addi	fp,sp,20
 801db60:	e13ffd15 	stw	r4,-12(fp)
 801db64:	e17ffe15 	stw	r5,-8(fp)
 801db68:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 801db6c:	e0bffd17 	ldw	r2,-12(fp)
 801db70:	10000616 	blt	r2,zero,801db8c <read+0x3c>
 801db74:	e0bffd17 	ldw	r2,-12(fp)
 801db78:	10c00324 	muli	r3,r2,12
 801db7c:	008200f4 	movhi	r2,2051
 801db80:	10ae8d04 	addi	r2,r2,-17868
 801db84:	1885883a 	add	r2,r3,r2
 801db88:	00000106 	br	801db90 <read+0x40>
 801db8c:	0005883a 	mov	r2,zero
 801db90:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 801db94:	e0bffb17 	ldw	r2,-20(fp)
 801db98:	10002226 	beq	r2,zero,801dc24 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 801db9c:	e0bffb17 	ldw	r2,-20(fp)
 801dba0:	10800217 	ldw	r2,8(r2)
 801dba4:	108000cc 	andi	r2,r2,3
 801dba8:	10800060 	cmpeqi	r2,r2,1
 801dbac:	1000181e 	bne	r2,zero,801dc10 <read+0xc0>
        (fd->dev->read))
 801dbb0:	e0bffb17 	ldw	r2,-20(fp)
 801dbb4:	10800017 	ldw	r2,0(r2)
 801dbb8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 801dbbc:	10001426 	beq	r2,zero,801dc10 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 801dbc0:	e0bffb17 	ldw	r2,-20(fp)
 801dbc4:	10800017 	ldw	r2,0(r2)
 801dbc8:	10800517 	ldw	r2,20(r2)
 801dbcc:	e0ffff17 	ldw	r3,-4(fp)
 801dbd0:	e13ffb17 	ldw	r4,-20(fp)
 801dbd4:	e17ffe17 	ldw	r5,-8(fp)
 801dbd8:	180d883a 	mov	r6,r3
 801dbdc:	103ee83a 	callr	r2
 801dbe0:	e0bffc15 	stw	r2,-16(fp)
 801dbe4:	e0bffc17 	ldw	r2,-16(fp)
 801dbe8:	1000070e 	bge	r2,zero,801dc08 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 801dbec:	801db000 	call	801db00 <alt_get_errno>
 801dbf0:	1007883a 	mov	r3,r2
 801dbf4:	e0bffc17 	ldw	r2,-16(fp)
 801dbf8:	0085c83a 	sub	r2,zero,r2
 801dbfc:	18800015 	stw	r2,0(r3)
          return -1;
 801dc00:	00bfffc4 	movi	r2,-1
 801dc04:	00000c06 	br	801dc38 <read+0xe8>
        }
        return rval;
 801dc08:	e0bffc17 	ldw	r2,-16(fp)
 801dc0c:	00000a06 	br	801dc38 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 801dc10:	801db000 	call	801db00 <alt_get_errno>
 801dc14:	1007883a 	mov	r3,r2
 801dc18:	00800344 	movi	r2,13
 801dc1c:	18800015 	stw	r2,0(r3)
 801dc20:	00000406 	br	801dc34 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 801dc24:	801db000 	call	801db00 <alt_get_errno>
 801dc28:	1007883a 	mov	r3,r2
 801dc2c:	00801444 	movi	r2,81
 801dc30:	18800015 	stw	r2,0(r3)
  }
  return -1;
 801dc34:	00bfffc4 	movi	r2,-1
}
 801dc38:	e037883a 	mov	sp,fp
 801dc3c:	dfc00117 	ldw	ra,4(sp)
 801dc40:	df000017 	ldw	fp,0(sp)
 801dc44:	dec00204 	addi	sp,sp,8
 801dc48:	f800283a 	ret

0801dc4c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 801dc4c:	defffe04 	addi	sp,sp,-8
 801dc50:	df000115 	stw	fp,4(sp)
 801dc54:	df000104 	addi	fp,sp,4
 801dc58:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 801dc5c:	e0bfff17 	ldw	r2,-4(fp)
 801dc60:	108000d0 	cmplti	r2,r2,3
 801dc64:	10000d1e 	bne	r2,zero,801dc9c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 801dc68:	008200f4 	movhi	r2,2051
 801dc6c:	10ae8d04 	addi	r2,r2,-17868
 801dc70:	e0ffff17 	ldw	r3,-4(fp)
 801dc74:	18c00324 	muli	r3,r3,12
 801dc78:	10c5883a 	add	r2,r2,r3
 801dc7c:	10800204 	addi	r2,r2,8
 801dc80:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 801dc84:	008200f4 	movhi	r2,2051
 801dc88:	10ae8d04 	addi	r2,r2,-17868
 801dc8c:	e0ffff17 	ldw	r3,-4(fp)
 801dc90:	18c00324 	muli	r3,r3,12
 801dc94:	10c5883a 	add	r2,r2,r3
 801dc98:	10000015 	stw	zero,0(r2)
  }
}
 801dc9c:	e037883a 	mov	sp,fp
 801dca0:	df000017 	ldw	fp,0(sp)
 801dca4:	dec00104 	addi	sp,sp,4
 801dca8:	f800283a 	ret

0801dcac <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 801dcac:	defff904 	addi	sp,sp,-28
 801dcb0:	df000615 	stw	fp,24(sp)
 801dcb4:	df000604 	addi	fp,sp,24
 801dcb8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801dcbc:	0005303a 	rdctl	r2,status
 801dcc0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801dcc4:	e0fffc17 	ldw	r3,-16(fp)
 801dcc8:	00bfff84 	movi	r2,-2
 801dccc:	1884703a 	and	r2,r3,r2
 801dcd0:	1001703a 	wrctl	status,r2
  
  return context;
 801dcd4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 801dcd8:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 801dcdc:	d0a01217 	ldw	r2,-32696(gp)
 801dce0:	10c000c4 	addi	r3,r2,3
 801dce4:	00bfff04 	movi	r2,-4
 801dce8:	1884703a 	and	r2,r3,r2
 801dcec:	d0a01215 	stw	r2,-32696(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 801dcf0:	d0e01217 	ldw	r3,-32696(gp)
 801dcf4:	e0bfff17 	ldw	r2,-4(fp)
 801dcf8:	1887883a 	add	r3,r3,r2
 801dcfc:	00830034 	movhi	r2,3072
 801dd00:	10800004 	addi	r2,r2,0
 801dd04:	10c0062e 	bgeu	r2,r3,801dd20 <sbrk+0x74>
 801dd08:	e0bffa17 	ldw	r2,-24(fp)
 801dd0c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801dd10:	e0bffd17 	ldw	r2,-12(fp)
 801dd14:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 801dd18:	00bfffc4 	movi	r2,-1
 801dd1c:	00000b06 	br	801dd4c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 801dd20:	d0a01217 	ldw	r2,-32696(gp)
 801dd24:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 801dd28:	d0e01217 	ldw	r3,-32696(gp)
 801dd2c:	e0bfff17 	ldw	r2,-4(fp)
 801dd30:	1885883a 	add	r2,r3,r2
 801dd34:	d0a01215 	stw	r2,-32696(gp)
 801dd38:	e0bffa17 	ldw	r2,-24(fp)
 801dd3c:	e0bffe15 	stw	r2,-8(fp)
 801dd40:	e0bffe17 	ldw	r2,-8(fp)
 801dd44:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 801dd48:	e0bffb17 	ldw	r2,-20(fp)
} 
 801dd4c:	e037883a 	mov	sp,fp
 801dd50:	df000017 	ldw	fp,0(sp)
 801dd54:	dec00104 	addi	sp,sp,4
 801dd58:	f800283a 	ret

0801dd5c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 801dd5c:	defffa04 	addi	sp,sp,-24
 801dd60:	df000515 	stw	fp,20(sp)
 801dd64:	df000504 	addi	fp,sp,20
 801dd68:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801dd6c:	0005303a 	rdctl	r2,status
 801dd70:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801dd74:	e0fffc17 	ldw	r3,-16(fp)
 801dd78:	00bfff84 	movi	r2,-2
 801dd7c:	1884703a 	and	r2,r3,r2
 801dd80:	1001703a 	wrctl	status,r2
  
  return context;
 801dd84:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 801dd88:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 801dd8c:	e0bfff17 	ldw	r2,-4(fp)
 801dd90:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 801dd94:	e0bffd17 	ldw	r2,-12(fp)
 801dd98:	10800017 	ldw	r2,0(r2)
 801dd9c:	e0fffd17 	ldw	r3,-12(fp)
 801dda0:	18c00117 	ldw	r3,4(r3)
 801dda4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 801dda8:	e0bffd17 	ldw	r2,-12(fp)
 801ddac:	10800117 	ldw	r2,4(r2)
 801ddb0:	e0fffd17 	ldw	r3,-12(fp)
 801ddb4:	18c00017 	ldw	r3,0(r3)
 801ddb8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 801ddbc:	e0bffd17 	ldw	r2,-12(fp)
 801ddc0:	e0fffd17 	ldw	r3,-12(fp)
 801ddc4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 801ddc8:	e0bffd17 	ldw	r2,-12(fp)
 801ddcc:	e0fffd17 	ldw	r3,-12(fp)
 801ddd0:	10c00015 	stw	r3,0(r2)
 801ddd4:	e0bffb17 	ldw	r2,-20(fp)
 801ddd8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801dddc:	e0bffe17 	ldw	r2,-8(fp)
 801dde0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 801dde4:	e037883a 	mov	sp,fp
 801dde8:	df000017 	ldw	fp,0(sp)
 801ddec:	dec00104 	addi	sp,sp,4
 801ddf0:	f800283a 	ret

0801ddf4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 801ddf4:	defffb04 	addi	sp,sp,-20
 801ddf8:	dfc00415 	stw	ra,16(sp)
 801ddfc:	df000315 	stw	fp,12(sp)
 801de00:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 801de04:	d0a01317 	ldw	r2,-32692(gp)
 801de08:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 801de0c:	d0a70a17 	ldw	r2,-25560(gp)
 801de10:	10800044 	addi	r2,r2,1
 801de14:	d0a70a15 	stw	r2,-25560(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 801de18:	00002e06 	br	801ded4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 801de1c:	e0bffd17 	ldw	r2,-12(fp)
 801de20:	10800017 	ldw	r2,0(r2)
 801de24:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 801de28:	e0bffd17 	ldw	r2,-12(fp)
 801de2c:	10800403 	ldbu	r2,16(r2)
 801de30:	10803fcc 	andi	r2,r2,255
 801de34:	10000426 	beq	r2,zero,801de48 <alt_tick+0x54>
 801de38:	d0a70a17 	ldw	r2,-25560(gp)
 801de3c:	1000021e 	bne	r2,zero,801de48 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 801de40:	e0bffd17 	ldw	r2,-12(fp)
 801de44:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 801de48:	e0bffd17 	ldw	r2,-12(fp)
 801de4c:	10800217 	ldw	r2,8(r2)
 801de50:	d0e70a17 	ldw	r3,-25560(gp)
 801de54:	18801d36 	bltu	r3,r2,801decc <alt_tick+0xd8>
 801de58:	e0bffd17 	ldw	r2,-12(fp)
 801de5c:	10800403 	ldbu	r2,16(r2)
 801de60:	10803fcc 	andi	r2,r2,255
 801de64:	1000191e 	bne	r2,zero,801decc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 801de68:	e0bffd17 	ldw	r2,-12(fp)
 801de6c:	10800317 	ldw	r2,12(r2)
 801de70:	e0fffd17 	ldw	r3,-12(fp)
 801de74:	18c00517 	ldw	r3,20(r3)
 801de78:	1809883a 	mov	r4,r3
 801de7c:	103ee83a 	callr	r2
 801de80:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 801de84:	e0bfff17 	ldw	r2,-4(fp)
 801de88:	1000031e 	bne	r2,zero,801de98 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 801de8c:	e13ffd17 	ldw	r4,-12(fp)
 801de90:	801dd5c0 	call	801dd5c <alt_alarm_stop>
 801de94:	00000d06 	br	801decc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 801de98:	e0bffd17 	ldw	r2,-12(fp)
 801de9c:	10c00217 	ldw	r3,8(r2)
 801dea0:	e0bfff17 	ldw	r2,-4(fp)
 801dea4:	1887883a 	add	r3,r3,r2
 801dea8:	e0bffd17 	ldw	r2,-12(fp)
 801deac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 801deb0:	e0bffd17 	ldw	r2,-12(fp)
 801deb4:	10c00217 	ldw	r3,8(r2)
 801deb8:	d0a70a17 	ldw	r2,-25560(gp)
 801debc:	1880032e 	bgeu	r3,r2,801decc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 801dec0:	e0bffd17 	ldw	r2,-12(fp)
 801dec4:	00c00044 	movi	r3,1
 801dec8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 801decc:	e0bffe17 	ldw	r2,-8(fp)
 801ded0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 801ded4:	e0fffd17 	ldw	r3,-12(fp)
 801ded8:	d0a01304 	addi	r2,gp,-32692
 801dedc:	18bfcf1e 	bne	r3,r2,801de1c <__alt_data_end+0xfc01de1c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 801dee0:	0001883a 	nop
}
 801dee4:	e037883a 	mov	sp,fp
 801dee8:	dfc00117 	ldw	ra,4(sp)
 801deec:	df000017 	ldw	fp,0(sp)
 801def0:	dec00204 	addi	sp,sp,8
 801def4:	f800283a 	ret

0801def8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 801def8:	defffd04 	addi	sp,sp,-12
 801defc:	dfc00215 	stw	ra,8(sp)
 801df00:	df000115 	stw	fp,4(sp)
 801df04:	df000104 	addi	fp,sp,4
 801df08:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 801df0c:	e13fff17 	ldw	r4,-4(fp)
 801df10:	014200f4 	movhi	r5,2051
 801df14:	29731e04 	addi	r5,r5,-13192
 801df18:	801f1a00 	call	801f1a0 <alt_dev_llist_insert>
}
 801df1c:	e037883a 	mov	sp,fp
 801df20:	dfc00117 	ldw	ra,4(sp)
 801df24:	df000017 	ldw	fp,0(sp)
 801df28:	dec00204 	addi	sp,sp,8
 801df2c:	f800283a 	ret

0801df30 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 801df30:	defffd04 	addi	sp,sp,-12
 801df34:	dfc00215 	stw	ra,8(sp)
 801df38:	df000115 	stw	fp,4(sp)
 801df3c:	df000104 	addi	fp,sp,4
 801df40:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 801df44:	801fa380 	call	801fa38 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 801df48:	00800044 	movi	r2,1
 801df4c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 801df50:	e037883a 	mov	sp,fp
 801df54:	dfc00117 	ldw	ra,4(sp)
 801df58:	df000017 	ldw	fp,0(sp)
 801df5c:	dec00204 	addi	sp,sp,8
 801df60:	f800283a 	ret

0801df64 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 801df64:	defffe04 	addi	sp,sp,-8
 801df68:	dfc00115 	stw	ra,4(sp)
 801df6c:	df000015 	stw	fp,0(sp)
 801df70:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 801df74:	01082004 	movi	r4,8320
 801df78:	000b883a 	mov	r5,zero
 801df7c:	01800104 	movi	r6,4
 801df80:	01c0fa04 	movi	r7,1000
 801df84:	801ea940 	call	801ea94 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 801df88:	010200f4 	movhi	r4,2051
 801df8c:	212ef704 	addi	r4,r4,-17444
 801df90:	000b883a 	mov	r5,zero
 801df94:	01800144 	movi	r6,5
 801df98:	801e1380 	call	801e138 <altera_avalon_jtag_uart_init>
 801df9c:	010200f4 	movhi	r4,2051
 801dfa0:	212eed04 	addi	r4,r4,-17484
 801dfa4:	801def80 	call	801def8 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 801dfa8:	010200f4 	movhi	r4,2051
 801dfac:	21330504 	addi	r4,r4,-13292
 801dfb0:	801ebcc0 	call	801ebcc <alt_up_character_lcd_init>
 801dfb4:	010200f4 	movhi	r4,2051
 801dfb8:	21330504 	addi	r4,r4,-13292
 801dfbc:	801def80 	call	801def8 <alt_dev_reg>
}
 801dfc0:	e037883a 	mov	sp,fp
 801dfc4:	dfc00117 	ldw	ra,4(sp)
 801dfc8:	df000017 	ldw	fp,0(sp)
 801dfcc:	dec00204 	addi	sp,sp,8
 801dfd0:	f800283a 	ret

0801dfd4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 801dfd4:	defffa04 	addi	sp,sp,-24
 801dfd8:	dfc00515 	stw	ra,20(sp)
 801dfdc:	df000415 	stw	fp,16(sp)
 801dfe0:	df000404 	addi	fp,sp,16
 801dfe4:	e13ffd15 	stw	r4,-12(fp)
 801dfe8:	e17ffe15 	stw	r5,-8(fp)
 801dfec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801dff0:	e0bffd17 	ldw	r2,-12(fp)
 801dff4:	10800017 	ldw	r2,0(r2)
 801dff8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 801dffc:	e0bffc17 	ldw	r2,-16(fp)
 801e000:	10c00a04 	addi	r3,r2,40
 801e004:	e0bffd17 	ldw	r2,-12(fp)
 801e008:	10800217 	ldw	r2,8(r2)
 801e00c:	1809883a 	mov	r4,r3
 801e010:	e17ffe17 	ldw	r5,-8(fp)
 801e014:	e1bfff17 	ldw	r6,-4(fp)
 801e018:	100f883a 	mov	r7,r2
 801e01c:	801e5fc0 	call	801e5fc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 801e020:	e037883a 	mov	sp,fp
 801e024:	dfc00117 	ldw	ra,4(sp)
 801e028:	df000017 	ldw	fp,0(sp)
 801e02c:	dec00204 	addi	sp,sp,8
 801e030:	f800283a 	ret

0801e034 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 801e034:	defffa04 	addi	sp,sp,-24
 801e038:	dfc00515 	stw	ra,20(sp)
 801e03c:	df000415 	stw	fp,16(sp)
 801e040:	df000404 	addi	fp,sp,16
 801e044:	e13ffd15 	stw	r4,-12(fp)
 801e048:	e17ffe15 	stw	r5,-8(fp)
 801e04c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801e050:	e0bffd17 	ldw	r2,-12(fp)
 801e054:	10800017 	ldw	r2,0(r2)
 801e058:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 801e05c:	e0bffc17 	ldw	r2,-16(fp)
 801e060:	10c00a04 	addi	r3,r2,40
 801e064:	e0bffd17 	ldw	r2,-12(fp)
 801e068:	10800217 	ldw	r2,8(r2)
 801e06c:	1809883a 	mov	r4,r3
 801e070:	e17ffe17 	ldw	r5,-8(fp)
 801e074:	e1bfff17 	ldw	r6,-4(fp)
 801e078:	100f883a 	mov	r7,r2
 801e07c:	801e8080 	call	801e808 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 801e080:	e037883a 	mov	sp,fp
 801e084:	dfc00117 	ldw	ra,4(sp)
 801e088:	df000017 	ldw	fp,0(sp)
 801e08c:	dec00204 	addi	sp,sp,8
 801e090:	f800283a 	ret

0801e094 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 801e094:	defffc04 	addi	sp,sp,-16
 801e098:	dfc00315 	stw	ra,12(sp)
 801e09c:	df000215 	stw	fp,8(sp)
 801e0a0:	df000204 	addi	fp,sp,8
 801e0a4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801e0a8:	e0bfff17 	ldw	r2,-4(fp)
 801e0ac:	10800017 	ldw	r2,0(r2)
 801e0b0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 801e0b4:	e0bffe17 	ldw	r2,-8(fp)
 801e0b8:	10c00a04 	addi	r3,r2,40
 801e0bc:	e0bfff17 	ldw	r2,-4(fp)
 801e0c0:	10800217 	ldw	r2,8(r2)
 801e0c4:	1809883a 	mov	r4,r3
 801e0c8:	100b883a 	mov	r5,r2
 801e0cc:	801e4a80 	call	801e4a8 <altera_avalon_jtag_uart_close>
}
 801e0d0:	e037883a 	mov	sp,fp
 801e0d4:	dfc00117 	ldw	ra,4(sp)
 801e0d8:	df000017 	ldw	fp,0(sp)
 801e0dc:	dec00204 	addi	sp,sp,8
 801e0e0:	f800283a 	ret

0801e0e4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 801e0e4:	defffa04 	addi	sp,sp,-24
 801e0e8:	dfc00515 	stw	ra,20(sp)
 801e0ec:	df000415 	stw	fp,16(sp)
 801e0f0:	df000404 	addi	fp,sp,16
 801e0f4:	e13ffd15 	stw	r4,-12(fp)
 801e0f8:	e17ffe15 	stw	r5,-8(fp)
 801e0fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 801e100:	e0bffd17 	ldw	r2,-12(fp)
 801e104:	10800017 	ldw	r2,0(r2)
 801e108:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 801e10c:	e0bffc17 	ldw	r2,-16(fp)
 801e110:	10800a04 	addi	r2,r2,40
 801e114:	1009883a 	mov	r4,r2
 801e118:	e17ffe17 	ldw	r5,-8(fp)
 801e11c:	e1bfff17 	ldw	r6,-4(fp)
 801e120:	801e5100 	call	801e510 <altera_avalon_jtag_uart_ioctl>
}
 801e124:	e037883a 	mov	sp,fp
 801e128:	dfc00117 	ldw	ra,4(sp)
 801e12c:	df000017 	ldw	fp,0(sp)
 801e130:	dec00204 	addi	sp,sp,8
 801e134:	f800283a 	ret

0801e138 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 801e138:	defffa04 	addi	sp,sp,-24
 801e13c:	dfc00515 	stw	ra,20(sp)
 801e140:	df000415 	stw	fp,16(sp)
 801e144:	df000404 	addi	fp,sp,16
 801e148:	e13ffd15 	stw	r4,-12(fp)
 801e14c:	e17ffe15 	stw	r5,-8(fp)
 801e150:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801e154:	e0bffd17 	ldw	r2,-12(fp)
 801e158:	00c00044 	movi	r3,1
 801e15c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 801e160:	e0bffd17 	ldw	r2,-12(fp)
 801e164:	10800017 	ldw	r2,0(r2)
 801e168:	10800104 	addi	r2,r2,4
 801e16c:	1007883a 	mov	r3,r2
 801e170:	e0bffd17 	ldw	r2,-12(fp)
 801e174:	10800817 	ldw	r2,32(r2)
 801e178:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 801e17c:	e0fffe17 	ldw	r3,-8(fp)
 801e180:	e0bfff17 	ldw	r2,-4(fp)
 801e184:	d8000015 	stw	zero,0(sp)
 801e188:	1809883a 	mov	r4,r3
 801e18c:	100b883a 	mov	r5,r2
 801e190:	018200b4 	movhi	r6,2050
 801e194:	31b87f04 	addi	r6,r6,-7684
 801e198:	e1fffd17 	ldw	r7,-12(fp)
 801e19c:	801f3bc0 	call	801f3bc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 801e1a0:	e0bffd17 	ldw	r2,-12(fp)
 801e1a4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 801e1a8:	e0bffd17 	ldw	r2,-12(fp)
 801e1ac:	10c00204 	addi	r3,r2,8
 801e1b0:	008200f4 	movhi	r2,2051
 801e1b4:	10ba1904 	addi	r2,r2,-6044
 801e1b8:	10800017 	ldw	r2,0(r2)
 801e1bc:	1809883a 	mov	r4,r3
 801e1c0:	100b883a 	mov	r5,r2
 801e1c4:	018200b4 	movhi	r6,2050
 801e1c8:	31b90004 	addi	r6,r6,-7168
 801e1cc:	e1fffd17 	ldw	r7,-12(fp)
 801e1d0:	801eff40 	call	801eff4 <alt_alarm_start>
 801e1d4:	1000040e 	bge	r2,zero,801e1e8 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 801e1d8:	e0fffd17 	ldw	r3,-12(fp)
 801e1dc:	00a00034 	movhi	r2,32768
 801e1e0:	10bfffc4 	addi	r2,r2,-1
 801e1e4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 801e1e8:	e037883a 	mov	sp,fp
 801e1ec:	dfc00117 	ldw	ra,4(sp)
 801e1f0:	df000017 	ldw	fp,0(sp)
 801e1f4:	dec00204 	addi	sp,sp,8
 801e1f8:	f800283a 	ret

0801e1fc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 801e1fc:	defff804 	addi	sp,sp,-32
 801e200:	df000715 	stw	fp,28(sp)
 801e204:	df000704 	addi	fp,sp,28
 801e208:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 801e20c:	e0bfff17 	ldw	r2,-4(fp)
 801e210:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 801e214:	e0bffb17 	ldw	r2,-20(fp)
 801e218:	10800017 	ldw	r2,0(r2)
 801e21c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801e220:	e0bffc17 	ldw	r2,-16(fp)
 801e224:	10800104 	addi	r2,r2,4
 801e228:	10800037 	ldwio	r2,0(r2)
 801e22c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 801e230:	e0bffd17 	ldw	r2,-12(fp)
 801e234:	1080c00c 	andi	r2,r2,768
 801e238:	1000011e 	bne	r2,zero,801e240 <altera_avalon_jtag_uart_irq+0x44>
      break;
 801e23c:	00006c06 	br	801e3f0 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 801e240:	e0bffd17 	ldw	r2,-12(fp)
 801e244:	1080400c 	andi	r2,r2,256
 801e248:	10003426 	beq	r2,zero,801e31c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 801e24c:	00800074 	movhi	r2,1
 801e250:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801e254:	e0bffb17 	ldw	r2,-20(fp)
 801e258:	10800a17 	ldw	r2,40(r2)
 801e25c:	10800044 	addi	r2,r2,1
 801e260:	1081ffcc 	andi	r2,r2,2047
 801e264:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 801e268:	e0bffb17 	ldw	r2,-20(fp)
 801e26c:	10c00b17 	ldw	r3,44(r2)
 801e270:	e0bffe17 	ldw	r2,-8(fp)
 801e274:	1880011e 	bne	r3,r2,801e27c <altera_avalon_jtag_uart_irq+0x80>
          break;
 801e278:	00001606 	br	801e2d4 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 801e27c:	e0bffc17 	ldw	r2,-16(fp)
 801e280:	10800037 	ldwio	r2,0(r2)
 801e284:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 801e288:	e0bff917 	ldw	r2,-28(fp)
 801e28c:	10a0000c 	andi	r2,r2,32768
 801e290:	1000011e 	bne	r2,zero,801e298 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 801e294:	00000f06 	br	801e2d4 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 801e298:	e0bffb17 	ldw	r2,-20(fp)
 801e29c:	10800a17 	ldw	r2,40(r2)
 801e2a0:	e0fff917 	ldw	r3,-28(fp)
 801e2a4:	1809883a 	mov	r4,r3
 801e2a8:	e0fffb17 	ldw	r3,-20(fp)
 801e2ac:	1885883a 	add	r2,r3,r2
 801e2b0:	10800e04 	addi	r2,r2,56
 801e2b4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801e2b8:	e0bffb17 	ldw	r2,-20(fp)
 801e2bc:	10800a17 	ldw	r2,40(r2)
 801e2c0:	10800044 	addi	r2,r2,1
 801e2c4:	10c1ffcc 	andi	r3,r2,2047
 801e2c8:	e0bffb17 	ldw	r2,-20(fp)
 801e2cc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 801e2d0:	003fe006 	br	801e254 <__alt_data_end+0xfc01e254>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 801e2d4:	e0bff917 	ldw	r2,-28(fp)
 801e2d8:	10bfffec 	andhi	r2,r2,65535
 801e2dc:	10000f26 	beq	r2,zero,801e31c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801e2e0:	e0bffb17 	ldw	r2,-20(fp)
 801e2e4:	10c00817 	ldw	r3,32(r2)
 801e2e8:	00bfff84 	movi	r2,-2
 801e2ec:	1886703a 	and	r3,r3,r2
 801e2f0:	e0bffb17 	ldw	r2,-20(fp)
 801e2f4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 801e2f8:	e0bffc17 	ldw	r2,-16(fp)
 801e2fc:	10800104 	addi	r2,r2,4
 801e300:	1007883a 	mov	r3,r2
 801e304:	e0bffb17 	ldw	r2,-20(fp)
 801e308:	10800817 	ldw	r2,32(r2)
 801e30c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801e310:	e0bffc17 	ldw	r2,-16(fp)
 801e314:	10800104 	addi	r2,r2,4
 801e318:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 801e31c:	e0bffd17 	ldw	r2,-12(fp)
 801e320:	1080800c 	andi	r2,r2,512
 801e324:	10003126 	beq	r2,zero,801e3ec <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 801e328:	e0bffd17 	ldw	r2,-12(fp)
 801e32c:	1004d43a 	srli	r2,r2,16
 801e330:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 801e334:	00001406 	br	801e388 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 801e338:	e0bffc17 	ldw	r2,-16(fp)
 801e33c:	e0fffb17 	ldw	r3,-20(fp)
 801e340:	18c00d17 	ldw	r3,52(r3)
 801e344:	e13ffb17 	ldw	r4,-20(fp)
 801e348:	20c7883a 	add	r3,r4,r3
 801e34c:	18c20e04 	addi	r3,r3,2104
 801e350:	18c00003 	ldbu	r3,0(r3)
 801e354:	18c03fcc 	andi	r3,r3,255
 801e358:	18c0201c 	xori	r3,r3,128
 801e35c:	18ffe004 	addi	r3,r3,-128
 801e360:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801e364:	e0bffb17 	ldw	r2,-20(fp)
 801e368:	10800d17 	ldw	r2,52(r2)
 801e36c:	10800044 	addi	r2,r2,1
 801e370:	10c1ffcc 	andi	r3,r2,2047
 801e374:	e0bffb17 	ldw	r2,-20(fp)
 801e378:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 801e37c:	e0bffa17 	ldw	r2,-24(fp)
 801e380:	10bfffc4 	addi	r2,r2,-1
 801e384:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 801e388:	e0bffa17 	ldw	r2,-24(fp)
 801e38c:	10000526 	beq	r2,zero,801e3a4 <altera_avalon_jtag_uart_irq+0x1a8>
 801e390:	e0bffb17 	ldw	r2,-20(fp)
 801e394:	10c00d17 	ldw	r3,52(r2)
 801e398:	e0bffb17 	ldw	r2,-20(fp)
 801e39c:	10800c17 	ldw	r2,48(r2)
 801e3a0:	18bfe51e 	bne	r3,r2,801e338 <__alt_data_end+0xfc01e338>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 801e3a4:	e0bffa17 	ldw	r2,-24(fp)
 801e3a8:	10001026 	beq	r2,zero,801e3ec <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801e3ac:	e0bffb17 	ldw	r2,-20(fp)
 801e3b0:	10c00817 	ldw	r3,32(r2)
 801e3b4:	00bfff44 	movi	r2,-3
 801e3b8:	1886703a 	and	r3,r3,r2
 801e3bc:	e0bffb17 	ldw	r2,-20(fp)
 801e3c0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801e3c4:	e0bffb17 	ldw	r2,-20(fp)
 801e3c8:	10800017 	ldw	r2,0(r2)
 801e3cc:	10800104 	addi	r2,r2,4
 801e3d0:	1007883a 	mov	r3,r2
 801e3d4:	e0bffb17 	ldw	r2,-20(fp)
 801e3d8:	10800817 	ldw	r2,32(r2)
 801e3dc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801e3e0:	e0bffc17 	ldw	r2,-16(fp)
 801e3e4:	10800104 	addi	r2,r2,4
 801e3e8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 801e3ec:	003f8c06 	br	801e220 <__alt_data_end+0xfc01e220>
}
 801e3f0:	e037883a 	mov	sp,fp
 801e3f4:	df000017 	ldw	fp,0(sp)
 801e3f8:	dec00104 	addi	sp,sp,4
 801e3fc:	f800283a 	ret

0801e400 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 801e400:	defff804 	addi	sp,sp,-32
 801e404:	df000715 	stw	fp,28(sp)
 801e408:	df000704 	addi	fp,sp,28
 801e40c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 801e410:	e0bffb17 	ldw	r2,-20(fp)
 801e414:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 801e418:	e0bff917 	ldw	r2,-28(fp)
 801e41c:	10800017 	ldw	r2,0(r2)
 801e420:	10800104 	addi	r2,r2,4
 801e424:	10800037 	ldwio	r2,0(r2)
 801e428:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 801e42c:	e0bffa17 	ldw	r2,-24(fp)
 801e430:	1081000c 	andi	r2,r2,1024
 801e434:	10000b26 	beq	r2,zero,801e464 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 801e438:	e0bff917 	ldw	r2,-28(fp)
 801e43c:	10800017 	ldw	r2,0(r2)
 801e440:	10800104 	addi	r2,r2,4
 801e444:	1007883a 	mov	r3,r2
 801e448:	e0bff917 	ldw	r2,-28(fp)
 801e44c:	10800817 	ldw	r2,32(r2)
 801e450:	10810014 	ori	r2,r2,1024
 801e454:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 801e458:	e0bff917 	ldw	r2,-28(fp)
 801e45c:	10000915 	stw	zero,36(r2)
 801e460:	00000a06 	br	801e48c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 801e464:	e0bff917 	ldw	r2,-28(fp)
 801e468:	10c00917 	ldw	r3,36(r2)
 801e46c:	00a00034 	movhi	r2,32768
 801e470:	10bfff04 	addi	r2,r2,-4
 801e474:	10c00536 	bltu	r2,r3,801e48c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 801e478:	e0bff917 	ldw	r2,-28(fp)
 801e47c:	10800917 	ldw	r2,36(r2)
 801e480:	10c00044 	addi	r3,r2,1
 801e484:	e0bff917 	ldw	r2,-28(fp)
 801e488:	10c00915 	stw	r3,36(r2)
 801e48c:	008200f4 	movhi	r2,2051
 801e490:	10ba1904 	addi	r2,r2,-6044
 801e494:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 801e498:	e037883a 	mov	sp,fp
 801e49c:	df000017 	ldw	fp,0(sp)
 801e4a0:	dec00104 	addi	sp,sp,4
 801e4a4:	f800283a 	ret

0801e4a8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 801e4a8:	defffd04 	addi	sp,sp,-12
 801e4ac:	df000215 	stw	fp,8(sp)
 801e4b0:	df000204 	addi	fp,sp,8
 801e4b4:	e13ffe15 	stw	r4,-8(fp)
 801e4b8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 801e4bc:	00000506 	br	801e4d4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 801e4c0:	e0bfff17 	ldw	r2,-4(fp)
 801e4c4:	1090000c 	andi	r2,r2,16384
 801e4c8:	10000226 	beq	r2,zero,801e4d4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 801e4cc:	00bffd44 	movi	r2,-11
 801e4d0:	00000b06 	br	801e500 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 801e4d4:	e0bffe17 	ldw	r2,-8(fp)
 801e4d8:	10c00d17 	ldw	r3,52(r2)
 801e4dc:	e0bffe17 	ldw	r2,-8(fp)
 801e4e0:	10800c17 	ldw	r2,48(r2)
 801e4e4:	18800526 	beq	r3,r2,801e4fc <altera_avalon_jtag_uart_close+0x54>
 801e4e8:	e0bffe17 	ldw	r2,-8(fp)
 801e4ec:	10c00917 	ldw	r3,36(r2)
 801e4f0:	e0bffe17 	ldw	r2,-8(fp)
 801e4f4:	10800117 	ldw	r2,4(r2)
 801e4f8:	18bff136 	bltu	r3,r2,801e4c0 <__alt_data_end+0xfc01e4c0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 801e4fc:	0005883a 	mov	r2,zero
}
 801e500:	e037883a 	mov	sp,fp
 801e504:	df000017 	ldw	fp,0(sp)
 801e508:	dec00104 	addi	sp,sp,4
 801e50c:	f800283a 	ret

0801e510 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 801e510:	defffa04 	addi	sp,sp,-24
 801e514:	df000515 	stw	fp,20(sp)
 801e518:	df000504 	addi	fp,sp,20
 801e51c:	e13ffd15 	stw	r4,-12(fp)
 801e520:	e17ffe15 	stw	r5,-8(fp)
 801e524:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 801e528:	00bff9c4 	movi	r2,-25
 801e52c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 801e530:	e0bffe17 	ldw	r2,-8(fp)
 801e534:	10da8060 	cmpeqi	r3,r2,27137
 801e538:	1800031e 	bne	r3,zero,801e548 <altera_avalon_jtag_uart_ioctl+0x38>
 801e53c:	109a80a0 	cmpeqi	r2,r2,27138
 801e540:	1000191e 	bne	r2,zero,801e5a8 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 801e544:	00002806 	br	801e5e8 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 801e548:	e0bffd17 	ldw	r2,-12(fp)
 801e54c:	10c00117 	ldw	r3,4(r2)
 801e550:	00a00034 	movhi	r2,32768
 801e554:	10bfffc4 	addi	r2,r2,-1
 801e558:	18801226 	beq	r3,r2,801e5a4 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 801e55c:	e0bfff17 	ldw	r2,-4(fp)
 801e560:	10800017 	ldw	r2,0(r2)
 801e564:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 801e568:	e0bffc17 	ldw	r2,-16(fp)
 801e56c:	10800090 	cmplti	r2,r2,2
 801e570:	1000061e 	bne	r2,zero,801e58c <altera_avalon_jtag_uart_ioctl+0x7c>
 801e574:	e0fffc17 	ldw	r3,-16(fp)
 801e578:	00a00034 	movhi	r2,32768
 801e57c:	10bfffc4 	addi	r2,r2,-1
 801e580:	18800226 	beq	r3,r2,801e58c <altera_avalon_jtag_uart_ioctl+0x7c>
 801e584:	e0bffc17 	ldw	r2,-16(fp)
 801e588:	00000206 	br	801e594 <altera_avalon_jtag_uart_ioctl+0x84>
 801e58c:	00a00034 	movhi	r2,32768
 801e590:	10bfff84 	addi	r2,r2,-2
 801e594:	e0fffd17 	ldw	r3,-12(fp)
 801e598:	18800115 	stw	r2,4(r3)
      rc = 0;
 801e59c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 801e5a0:	00001106 	br	801e5e8 <altera_avalon_jtag_uart_ioctl+0xd8>
 801e5a4:	00001006 	br	801e5e8 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 801e5a8:	e0bffd17 	ldw	r2,-12(fp)
 801e5ac:	10c00117 	ldw	r3,4(r2)
 801e5b0:	00a00034 	movhi	r2,32768
 801e5b4:	10bfffc4 	addi	r2,r2,-1
 801e5b8:	18800a26 	beq	r3,r2,801e5e4 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 801e5bc:	e0bffd17 	ldw	r2,-12(fp)
 801e5c0:	10c00917 	ldw	r3,36(r2)
 801e5c4:	e0bffd17 	ldw	r2,-12(fp)
 801e5c8:	10800117 	ldw	r2,4(r2)
 801e5cc:	1885803a 	cmpltu	r2,r3,r2
 801e5d0:	10c03fcc 	andi	r3,r2,255
 801e5d4:	e0bfff17 	ldw	r2,-4(fp)
 801e5d8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 801e5dc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 801e5e0:	00000006 	br	801e5e4 <altera_avalon_jtag_uart_ioctl+0xd4>
 801e5e4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 801e5e8:	e0bffb17 	ldw	r2,-20(fp)
}
 801e5ec:	e037883a 	mov	sp,fp
 801e5f0:	df000017 	ldw	fp,0(sp)
 801e5f4:	dec00104 	addi	sp,sp,4
 801e5f8:	f800283a 	ret

0801e5fc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 801e5fc:	defff304 	addi	sp,sp,-52
 801e600:	dfc00c15 	stw	ra,48(sp)
 801e604:	df000b15 	stw	fp,44(sp)
 801e608:	df000b04 	addi	fp,sp,44
 801e60c:	e13ffc15 	stw	r4,-16(fp)
 801e610:	e17ffd15 	stw	r5,-12(fp)
 801e614:	e1bffe15 	stw	r6,-8(fp)
 801e618:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 801e61c:	e0bffd17 	ldw	r2,-12(fp)
 801e620:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 801e624:	00004906 	br	801e74c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 801e628:	e0bffc17 	ldw	r2,-16(fp)
 801e62c:	10800a17 	ldw	r2,40(r2)
 801e630:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 801e634:	e0bffc17 	ldw	r2,-16(fp)
 801e638:	10800b17 	ldw	r2,44(r2)
 801e63c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 801e640:	e0fff717 	ldw	r3,-36(fp)
 801e644:	e0bff817 	ldw	r2,-32(fp)
 801e648:	18800536 	bltu	r3,r2,801e660 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 801e64c:	e0fff717 	ldw	r3,-36(fp)
 801e650:	e0bff817 	ldw	r2,-32(fp)
 801e654:	1885c83a 	sub	r2,r3,r2
 801e658:	e0bff615 	stw	r2,-40(fp)
 801e65c:	00000406 	br	801e670 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 801e660:	00c20004 	movi	r3,2048
 801e664:	e0bff817 	ldw	r2,-32(fp)
 801e668:	1885c83a 	sub	r2,r3,r2
 801e66c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 801e670:	e0bff617 	ldw	r2,-40(fp)
 801e674:	1000011e 	bne	r2,zero,801e67c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 801e678:	00001d06 	br	801e6f0 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 801e67c:	e0fffe17 	ldw	r3,-8(fp)
 801e680:	e0bff617 	ldw	r2,-40(fp)
 801e684:	1880022e 	bgeu	r3,r2,801e690 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 801e688:	e0bffe17 	ldw	r2,-8(fp)
 801e68c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 801e690:	e0bff817 	ldw	r2,-32(fp)
 801e694:	10800e04 	addi	r2,r2,56
 801e698:	e0fffc17 	ldw	r3,-16(fp)
 801e69c:	1885883a 	add	r2,r3,r2
 801e6a0:	e13ff517 	ldw	r4,-44(fp)
 801e6a4:	100b883a 	mov	r5,r2
 801e6a8:	e1bff617 	ldw	r6,-40(fp)
 801e6ac:	80173d80 	call	80173d8 <memcpy>
      ptr   += n;
 801e6b0:	e0fff517 	ldw	r3,-44(fp)
 801e6b4:	e0bff617 	ldw	r2,-40(fp)
 801e6b8:	1885883a 	add	r2,r3,r2
 801e6bc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 801e6c0:	e0fffe17 	ldw	r3,-8(fp)
 801e6c4:	e0bff617 	ldw	r2,-40(fp)
 801e6c8:	1885c83a 	sub	r2,r3,r2
 801e6cc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801e6d0:	e0fff817 	ldw	r3,-32(fp)
 801e6d4:	e0bff617 	ldw	r2,-40(fp)
 801e6d8:	1885883a 	add	r2,r3,r2
 801e6dc:	10c1ffcc 	andi	r3,r2,2047
 801e6e0:	e0bffc17 	ldw	r2,-16(fp)
 801e6e4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 801e6e8:	e0bffe17 	ldw	r2,-8(fp)
 801e6ec:	00bfce16 	blt	zero,r2,801e628 <__alt_data_end+0xfc01e628>

    /* If we read any data then return it */
    if (ptr != buffer)
 801e6f0:	e0fff517 	ldw	r3,-44(fp)
 801e6f4:	e0bffd17 	ldw	r2,-12(fp)
 801e6f8:	18800126 	beq	r3,r2,801e700 <altera_avalon_jtag_uart_read+0x104>
      break;
 801e6fc:	00001506 	br	801e754 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 801e700:	e0bfff17 	ldw	r2,-4(fp)
 801e704:	1090000c 	andi	r2,r2,16384
 801e708:	10000126 	beq	r2,zero,801e710 <altera_avalon_jtag_uart_read+0x114>
      break;
 801e70c:	00001106 	br	801e754 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 801e710:	0001883a 	nop
 801e714:	e0bffc17 	ldw	r2,-16(fp)
 801e718:	10c00a17 	ldw	r3,40(r2)
 801e71c:	e0bff717 	ldw	r2,-36(fp)
 801e720:	1880051e 	bne	r3,r2,801e738 <altera_avalon_jtag_uart_read+0x13c>
 801e724:	e0bffc17 	ldw	r2,-16(fp)
 801e728:	10c00917 	ldw	r3,36(r2)
 801e72c:	e0bffc17 	ldw	r2,-16(fp)
 801e730:	10800117 	ldw	r2,4(r2)
 801e734:	18bff736 	bltu	r3,r2,801e714 <__alt_data_end+0xfc01e714>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 801e738:	e0bffc17 	ldw	r2,-16(fp)
 801e73c:	10c00a17 	ldw	r3,40(r2)
 801e740:	e0bff717 	ldw	r2,-36(fp)
 801e744:	1880011e 	bne	r3,r2,801e74c <altera_avalon_jtag_uart_read+0x150>
      break;
 801e748:	00000206 	br	801e754 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 801e74c:	e0bffe17 	ldw	r2,-8(fp)
 801e750:	00bfb516 	blt	zero,r2,801e628 <__alt_data_end+0xfc01e628>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 801e754:	e0fff517 	ldw	r3,-44(fp)
 801e758:	e0bffd17 	ldw	r2,-12(fp)
 801e75c:	18801826 	beq	r3,r2,801e7c0 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801e760:	0005303a 	rdctl	r2,status
 801e764:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801e768:	e0fffa17 	ldw	r3,-24(fp)
 801e76c:	00bfff84 	movi	r2,-2
 801e770:	1884703a 	and	r2,r3,r2
 801e774:	1001703a 	wrctl	status,r2
  
  return context;
 801e778:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 801e77c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801e780:	e0bffc17 	ldw	r2,-16(fp)
 801e784:	10800817 	ldw	r2,32(r2)
 801e788:	10c00054 	ori	r3,r2,1
 801e78c:	e0bffc17 	ldw	r2,-16(fp)
 801e790:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801e794:	e0bffc17 	ldw	r2,-16(fp)
 801e798:	10800017 	ldw	r2,0(r2)
 801e79c:	10800104 	addi	r2,r2,4
 801e7a0:	1007883a 	mov	r3,r2
 801e7a4:	e0bffc17 	ldw	r2,-16(fp)
 801e7a8:	10800817 	ldw	r2,32(r2)
 801e7ac:	18800035 	stwio	r2,0(r3)
 801e7b0:	e0bff917 	ldw	r2,-28(fp)
 801e7b4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801e7b8:	e0bffb17 	ldw	r2,-20(fp)
 801e7bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 801e7c0:	e0fff517 	ldw	r3,-44(fp)
 801e7c4:	e0bffd17 	ldw	r2,-12(fp)
 801e7c8:	18800426 	beq	r3,r2,801e7dc <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 801e7cc:	e0fff517 	ldw	r3,-44(fp)
 801e7d0:	e0bffd17 	ldw	r2,-12(fp)
 801e7d4:	1885c83a 	sub	r2,r3,r2
 801e7d8:	00000606 	br	801e7f4 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 801e7dc:	e0bfff17 	ldw	r2,-4(fp)
 801e7e0:	1090000c 	andi	r2,r2,16384
 801e7e4:	10000226 	beq	r2,zero,801e7f0 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 801e7e8:	00bffd44 	movi	r2,-11
 801e7ec:	00000106 	br	801e7f4 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 801e7f0:	00bffec4 	movi	r2,-5
}
 801e7f4:	e037883a 	mov	sp,fp
 801e7f8:	dfc00117 	ldw	ra,4(sp)
 801e7fc:	df000017 	ldw	fp,0(sp)
 801e800:	dec00204 	addi	sp,sp,8
 801e804:	f800283a 	ret

0801e808 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 801e808:	defff304 	addi	sp,sp,-52
 801e80c:	dfc00c15 	stw	ra,48(sp)
 801e810:	df000b15 	stw	fp,44(sp)
 801e814:	df000b04 	addi	fp,sp,44
 801e818:	e13ffc15 	stw	r4,-16(fp)
 801e81c:	e17ffd15 	stw	r5,-12(fp)
 801e820:	e1bffe15 	stw	r6,-8(fp)
 801e824:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 801e828:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 801e82c:	e0bffd17 	ldw	r2,-12(fp)
 801e830:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801e834:	00003806 	br	801e918 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 801e838:	e0bffc17 	ldw	r2,-16(fp)
 801e83c:	10800c17 	ldw	r2,48(r2)
 801e840:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 801e844:	e0bffc17 	ldw	r2,-16(fp)
 801e848:	10800d17 	ldw	r2,52(r2)
 801e84c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 801e850:	e0fff817 	ldw	r3,-32(fp)
 801e854:	e0bff517 	ldw	r2,-44(fp)
 801e858:	1880062e 	bgeu	r3,r2,801e874 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 801e85c:	e0fff517 	ldw	r3,-44(fp)
 801e860:	e0bff817 	ldw	r2,-32(fp)
 801e864:	1885c83a 	sub	r2,r3,r2
 801e868:	10bfffc4 	addi	r2,r2,-1
 801e86c:	e0bff615 	stw	r2,-40(fp)
 801e870:	00000b06 	br	801e8a0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 801e874:	e0bff517 	ldw	r2,-44(fp)
 801e878:	10000526 	beq	r2,zero,801e890 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 801e87c:	00c20004 	movi	r3,2048
 801e880:	e0bff817 	ldw	r2,-32(fp)
 801e884:	1885c83a 	sub	r2,r3,r2
 801e888:	e0bff615 	stw	r2,-40(fp)
 801e88c:	00000406 	br	801e8a0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 801e890:	00c1ffc4 	movi	r3,2047
 801e894:	e0bff817 	ldw	r2,-32(fp)
 801e898:	1885c83a 	sub	r2,r3,r2
 801e89c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 801e8a0:	e0bff617 	ldw	r2,-40(fp)
 801e8a4:	1000011e 	bne	r2,zero,801e8ac <altera_avalon_jtag_uart_write+0xa4>
        break;
 801e8a8:	00001d06 	br	801e920 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 801e8ac:	e0fffe17 	ldw	r3,-8(fp)
 801e8b0:	e0bff617 	ldw	r2,-40(fp)
 801e8b4:	1880022e 	bgeu	r3,r2,801e8c0 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 801e8b8:	e0bffe17 	ldw	r2,-8(fp)
 801e8bc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 801e8c0:	e0bff817 	ldw	r2,-32(fp)
 801e8c4:	10820e04 	addi	r2,r2,2104
 801e8c8:	e0fffc17 	ldw	r3,-16(fp)
 801e8cc:	1885883a 	add	r2,r3,r2
 801e8d0:	1009883a 	mov	r4,r2
 801e8d4:	e17ffd17 	ldw	r5,-12(fp)
 801e8d8:	e1bff617 	ldw	r6,-40(fp)
 801e8dc:	80173d80 	call	80173d8 <memcpy>
      ptr   += n;
 801e8e0:	e0fffd17 	ldw	r3,-12(fp)
 801e8e4:	e0bff617 	ldw	r2,-40(fp)
 801e8e8:	1885883a 	add	r2,r3,r2
 801e8ec:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 801e8f0:	e0fffe17 	ldw	r3,-8(fp)
 801e8f4:	e0bff617 	ldw	r2,-40(fp)
 801e8f8:	1885c83a 	sub	r2,r3,r2
 801e8fc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801e900:	e0fff817 	ldw	r3,-32(fp)
 801e904:	e0bff617 	ldw	r2,-40(fp)
 801e908:	1885883a 	add	r2,r3,r2
 801e90c:	10c1ffcc 	andi	r3,r2,2047
 801e910:	e0bffc17 	ldw	r2,-16(fp)
 801e914:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801e918:	e0bffe17 	ldw	r2,-8(fp)
 801e91c:	00bfc616 	blt	zero,r2,801e838 <__alt_data_end+0xfc01e838>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801e920:	0005303a 	rdctl	r2,status
 801e924:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801e928:	e0fffa17 	ldw	r3,-24(fp)
 801e92c:	00bfff84 	movi	r2,-2
 801e930:	1884703a 	and	r2,r3,r2
 801e934:	1001703a 	wrctl	status,r2
  
  return context;
 801e938:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 801e93c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801e940:	e0bffc17 	ldw	r2,-16(fp)
 801e944:	10800817 	ldw	r2,32(r2)
 801e948:	10c00094 	ori	r3,r2,2
 801e94c:	e0bffc17 	ldw	r2,-16(fp)
 801e950:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801e954:	e0bffc17 	ldw	r2,-16(fp)
 801e958:	10800017 	ldw	r2,0(r2)
 801e95c:	10800104 	addi	r2,r2,4
 801e960:	1007883a 	mov	r3,r2
 801e964:	e0bffc17 	ldw	r2,-16(fp)
 801e968:	10800817 	ldw	r2,32(r2)
 801e96c:	18800035 	stwio	r2,0(r3)
 801e970:	e0bff917 	ldw	r2,-28(fp)
 801e974:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801e978:	e0bffb17 	ldw	r2,-20(fp)
 801e97c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 801e980:	e0bffe17 	ldw	r2,-8(fp)
 801e984:	0080120e 	bge	zero,r2,801e9d0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 801e988:	e0bfff17 	ldw	r2,-4(fp)
 801e98c:	1090000c 	andi	r2,r2,16384
 801e990:	10000126 	beq	r2,zero,801e998 <altera_avalon_jtag_uart_write+0x190>
        break;
 801e994:	00001006 	br	801e9d8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 801e998:	0001883a 	nop
 801e99c:	e0bffc17 	ldw	r2,-16(fp)
 801e9a0:	10c00d17 	ldw	r3,52(r2)
 801e9a4:	e0bff517 	ldw	r2,-44(fp)
 801e9a8:	1880051e 	bne	r3,r2,801e9c0 <altera_avalon_jtag_uart_write+0x1b8>
 801e9ac:	e0bffc17 	ldw	r2,-16(fp)
 801e9b0:	10c00917 	ldw	r3,36(r2)
 801e9b4:	e0bffc17 	ldw	r2,-16(fp)
 801e9b8:	10800117 	ldw	r2,4(r2)
 801e9bc:	18bff736 	bltu	r3,r2,801e99c <__alt_data_end+0xfc01e99c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 801e9c0:	e0bffc17 	ldw	r2,-16(fp)
 801e9c4:	10800917 	ldw	r2,36(r2)
 801e9c8:	10000126 	beq	r2,zero,801e9d0 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 801e9cc:	00000206 	br	801e9d8 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 801e9d0:	e0bffe17 	ldw	r2,-8(fp)
 801e9d4:	00bf9716 	blt	zero,r2,801e834 <__alt_data_end+0xfc01e834>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 801e9d8:	e0fffd17 	ldw	r3,-12(fp)
 801e9dc:	e0bff717 	ldw	r2,-36(fp)
 801e9e0:	18800426 	beq	r3,r2,801e9f4 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 801e9e4:	e0fffd17 	ldw	r3,-12(fp)
 801e9e8:	e0bff717 	ldw	r2,-36(fp)
 801e9ec:	1885c83a 	sub	r2,r3,r2
 801e9f0:	00000606 	br	801ea0c <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 801e9f4:	e0bfff17 	ldw	r2,-4(fp)
 801e9f8:	1090000c 	andi	r2,r2,16384
 801e9fc:	10000226 	beq	r2,zero,801ea08 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 801ea00:	00bffd44 	movi	r2,-11
 801ea04:	00000106 	br	801ea0c <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 801ea08:	00bffec4 	movi	r2,-5
}
 801ea0c:	e037883a 	mov	sp,fp
 801ea10:	dfc00117 	ldw	ra,4(sp)
 801ea14:	df000017 	ldw	fp,0(sp)
 801ea18:	dec00204 	addi	sp,sp,8
 801ea1c:	f800283a 	ret

0801ea20 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 801ea20:	defffa04 	addi	sp,sp,-24
 801ea24:	dfc00515 	stw	ra,20(sp)
 801ea28:	df000415 	stw	fp,16(sp)
 801ea2c:	df000404 	addi	fp,sp,16
 801ea30:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 801ea34:	0007883a 	mov	r3,zero
 801ea38:	e0bfff17 	ldw	r2,-4(fp)
 801ea3c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 801ea40:	e0bfff17 	ldw	r2,-4(fp)
 801ea44:	10800104 	addi	r2,r2,4
 801ea48:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801ea4c:	0005303a 	rdctl	r2,status
 801ea50:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801ea54:	e0fffd17 	ldw	r3,-12(fp)
 801ea58:	00bfff84 	movi	r2,-2
 801ea5c:	1884703a 	and	r2,r3,r2
 801ea60:	1001703a 	wrctl	status,r2
  
  return context;
 801ea64:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 801ea68:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 801ea6c:	801ddf40 	call	801ddf4 <alt_tick>
 801ea70:	e0bffc17 	ldw	r2,-16(fp)
 801ea74:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801ea78:	e0bffe17 	ldw	r2,-8(fp)
 801ea7c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 801ea80:	e037883a 	mov	sp,fp
 801ea84:	dfc00117 	ldw	ra,4(sp)
 801ea88:	df000017 	ldw	fp,0(sp)
 801ea8c:	dec00204 	addi	sp,sp,8
 801ea90:	f800283a 	ret

0801ea94 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 801ea94:	defff804 	addi	sp,sp,-32
 801ea98:	dfc00715 	stw	ra,28(sp)
 801ea9c:	df000615 	stw	fp,24(sp)
 801eaa0:	df000604 	addi	fp,sp,24
 801eaa4:	e13ffc15 	stw	r4,-16(fp)
 801eaa8:	e17ffd15 	stw	r5,-12(fp)
 801eaac:	e1bffe15 	stw	r6,-8(fp)
 801eab0:	e1ffff15 	stw	r7,-4(fp)
 801eab4:	e0bfff17 	ldw	r2,-4(fp)
 801eab8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 801eabc:	008200f4 	movhi	r2,2051
 801eac0:	10ba1904 	addi	r2,r2,-6044
 801eac4:	10800017 	ldw	r2,0(r2)
 801eac8:	1000041e 	bne	r2,zero,801eadc <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 801eacc:	008200f4 	movhi	r2,2051
 801ead0:	10ba1904 	addi	r2,r2,-6044
 801ead4:	e0fffb17 	ldw	r3,-20(fp)
 801ead8:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 801eadc:	e0bffc17 	ldw	r2,-16(fp)
 801eae0:	10800104 	addi	r2,r2,4
 801eae4:	00c001c4 	movi	r3,7
 801eae8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 801eaec:	d8000015 	stw	zero,0(sp)
 801eaf0:	e13ffd17 	ldw	r4,-12(fp)
 801eaf4:	e17ffe17 	ldw	r5,-8(fp)
 801eaf8:	018200b4 	movhi	r6,2050
 801eafc:	31ba8804 	addi	r6,r6,-5600
 801eb00:	e1fffc17 	ldw	r7,-16(fp)
 801eb04:	801f3bc0 	call	801f3bc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 801eb08:	e037883a 	mov	sp,fp
 801eb0c:	dfc00117 	ldw	ra,4(sp)
 801eb10:	df000017 	ldw	fp,0(sp)
 801eb14:	dec00204 	addi	sp,sp,8
 801eb18:	f800283a 	ret

0801eb1c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 801eb1c:	defffc04 	addi	sp,sp,-16
 801eb20:	df000315 	stw	fp,12(sp)
 801eb24:	df000304 	addi	fp,sp,12
 801eb28:	e13ffe15 	stw	r4,-8(fp)
 801eb2c:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 801eb30:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 801eb34:	e0bfff17 	ldw	r2,-4(fp)
 801eb38:	1000061e 	bne	r2,zero,801eb54 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 801eb3c:	e0bffe17 	ldw	r2,-8(fp)
 801eb40:	1007883a 	mov	r3,r2
 801eb44:	e0bffd03 	ldbu	r2,-12(fp)
 801eb48:	1884b03a 	or	r2,r3,r2
 801eb4c:	e0bffd05 	stb	r2,-12(fp)
 801eb50:	00000806 	br	801eb74 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 801eb54:	e0bffe17 	ldw	r2,-8(fp)
 801eb58:	1007883a 	mov	r3,r2
 801eb5c:	e0bffd03 	ldbu	r2,-12(fp)
 801eb60:	1884b03a 	or	r2,r3,r2
 801eb64:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 801eb68:	e0bffd03 	ldbu	r2,-12(fp)
 801eb6c:	10801014 	ori	r2,r2,64
 801eb70:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 801eb74:	e0fffd03 	ldbu	r3,-12(fp)
 801eb78:	00bfe004 	movi	r2,-128
 801eb7c:	1884b03a 	or	r2,r3,r2
}
 801eb80:	e037883a 	mov	sp,fp
 801eb84:	df000017 	ldw	fp,0(sp)
 801eb88:	dec00104 	addi	sp,sp,4
 801eb8c:	f800283a 	ret

0801eb90 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 801eb90:	defffd04 	addi	sp,sp,-12
 801eb94:	df000215 	stw	fp,8(sp)
 801eb98:	df000204 	addi	fp,sp,8
 801eb9c:	e13ffe15 	stw	r4,-8(fp)
 801eba0:	2805883a 	mov	r2,r5
 801eba4:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 801eba8:	e0bffe17 	ldw	r2,-8(fp)
 801ebac:	10800a17 	ldw	r2,40(r2)
 801ebb0:	1007883a 	mov	r3,r2
 801ebb4:	e0bfff03 	ldbu	r2,-4(fp)
 801ebb8:	18800025 	stbio	r2,0(r3)
}
 801ebbc:	e037883a 	mov	sp,fp
 801ebc0:	df000017 	ldw	fp,0(sp)
 801ebc4:	dec00104 	addi	sp,sp,4
 801ebc8:	f800283a 	ret

0801ebcc <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 801ebcc:	defffe04 	addi	sp,sp,-8
 801ebd0:	df000115 	stw	fp,4(sp)
 801ebd4:	df000104 	addi	fp,sp,4
 801ebd8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 801ebdc:	e0bfff17 	ldw	r2,-4(fp)
 801ebe0:	10800a17 	ldw	r2,40(r2)
 801ebe4:	1007883a 	mov	r3,r2
 801ebe8:	00800044 	movi	r2,1
 801ebec:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 801ebf0:	e037883a 	mov	sp,fp
 801ebf4:	df000017 	ldw	fp,0(sp)
 801ebf8:	dec00104 	addi	sp,sp,4
 801ebfc:	f800283a 	ret

0801ec00 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 801ec00:	defffc04 	addi	sp,sp,-16
 801ec04:	dfc00315 	stw	ra,12(sp)
 801ec08:	df000215 	stw	fp,8(sp)
 801ec0c:	df000204 	addi	fp,sp,8
 801ec10:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 801ec14:	e13fff17 	ldw	r4,-4(fp)
 801ec18:	014200f4 	movhi	r5,2051
 801ec1c:	29731e04 	addi	r5,r5,-13192
 801ec20:	801f2fc0 	call	801f2fc <alt_find_dev>
 801ec24:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 801ec28:	e0bffe17 	ldw	r2,-8(fp)
}
 801ec2c:	e037883a 	mov	sp,fp
 801ec30:	dfc00117 	ldw	ra,4(sp)
 801ec34:	df000017 	ldw	fp,0(sp)
 801ec38:	dec00204 	addi	sp,sp,8
 801ec3c:	f800283a 	ret

0801ec40 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 801ec40:	defffb04 	addi	sp,sp,-20
 801ec44:	df000415 	stw	fp,16(sp)
 801ec48:	df000404 	addi	fp,sp,16
 801ec4c:	e13ffd15 	stw	r4,-12(fp)
 801ec50:	e17ffe15 	stw	r5,-8(fp)
 801ec54:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 801ec58:	e03ffc15 	stw	zero,-16(fp)
 801ec5c:	00000f06 	br	801ec9c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 801ec60:	e0bffd17 	ldw	r2,-12(fp)
 801ec64:	10800a17 	ldw	r2,40(r2)
 801ec68:	10800044 	addi	r2,r2,1
 801ec6c:	1009883a 	mov	r4,r2
 801ec70:	e0fffe17 	ldw	r3,-8(fp)
 801ec74:	e0bffc17 	ldw	r2,-16(fp)
 801ec78:	1885883a 	add	r2,r3,r2
 801ec7c:	10800003 	ldbu	r2,0(r2)
 801ec80:	10803fcc 	andi	r2,r2,255
 801ec84:	1080201c 	xori	r2,r2,128
 801ec88:	10bfe004 	addi	r2,r2,-128
 801ec8c:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 801ec90:	e0bffc17 	ldw	r2,-16(fp)
 801ec94:	10800044 	addi	r2,r2,1
 801ec98:	e0bffc15 	stw	r2,-16(fp)
 801ec9c:	e0fffc17 	ldw	r3,-16(fp)
 801eca0:	e0bfff17 	ldw	r2,-4(fp)
 801eca4:	18bfee36 	bltu	r3,r2,801ec60 <__alt_data_end+0xfc01ec60>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 801eca8:	e037883a 	mov	sp,fp
 801ecac:	df000017 	ldw	fp,0(sp)
 801ecb0:	dec00104 	addi	sp,sp,4
 801ecb4:	f800283a 	ret

0801ecb8 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 801ecb8:	defffd04 	addi	sp,sp,-12
 801ecbc:	df000215 	stw	fp,8(sp)
 801ecc0:	df000204 	addi	fp,sp,8
 801ecc4:	e13ffe15 	stw	r4,-8(fp)
 801ecc8:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 801eccc:	00000d06 	br	801ed04 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 801ecd0:	e0bffe17 	ldw	r2,-8(fp)
 801ecd4:	10800a17 	ldw	r2,40(r2)
 801ecd8:	10800044 	addi	r2,r2,1
 801ecdc:	1007883a 	mov	r3,r2
 801ece0:	e0bfff17 	ldw	r2,-4(fp)
 801ece4:	10800003 	ldbu	r2,0(r2)
 801ece8:	10803fcc 	andi	r2,r2,255
 801ecec:	1080201c 	xori	r2,r2,128
 801ecf0:	10bfe004 	addi	r2,r2,-128
 801ecf4:	18800025 	stbio	r2,0(r3)
		++ptr;
 801ecf8:	e0bfff17 	ldw	r2,-4(fp)
 801ecfc:	10800044 	addi	r2,r2,1
 801ed00:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 801ed04:	e0bfff17 	ldw	r2,-4(fp)
 801ed08:	10800003 	ldbu	r2,0(r2)
 801ed0c:	10803fcc 	andi	r2,r2,255
 801ed10:	1080201c 	xori	r2,r2,128
 801ed14:	10bfe004 	addi	r2,r2,-128
 801ed18:	103fed1e 	bne	r2,zero,801ecd0 <__alt_data_end+0xfc01ecd0>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 801ed1c:	e037883a 	mov	sp,fp
 801ed20:	df000017 	ldw	fp,0(sp)
 801ed24:	dec00104 	addi	sp,sp,4
 801ed28:	f800283a 	ret

0801ed2c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 801ed2c:	defffb04 	addi	sp,sp,-20
 801ed30:	dfc00415 	stw	ra,16(sp)
 801ed34:	df000315 	stw	fp,12(sp)
 801ed38:	df000304 	addi	fp,sp,12
 801ed3c:	e13ffd15 	stw	r4,-12(fp)
 801ed40:	e17ffe15 	stw	r5,-8(fp)
 801ed44:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 801ed48:	e0bffd17 	ldw	r2,-12(fp)
 801ed4c:	10c00017 	ldw	r3,0(r2)
 801ed50:	e0bfff17 	ldw	r2,-4(fp)
 801ed54:	1809883a 	mov	r4,r3
 801ed58:	e17ffe17 	ldw	r5,-8(fp)
 801ed5c:	100d883a 	mov	r6,r2
 801ed60:	801ec400 	call	801ec40 <alt_up_character_lcd_write>
	return 0;
 801ed64:	0005883a 	mov	r2,zero
}
 801ed68:	e037883a 	mov	sp,fp
 801ed6c:	dfc00117 	ldw	ra,4(sp)
 801ed70:	df000017 	ldw	fp,0(sp)
 801ed74:	dec00204 	addi	sp,sp,8
 801ed78:	f800283a 	ret

0801ed7c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 801ed7c:	defffa04 	addi	sp,sp,-24
 801ed80:	dfc00515 	stw	ra,20(sp)
 801ed84:	df000415 	stw	fp,16(sp)
 801ed88:	df000404 	addi	fp,sp,16
 801ed8c:	e13ffd15 	stw	r4,-12(fp)
 801ed90:	e17ffe15 	stw	r5,-8(fp)
 801ed94:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 801ed98:	e0bffe17 	ldw	r2,-8(fp)
 801ed9c:	10800a28 	cmpgeui	r2,r2,40
 801eda0:	1000031e 	bne	r2,zero,801edb0 <alt_up_character_lcd_set_cursor_pos+0x34>
 801eda4:	e0bfff17 	ldw	r2,-4(fp)
 801eda8:	108000b0 	cmpltui	r2,r2,2
 801edac:	1000021e 	bne	r2,zero,801edb8 <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 801edb0:	00bfffc4 	movi	r2,-1
 801edb4:	00000906 	br	801eddc <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 801edb8:	e13ffe17 	ldw	r4,-8(fp)
 801edbc:	e17fff17 	ldw	r5,-4(fp)
 801edc0:	801eb1c0 	call	801eb1c <get_DDRAM_addr>
 801edc4:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 801edc8:	e0bffc03 	ldbu	r2,-16(fp)
 801edcc:	e13ffd17 	ldw	r4,-12(fp)
 801edd0:	100b883a 	mov	r5,r2
 801edd4:	801eb900 	call	801eb90 <alt_up_character_lcd_send_cmd>
	return 0;
 801edd8:	0005883a 	mov	r2,zero
}
 801eddc:	e037883a 	mov	sp,fp
 801ede0:	dfc00117 	ldw	ra,4(sp)
 801ede4:	df000017 	ldw	fp,0(sp)
 801ede8:	dec00204 	addi	sp,sp,8
 801edec:	f800283a 	ret

0801edf0 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 801edf0:	defffb04 	addi	sp,sp,-20
 801edf4:	dfc00415 	stw	ra,16(sp)
 801edf8:	df000315 	stw	fp,12(sp)
 801edfc:	df000304 	addi	fp,sp,12
 801ee00:	e13ffe15 	stw	r4,-8(fp)
 801ee04:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 801ee08:	e0bfff17 	ldw	r2,-4(fp)
 801ee0c:	1000011e 	bne	r2,zero,801ee14 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
 801ee10:	00001406 	br	801ee64 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 801ee14:	e0bfff17 	ldw	r2,-4(fp)
 801ee18:	0080020e 	bge	zero,r2,801ee24 <alt_up_character_lcd_shift_cursor+0x34>
 801ee1c:	00800504 	movi	r2,20
 801ee20:	00000106 	br	801ee28 <alt_up_character_lcd_shift_cursor+0x38>
 801ee24:	00800404 	movi	r2,16
 801ee28:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 801ee2c:	e0bfff17 	ldw	r2,-4(fp)
 801ee30:	1000010e 	bge	r2,zero,801ee38 <alt_up_character_lcd_shift_cursor+0x48>
 801ee34:	0085c83a 	sub	r2,zero,r2
 801ee38:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 801ee3c:	00000406 	br	801ee50 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 801ee40:	e0bffd43 	ldbu	r2,-11(fp)
 801ee44:	e13ffe17 	ldw	r4,-8(fp)
 801ee48:	100b883a 	mov	r5,r2
 801ee4c:	801eb900 	call	801eb90 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 801ee50:	e0bffd03 	ldbu	r2,-12(fp)
 801ee54:	10ffffc4 	addi	r3,r2,-1
 801ee58:	e0fffd05 	stb	r3,-12(fp)
 801ee5c:	10803fcc 	andi	r2,r2,255
 801ee60:	103ff71e 	bne	r2,zero,801ee40 <__alt_data_end+0xfc01ee40>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 801ee64:	e037883a 	mov	sp,fp
 801ee68:	dfc00117 	ldw	ra,4(sp)
 801ee6c:	df000017 	ldw	fp,0(sp)
 801ee70:	dec00204 	addi	sp,sp,8
 801ee74:	f800283a 	ret

0801ee78 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 801ee78:	defffb04 	addi	sp,sp,-20
 801ee7c:	dfc00415 	stw	ra,16(sp)
 801ee80:	df000315 	stw	fp,12(sp)
 801ee84:	df000304 	addi	fp,sp,12
 801ee88:	e13ffe15 	stw	r4,-8(fp)
 801ee8c:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 801ee90:	e0bfff17 	ldw	r2,-4(fp)
 801ee94:	1000011e 	bne	r2,zero,801ee9c <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
 801ee98:	00001406 	br	801eeec <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 801ee9c:	e0bfff17 	ldw	r2,-4(fp)
 801eea0:	0080020e 	bge	zero,r2,801eeac <alt_up_character_lcd_shift_display+0x34>
 801eea4:	00800704 	movi	r2,28
 801eea8:	00000106 	br	801eeb0 <alt_up_character_lcd_shift_display+0x38>
 801eeac:	00800604 	movi	r2,24
 801eeb0:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 801eeb4:	e0bfff17 	ldw	r2,-4(fp)
 801eeb8:	1000010e 	bge	r2,zero,801eec0 <alt_up_character_lcd_shift_display+0x48>
 801eebc:	0085c83a 	sub	r2,zero,r2
 801eec0:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 801eec4:	00000406 	br	801eed8 <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 801eec8:	e0bffd43 	ldbu	r2,-11(fp)
 801eecc:	e13ffe17 	ldw	r4,-8(fp)
 801eed0:	100b883a 	mov	r5,r2
 801eed4:	801eb900 	call	801eb90 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 801eed8:	e0bffd03 	ldbu	r2,-12(fp)
 801eedc:	10ffffc4 	addi	r3,r2,-1
 801eee0:	e0fffd05 	stb	r3,-12(fp)
 801eee4:	10803fcc 	andi	r2,r2,255
 801eee8:	103ff71e 	bne	r2,zero,801eec8 <__alt_data_end+0xfc01eec8>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 801eeec:	e037883a 	mov	sp,fp
 801eef0:	dfc00117 	ldw	ra,4(sp)
 801eef4:	df000017 	ldw	fp,0(sp)
 801eef8:	dec00204 	addi	sp,sp,8
 801eefc:	f800283a 	ret

0801ef00 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 801ef00:	defffa04 	addi	sp,sp,-24
 801ef04:	dfc00515 	stw	ra,20(sp)
 801ef08:	df000415 	stw	fp,16(sp)
 801ef0c:	df000404 	addi	fp,sp,16
 801ef10:	e13ffd15 	stw	r4,-12(fp)
 801ef14:	e17ffe15 	stw	r5,-8(fp)
 801ef18:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 801ef1c:	e0bffe17 	ldw	r2,-8(fp)
 801ef20:	10800a28 	cmpgeui	r2,r2,40
 801ef24:	1000031e 	bne	r2,zero,801ef34 <alt_up_character_lcd_erase_pos+0x34>
 801ef28:	e0bfff17 	ldw	r2,-4(fp)
 801ef2c:	108000b0 	cmpltui	r2,r2,2
 801ef30:	1000021e 	bne	r2,zero,801ef3c <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 801ef34:	00bfffc4 	movi	r2,-1
 801ef38:	00000f06 	br	801ef78 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 801ef3c:	e13ffe17 	ldw	r4,-8(fp)
 801ef40:	e17fff17 	ldw	r5,-4(fp)
 801ef44:	801eb1c0 	call	801eb1c <get_DDRAM_addr>
 801ef48:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 801ef4c:	e0bffc03 	ldbu	r2,-16(fp)
 801ef50:	e13ffd17 	ldw	r4,-12(fp)
 801ef54:	100b883a 	mov	r5,r2
 801ef58:	801eb900 	call	801eb90 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 801ef5c:	e0bffd17 	ldw	r2,-12(fp)
 801ef60:	10800a17 	ldw	r2,40(r2)
 801ef64:	10800044 	addi	r2,r2,1
 801ef68:	1007883a 	mov	r3,r2
 801ef6c:	00800084 	movi	r2,2
 801ef70:	18800025 	stbio	r2,0(r3)
	return 0;
 801ef74:	0005883a 	mov	r2,zero
}
 801ef78:	e037883a 	mov	sp,fp
 801ef7c:	dfc00117 	ldw	ra,4(sp)
 801ef80:	df000017 	ldw	fp,0(sp)
 801ef84:	dec00204 	addi	sp,sp,8
 801ef88:	f800283a 	ret

0801ef8c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 801ef8c:	defffd04 	addi	sp,sp,-12
 801ef90:	dfc00215 	stw	ra,8(sp)
 801ef94:	df000115 	stw	fp,4(sp)
 801ef98:	df000104 	addi	fp,sp,4
 801ef9c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 801efa0:	e13fff17 	ldw	r4,-4(fp)
 801efa4:	01400304 	movi	r5,12
 801efa8:	801eb900 	call	801eb90 <alt_up_character_lcd_send_cmd>
}
 801efac:	e037883a 	mov	sp,fp
 801efb0:	dfc00117 	ldw	ra,4(sp)
 801efb4:	df000017 	ldw	fp,0(sp)
 801efb8:	dec00204 	addi	sp,sp,8
 801efbc:	f800283a 	ret

0801efc0 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 801efc0:	defffd04 	addi	sp,sp,-12
 801efc4:	dfc00215 	stw	ra,8(sp)
 801efc8:	df000115 	stw	fp,4(sp)
 801efcc:	df000104 	addi	fp,sp,4
 801efd0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 801efd4:	e13fff17 	ldw	r4,-4(fp)
 801efd8:	014003c4 	movi	r5,15
 801efdc:	801eb900 	call	801eb90 <alt_up_character_lcd_send_cmd>
}
 801efe0:	e037883a 	mov	sp,fp
 801efe4:	dfc00117 	ldw	ra,4(sp)
 801efe8:	df000017 	ldw	fp,0(sp)
 801efec:	dec00204 	addi	sp,sp,8
 801eff0:	f800283a 	ret

0801eff4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 801eff4:	defff504 	addi	sp,sp,-44
 801eff8:	df000a15 	stw	fp,40(sp)
 801effc:	df000a04 	addi	fp,sp,40
 801f000:	e13ffc15 	stw	r4,-16(fp)
 801f004:	e17ffd15 	stw	r5,-12(fp)
 801f008:	e1bffe15 	stw	r6,-8(fp)
 801f00c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 801f010:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 801f014:	008200f4 	movhi	r2,2051
 801f018:	10ba1904 	addi	r2,r2,-6044
 801f01c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 801f020:	10003f26 	beq	r2,zero,801f120 <alt_alarm_start+0x12c>
  {
    if (alarm)
 801f024:	e0bffc17 	ldw	r2,-16(fp)
 801f028:	10003b26 	beq	r2,zero,801f118 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 801f02c:	e0bffc17 	ldw	r2,-16(fp)
 801f030:	e0fffe17 	ldw	r3,-8(fp)
 801f034:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 801f038:	e0bffc17 	ldw	r2,-16(fp)
 801f03c:	e0ffff17 	ldw	r3,-4(fp)
 801f040:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801f044:	0005303a 	rdctl	r2,status
 801f048:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801f04c:	e0fff817 	ldw	r3,-32(fp)
 801f050:	00bfff84 	movi	r2,-2
 801f054:	1884703a 	and	r2,r3,r2
 801f058:	1001703a 	wrctl	status,r2
  
  return context;
 801f05c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 801f060:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 801f064:	008200f4 	movhi	r2,2051
 801f068:	10ba1a04 	addi	r2,r2,-6040
 801f06c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 801f070:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 801f074:	e0fffd17 	ldw	r3,-12(fp)
 801f078:	e0bff617 	ldw	r2,-40(fp)
 801f07c:	1885883a 	add	r2,r3,r2
 801f080:	10c00044 	addi	r3,r2,1
 801f084:	e0bffc17 	ldw	r2,-16(fp)
 801f088:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 801f08c:	e0bffc17 	ldw	r2,-16(fp)
 801f090:	10c00217 	ldw	r3,8(r2)
 801f094:	e0bff617 	ldw	r2,-40(fp)
 801f098:	1880042e 	bgeu	r3,r2,801f0ac <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 801f09c:	e0bffc17 	ldw	r2,-16(fp)
 801f0a0:	00c00044 	movi	r3,1
 801f0a4:	10c00405 	stb	r3,16(r2)
 801f0a8:	00000206 	br	801f0b4 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 801f0ac:	e0bffc17 	ldw	r2,-16(fp)
 801f0b0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 801f0b4:	e0fffc17 	ldw	r3,-16(fp)
 801f0b8:	008200f4 	movhi	r2,2051
 801f0bc:	10b32304 	addi	r2,r2,-13172
 801f0c0:	e0bff915 	stw	r2,-28(fp)
 801f0c4:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 801f0c8:	e0bffa17 	ldw	r2,-24(fp)
 801f0cc:	e0fff917 	ldw	r3,-28(fp)
 801f0d0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 801f0d4:	e0bff917 	ldw	r2,-28(fp)
 801f0d8:	10c00017 	ldw	r3,0(r2)
 801f0dc:	e0bffa17 	ldw	r2,-24(fp)
 801f0e0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801f0e4:	e0bff917 	ldw	r2,-28(fp)
 801f0e8:	10800017 	ldw	r2,0(r2)
 801f0ec:	e0fffa17 	ldw	r3,-24(fp)
 801f0f0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 801f0f4:	e0bff917 	ldw	r2,-28(fp)
 801f0f8:	e0fffa17 	ldw	r3,-24(fp)
 801f0fc:	10c00015 	stw	r3,0(r2)
 801f100:	e0bff717 	ldw	r2,-36(fp)
 801f104:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801f108:	e0bffb17 	ldw	r2,-20(fp)
 801f10c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 801f110:	0005883a 	mov	r2,zero
 801f114:	00000306 	br	801f124 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 801f118:	00bffa84 	movi	r2,-22
 801f11c:	00000106 	br	801f124 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 801f120:	00bfde84 	movi	r2,-134
  }
}
 801f124:	e037883a 	mov	sp,fp
 801f128:	df000017 	ldw	fp,0(sp)
 801f12c:	dec00104 	addi	sp,sp,4
 801f130:	f800283a 	ret

0801f134 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 801f134:	deffff04 	addi	sp,sp,-4
 801f138:	df000015 	stw	fp,0(sp)
 801f13c:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 801f140:	e037883a 	mov	sp,fp
 801f144:	df000017 	ldw	fp,0(sp)
 801f148:	dec00104 	addi	sp,sp,4
 801f14c:	f800283a 	ret

0801f150 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801f150:	defffe04 	addi	sp,sp,-8
 801f154:	dfc00115 	stw	ra,4(sp)
 801f158:	df000015 	stw	fp,0(sp)
 801f15c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801f160:	008200f4 	movhi	r2,2051
 801f164:	10b32104 	addi	r2,r2,-13180
 801f168:	10800017 	ldw	r2,0(r2)
 801f16c:	10000526 	beq	r2,zero,801f184 <alt_get_errno+0x34>
 801f170:	008200f4 	movhi	r2,2051
 801f174:	10b32104 	addi	r2,r2,-13180
 801f178:	10800017 	ldw	r2,0(r2)
 801f17c:	103ee83a 	callr	r2
 801f180:	00000206 	br	801f18c <alt_get_errno+0x3c>
 801f184:	008200f4 	movhi	r2,2051
 801f188:	10ba0e04 	addi	r2,r2,-6088
}
 801f18c:	e037883a 	mov	sp,fp
 801f190:	dfc00117 	ldw	ra,4(sp)
 801f194:	df000017 	ldw	fp,0(sp)
 801f198:	dec00204 	addi	sp,sp,8
 801f19c:	f800283a 	ret

0801f1a0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 801f1a0:	defffa04 	addi	sp,sp,-24
 801f1a4:	dfc00515 	stw	ra,20(sp)
 801f1a8:	df000415 	stw	fp,16(sp)
 801f1ac:	df000404 	addi	fp,sp,16
 801f1b0:	e13ffe15 	stw	r4,-8(fp)
 801f1b4:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 801f1b8:	e0bffe17 	ldw	r2,-8(fp)
 801f1bc:	10000326 	beq	r2,zero,801f1cc <alt_dev_llist_insert+0x2c>
 801f1c0:	e0bffe17 	ldw	r2,-8(fp)
 801f1c4:	10800217 	ldw	r2,8(r2)
 801f1c8:	1000061e 	bne	r2,zero,801f1e4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 801f1cc:	801f1500 	call	801f150 <alt_get_errno>
 801f1d0:	1007883a 	mov	r3,r2
 801f1d4:	00800584 	movi	r2,22
 801f1d8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 801f1dc:	00bffa84 	movi	r2,-22
 801f1e0:	00001306 	br	801f230 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 801f1e4:	e0bffe17 	ldw	r2,-8(fp)
 801f1e8:	e0ffff17 	ldw	r3,-4(fp)
 801f1ec:	e0fffc15 	stw	r3,-16(fp)
 801f1f0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 801f1f4:	e0bffd17 	ldw	r2,-12(fp)
 801f1f8:	e0fffc17 	ldw	r3,-16(fp)
 801f1fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 801f200:	e0bffc17 	ldw	r2,-16(fp)
 801f204:	10c00017 	ldw	r3,0(r2)
 801f208:	e0bffd17 	ldw	r2,-12(fp)
 801f20c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801f210:	e0bffc17 	ldw	r2,-16(fp)
 801f214:	10800017 	ldw	r2,0(r2)
 801f218:	e0fffd17 	ldw	r3,-12(fp)
 801f21c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 801f220:	e0bffc17 	ldw	r2,-16(fp)
 801f224:	e0fffd17 	ldw	r3,-12(fp)
 801f228:	10c00015 	stw	r3,0(r2)

  return 0;  
 801f22c:	0005883a 	mov	r2,zero
}
 801f230:	e037883a 	mov	sp,fp
 801f234:	dfc00117 	ldw	ra,4(sp)
 801f238:	df000017 	ldw	fp,0(sp)
 801f23c:	dec00204 	addi	sp,sp,8
 801f240:	f800283a 	ret

0801f244 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 801f244:	defffd04 	addi	sp,sp,-12
 801f248:	dfc00215 	stw	ra,8(sp)
 801f24c:	df000115 	stw	fp,4(sp)
 801f250:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 801f254:	008200b4 	movhi	r2,2050
 801f258:	10802b04 	addi	r2,r2,172
 801f25c:	e0bfff15 	stw	r2,-4(fp)
 801f260:	00000606 	br	801f27c <_do_ctors+0x38>
        (*ctor) (); 
 801f264:	e0bfff17 	ldw	r2,-4(fp)
 801f268:	10800017 	ldw	r2,0(r2)
 801f26c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 801f270:	e0bfff17 	ldw	r2,-4(fp)
 801f274:	10bfff04 	addi	r2,r2,-4
 801f278:	e0bfff15 	stw	r2,-4(fp)
 801f27c:	e0ffff17 	ldw	r3,-4(fp)
 801f280:	008200b4 	movhi	r2,2050
 801f284:	10802c04 	addi	r2,r2,176
 801f288:	18bff62e 	bgeu	r3,r2,801f264 <__alt_data_end+0xfc01f264>
        (*ctor) (); 
}
 801f28c:	e037883a 	mov	sp,fp
 801f290:	dfc00117 	ldw	ra,4(sp)
 801f294:	df000017 	ldw	fp,0(sp)
 801f298:	dec00204 	addi	sp,sp,8
 801f29c:	f800283a 	ret

0801f2a0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 801f2a0:	defffd04 	addi	sp,sp,-12
 801f2a4:	dfc00215 	stw	ra,8(sp)
 801f2a8:	df000115 	stw	fp,4(sp)
 801f2ac:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 801f2b0:	008200b4 	movhi	r2,2050
 801f2b4:	10802b04 	addi	r2,r2,172
 801f2b8:	e0bfff15 	stw	r2,-4(fp)
 801f2bc:	00000606 	br	801f2d8 <_do_dtors+0x38>
        (*dtor) (); 
 801f2c0:	e0bfff17 	ldw	r2,-4(fp)
 801f2c4:	10800017 	ldw	r2,0(r2)
 801f2c8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 801f2cc:	e0bfff17 	ldw	r2,-4(fp)
 801f2d0:	10bfff04 	addi	r2,r2,-4
 801f2d4:	e0bfff15 	stw	r2,-4(fp)
 801f2d8:	e0ffff17 	ldw	r3,-4(fp)
 801f2dc:	008200b4 	movhi	r2,2050
 801f2e0:	10802c04 	addi	r2,r2,176
 801f2e4:	18bff62e 	bgeu	r3,r2,801f2c0 <__alt_data_end+0xfc01f2c0>
        (*dtor) (); 
}
 801f2e8:	e037883a 	mov	sp,fp
 801f2ec:	dfc00117 	ldw	ra,4(sp)
 801f2f0:	df000017 	ldw	fp,0(sp)
 801f2f4:	dec00204 	addi	sp,sp,8
 801f2f8:	f800283a 	ret

0801f2fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 801f2fc:	defffa04 	addi	sp,sp,-24
 801f300:	dfc00515 	stw	ra,20(sp)
 801f304:	df000415 	stw	fp,16(sp)
 801f308:	df000404 	addi	fp,sp,16
 801f30c:	e13ffe15 	stw	r4,-8(fp)
 801f310:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 801f314:	e0bfff17 	ldw	r2,-4(fp)
 801f318:	10800017 	ldw	r2,0(r2)
 801f31c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 801f320:	e13ffe17 	ldw	r4,-8(fp)
 801f324:	800e3c40 	call	800e3c4 <strlen>
 801f328:	10800044 	addi	r2,r2,1
 801f32c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801f330:	00000d06 	br	801f368 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 801f334:	e0bffc17 	ldw	r2,-16(fp)
 801f338:	10c00217 	ldw	r3,8(r2)
 801f33c:	e0bffd17 	ldw	r2,-12(fp)
 801f340:	1809883a 	mov	r4,r3
 801f344:	e17ffe17 	ldw	r5,-8(fp)
 801f348:	100d883a 	mov	r6,r2
 801f34c:	801fcf80 	call	801fcf8 <memcmp>
 801f350:	1000021e 	bne	r2,zero,801f35c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 801f354:	e0bffc17 	ldw	r2,-16(fp)
 801f358:	00000706 	br	801f378 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 801f35c:	e0bffc17 	ldw	r2,-16(fp)
 801f360:	10800017 	ldw	r2,0(r2)
 801f364:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801f368:	e0fffc17 	ldw	r3,-16(fp)
 801f36c:	e0bfff17 	ldw	r2,-4(fp)
 801f370:	18bff01e 	bne	r3,r2,801f334 <__alt_data_end+0xfc01f334>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 801f374:	0005883a 	mov	r2,zero
}
 801f378:	e037883a 	mov	sp,fp
 801f37c:	dfc00117 	ldw	ra,4(sp)
 801f380:	df000017 	ldw	fp,0(sp)
 801f384:	dec00204 	addi	sp,sp,8
 801f388:	f800283a 	ret

0801f38c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 801f38c:	defffe04 	addi	sp,sp,-8
 801f390:	dfc00115 	stw	ra,4(sp)
 801f394:	df000015 	stw	fp,0(sp)
 801f398:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 801f39c:	0009883a 	mov	r4,zero
 801f3a0:	01440004 	movi	r5,4096
 801f3a4:	801fc200 	call	801fc20 <alt_icache_flush>
#endif
}
 801f3a8:	e037883a 	mov	sp,fp
 801f3ac:	dfc00117 	ldw	ra,4(sp)
 801f3b0:	df000017 	ldw	fp,0(sp)
 801f3b4:	dec00204 	addi	sp,sp,8
 801f3b8:	f800283a 	ret

0801f3bc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 801f3bc:	defff904 	addi	sp,sp,-28
 801f3c0:	dfc00615 	stw	ra,24(sp)
 801f3c4:	df000515 	stw	fp,20(sp)
 801f3c8:	df000504 	addi	fp,sp,20
 801f3cc:	e13ffc15 	stw	r4,-16(fp)
 801f3d0:	e17ffd15 	stw	r5,-12(fp)
 801f3d4:	e1bffe15 	stw	r6,-8(fp)
 801f3d8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 801f3dc:	e0800217 	ldw	r2,8(fp)
 801f3e0:	d8800015 	stw	r2,0(sp)
 801f3e4:	e13ffc17 	ldw	r4,-16(fp)
 801f3e8:	e17ffd17 	ldw	r5,-12(fp)
 801f3ec:	e1bffe17 	ldw	r6,-8(fp)
 801f3f0:	e1ffff17 	ldw	r7,-4(fp)
 801f3f4:	801f59c0 	call	801f59c <alt_iic_isr_register>
}  
 801f3f8:	e037883a 	mov	sp,fp
 801f3fc:	dfc00117 	ldw	ra,4(sp)
 801f400:	df000017 	ldw	fp,0(sp)
 801f404:	dec00204 	addi	sp,sp,8
 801f408:	f800283a 	ret

0801f40c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 801f40c:	defff904 	addi	sp,sp,-28
 801f410:	df000615 	stw	fp,24(sp)
 801f414:	df000604 	addi	fp,sp,24
 801f418:	e13ffe15 	stw	r4,-8(fp)
 801f41c:	e17fff15 	stw	r5,-4(fp)
 801f420:	e0bfff17 	ldw	r2,-4(fp)
 801f424:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801f428:	0005303a 	rdctl	r2,status
 801f42c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801f430:	e0fffb17 	ldw	r3,-20(fp)
 801f434:	00bfff84 	movi	r2,-2
 801f438:	1884703a 	and	r2,r3,r2
 801f43c:	1001703a 	wrctl	status,r2
  
  return context;
 801f440:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801f444:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 801f448:	e0bffa17 	ldw	r2,-24(fp)
 801f44c:	00c00044 	movi	r3,1
 801f450:	1884983a 	sll	r2,r3,r2
 801f454:	1007883a 	mov	r3,r2
 801f458:	008200f4 	movhi	r2,2051
 801f45c:	10ba1b04 	addi	r2,r2,-6036
 801f460:	10800017 	ldw	r2,0(r2)
 801f464:	1886b03a 	or	r3,r3,r2
 801f468:	008200f4 	movhi	r2,2051
 801f46c:	10ba1b04 	addi	r2,r2,-6036
 801f470:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801f474:	008200f4 	movhi	r2,2051
 801f478:	10ba1b04 	addi	r2,r2,-6036
 801f47c:	10800017 	ldw	r2,0(r2)
 801f480:	100170fa 	wrctl	ienable,r2
 801f484:	e0bffc17 	ldw	r2,-16(fp)
 801f488:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801f48c:	e0bffd17 	ldw	r2,-12(fp)
 801f490:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 801f494:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 801f498:	0001883a 	nop
}
 801f49c:	e037883a 	mov	sp,fp
 801f4a0:	df000017 	ldw	fp,0(sp)
 801f4a4:	dec00104 	addi	sp,sp,4
 801f4a8:	f800283a 	ret

0801f4ac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 801f4ac:	defff904 	addi	sp,sp,-28
 801f4b0:	df000615 	stw	fp,24(sp)
 801f4b4:	df000604 	addi	fp,sp,24
 801f4b8:	e13ffe15 	stw	r4,-8(fp)
 801f4bc:	e17fff15 	stw	r5,-4(fp)
 801f4c0:	e0bfff17 	ldw	r2,-4(fp)
 801f4c4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801f4c8:	0005303a 	rdctl	r2,status
 801f4cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801f4d0:	e0fffb17 	ldw	r3,-20(fp)
 801f4d4:	00bfff84 	movi	r2,-2
 801f4d8:	1884703a 	and	r2,r3,r2
 801f4dc:	1001703a 	wrctl	status,r2
  
  return context;
 801f4e0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801f4e4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 801f4e8:	e0bffa17 	ldw	r2,-24(fp)
 801f4ec:	00c00044 	movi	r3,1
 801f4f0:	1884983a 	sll	r2,r3,r2
 801f4f4:	0084303a 	nor	r2,zero,r2
 801f4f8:	1007883a 	mov	r3,r2
 801f4fc:	008200f4 	movhi	r2,2051
 801f500:	10ba1b04 	addi	r2,r2,-6036
 801f504:	10800017 	ldw	r2,0(r2)
 801f508:	1886703a 	and	r3,r3,r2
 801f50c:	008200f4 	movhi	r2,2051
 801f510:	10ba1b04 	addi	r2,r2,-6036
 801f514:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801f518:	008200f4 	movhi	r2,2051
 801f51c:	10ba1b04 	addi	r2,r2,-6036
 801f520:	10800017 	ldw	r2,0(r2)
 801f524:	100170fa 	wrctl	ienable,r2
 801f528:	e0bffc17 	ldw	r2,-16(fp)
 801f52c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801f530:	e0bffd17 	ldw	r2,-12(fp)
 801f534:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 801f538:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 801f53c:	0001883a 	nop
}
 801f540:	e037883a 	mov	sp,fp
 801f544:	df000017 	ldw	fp,0(sp)
 801f548:	dec00104 	addi	sp,sp,4
 801f54c:	f800283a 	ret

0801f550 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 801f550:	defffc04 	addi	sp,sp,-16
 801f554:	df000315 	stw	fp,12(sp)
 801f558:	df000304 	addi	fp,sp,12
 801f55c:	e13ffe15 	stw	r4,-8(fp)
 801f560:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 801f564:	000530fa 	rdctl	r2,ienable
 801f568:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 801f56c:	e0bfff17 	ldw	r2,-4(fp)
 801f570:	00c00044 	movi	r3,1
 801f574:	1884983a 	sll	r2,r3,r2
 801f578:	1007883a 	mov	r3,r2
 801f57c:	e0bffd17 	ldw	r2,-12(fp)
 801f580:	1884703a 	and	r2,r3,r2
 801f584:	1004c03a 	cmpne	r2,r2,zero
 801f588:	10803fcc 	andi	r2,r2,255
}
 801f58c:	e037883a 	mov	sp,fp
 801f590:	df000017 	ldw	fp,0(sp)
 801f594:	dec00104 	addi	sp,sp,4
 801f598:	f800283a 	ret

0801f59c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 801f59c:	defff504 	addi	sp,sp,-44
 801f5a0:	dfc00a15 	stw	ra,40(sp)
 801f5a4:	df000915 	stw	fp,36(sp)
 801f5a8:	df000904 	addi	fp,sp,36
 801f5ac:	e13ffc15 	stw	r4,-16(fp)
 801f5b0:	e17ffd15 	stw	r5,-12(fp)
 801f5b4:	e1bffe15 	stw	r6,-8(fp)
 801f5b8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 801f5bc:	00bffa84 	movi	r2,-22
 801f5c0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 801f5c4:	e0bffd17 	ldw	r2,-12(fp)
 801f5c8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 801f5cc:	e0bff817 	ldw	r2,-32(fp)
 801f5d0:	10800808 	cmpgei	r2,r2,32
 801f5d4:	1000271e 	bne	r2,zero,801f674 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801f5d8:	0005303a 	rdctl	r2,status
 801f5dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801f5e0:	e0fffa17 	ldw	r3,-24(fp)
 801f5e4:	00bfff84 	movi	r2,-2
 801f5e8:	1884703a 	and	r2,r3,r2
 801f5ec:	1001703a 	wrctl	status,r2
  
  return context;
 801f5f0:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 801f5f4:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 801f5f8:	008200f4 	movhi	r2,2051
 801f5fc:	10babb04 	addi	r2,r2,-5396
 801f600:	e0fff817 	ldw	r3,-32(fp)
 801f604:	180690fa 	slli	r3,r3,3
 801f608:	10c5883a 	add	r2,r2,r3
 801f60c:	e0fffe17 	ldw	r3,-8(fp)
 801f610:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 801f614:	008200f4 	movhi	r2,2051
 801f618:	10babb04 	addi	r2,r2,-5396
 801f61c:	e0fff817 	ldw	r3,-32(fp)
 801f620:	180690fa 	slli	r3,r3,3
 801f624:	10c5883a 	add	r2,r2,r3
 801f628:	10800104 	addi	r2,r2,4
 801f62c:	e0ffff17 	ldw	r3,-4(fp)
 801f630:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 801f634:	e0bffe17 	ldw	r2,-8(fp)
 801f638:	10000526 	beq	r2,zero,801f650 <alt_iic_isr_register+0xb4>
 801f63c:	e0bff817 	ldw	r2,-32(fp)
 801f640:	e13ffc17 	ldw	r4,-16(fp)
 801f644:	100b883a 	mov	r5,r2
 801f648:	801f40c0 	call	801f40c <alt_ic_irq_enable>
 801f64c:	00000406 	br	801f660 <alt_iic_isr_register+0xc4>
 801f650:	e0bff817 	ldw	r2,-32(fp)
 801f654:	e13ffc17 	ldw	r4,-16(fp)
 801f658:	100b883a 	mov	r5,r2
 801f65c:	801f4ac0 	call	801f4ac <alt_ic_irq_disable>
 801f660:	e0bff715 	stw	r2,-36(fp)
 801f664:	e0bff917 	ldw	r2,-28(fp)
 801f668:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801f66c:	e0bffb17 	ldw	r2,-20(fp)
 801f670:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 801f674:	e0bff717 	ldw	r2,-36(fp)
}
 801f678:	e037883a 	mov	sp,fp
 801f67c:	dfc00117 	ldw	ra,4(sp)
 801f680:	df000017 	ldw	fp,0(sp)
 801f684:	dec00204 	addi	sp,sp,8
 801f688:	f800283a 	ret

0801f68c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 801f68c:	defff904 	addi	sp,sp,-28
 801f690:	dfc00615 	stw	ra,24(sp)
 801f694:	df000515 	stw	fp,20(sp)
 801f698:	df000504 	addi	fp,sp,20
 801f69c:	e13ffc15 	stw	r4,-16(fp)
 801f6a0:	e17ffd15 	stw	r5,-12(fp)
 801f6a4:	e1bffe15 	stw	r6,-8(fp)
 801f6a8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 801f6ac:	e13ffd17 	ldw	r4,-12(fp)
 801f6b0:	e17ffe17 	ldw	r5,-8(fp)
 801f6b4:	e1bfff17 	ldw	r6,-4(fp)
 801f6b8:	801f8e00 	call	801f8e0 <open>
 801f6bc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 801f6c0:	e0bffb17 	ldw	r2,-20(fp)
 801f6c4:	10001c16 	blt	r2,zero,801f738 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 801f6c8:	008200f4 	movhi	r2,2051
 801f6cc:	10ae8d04 	addi	r2,r2,-17868
 801f6d0:	e0fffb17 	ldw	r3,-20(fp)
 801f6d4:	18c00324 	muli	r3,r3,12
 801f6d8:	10c5883a 	add	r2,r2,r3
 801f6dc:	10c00017 	ldw	r3,0(r2)
 801f6e0:	e0bffc17 	ldw	r2,-16(fp)
 801f6e4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 801f6e8:	008200f4 	movhi	r2,2051
 801f6ec:	10ae8d04 	addi	r2,r2,-17868
 801f6f0:	e0fffb17 	ldw	r3,-20(fp)
 801f6f4:	18c00324 	muli	r3,r3,12
 801f6f8:	10c5883a 	add	r2,r2,r3
 801f6fc:	10800104 	addi	r2,r2,4
 801f700:	10c00017 	ldw	r3,0(r2)
 801f704:	e0bffc17 	ldw	r2,-16(fp)
 801f708:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 801f70c:	008200f4 	movhi	r2,2051
 801f710:	10ae8d04 	addi	r2,r2,-17868
 801f714:	e0fffb17 	ldw	r3,-20(fp)
 801f718:	18c00324 	muli	r3,r3,12
 801f71c:	10c5883a 	add	r2,r2,r3
 801f720:	10800204 	addi	r2,r2,8
 801f724:	10c00017 	ldw	r3,0(r2)
 801f728:	e0bffc17 	ldw	r2,-16(fp)
 801f72c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 801f730:	e13ffb17 	ldw	r4,-20(fp)
 801f734:	801dc4c0 	call	801dc4c <alt_release_fd>
  }
} 
 801f738:	e037883a 	mov	sp,fp
 801f73c:	dfc00117 	ldw	ra,4(sp)
 801f740:	df000017 	ldw	fp,0(sp)
 801f744:	dec00204 	addi	sp,sp,8
 801f748:	f800283a 	ret

0801f74c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 801f74c:	defffb04 	addi	sp,sp,-20
 801f750:	dfc00415 	stw	ra,16(sp)
 801f754:	df000315 	stw	fp,12(sp)
 801f758:	df000304 	addi	fp,sp,12
 801f75c:	e13ffd15 	stw	r4,-12(fp)
 801f760:	e17ffe15 	stw	r5,-8(fp)
 801f764:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 801f768:	010200f4 	movhi	r4,2051
 801f76c:	212e9004 	addi	r4,r4,-17856
 801f770:	e17ffd17 	ldw	r5,-12(fp)
 801f774:	01800044 	movi	r6,1
 801f778:	01c07fc4 	movi	r7,511
 801f77c:	801f68c0 	call	801f68c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 801f780:	010200f4 	movhi	r4,2051
 801f784:	212e8d04 	addi	r4,r4,-17868
 801f788:	e17ffe17 	ldw	r5,-8(fp)
 801f78c:	000d883a 	mov	r6,zero
 801f790:	01c07fc4 	movi	r7,511
 801f794:	801f68c0 	call	801f68c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 801f798:	010200f4 	movhi	r4,2051
 801f79c:	212e9304 	addi	r4,r4,-17844
 801f7a0:	e17fff17 	ldw	r5,-4(fp)
 801f7a4:	01800044 	movi	r6,1
 801f7a8:	01c07fc4 	movi	r7,511
 801f7ac:	801f68c0 	call	801f68c <alt_open_fd>
}  
 801f7b0:	e037883a 	mov	sp,fp
 801f7b4:	dfc00117 	ldw	ra,4(sp)
 801f7b8:	df000017 	ldw	fp,0(sp)
 801f7bc:	dec00204 	addi	sp,sp,8
 801f7c0:	f800283a 	ret

0801f7c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801f7c4:	defffe04 	addi	sp,sp,-8
 801f7c8:	dfc00115 	stw	ra,4(sp)
 801f7cc:	df000015 	stw	fp,0(sp)
 801f7d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801f7d4:	008200f4 	movhi	r2,2051
 801f7d8:	10b32104 	addi	r2,r2,-13180
 801f7dc:	10800017 	ldw	r2,0(r2)
 801f7e0:	10000526 	beq	r2,zero,801f7f8 <alt_get_errno+0x34>
 801f7e4:	008200f4 	movhi	r2,2051
 801f7e8:	10b32104 	addi	r2,r2,-13180
 801f7ec:	10800017 	ldw	r2,0(r2)
 801f7f0:	103ee83a 	callr	r2
 801f7f4:	00000206 	br	801f800 <alt_get_errno+0x3c>
 801f7f8:	008200f4 	movhi	r2,2051
 801f7fc:	10ba0e04 	addi	r2,r2,-6088
}
 801f800:	e037883a 	mov	sp,fp
 801f804:	dfc00117 	ldw	ra,4(sp)
 801f808:	df000017 	ldw	fp,0(sp)
 801f80c:	dec00204 	addi	sp,sp,8
 801f810:	f800283a 	ret

0801f814 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 801f814:	defffd04 	addi	sp,sp,-12
 801f818:	df000215 	stw	fp,8(sp)
 801f81c:	df000204 	addi	fp,sp,8
 801f820:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 801f824:	e0bfff17 	ldw	r2,-4(fp)
 801f828:	10800217 	ldw	r2,8(r2)
 801f82c:	10d00034 	orhi	r3,r2,16384
 801f830:	e0bfff17 	ldw	r2,-4(fp)
 801f834:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 801f838:	e03ffe15 	stw	zero,-8(fp)
 801f83c:	00001d06 	br	801f8b4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 801f840:	008200f4 	movhi	r2,2051
 801f844:	10ae8d04 	addi	r2,r2,-17868
 801f848:	e0fffe17 	ldw	r3,-8(fp)
 801f84c:	18c00324 	muli	r3,r3,12
 801f850:	10c5883a 	add	r2,r2,r3
 801f854:	10c00017 	ldw	r3,0(r2)
 801f858:	e0bfff17 	ldw	r2,-4(fp)
 801f85c:	10800017 	ldw	r2,0(r2)
 801f860:	1880111e 	bne	r3,r2,801f8a8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 801f864:	008200f4 	movhi	r2,2051
 801f868:	10ae8d04 	addi	r2,r2,-17868
 801f86c:	e0fffe17 	ldw	r3,-8(fp)
 801f870:	18c00324 	muli	r3,r3,12
 801f874:	10c5883a 	add	r2,r2,r3
 801f878:	10800204 	addi	r2,r2,8
 801f87c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 801f880:	1000090e 	bge	r2,zero,801f8a8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 801f884:	e0bffe17 	ldw	r2,-8(fp)
 801f888:	10c00324 	muli	r3,r2,12
 801f88c:	008200f4 	movhi	r2,2051
 801f890:	10ae8d04 	addi	r2,r2,-17868
 801f894:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 801f898:	e0bfff17 	ldw	r2,-4(fp)
 801f89c:	18800226 	beq	r3,r2,801f8a8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 801f8a0:	00bffcc4 	movi	r2,-13
 801f8a4:	00000a06 	br	801f8d0 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 801f8a8:	e0bffe17 	ldw	r2,-8(fp)
 801f8ac:	10800044 	addi	r2,r2,1
 801f8b0:	e0bffe15 	stw	r2,-8(fp)
 801f8b4:	008200f4 	movhi	r2,2051
 801f8b8:	10b32004 	addi	r2,r2,-13184
 801f8bc:	10800017 	ldw	r2,0(r2)
 801f8c0:	1007883a 	mov	r3,r2
 801f8c4:	e0bffe17 	ldw	r2,-8(fp)
 801f8c8:	18bfdd2e 	bgeu	r3,r2,801f840 <__alt_data_end+0xfc01f840>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 801f8cc:	0005883a 	mov	r2,zero
}
 801f8d0:	e037883a 	mov	sp,fp
 801f8d4:	df000017 	ldw	fp,0(sp)
 801f8d8:	dec00104 	addi	sp,sp,4
 801f8dc:	f800283a 	ret

0801f8e0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 801f8e0:	defff604 	addi	sp,sp,-40
 801f8e4:	dfc00915 	stw	ra,36(sp)
 801f8e8:	df000815 	stw	fp,32(sp)
 801f8ec:	df000804 	addi	fp,sp,32
 801f8f0:	e13ffd15 	stw	r4,-12(fp)
 801f8f4:	e17ffe15 	stw	r5,-8(fp)
 801f8f8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 801f8fc:	00bfffc4 	movi	r2,-1
 801f900:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 801f904:	00bffb44 	movi	r2,-19
 801f908:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 801f90c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 801f910:	e13ffd17 	ldw	r4,-12(fp)
 801f914:	014200f4 	movhi	r5,2051
 801f918:	29731e04 	addi	r5,r5,-13192
 801f91c:	801f2fc0 	call	801f2fc <alt_find_dev>
 801f920:	e0bff815 	stw	r2,-32(fp)
 801f924:	e0bff817 	ldw	r2,-32(fp)
 801f928:	1000051e 	bne	r2,zero,801f940 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 801f92c:	e13ffd17 	ldw	r4,-12(fp)
 801f930:	801fa580 	call	801fa58 <alt_find_file>
 801f934:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 801f938:	00800044 	movi	r2,1
 801f93c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 801f940:	e0bff817 	ldw	r2,-32(fp)
 801f944:	10002926 	beq	r2,zero,801f9ec <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 801f948:	e13ff817 	ldw	r4,-32(fp)
 801f94c:	801fb6c0 	call	801fb6c <alt_get_fd>
 801f950:	e0bff915 	stw	r2,-28(fp)
 801f954:	e0bff917 	ldw	r2,-28(fp)
 801f958:	1000030e 	bge	r2,zero,801f968 <open+0x88>
    {
      status = index;
 801f95c:	e0bff917 	ldw	r2,-28(fp)
 801f960:	e0bffa15 	stw	r2,-24(fp)
 801f964:	00002306 	br	801f9f4 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 801f968:	e0bff917 	ldw	r2,-28(fp)
 801f96c:	10c00324 	muli	r3,r2,12
 801f970:	008200f4 	movhi	r2,2051
 801f974:	10ae8d04 	addi	r2,r2,-17868
 801f978:	1885883a 	add	r2,r3,r2
 801f97c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 801f980:	e0fffe17 	ldw	r3,-8(fp)
 801f984:	00900034 	movhi	r2,16384
 801f988:	10bfffc4 	addi	r2,r2,-1
 801f98c:	1886703a 	and	r3,r3,r2
 801f990:	e0bffc17 	ldw	r2,-16(fp)
 801f994:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 801f998:	e0bffb17 	ldw	r2,-20(fp)
 801f99c:	1000051e 	bne	r2,zero,801f9b4 <open+0xd4>
 801f9a0:	e13ffc17 	ldw	r4,-16(fp)
 801f9a4:	801f8140 	call	801f814 <alt_file_locked>
 801f9a8:	e0bffa15 	stw	r2,-24(fp)
 801f9ac:	e0bffa17 	ldw	r2,-24(fp)
 801f9b0:	10001016 	blt	r2,zero,801f9f4 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 801f9b4:	e0bff817 	ldw	r2,-32(fp)
 801f9b8:	10800317 	ldw	r2,12(r2)
 801f9bc:	10000826 	beq	r2,zero,801f9e0 <open+0x100>
 801f9c0:	e0bff817 	ldw	r2,-32(fp)
 801f9c4:	10800317 	ldw	r2,12(r2)
 801f9c8:	e13ffc17 	ldw	r4,-16(fp)
 801f9cc:	e17ffd17 	ldw	r5,-12(fp)
 801f9d0:	e1bffe17 	ldw	r6,-8(fp)
 801f9d4:	e1ffff17 	ldw	r7,-4(fp)
 801f9d8:	103ee83a 	callr	r2
 801f9dc:	00000106 	br	801f9e4 <open+0x104>
 801f9e0:	0005883a 	mov	r2,zero
 801f9e4:	e0bffa15 	stw	r2,-24(fp)
 801f9e8:	00000206 	br	801f9f4 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 801f9ec:	00bffb44 	movi	r2,-19
 801f9f0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 801f9f4:	e0bffa17 	ldw	r2,-24(fp)
 801f9f8:	1000090e 	bge	r2,zero,801fa20 <open+0x140>
  {
    alt_release_fd (index);  
 801f9fc:	e13ff917 	ldw	r4,-28(fp)
 801fa00:	801dc4c0 	call	801dc4c <alt_release_fd>
    ALT_ERRNO = -status;
 801fa04:	801f7c40 	call	801f7c4 <alt_get_errno>
 801fa08:	1007883a 	mov	r3,r2
 801fa0c:	e0bffa17 	ldw	r2,-24(fp)
 801fa10:	0085c83a 	sub	r2,zero,r2
 801fa14:	18800015 	stw	r2,0(r3)
    return -1;
 801fa18:	00bfffc4 	movi	r2,-1
 801fa1c:	00000106 	br	801fa24 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 801fa20:	e0bff917 	ldw	r2,-28(fp)
}
 801fa24:	e037883a 	mov	sp,fp
 801fa28:	dfc00117 	ldw	ra,4(sp)
 801fa2c:	df000017 	ldw	fp,0(sp)
 801fa30:	dec00204 	addi	sp,sp,8
 801fa34:	f800283a 	ret

0801fa38 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 801fa38:	deffff04 	addi	sp,sp,-4
 801fa3c:	df000015 	stw	fp,0(sp)
 801fa40:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 801fa44:	000170fa 	wrctl	ienable,zero
}
 801fa48:	e037883a 	mov	sp,fp
 801fa4c:	df000017 	ldw	fp,0(sp)
 801fa50:	dec00104 	addi	sp,sp,4
 801fa54:	f800283a 	ret

0801fa58 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 801fa58:	defffb04 	addi	sp,sp,-20
 801fa5c:	dfc00415 	stw	ra,16(sp)
 801fa60:	df000315 	stw	fp,12(sp)
 801fa64:	df000304 	addi	fp,sp,12
 801fa68:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 801fa6c:	008200f4 	movhi	r2,2051
 801fa70:	10b31c04 	addi	r2,r2,-13200
 801fa74:	10800017 	ldw	r2,0(r2)
 801fa78:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 801fa7c:	00003106 	br	801fb44 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 801fa80:	e0bffd17 	ldw	r2,-12(fp)
 801fa84:	10800217 	ldw	r2,8(r2)
 801fa88:	1009883a 	mov	r4,r2
 801fa8c:	800e3c40 	call	800e3c4 <strlen>
 801fa90:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 801fa94:	e0bffd17 	ldw	r2,-12(fp)
 801fa98:	10c00217 	ldw	r3,8(r2)
 801fa9c:	e0bffe17 	ldw	r2,-8(fp)
 801faa0:	10bfffc4 	addi	r2,r2,-1
 801faa4:	1885883a 	add	r2,r3,r2
 801faa8:	10800003 	ldbu	r2,0(r2)
 801faac:	10803fcc 	andi	r2,r2,255
 801fab0:	1080201c 	xori	r2,r2,128
 801fab4:	10bfe004 	addi	r2,r2,-128
 801fab8:	10800bd8 	cmpnei	r2,r2,47
 801fabc:	1000031e 	bne	r2,zero,801facc <alt_find_file+0x74>
    {
      len -= 1;
 801fac0:	e0bffe17 	ldw	r2,-8(fp)
 801fac4:	10bfffc4 	addi	r2,r2,-1
 801fac8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801facc:	e0bffe17 	ldw	r2,-8(fp)
 801fad0:	e0ffff17 	ldw	r3,-4(fp)
 801fad4:	1885883a 	add	r2,r3,r2
 801fad8:	10800003 	ldbu	r2,0(r2)
 801fadc:	10803fcc 	andi	r2,r2,255
 801fae0:	1080201c 	xori	r2,r2,128
 801fae4:	10bfe004 	addi	r2,r2,-128
 801fae8:	10800be0 	cmpeqi	r2,r2,47
 801faec:	1000081e 	bne	r2,zero,801fb10 <alt_find_file+0xb8>
 801faf0:	e0bffe17 	ldw	r2,-8(fp)
 801faf4:	e0ffff17 	ldw	r3,-4(fp)
 801faf8:	1885883a 	add	r2,r3,r2
 801fafc:	10800003 	ldbu	r2,0(r2)
 801fb00:	10803fcc 	andi	r2,r2,255
 801fb04:	1080201c 	xori	r2,r2,128
 801fb08:	10bfe004 	addi	r2,r2,-128
 801fb0c:	10000a1e 	bne	r2,zero,801fb38 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 801fb10:	e0bffd17 	ldw	r2,-12(fp)
 801fb14:	10c00217 	ldw	r3,8(r2)
 801fb18:	e0bffe17 	ldw	r2,-8(fp)
 801fb1c:	1809883a 	mov	r4,r3
 801fb20:	e17fff17 	ldw	r5,-4(fp)
 801fb24:	100d883a 	mov	r6,r2
 801fb28:	801fcf80 	call	801fcf8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801fb2c:	1000021e 	bne	r2,zero,801fb38 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 801fb30:	e0bffd17 	ldw	r2,-12(fp)
 801fb34:	00000806 	br	801fb58 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 801fb38:	e0bffd17 	ldw	r2,-12(fp)
 801fb3c:	10800017 	ldw	r2,0(r2)
 801fb40:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 801fb44:	e0fffd17 	ldw	r3,-12(fp)
 801fb48:	008200f4 	movhi	r2,2051
 801fb4c:	10b31c04 	addi	r2,r2,-13200
 801fb50:	18bfcb1e 	bne	r3,r2,801fa80 <__alt_data_end+0xfc01fa80>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 801fb54:	0005883a 	mov	r2,zero
}
 801fb58:	e037883a 	mov	sp,fp
 801fb5c:	dfc00117 	ldw	ra,4(sp)
 801fb60:	df000017 	ldw	fp,0(sp)
 801fb64:	dec00204 	addi	sp,sp,8
 801fb68:	f800283a 	ret

0801fb6c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 801fb6c:	defffc04 	addi	sp,sp,-16
 801fb70:	df000315 	stw	fp,12(sp)
 801fb74:	df000304 	addi	fp,sp,12
 801fb78:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 801fb7c:	00bffa04 	movi	r2,-24
 801fb80:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801fb84:	e03ffd15 	stw	zero,-12(fp)
 801fb88:	00001d06 	br	801fc00 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 801fb8c:	008200f4 	movhi	r2,2051
 801fb90:	10ae8d04 	addi	r2,r2,-17868
 801fb94:	e0fffd17 	ldw	r3,-12(fp)
 801fb98:	18c00324 	muli	r3,r3,12
 801fb9c:	10c5883a 	add	r2,r2,r3
 801fba0:	10800017 	ldw	r2,0(r2)
 801fba4:	1000131e 	bne	r2,zero,801fbf4 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 801fba8:	008200f4 	movhi	r2,2051
 801fbac:	10ae8d04 	addi	r2,r2,-17868
 801fbb0:	e0fffd17 	ldw	r3,-12(fp)
 801fbb4:	18c00324 	muli	r3,r3,12
 801fbb8:	10c5883a 	add	r2,r2,r3
 801fbbc:	e0ffff17 	ldw	r3,-4(fp)
 801fbc0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 801fbc4:	008200f4 	movhi	r2,2051
 801fbc8:	10b32004 	addi	r2,r2,-13184
 801fbcc:	10c00017 	ldw	r3,0(r2)
 801fbd0:	e0bffd17 	ldw	r2,-12(fp)
 801fbd4:	1880040e 	bge	r3,r2,801fbe8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 801fbd8:	008200f4 	movhi	r2,2051
 801fbdc:	10b32004 	addi	r2,r2,-13184
 801fbe0:	e0fffd17 	ldw	r3,-12(fp)
 801fbe4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 801fbe8:	e0bffd17 	ldw	r2,-12(fp)
 801fbec:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 801fbf0:	00000606 	br	801fc0c <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801fbf4:	e0bffd17 	ldw	r2,-12(fp)
 801fbf8:	10800044 	addi	r2,r2,1
 801fbfc:	e0bffd15 	stw	r2,-12(fp)
 801fc00:	e0bffd17 	ldw	r2,-12(fp)
 801fc04:	10800810 	cmplti	r2,r2,32
 801fc08:	103fe01e 	bne	r2,zero,801fb8c <__alt_data_end+0xfc01fb8c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 801fc0c:	e0bffe17 	ldw	r2,-8(fp)
}
 801fc10:	e037883a 	mov	sp,fp
 801fc14:	df000017 	ldw	fp,0(sp)
 801fc18:	dec00104 	addi	sp,sp,4
 801fc1c:	f800283a 	ret

0801fc20 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 801fc20:	defffb04 	addi	sp,sp,-20
 801fc24:	df000415 	stw	fp,16(sp)
 801fc28:	df000404 	addi	fp,sp,16
 801fc2c:	e13ffe15 	stw	r4,-8(fp)
 801fc30:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 801fc34:	e0bfff17 	ldw	r2,-4(fp)
 801fc38:	10840070 	cmpltui	r2,r2,4097
 801fc3c:	1000021e 	bne	r2,zero,801fc48 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 801fc40:	00840004 	movi	r2,4096
 801fc44:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 801fc48:	e0fffe17 	ldw	r3,-8(fp)
 801fc4c:	e0bfff17 	ldw	r2,-4(fp)
 801fc50:	1885883a 	add	r2,r3,r2
 801fc54:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 801fc58:	e0bffe17 	ldw	r2,-8(fp)
 801fc5c:	e0bffc15 	stw	r2,-16(fp)
 801fc60:	00000506 	br	801fc78 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 801fc64:	e0bffc17 	ldw	r2,-16(fp)
 801fc68:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 801fc6c:	e0bffc17 	ldw	r2,-16(fp)
 801fc70:	10800804 	addi	r2,r2,32
 801fc74:	e0bffc15 	stw	r2,-16(fp)
 801fc78:	e0fffc17 	ldw	r3,-16(fp)
 801fc7c:	e0bffd17 	ldw	r2,-12(fp)
 801fc80:	18bff836 	bltu	r3,r2,801fc64 <__alt_data_end+0xfc01fc64>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 801fc84:	e0bffe17 	ldw	r2,-8(fp)
 801fc88:	108007cc 	andi	r2,r2,31
 801fc8c:	10000226 	beq	r2,zero,801fc98 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 801fc90:	e0bffc17 	ldw	r2,-16(fp)
 801fc94:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 801fc98:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 801fc9c:	e037883a 	mov	sp,fp
 801fca0:	df000017 	ldw	fp,0(sp)
 801fca4:	dec00104 	addi	sp,sp,4
 801fca8:	f800283a 	ret

0801fcac <atexit>:
 801fcac:	200b883a 	mov	r5,r4
 801fcb0:	000d883a 	mov	r6,zero
 801fcb4:	0009883a 	mov	r4,zero
 801fcb8:	000f883a 	mov	r7,zero
 801fcbc:	801fd741 	jmpi	801fd74 <__register_exitproc>

0801fcc0 <exit>:
 801fcc0:	defffe04 	addi	sp,sp,-8
 801fcc4:	000b883a 	mov	r5,zero
 801fcc8:	dc000015 	stw	r16,0(sp)
 801fccc:	dfc00115 	stw	ra,4(sp)
 801fcd0:	2021883a 	mov	r16,r4
 801fcd4:	801fe880 	call	801fe88 <__call_exitprocs>
 801fcd8:	008200f4 	movhi	r2,2051
 801fcdc:	10b31504 	addi	r2,r2,-13228
 801fce0:	11000017 	ldw	r4,0(r2)
 801fce4:	20800f17 	ldw	r2,60(r4)
 801fce8:	10000126 	beq	r2,zero,801fcf0 <exit+0x30>
 801fcec:	103ee83a 	callr	r2
 801fcf0:	8009883a 	mov	r4,r16
 801fcf4:	802007c0 	call	802007c <_exit>

0801fcf8 <memcmp>:
 801fcf8:	01c000c4 	movi	r7,3
 801fcfc:	3980192e 	bgeu	r7,r6,801fd64 <memcmp+0x6c>
 801fd00:	2144b03a 	or	r2,r4,r5
 801fd04:	11c4703a 	and	r2,r2,r7
 801fd08:	10000f26 	beq	r2,zero,801fd48 <memcmp+0x50>
 801fd0c:	20800003 	ldbu	r2,0(r4)
 801fd10:	28c00003 	ldbu	r3,0(r5)
 801fd14:	10c0151e 	bne	r2,r3,801fd6c <memcmp+0x74>
 801fd18:	31bfff84 	addi	r6,r6,-2
 801fd1c:	01ffffc4 	movi	r7,-1
 801fd20:	00000406 	br	801fd34 <memcmp+0x3c>
 801fd24:	20800003 	ldbu	r2,0(r4)
 801fd28:	28c00003 	ldbu	r3,0(r5)
 801fd2c:	31bfffc4 	addi	r6,r6,-1
 801fd30:	10c00e1e 	bne	r2,r3,801fd6c <memcmp+0x74>
 801fd34:	21000044 	addi	r4,r4,1
 801fd38:	29400044 	addi	r5,r5,1
 801fd3c:	31fff91e 	bne	r6,r7,801fd24 <__alt_data_end+0xfc01fd24>
 801fd40:	0005883a 	mov	r2,zero
 801fd44:	f800283a 	ret
 801fd48:	20c00017 	ldw	r3,0(r4)
 801fd4c:	28800017 	ldw	r2,0(r5)
 801fd50:	1880041e 	bne	r3,r2,801fd64 <memcmp+0x6c>
 801fd54:	31bfff04 	addi	r6,r6,-4
 801fd58:	21000104 	addi	r4,r4,4
 801fd5c:	29400104 	addi	r5,r5,4
 801fd60:	39bff936 	bltu	r7,r6,801fd48 <__alt_data_end+0xfc01fd48>
 801fd64:	303fe91e 	bne	r6,zero,801fd0c <__alt_data_end+0xfc01fd0c>
 801fd68:	003ff506 	br	801fd40 <__alt_data_end+0xfc01fd40>
 801fd6c:	10c5c83a 	sub	r2,r2,r3
 801fd70:	f800283a 	ret

0801fd74 <__register_exitproc>:
 801fd74:	008200f4 	movhi	r2,2051
 801fd78:	defffa04 	addi	sp,sp,-24
 801fd7c:	10b31504 	addi	r2,r2,-13228
 801fd80:	dc000315 	stw	r16,12(sp)
 801fd84:	14000017 	ldw	r16,0(r2)
 801fd88:	dc400415 	stw	r17,16(sp)
 801fd8c:	dfc00515 	stw	ra,20(sp)
 801fd90:	80805217 	ldw	r2,328(r16)
 801fd94:	2023883a 	mov	r17,r4
 801fd98:	10003626 	beq	r2,zero,801fe74 <__register_exitproc+0x100>
 801fd9c:	10c00117 	ldw	r3,4(r2)
 801fda0:	010007c4 	movi	r4,31
 801fda4:	20c00e16 	blt	r4,r3,801fde0 <__register_exitproc+0x6c>
 801fda8:	1a400044 	addi	r9,r3,1
 801fdac:	8800211e 	bne	r17,zero,801fe34 <__register_exitproc+0xc0>
 801fdb0:	18c00084 	addi	r3,r3,2
 801fdb4:	18c7883a 	add	r3,r3,r3
 801fdb8:	18c7883a 	add	r3,r3,r3
 801fdbc:	12400115 	stw	r9,4(r2)
 801fdc0:	10c7883a 	add	r3,r2,r3
 801fdc4:	19400015 	stw	r5,0(r3)
 801fdc8:	0005883a 	mov	r2,zero
 801fdcc:	dfc00517 	ldw	ra,20(sp)
 801fdd0:	dc400417 	ldw	r17,16(sp)
 801fdd4:	dc000317 	ldw	r16,12(sp)
 801fdd8:	dec00604 	addi	sp,sp,24
 801fddc:	f800283a 	ret
 801fde0:	00820074 	movhi	r2,2049
 801fde4:	10b5b704 	addi	r2,r2,-10532
 801fde8:	10002526 	beq	r2,zero,801fe80 <__register_exitproc+0x10c>
 801fdec:	01006404 	movi	r4,400
 801fdf0:	d9400015 	stw	r5,0(sp)
 801fdf4:	d9800115 	stw	r6,4(sp)
 801fdf8:	d9c00215 	stw	r7,8(sp)
 801fdfc:	800d6dc0 	call	800d6dc <malloc>
 801fe00:	d9400017 	ldw	r5,0(sp)
 801fe04:	d9800117 	ldw	r6,4(sp)
 801fe08:	d9c00217 	ldw	r7,8(sp)
 801fe0c:	10001c26 	beq	r2,zero,801fe80 <__register_exitproc+0x10c>
 801fe10:	80c05217 	ldw	r3,328(r16)
 801fe14:	10000115 	stw	zero,4(r2)
 801fe18:	02400044 	movi	r9,1
 801fe1c:	10c00015 	stw	r3,0(r2)
 801fe20:	80805215 	stw	r2,328(r16)
 801fe24:	10006215 	stw	zero,392(r2)
 801fe28:	10006315 	stw	zero,396(r2)
 801fe2c:	0007883a 	mov	r3,zero
 801fe30:	883fdf26 	beq	r17,zero,801fdb0 <__alt_data_end+0xfc01fdb0>
 801fe34:	18d1883a 	add	r8,r3,r3
 801fe38:	4211883a 	add	r8,r8,r8
 801fe3c:	1211883a 	add	r8,r2,r8
 801fe40:	41802215 	stw	r6,136(r8)
 801fe44:	01000044 	movi	r4,1
 801fe48:	11806217 	ldw	r6,392(r2)
 801fe4c:	20c8983a 	sll	r4,r4,r3
 801fe50:	310cb03a 	or	r6,r6,r4
 801fe54:	11806215 	stw	r6,392(r2)
 801fe58:	41c04215 	stw	r7,264(r8)
 801fe5c:	01800084 	movi	r6,2
 801fe60:	89bfd31e 	bne	r17,r6,801fdb0 <__alt_data_end+0xfc01fdb0>
 801fe64:	11806317 	ldw	r6,396(r2)
 801fe68:	3108b03a 	or	r4,r6,r4
 801fe6c:	11006315 	stw	r4,396(r2)
 801fe70:	003fcf06 	br	801fdb0 <__alt_data_end+0xfc01fdb0>
 801fe74:	80805304 	addi	r2,r16,332
 801fe78:	80805215 	stw	r2,328(r16)
 801fe7c:	003fc706 	br	801fd9c <__alt_data_end+0xfc01fd9c>
 801fe80:	00bfffc4 	movi	r2,-1
 801fe84:	003fd106 	br	801fdcc <__alt_data_end+0xfc01fdcc>

0801fe88 <__call_exitprocs>:
 801fe88:	008200f4 	movhi	r2,2051
 801fe8c:	10b31504 	addi	r2,r2,-13228
 801fe90:	10800017 	ldw	r2,0(r2)
 801fe94:	defff404 	addi	sp,sp,-48
 801fe98:	dd800815 	stw	r22,32(sp)
 801fe9c:	d8800015 	stw	r2,0(sp)
 801fea0:	10805204 	addi	r2,r2,328
 801fea4:	dd000615 	stw	r20,24(sp)
 801fea8:	dc800415 	stw	r18,16(sp)
 801feac:	dfc00b15 	stw	ra,44(sp)
 801feb0:	df000a15 	stw	fp,40(sp)
 801feb4:	ddc00915 	stw	r23,36(sp)
 801feb8:	dd400715 	stw	r21,28(sp)
 801febc:	dcc00515 	stw	r19,20(sp)
 801fec0:	dc400315 	stw	r17,12(sp)
 801fec4:	dc000215 	stw	r16,8(sp)
 801fec8:	2025883a 	mov	r18,r4
 801fecc:	2829883a 	mov	r20,r5
 801fed0:	d8800115 	stw	r2,4(sp)
 801fed4:	05bfffc4 	movi	r22,-1
 801fed8:	d8800017 	ldw	r2,0(sp)
 801fedc:	14c05217 	ldw	r19,328(r2)
 801fee0:	98001d26 	beq	r19,zero,801ff58 <__call_exitprocs+0xd0>
 801fee4:	dd400117 	ldw	r21,4(sp)
 801fee8:	98800117 	ldw	r2,4(r19)
 801feec:	173fffc4 	addi	fp,r2,-1
 801fef0:	e0000d16 	blt	fp,zero,801ff28 <__call_exitprocs+0xa0>
 801fef4:	14000044 	addi	r16,r2,1
 801fef8:	8421883a 	add	r16,r16,r16
 801fefc:	8421883a 	add	r16,r16,r16
 801ff00:	84402004 	addi	r17,r16,128
 801ff04:	9c63883a 	add	r17,r19,r17
 801ff08:	9c21883a 	add	r16,r19,r16
 801ff0c:	a0001e26 	beq	r20,zero,801ff88 <__call_exitprocs+0x100>
 801ff10:	80804017 	ldw	r2,256(r16)
 801ff14:	15001c26 	beq	r2,r20,801ff88 <__call_exitprocs+0x100>
 801ff18:	e73fffc4 	addi	fp,fp,-1
 801ff1c:	843fff04 	addi	r16,r16,-4
 801ff20:	8c7fff04 	addi	r17,r17,-4
 801ff24:	e5bff91e 	bne	fp,r22,801ff0c <__alt_data_end+0xfc01ff0c>
 801ff28:	00820074 	movhi	r2,2049
 801ff2c:	10b5bc04 	addi	r2,r2,-10512
 801ff30:	10000926 	beq	r2,zero,801ff58 <__call_exitprocs+0xd0>
 801ff34:	98800117 	ldw	r2,4(r19)
 801ff38:	1000311e 	bne	r2,zero,8020000 <__call_exitprocs+0x178>
 801ff3c:	98800017 	ldw	r2,0(r19)
 801ff40:	10003426 	beq	r2,zero,8020014 <__call_exitprocs+0x18c>
 801ff44:	9809883a 	mov	r4,r19
 801ff48:	a8800015 	stw	r2,0(r21)
 801ff4c:	800d6f00 	call	800d6f0 <free>
 801ff50:	acc00017 	ldw	r19,0(r21)
 801ff54:	983fe41e 	bne	r19,zero,801fee8 <__alt_data_end+0xfc01fee8>
 801ff58:	dfc00b17 	ldw	ra,44(sp)
 801ff5c:	df000a17 	ldw	fp,40(sp)
 801ff60:	ddc00917 	ldw	r23,36(sp)
 801ff64:	dd800817 	ldw	r22,32(sp)
 801ff68:	dd400717 	ldw	r21,28(sp)
 801ff6c:	dd000617 	ldw	r20,24(sp)
 801ff70:	dcc00517 	ldw	r19,20(sp)
 801ff74:	dc800417 	ldw	r18,16(sp)
 801ff78:	dc400317 	ldw	r17,12(sp)
 801ff7c:	dc000217 	ldw	r16,8(sp)
 801ff80:	dec00c04 	addi	sp,sp,48
 801ff84:	f800283a 	ret
 801ff88:	98800117 	ldw	r2,4(r19)
 801ff8c:	80c00017 	ldw	r3,0(r16)
 801ff90:	10bfffc4 	addi	r2,r2,-1
 801ff94:	17001526 	beq	r2,fp,801ffec <__call_exitprocs+0x164>
 801ff98:	80000015 	stw	zero,0(r16)
 801ff9c:	183fde26 	beq	r3,zero,801ff18 <__alt_data_end+0xfc01ff18>
 801ffa0:	00800044 	movi	r2,1
 801ffa4:	1708983a 	sll	r4,r2,fp
 801ffa8:	98806217 	ldw	r2,392(r19)
 801ffac:	9dc00117 	ldw	r23,4(r19)
 801ffb0:	2084703a 	and	r2,r4,r2
 801ffb4:	1000061e 	bne	r2,zero,801ffd0 <__call_exitprocs+0x148>
 801ffb8:	183ee83a 	callr	r3
 801ffbc:	98800117 	ldw	r2,4(r19)
 801ffc0:	15ffc51e 	bne	r2,r23,801fed8 <__alt_data_end+0xfc01fed8>
 801ffc4:	a8800017 	ldw	r2,0(r21)
 801ffc8:	14ffd326 	beq	r2,r19,801ff18 <__alt_data_end+0xfc01ff18>
 801ffcc:	003fc206 	br	801fed8 <__alt_data_end+0xfc01fed8>
 801ffd0:	98806317 	ldw	r2,396(r19)
 801ffd4:	2084703a 	and	r2,r4,r2
 801ffd8:	1000061e 	bne	r2,zero,801fff4 <__call_exitprocs+0x16c>
 801ffdc:	89400017 	ldw	r5,0(r17)
 801ffe0:	9009883a 	mov	r4,r18
 801ffe4:	183ee83a 	callr	r3
 801ffe8:	003ff406 	br	801ffbc <__alt_data_end+0xfc01ffbc>
 801ffec:	9f000115 	stw	fp,4(r19)
 801fff0:	003fea06 	br	801ff9c <__alt_data_end+0xfc01ff9c>
 801fff4:	89000017 	ldw	r4,0(r17)
 801fff8:	183ee83a 	callr	r3
 801fffc:	003fef06 	br	801ffbc <__alt_data_end+0xfc01ffbc>
 8020000:	98800017 	ldw	r2,0(r19)
 8020004:	982b883a 	mov	r21,r19
 8020008:	1027883a 	mov	r19,r2
 802000c:	983fb61e 	bne	r19,zero,801fee8 <__alt_data_end+0xfc01fee8>
 8020010:	003fd106 	br	801ff58 <__alt_data_end+0xfc01ff58>
 8020014:	0005883a 	mov	r2,zero
 8020018:	003ffa06 	br	8020004 <__alt_data_end+0xfc020004>

0802001c <__muldi3>:
 802001c:	223fffcc 	andi	r8,r4,65535
 8020020:	2012d43a 	srli	r9,r4,16
 8020024:	32bfffcc 	andi	r10,r6,65535
 8020028:	3006d43a 	srli	r3,r6,16
 802002c:	5217383a 	mul	r11,r10,r8
 8020030:	5255383a 	mul	r10,r10,r9
 8020034:	1a05383a 	mul	r2,r3,r8
 8020038:	5810d43a 	srli	r8,r11,16
 802003c:	5085883a 	add	r2,r10,r2
 8020040:	1205883a 	add	r2,r2,r8
 8020044:	1a51383a 	mul	r8,r3,r9
 8020048:	1280022e 	bgeu	r2,r10,8020054 <__muldi3+0x38>
 802004c:	00c00074 	movhi	r3,1
 8020050:	40d1883a 	add	r8,r8,r3
 8020054:	1006d43a 	srli	r3,r2,16
 8020058:	21cf383a 	mul	r7,r4,r7
 802005c:	314b383a 	mul	r5,r6,r5
 8020060:	1004943a 	slli	r2,r2,16
 8020064:	40c7883a 	add	r3,r8,r3
 8020068:	5affffcc 	andi	r11,r11,65535
 802006c:	3949883a 	add	r4,r7,r5
 8020070:	12c5883a 	add	r2,r2,r11
 8020074:	20c7883a 	add	r3,r4,r3
 8020078:	f800283a 	ret

0802007c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 802007c:	defffd04 	addi	sp,sp,-12
 8020080:	df000215 	stw	fp,8(sp)
 8020084:	df000204 	addi	fp,sp,8
 8020088:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 802008c:	0001883a 	nop
 8020090:	e0bfff17 	ldw	r2,-4(fp)
 8020094:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8020098:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 802009c:	10000226 	beq	r2,zero,80200a8 <_exit+0x2c>
    ALT_SIM_FAIL();
 80200a0:	002af070 	cmpltui	zero,zero,43969
 80200a4:	00000106 	br	80200ac <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80200a8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80200ac:	003fff06 	br	80200ac <__alt_data_end+0xfc0200ac>
